// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/failure.proto

#include "common/failure.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace common {
namespace failure {
class FailureResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FailureResponse> _instance;
} _FailureResponse_default_instance_;
}  // namespace failure
}  // namespace common
static void InitDefaultsscc_info_FailureResponse_common_2ffailure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::failure::_FailureResponse_default_instance_;
    new (ptr) ::common::failure::FailureResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::failure::FailureResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FailureResponse_common_2ffailure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FailureResponse_common_2ffailure_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2ffailure_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2ffailure_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2ffailure_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2ffailure_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::common::failure::FailureResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::common::failure::FailureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::failure::FailureResponse, error_),
  PROTOBUF_FIELD_OFFSET(::common::failure::FailureResponse, error_string_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::common::failure::FailureResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::failure::_FailureResponse_default_instance_),
};

const char descriptor_table_protodef_common_2ffailure_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024common/failure.proto\022\016common.failure\"M"
  "\n\017FailureResponse\022$\n\005error\030\001 \002(\0162\025.commo"
  "n.failure.Error\022\024\n\014error_string\030\002 \001(\t*\343\006"
  "\n\005Error\022\020\n\014GENERAL_FAIL\020\001\022\r\n\tNFC_ERROR\020\002"
  "\022\025\n\021CHECKSUM_MISMATCH\020\003\022\031\n\025PAYLOAD_PARSI"
  "NG_ERROR\020\004\022\025\n\021TRUNCATED_MESSAGE\020\005\022\023\n\017MES"
  "SAGE_TOO_BIG\020\006\022\025\n\021UNEXPECTED_HEADER\020\007\022\026\n"
  "\022UNEXPECTED_COMMAND\020\010\022\037\n\033CLESS_CARDS_COL"
  "LISION_ERROR\020\t\022\023\n\017TIMEOUT_EXPIRED\020\n\022\026\n\022P"
  "ROCESSING_STOPPED\020\013\022\027\n\023CONFIGURATION_ERR"
  "OR\020\014\022\020\n\014CARD_TIMEOUT\020\r\022\027\n\023UNSUPPORTED_CO"
  "MMAND\020\016\022\025\n\021INVALID_PARAMETER\020\017\022\032\n\026NFC_TR"
  "ANSMISSION_ERROR\020\020\022\'\n#MIFARE_CARD_NOT_AC"
  "KNOWLEDGE_COMMAND\020\021\022\033\n\027CANCELLED_BY_CARD"
  "HOLDER\020\022\022!\n\035SECURITY_FUNCTIONS_RESTRICTE"
  "D\020\023\022\034\n\030MFP_AUTHENTICATION_ERROR\020\024\022\026\n\022ICC"
  "_IS_NOT_PRESENT\020\025\022\024\n\020ICC_IS_NOT_READY\020\026\022"
  "\017\n\013ICC_TIMEOUT\020\027\022\032\n\026ABSENT_HARDWARE_MODU"
  "LE\020\030\022$\n SAM_AV2_CONDITIONS_NOT_SATISFIED"
  "\020\031\022 \n\034SAM_AV2_AUTHENTICATION_ERROR\020\032\022\034\n\030"
  "MFC_AUTHENTICATION_ERROR\020\033\022\026\n\022RETRY_LIMI"
  "T_IS_OUT\020\034\022\025\n\021RETRY_TIME_IS_OUT\020\035\022\031\n\025INT"
  "ELLIREADER_IS_BUSY\020\036\022 \n\034AT_LEAST_ONE_ACT"
  "ION_REQUIRED\020\037\022\027\n\023UNSUPPORTED_FEATURE\020 \022"
  "\032\n\026ABSENT_QRCODE_HARDWARE\020!"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2ffailure_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2ffailure_2eproto_sccs[1] = {
  &scc_info_FailureResponse_common_2ffailure_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2ffailure_2eproto_once;
static bool descriptor_table_common_2ffailure_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2ffailure_2eproto = {
  &descriptor_table_common_2ffailure_2eproto_initialized, descriptor_table_protodef_common_2ffailure_2eproto, "common/failure.proto", 987,
  &descriptor_table_common_2ffailure_2eproto_once, descriptor_table_common_2ffailure_2eproto_sccs, descriptor_table_common_2ffailure_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_common_2ffailure_2eproto::offsets,
  file_level_metadata_common_2ffailure_2eproto, 1, file_level_enum_descriptors_common_2ffailure_2eproto, file_level_service_descriptors_common_2ffailure_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2ffailure_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2ffailure_2eproto), true);
namespace common {
namespace failure {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2ffailure_2eproto);
  return file_level_enum_descriptors_common_2ffailure_2eproto[0];
}
bool Error_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FailureResponse::InitAsDefaultInstance() {
}
class FailureResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FailureResponse>()._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FailureResponse::FailureResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:common.failure.FailureResponse)
}
FailureResponse::FailureResponse(const FailureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_string()) {
    error_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_string_);
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:common.failure.FailureResponse)
}

void FailureResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FailureResponse_common_2ffailure_2eproto.base);
  error_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_ = 1;
}

FailureResponse::~FailureResponse() {
  // @@protoc_insertion_point(destructor:common.failure.FailureResponse)
  SharedDtor();
}

void FailureResponse::SharedDtor() {
  error_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FailureResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FailureResponse& FailureResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FailureResponse_common_2ffailure_2eproto.base);
  return *internal_default_instance();
}


void FailureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:common.failure.FailureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_string_.ClearNonDefaultToEmptyNoArena();
    }
    error_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FailureResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.failure.Error error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::failure::Error_IsValid(val))) {
            _internal_set_error(static_cast<::common::failure::Error>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string error_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.failure.FailureResponse.error_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FailureResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.failure.FailureResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.failure.Error error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // optional string error_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_string().data(), static_cast<int>(this->_internal_error_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "common.failure.FailureResponse.error_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.failure.FailureResponse)
  return target;
}

size_t FailureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.failure.FailureResponse)
  size_t total_size = 0;

  // required .common.failure.Error error = 1;
  if (_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error_string = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_string());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FailureResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.failure.FailureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FailureResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FailureResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.failure.FailureResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.failure.FailureResponse)
    MergeFrom(*source);
  }
}

void FailureResponse::MergeFrom(const FailureResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.failure.FailureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      error_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FailureResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.failure.FailureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FailureResponse::CopyFrom(const FailureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.failure.FailureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FailureResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void FailureResponse::InternalSwap(FailureResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_string_.Swap(&other->error_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FailureResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace failure
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::failure::FailureResponse* Arena::CreateMaybeMessage< ::common::failure::FailureResponse >(Arena* arena) {
  return Arena::CreateInternal< ::common::failure::FailureResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
