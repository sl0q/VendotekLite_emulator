// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/failure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2ffailure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2ffailure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2ffailure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2ffailure_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2ffailure_2eproto;
namespace common {
namespace failure {
class FailureResponse;
class FailureResponseDefaultTypeInternal;
extern FailureResponseDefaultTypeInternal _FailureResponse_default_instance_;
}  // namespace failure
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::failure::FailureResponse* Arena::CreateMaybeMessage<::common::failure::FailureResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {
namespace failure {

enum Error : int {
  GENERAL_FAIL = 1,
  NFC_ERROR = 2,
  CHECKSUM_MISMATCH = 3,
  PAYLOAD_PARSING_ERROR = 4,
  TRUNCATED_MESSAGE = 5,
  MESSAGE_TOO_BIG = 6,
  UNEXPECTED_HEADER = 7,
  UNEXPECTED_COMMAND = 8,
  CLESS_CARDS_COLLISION_ERROR = 9,
  TIMEOUT_EXPIRED = 10,
  PROCESSING_STOPPED = 11,
  CONFIGURATION_ERROR = 12,
  CARD_TIMEOUT = 13,
  UNSUPPORTED_COMMAND = 14,
  INVALID_PARAMETER = 15,
  NFC_TRANSMISSION_ERROR = 16,
  MIFARE_CARD_NOT_ACKNOWLEDGE_COMMAND = 17,
  CANCELLED_BY_CARDHOLDER = 18,
  SECURITY_FUNCTIONS_RESTRICTED = 19,
  MFP_AUTHENTICATION_ERROR = 20,
  ICC_IS_NOT_PRESENT = 21,
  ICC_IS_NOT_READY = 22,
  ICC_TIMEOUT = 23,
  ABSENT_HARDWARE_MODULE = 24,
  SAM_AV2_CONDITIONS_NOT_SATISFIED = 25,
  SAM_AV2_AUTHENTICATION_ERROR = 26,
  MFC_AUTHENTICATION_ERROR = 27,
  RETRY_LIMIT_IS_OUT = 28,
  RETRY_TIME_IS_OUT = 29,
  INTELLIREADER_IS_BUSY = 30,
  AT_LEAST_ONE_ACTION_REQUIRED = 31,
  UNSUPPORTED_FEATURE = 32,
  ABSENT_QRCODE_HARDWARE = 33
};
bool Error_IsValid(int value);
constexpr Error Error_MIN = GENERAL_FAIL;
constexpr Error Error_MAX = ABSENT_QRCODE_HARDWARE;
constexpr int Error_ARRAYSIZE = Error_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_descriptor();
template<typename T>
inline const std::string& Error_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Error>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Error_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Error_descriptor(), enum_t_value);
}
inline bool Error_Parse(
    const std::string& name, Error* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Error>(
    Error_descriptor(), name, value);
}
// ===================================================================

class FailureResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.failure.FailureResponse) */ {
 public:
  FailureResponse();
  virtual ~FailureResponse();

  FailureResponse(const FailureResponse& from);
  FailureResponse(FailureResponse&& from) noexcept
    : FailureResponse() {
    *this = ::std::move(from);
  }

  inline FailureResponse& operator=(const FailureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FailureResponse& operator=(FailureResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FailureResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FailureResponse* internal_default_instance() {
    return reinterpret_cast<const FailureResponse*>(
               &_FailureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FailureResponse& a, FailureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FailureResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FailureResponse* New() const final {
    return CreateMaybeMessage<FailureResponse>(nullptr);
  }

  FailureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FailureResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FailureResponse& from);
  void MergeFrom(const FailureResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FailureResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.failure.FailureResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2ffailure_2eproto);
    return ::descriptor_table_common_2ffailure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorStringFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // optional string error_string = 2;
  bool has_error_string() const;
  private:
  bool _internal_has_error_string() const;
  public:
  void clear_error_string();
  const std::string& error_string() const;
  void set_error_string(const std::string& value);
  void set_error_string(std::string&& value);
  void set_error_string(const char* value);
  void set_error_string(const char* value, size_t size);
  std::string* mutable_error_string();
  std::string* release_error_string();
  void set_allocated_error_string(std::string* error_string);
  private:
  const std::string& _internal_error_string() const;
  void _internal_set_error_string(const std::string& value);
  std::string* _internal_mutable_error_string();
  public:

  // required .common.failure.Error error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::common::failure::Error error() const;
  void set_error(::common::failure::Error value);
  private:
  ::common::failure::Error _internal_error() const;
  void _internal_set_error(::common::failure::Error value);
  public:

  // @@protoc_insertion_point(class_scope:common.failure.FailureResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_string_;
  int error_;
  friend struct ::TableStruct_common_2ffailure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FailureResponse

// required .common.failure.Error error = 1;
inline bool FailureResponse::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FailureResponse::has_error() const {
  return _internal_has_error();
}
inline void FailureResponse::clear_error() {
  error_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::common::failure::Error FailureResponse::_internal_error() const {
  return static_cast< ::common::failure::Error >(error_);
}
inline ::common::failure::Error FailureResponse::error() const {
  // @@protoc_insertion_point(field_get:common.failure.FailureResponse.error)
  return _internal_error();
}
inline void FailureResponse::_internal_set_error(::common::failure::Error value) {
  assert(::common::failure::Error_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  error_ = value;
}
inline void FailureResponse::set_error(::common::failure::Error value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:common.failure.FailureResponse.error)
}

// optional string error_string = 2;
inline bool FailureResponse::_internal_has_error_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FailureResponse::has_error_string() const {
  return _internal_has_error_string();
}
inline void FailureResponse::clear_error_string() {
  error_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FailureResponse::error_string() const {
  // @@protoc_insertion_point(field_get:common.failure.FailureResponse.error_string)
  return _internal_error_string();
}
inline void FailureResponse::set_error_string(const std::string& value) {
  _internal_set_error_string(value);
  // @@protoc_insertion_point(field_set:common.failure.FailureResponse.error_string)
}
inline std::string* FailureResponse::mutable_error_string() {
  // @@protoc_insertion_point(field_mutable:common.failure.FailureResponse.error_string)
  return _internal_mutable_error_string();
}
inline const std::string& FailureResponse::_internal_error_string() const {
  return error_string_.GetNoArena();
}
inline void FailureResponse::_internal_set_error_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FailureResponse::set_error_string(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  error_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.failure.FailureResponse.error_string)
}
inline void FailureResponse::set_error_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  error_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.failure.FailureResponse.error_string)
}
inline void FailureResponse::set_error_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  error_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.failure.FailureResponse.error_string)
}
inline std::string* FailureResponse::_internal_mutable_error_string() {
  _has_bits_[0] |= 0x00000001u;
  return error_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FailureResponse::release_error_string() {
  // @@protoc_insertion_point(field_release:common.failure.FailureResponse.error_string)
  if (!_internal_has_error_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FailureResponse::set_allocated_error_string(std::string* error_string) {
  if (error_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_string);
  // @@protoc_insertion_point(field_set_allocated:common.failure.FailureResponse.error_string)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace failure
}  // namespace common

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::common::failure::Error> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::failure::Error>() {
  return ::common::failure::Error_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2ffailure_2eproto
