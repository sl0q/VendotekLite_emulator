// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: turnstile/passage.proto

#include "turnstile/passage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_turnstile_2fpassage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HoldLevel_turnstile_2fpassage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_turnstile_2fpassage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OneImpulse_turnstile_2fpassage_2eproto;
namespace turnstile {
namespace passage {
class AllowOnePassDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllowOnePass> _instance;
  const ::turnstile::passage::HoldLevel* hold_level_;
  const ::turnstile::passage::OneImpulse* one_impulse_;
} _AllowOnePass_default_instance_;
class HoldLevelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HoldLevel> _instance;
} _HoldLevel_default_instance_;
class OneImpulseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OneImpulse> _instance;
} _OneImpulse_default_instance_;
}  // namespace passage
}  // namespace turnstile
static void InitDefaultsscc_info_AllowOnePass_turnstile_2fpassage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::turnstile::passage::_AllowOnePass_default_instance_;
    new (ptr) ::turnstile::passage::AllowOnePass();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::turnstile::passage::AllowOnePass::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AllowOnePass_turnstile_2fpassage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AllowOnePass_turnstile_2fpassage_2eproto}, {
      &scc_info_HoldLevel_turnstile_2fpassage_2eproto.base,
      &scc_info_OneImpulse_turnstile_2fpassage_2eproto.base,}};

static void InitDefaultsscc_info_HoldLevel_turnstile_2fpassage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::turnstile::passage::_HoldLevel_default_instance_;
    new (ptr) ::turnstile::passage::HoldLevel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::turnstile::passage::HoldLevel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HoldLevel_turnstile_2fpassage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HoldLevel_turnstile_2fpassage_2eproto}, {}};

static void InitDefaultsscc_info_OneImpulse_turnstile_2fpassage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::turnstile::passage::_OneImpulse_default_instance_;
    new (ptr) ::turnstile::passage::OneImpulse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::turnstile::passage::OneImpulse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OneImpulse_turnstile_2fpassage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OneImpulse_turnstile_2fpassage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_turnstile_2fpassage_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_turnstile_2fpassage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_turnstile_2fpassage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_turnstile_2fpassage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::turnstile::passage::AllowOnePass, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::turnstile::passage::AllowOnePass, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::turnstile::passage::AllowOnePass, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::turnstile::passage::AllowOnePass, timeout_ms_),
  offsetof(::turnstile::passage::AllowOnePassDefaultTypeInternal, hold_level_),
  offsetof(::turnstile::passage::AllowOnePassDefaultTypeInternal, one_impulse_),
  PROTOBUF_FIELD_OFFSET(::turnstile::passage::AllowOnePass, open_signal_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::turnstile::passage::HoldLevel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::turnstile::passage::HoldLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::turnstile::passage::OneImpulse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::turnstile::passage::OneImpulse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::turnstile::passage::OneImpulse, duration_ms_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::turnstile::passage::AllowOnePass)},
  { 12, 17, sizeof(::turnstile::passage::HoldLevel)},
  { 17, 23, sizeof(::turnstile::passage::OneImpulse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::turnstile::passage::_AllowOnePass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::turnstile::passage::_HoldLevel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::turnstile::passage::_OneImpulse_default_instance_),
};

const char descriptor_table_protodef_turnstile_2fpassage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027turnstile/passage.proto\022\021turnstile.pas"
  "sage\"\233\001\n\014AllowOnePass\022\022\n\ntimeout_ms\030\001 \002("
  "\r\0222\n\nhold_level\030\002 \001(\0132\034.turnstile.passag"
  "e.HoldLevelH\000\0224\n\013one_impulse\030\003 \001(\0132\035.tur"
  "nstile.passage.OneImpulseH\000B\r\n\013open_sign"
  "al\"\013\n\tHoldLevel\"!\n\nOneImpulse\022\023\n\013duratio"
  "n_ms\030\001 \002(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_turnstile_2fpassage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_turnstile_2fpassage_2eproto_sccs[3] = {
  &scc_info_AllowOnePass_turnstile_2fpassage_2eproto.base,
  &scc_info_HoldLevel_turnstile_2fpassage_2eproto.base,
  &scc_info_OneImpulse_turnstile_2fpassage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_turnstile_2fpassage_2eproto_once;
static bool descriptor_table_turnstile_2fpassage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_turnstile_2fpassage_2eproto = {
  &descriptor_table_turnstile_2fpassage_2eproto_initialized, descriptor_table_protodef_turnstile_2fpassage_2eproto, "turnstile/passage.proto", 250,
  &descriptor_table_turnstile_2fpassage_2eproto_once, descriptor_table_turnstile_2fpassage_2eproto_sccs, descriptor_table_turnstile_2fpassage_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_turnstile_2fpassage_2eproto::offsets,
  file_level_metadata_turnstile_2fpassage_2eproto, 3, file_level_enum_descriptors_turnstile_2fpassage_2eproto, file_level_service_descriptors_turnstile_2fpassage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_turnstile_2fpassage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_turnstile_2fpassage_2eproto), true);
namespace turnstile {
namespace passage {

// ===================================================================

void AllowOnePass::InitAsDefaultInstance() {
  ::turnstile::passage::_AllowOnePass_default_instance_.hold_level_ = const_cast< ::turnstile::passage::HoldLevel*>(
      ::turnstile::passage::HoldLevel::internal_default_instance());
  ::turnstile::passage::_AllowOnePass_default_instance_.one_impulse_ = const_cast< ::turnstile::passage::OneImpulse*>(
      ::turnstile::passage::OneImpulse::internal_default_instance());
}
class AllowOnePass::_Internal {
 public:
  using HasBits = decltype(std::declval<AllowOnePass>()._has_bits_);
  static void set_has_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::turnstile::passage::HoldLevel& hold_level(const AllowOnePass* msg);
  static const ::turnstile::passage::OneImpulse& one_impulse(const AllowOnePass* msg);
};

const ::turnstile::passage::HoldLevel&
AllowOnePass::_Internal::hold_level(const AllowOnePass* msg) {
  return *msg->open_signal_.hold_level_;
}
const ::turnstile::passage::OneImpulse&
AllowOnePass::_Internal::one_impulse(const AllowOnePass* msg) {
  return *msg->open_signal_.one_impulse_;
}
void AllowOnePass::set_allocated_hold_level(::turnstile::passage::HoldLevel* hold_level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_open_signal();
  if (hold_level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hold_level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hold_level, submessage_arena);
    }
    set_has_hold_level();
    open_signal_.hold_level_ = hold_level;
  }
  // @@protoc_insertion_point(field_set_allocated:turnstile.passage.AllowOnePass.hold_level)
}
void AllowOnePass::set_allocated_one_impulse(::turnstile::passage::OneImpulse* one_impulse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_open_signal();
  if (one_impulse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      one_impulse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, one_impulse, submessage_arena);
    }
    set_has_one_impulse();
    open_signal_.one_impulse_ = one_impulse;
  }
  // @@protoc_insertion_point(field_set_allocated:turnstile.passage.AllowOnePass.one_impulse)
}
AllowOnePass::AllowOnePass()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:turnstile.passage.AllowOnePass)
}
AllowOnePass::AllowOnePass(const AllowOnePass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timeout_ms_ = from.timeout_ms_;
  clear_has_open_signal();
  switch (from.open_signal_case()) {
    case kHoldLevel: {
      _internal_mutable_hold_level()->::turnstile::passage::HoldLevel::MergeFrom(from._internal_hold_level());
      break;
    }
    case kOneImpulse: {
      _internal_mutable_one_impulse()->::turnstile::passage::OneImpulse::MergeFrom(from._internal_one_impulse());
      break;
    }
    case OPEN_SIGNAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:turnstile.passage.AllowOnePass)
}

void AllowOnePass::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllowOnePass_turnstile_2fpassage_2eproto.base);
  timeout_ms_ = 0u;
  clear_has_open_signal();
}

AllowOnePass::~AllowOnePass() {
  // @@protoc_insertion_point(destructor:turnstile.passage.AllowOnePass)
  SharedDtor();
}

void AllowOnePass::SharedDtor() {
  if (has_open_signal()) {
    clear_open_signal();
  }
}

void AllowOnePass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllowOnePass& AllowOnePass::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllowOnePass_turnstile_2fpassage_2eproto.base);
  return *internal_default_instance();
}


void AllowOnePass::clear_open_signal() {
// @@protoc_insertion_point(one_of_clear_start:turnstile.passage.AllowOnePass)
  switch (open_signal_case()) {
    case kHoldLevel: {
      delete open_signal_.hold_level_;
      break;
    }
    case kOneImpulse: {
      delete open_signal_.one_impulse_;
      break;
    }
    case OPEN_SIGNAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPEN_SIGNAL_NOT_SET;
}


void AllowOnePass::Clear() {
// @@protoc_insertion_point(message_clear_start:turnstile.passage.AllowOnePass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeout_ms_ = 0u;
  clear_open_signal();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AllowOnePass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 timeout_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timeout_ms(&has_bits);
          timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .turnstile.passage.HoldLevel hold_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hold_level(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .turnstile.passage.OneImpulse one_impulse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_one_impulse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllowOnePass::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:turnstile.passage.AllowOnePass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 timeout_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timeout_ms(), target);
  }

  switch (open_signal_case()) {
    case kHoldLevel: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::hold_level(this), target, stream);
      break;
    }
    case kOneImpulse: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::one_impulse(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:turnstile.passage.AllowOnePass)
  return target;
}

size_t AllowOnePass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turnstile.passage.AllowOnePass)
  size_t total_size = 0;

  // required uint32 timeout_ms = 1;
  if (_internal_has_timeout_ms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout_ms());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (open_signal_case()) {
    // optional .turnstile.passage.HoldLevel hold_level = 2;
    case kHoldLevel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *open_signal_.hold_level_);
      break;
    }
    // optional .turnstile.passage.OneImpulse one_impulse = 3;
    case kOneImpulse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *open_signal_.one_impulse_);
      break;
    }
    case OPEN_SIGNAL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllowOnePass::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:turnstile.passage.AllowOnePass)
  GOOGLE_DCHECK_NE(&from, this);
  const AllowOnePass* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllowOnePass>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:turnstile.passage.AllowOnePass)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:turnstile.passage.AllowOnePass)
    MergeFrom(*source);
  }
}

void AllowOnePass::MergeFrom(const AllowOnePass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turnstile.passage.AllowOnePass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timeout_ms()) {
    _internal_set_timeout_ms(from._internal_timeout_ms());
  }
  switch (from.open_signal_case()) {
    case kHoldLevel: {
      _internal_mutable_hold_level()->::turnstile::passage::HoldLevel::MergeFrom(from._internal_hold_level());
      break;
    }
    case kOneImpulse: {
      _internal_mutable_one_impulse()->::turnstile::passage::OneImpulse::MergeFrom(from._internal_one_impulse());
      break;
    }
    case OPEN_SIGNAL_NOT_SET: {
      break;
    }
  }
}

void AllowOnePass::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:turnstile.passage.AllowOnePass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllowOnePass::CopyFrom(const AllowOnePass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turnstile.passage.AllowOnePass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowOnePass::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (open_signal_case()) {
    case kHoldLevel: {
      break;
    }
    case kOneImpulse: {
      if (has_one_impulse()) {
        if (!this->one_impulse().IsInitialized()) return false;
      }
      break;
    }
    case OPEN_SIGNAL_NOT_SET: {
      break;
    }
  }
  return true;
}

void AllowOnePass::InternalSwap(AllowOnePass* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timeout_ms_, other->timeout_ms_);
  swap(open_signal_, other->open_signal_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllowOnePass::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HoldLevel::InitAsDefaultInstance() {
}
class HoldLevel::_Internal {
 public:
  using HasBits = decltype(std::declval<HoldLevel>()._has_bits_);
};

HoldLevel::HoldLevel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:turnstile.passage.HoldLevel)
}
HoldLevel::HoldLevel(const HoldLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:turnstile.passage.HoldLevel)
}

void HoldLevel::SharedCtor() {
}

HoldLevel::~HoldLevel() {
  // @@protoc_insertion_point(destructor:turnstile.passage.HoldLevel)
  SharedDtor();
}

void HoldLevel::SharedDtor() {
}

void HoldLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HoldLevel& HoldLevel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HoldLevel_turnstile_2fpassage_2eproto.base);
  return *internal_default_instance();
}


void HoldLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:turnstile.passage.HoldLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HoldLevel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HoldLevel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:turnstile.passage.HoldLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:turnstile.passage.HoldLevel)
  return target;
}

size_t HoldLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turnstile.passage.HoldLevel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HoldLevel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:turnstile.passage.HoldLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const HoldLevel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HoldLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:turnstile.passage.HoldLevel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:turnstile.passage.HoldLevel)
    MergeFrom(*source);
  }
}

void HoldLevel::MergeFrom(const HoldLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turnstile.passage.HoldLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HoldLevel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:turnstile.passage.HoldLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HoldLevel::CopyFrom(const HoldLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turnstile.passage.HoldLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HoldLevel::IsInitialized() const {
  return true;
}

void HoldLevel::InternalSwap(HoldLevel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata HoldLevel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OneImpulse::InitAsDefaultInstance() {
}
class OneImpulse::_Internal {
 public:
  using HasBits = decltype(std::declval<OneImpulse>()._has_bits_);
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OneImpulse::OneImpulse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:turnstile.passage.OneImpulse)
}
OneImpulse::OneImpulse(const OneImpulse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  duration_ms_ = from.duration_ms_;
  // @@protoc_insertion_point(copy_constructor:turnstile.passage.OneImpulse)
}

void OneImpulse::SharedCtor() {
  duration_ms_ = 0u;
}

OneImpulse::~OneImpulse() {
  // @@protoc_insertion_point(destructor:turnstile.passage.OneImpulse)
  SharedDtor();
}

void OneImpulse::SharedDtor() {
}

void OneImpulse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OneImpulse& OneImpulse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OneImpulse_turnstile_2fpassage_2eproto.base);
  return *internal_default_instance();
}


void OneImpulse::Clear() {
// @@protoc_insertion_point(message_clear_start:turnstile.passage.OneImpulse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  duration_ms_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OneImpulse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OneImpulse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:turnstile.passage.OneImpulse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_duration_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:turnstile.passage.OneImpulse)
  return target;
}

size_t OneImpulse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:turnstile.passage.OneImpulse)
  size_t total_size = 0;

  // required uint32 duration_ms = 1;
  if (_internal_has_duration_ms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration_ms());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OneImpulse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:turnstile.passage.OneImpulse)
  GOOGLE_DCHECK_NE(&from, this);
  const OneImpulse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OneImpulse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:turnstile.passage.OneImpulse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:turnstile.passage.OneImpulse)
    MergeFrom(*source);
  }
}

void OneImpulse::MergeFrom(const OneImpulse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:turnstile.passage.OneImpulse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_duration_ms()) {
    _internal_set_duration_ms(from._internal_duration_ms());
  }
}

void OneImpulse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:turnstile.passage.OneImpulse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneImpulse::CopyFrom(const OneImpulse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:turnstile.passage.OneImpulse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneImpulse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void OneImpulse::InternalSwap(OneImpulse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(duration_ms_, other->duration_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OneImpulse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace passage
}  // namespace turnstile
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::turnstile::passage::AllowOnePass* Arena::CreateMaybeMessage< ::turnstile::passage::AllowOnePass >(Arena* arena) {
  return Arena::CreateInternal< ::turnstile::passage::AllowOnePass >(arena);
}
template<> PROTOBUF_NOINLINE ::turnstile::passage::HoldLevel* Arena::CreateMaybeMessage< ::turnstile::passage::HoldLevel >(Arena* arena) {
  return Arena::CreateInternal< ::turnstile::passage::HoldLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::turnstile::passage::OneImpulse* Arena::CreateMaybeMessage< ::turnstile::passage::OneImpulse >(Arena* arena) {
  return Arena::CreateInternal< ::turnstile::passage::OneImpulse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
