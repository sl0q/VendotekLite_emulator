// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gui/background.proto

#include "gui/background.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace gui {
namespace background {
class BackgroundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Background> _instance;
  int solid_fill_;
  ::PROTOBUF_NAMESPACE_ID::uint32 solid_fill_rgb_;
} _Background_default_instance_;
}  // namespace background
}  // namespace gui
static void InitDefaultsscc_info_Background_gui_2fbackground_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gui::background::_Background_default_instance_;
    new (ptr) ::gui::background::Background();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gui::background::Background::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Background_gui_2fbackground_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Background_gui_2fbackground_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gui_2fbackground_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gui_2fbackground_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gui_2fbackground_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gui_2fbackground_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gui::background::Background, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gui::background::Background, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gui::background::Background, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::gui::background::BackgroundDefaultTypeInternal, solid_fill_),
  offsetof(::gui::background::BackgroundDefaultTypeInternal, solid_fill_rgb_),
  PROTOBUF_FIELD_OFFSET(::gui::background::Background, background_),
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::gui::background::Background)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gui::background::_Background_default_instance_),
};

const char descriptor_table_protodef_gui_2fbackground_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024gui/background.proto\022\016gui.background\032\023"
  "gui/solidfill.proto\"d\n\nBackground\022.\n\nsol"
  "id_fill\030\001 \001(\0162\030.gui.solidfill.SolidFillH"
  "\000\022\030\n\016solid_fill_rgb\030\002 \001(\rH\000B\014\n\nbackgroun"
  "d"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gui_2fbackground_2eproto_deps[1] = {
  &::descriptor_table_gui_2fsolidfill_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gui_2fbackground_2eproto_sccs[1] = {
  &scc_info_Background_gui_2fbackground_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gui_2fbackground_2eproto_once;
static bool descriptor_table_gui_2fbackground_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gui_2fbackground_2eproto = {
  &descriptor_table_gui_2fbackground_2eproto_initialized, descriptor_table_protodef_gui_2fbackground_2eproto, "gui/background.proto", 161,
  &descriptor_table_gui_2fbackground_2eproto_once, descriptor_table_gui_2fbackground_2eproto_sccs, descriptor_table_gui_2fbackground_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_gui_2fbackground_2eproto::offsets,
  file_level_metadata_gui_2fbackground_2eproto, 1, file_level_enum_descriptors_gui_2fbackground_2eproto, file_level_service_descriptors_gui_2fbackground_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gui_2fbackground_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gui_2fbackground_2eproto), true);
namespace gui {
namespace background {

// ===================================================================

void Background::InitAsDefaultInstance() {
  ::gui::background::_Background_default_instance_.solid_fill_ = 0;
  ::gui::background::_Background_default_instance_.solid_fill_rgb_ = 0u;
}
class Background::_Internal {
 public:
  using HasBits = decltype(std::declval<Background>()._has_bits_);
};

Background::Background()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gui.background.Background)
}
Background::Background(const Background& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_background();
  switch (from.background_case()) {
    case kSolidFill: {
      _internal_set_solid_fill(from._internal_solid_fill());
      break;
    }
    case kSolidFillRgb: {
      _internal_set_solid_fill_rgb(from._internal_solid_fill_rgb());
      break;
    }
    case BACKGROUND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gui.background.Background)
}

void Background::SharedCtor() {
  clear_has_background();
}

Background::~Background() {
  // @@protoc_insertion_point(destructor:gui.background.Background)
  SharedDtor();
}

void Background::SharedDtor() {
  if (has_background()) {
    clear_background();
  }
}

void Background::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Background& Background::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Background_gui_2fbackground_2eproto.base);
  return *internal_default_instance();
}


void Background::clear_background() {
// @@protoc_insertion_point(one_of_clear_start:gui.background.Background)
  switch (background_case()) {
    case kSolidFill: {
      // No need to clear
      break;
    }
    case kSolidFillRgb: {
      // No need to clear
      break;
    }
    case BACKGROUND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BACKGROUND_NOT_SET;
}


void Background::Clear() {
// @@protoc_insertion_point(message_clear_start:gui.background.Background)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_background();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Background::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .gui.solidfill.SolidFill solid_fill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::solidfill::SolidFill_IsValid(val))) {
            _internal_set_solid_fill(static_cast<::gui::solidfill::SolidFill>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 solid_fill_rgb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_solid_fill_rgb(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Background::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gui.background.Background)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (background_case()) {
    case kSolidFill: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_solid_fill(), target);
      break;
    }
    case kSolidFillRgb: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_solid_fill_rgb(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gui.background.Background)
  return target;
}

size_t Background::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gui.background.Background)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (background_case()) {
    // optional .gui.solidfill.SolidFill solid_fill = 1;
    case kSolidFill: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_solid_fill());
      break;
    }
    // optional uint32 solid_fill_rgb = 2;
    case kSolidFillRgb: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_solid_fill_rgb());
      break;
    }
    case BACKGROUND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Background::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gui.background.Background)
  GOOGLE_DCHECK_NE(&from, this);
  const Background* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Background>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gui.background.Background)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gui.background.Background)
    MergeFrom(*source);
  }
}

void Background::MergeFrom(const Background& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gui.background.Background)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.background_case()) {
    case kSolidFill: {
      _internal_set_solid_fill(from._internal_solid_fill());
      break;
    }
    case kSolidFillRgb: {
      _internal_set_solid_fill_rgb(from._internal_solid_fill_rgb());
      break;
    }
    case BACKGROUND_NOT_SET: {
      break;
    }
  }
}

void Background::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gui.background.Background)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Background::CopyFrom(const Background& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gui.background.Background)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Background::IsInitialized() const {
  return true;
}

void Background::InternalSwap(Background* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(background_, other->background_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Background::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace background
}  // namespace gui
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gui::background::Background* Arena::CreateMaybeMessage< ::gui::background::Background >(Arena* arena) {
  return Arena::CreateInternal< ::gui::background::Background >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
