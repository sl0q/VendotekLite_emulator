// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gui/menu_dialog.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gui_2fmenu_5fdialog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gui_2fmenu_5fdialog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gui_2fmenu_5fdialog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gui_2fmenu_5fdialog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gui_2fmenu_5fdialog_2eproto;
namespace gui {
namespace menu_dialog {
class Item;
class ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class ItemList;
class ItemListDefaultTypeInternal;
extern ItemListDefaultTypeInternal _ItemList_default_instance_;
class LeafItem;
class LeafItemDefaultTypeInternal;
extern LeafItemDefaultTypeInternal _LeafItem_default_instance_;
class MenuDialog;
class MenuDialogDefaultTypeInternal;
extern MenuDialogDefaultTypeInternal _MenuDialog_default_instance_;
class SelectedItem;
class SelectedItemDefaultTypeInternal;
extern SelectedItemDefaultTypeInternal _SelectedItem_default_instance_;
}  // namespace menu_dialog
}  // namespace gui
PROTOBUF_NAMESPACE_OPEN
template<> ::gui::menu_dialog::Item* Arena::CreateMaybeMessage<::gui::menu_dialog::Item>(Arena*);
template<> ::gui::menu_dialog::ItemList* Arena::CreateMaybeMessage<::gui::menu_dialog::ItemList>(Arena*);
template<> ::gui::menu_dialog::LeafItem* Arena::CreateMaybeMessage<::gui::menu_dialog::LeafItem>(Arena*);
template<> ::gui::menu_dialog::MenuDialog* Arena::CreateMaybeMessage<::gui::menu_dialog::MenuDialog>(Arena*);
template<> ::gui::menu_dialog::SelectedItem* Arena::CreateMaybeMessage<::gui::menu_dialog::SelectedItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gui {
namespace menu_dialog {

// ===================================================================

class MenuDialog :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.menu_dialog.MenuDialog) */ {
 public:
  MenuDialog();
  virtual ~MenuDialog();

  MenuDialog(const MenuDialog& from);
  MenuDialog(MenuDialog&& from) noexcept
    : MenuDialog() {
    *this = ::std::move(from);
  }

  inline MenuDialog& operator=(const MenuDialog& from) {
    CopyFrom(from);
    return *this;
  }
  inline MenuDialog& operator=(MenuDialog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MenuDialog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MenuDialog* internal_default_instance() {
    return reinterpret_cast<const MenuDialog*>(
               &_MenuDialog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MenuDialog& a, MenuDialog& b) {
    a.Swap(&b);
  }
  inline void Swap(MenuDialog* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MenuDialog* New() const final {
    return CreateMaybeMessage<MenuDialog>(nullptr);
  }

  MenuDialog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MenuDialog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MenuDialog& from);
  void MergeFrom(const MenuDialog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MenuDialog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.menu_dialog.MenuDialog";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2fmenu_5fdialog_2eproto);
    return ::descriptor_table_gui_2fmenu_5fdialog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptionFieldNumber = 1,
    kItemListFieldNumber = 2,
    kTimeoutFieldNumber = 3,
  };
  // required string caption = 1;
  bool has_caption() const;
  private:
  bool _internal_has_caption() const;
  public:
  void clear_caption();
  const std::string& caption() const;
  void set_caption(const std::string& value);
  void set_caption(std::string&& value);
  void set_caption(const char* value);
  void set_caption(const char* value, size_t size);
  std::string* mutable_caption();
  std::string* release_caption();
  void set_allocated_caption(std::string* caption);
  private:
  const std::string& _internal_caption() const;
  void _internal_set_caption(const std::string& value);
  std::string* _internal_mutable_caption();
  public:

  // required .gui.menu_dialog.ItemList item_list = 2;
  bool has_item_list() const;
  private:
  bool _internal_has_item_list() const;
  public:
  void clear_item_list();
  const ::gui::menu_dialog::ItemList& item_list() const;
  ::gui::menu_dialog::ItemList* release_item_list();
  ::gui::menu_dialog::ItemList* mutable_item_list();
  void set_allocated_item_list(::gui::menu_dialog::ItemList* item_list);
  private:
  const ::gui::menu_dialog::ItemList& _internal_item_list() const;
  ::gui::menu_dialog::ItemList* _internal_mutable_item_list();
  public:

  // optional uint32 timeout = 3;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gui.menu_dialog.MenuDialog)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caption_;
  ::gui::menu_dialog::ItemList* item_list_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_gui_2fmenu_5fdialog_2eproto;
};
// -------------------------------------------------------------------

class ItemList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.menu_dialog.ItemList) */ {
 public:
  ItemList();
  virtual ~ItemList();

  ItemList(const ItemList& from);
  ItemList(ItemList&& from) noexcept
    : ItemList() {
    *this = ::std::move(from);
  }

  inline ItemList& operator=(const ItemList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemList& operator=(ItemList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ItemList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemList* internal_default_instance() {
    return reinterpret_cast<const ItemList*>(
               &_ItemList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ItemList& a, ItemList& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ItemList* New() const final {
    return CreateMaybeMessage<ItemList>(nullptr);
  }

  ItemList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ItemList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ItemList& from);
  void MergeFrom(const ItemList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.menu_dialog.ItemList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2fmenu_5fdialog_2eproto);
    return ::descriptor_table_gui_2fmenu_5fdialog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .gui.menu_dialog.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::gui::menu_dialog::Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gui::menu_dialog::Item >*
      mutable_items();
  private:
  const ::gui::menu_dialog::Item& _internal_items(int index) const;
  ::gui::menu_dialog::Item* _internal_add_items();
  public:
  const ::gui::menu_dialog::Item& items(int index) const;
  ::gui::menu_dialog::Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gui::menu_dialog::Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:gui.menu_dialog.ItemList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gui::menu_dialog::Item > items_;
  friend struct ::TableStruct_gui_2fmenu_5fdialog_2eproto;
};
// -------------------------------------------------------------------

class LeafItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.menu_dialog.LeafItem) */ {
 public:
  LeafItem();
  virtual ~LeafItem();

  LeafItem(const LeafItem& from);
  LeafItem(LeafItem&& from) noexcept
    : LeafItem() {
    *this = ::std::move(from);
  }

  inline LeafItem& operator=(const LeafItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeafItem& operator=(LeafItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeafItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeafItem* internal_default_instance() {
    return reinterpret_cast<const LeafItem*>(
               &_LeafItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LeafItem& a, LeafItem& b) {
    a.Swap(&b);
  }
  inline void Swap(LeafItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeafItem* New() const final {
    return CreateMaybeMessage<LeafItem>(nullptr);
  }

  LeafItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeafItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeafItem& from);
  void MergeFrom(const LeafItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeafItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.menu_dialog.LeafItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2fmenu_5fdialog_2eproto);
    return ::descriptor_table_gui_2fmenu_5fdialog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // required uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gui.menu_dialog.LeafItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_gui_2fmenu_5fdialog_2eproto;
};
// -------------------------------------------------------------------

class Item :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.menu_dialog.Item) */ {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Item& default_instance();

  enum ItemCase {
    kLeafItem = 2,
    kSubmenu = 3,
    ITEM_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Item* New() const final {
    return CreateMaybeMessage<Item>(nullptr);
  }

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.menu_dialog.Item";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2fmenu_5fdialog_2eproto);
    return ::descriptor_table_gui_2fmenu_5fdialog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kLeafItemFieldNumber = 2,
    kSubmenuFieldNumber = 3,
  };
  // required string text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional .gui.menu_dialog.LeafItem leaf_item = 2;
  bool has_leaf_item() const;
  private:
  bool _internal_has_leaf_item() const;
  public:
  void clear_leaf_item();
  const ::gui::menu_dialog::LeafItem& leaf_item() const;
  ::gui::menu_dialog::LeafItem* release_leaf_item();
  ::gui::menu_dialog::LeafItem* mutable_leaf_item();
  void set_allocated_leaf_item(::gui::menu_dialog::LeafItem* leaf_item);
  private:
  const ::gui::menu_dialog::LeafItem& _internal_leaf_item() const;
  ::gui::menu_dialog::LeafItem* _internal_mutable_leaf_item();
  public:

  // optional .gui.menu_dialog.ItemList submenu = 3;
  bool has_submenu() const;
  private:
  bool _internal_has_submenu() const;
  public:
  void clear_submenu();
  const ::gui::menu_dialog::ItemList& submenu() const;
  ::gui::menu_dialog::ItemList* release_submenu();
  ::gui::menu_dialog::ItemList* mutable_submenu();
  void set_allocated_submenu(::gui::menu_dialog::ItemList* submenu);
  private:
  const ::gui::menu_dialog::ItemList& _internal_submenu() const;
  ::gui::menu_dialog::ItemList* _internal_mutable_submenu();
  public:

  void clear_item();
  ItemCase item_case() const;
  // @@protoc_insertion_point(class_scope:gui.menu_dialog.Item)
 private:
  class _Internal;
  void set_has_leaf_item();
  void set_has_submenu();

  inline bool has_item() const;
  inline void clear_has_item();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  union ItemUnion {
    ItemUnion() {}
    ::gui::menu_dialog::LeafItem* leaf_item_;
    ::gui::menu_dialog::ItemList* submenu_;
  } item_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_gui_2fmenu_5fdialog_2eproto;
};
// -------------------------------------------------------------------

class SelectedItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.menu_dialog.SelectedItem) */ {
 public:
  SelectedItem();
  virtual ~SelectedItem();

  SelectedItem(const SelectedItem& from);
  SelectedItem(SelectedItem&& from) noexcept
    : SelectedItem() {
    *this = ::std::move(from);
  }

  inline SelectedItem& operator=(const SelectedItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectedItem& operator=(SelectedItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectedItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectedItem* internal_default_instance() {
    return reinterpret_cast<const SelectedItem*>(
               &_SelectedItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SelectedItem& a, SelectedItem& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectedItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectedItem* New() const final {
    return CreateMaybeMessage<SelectedItem>(nullptr);
  }

  SelectedItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectedItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectedItem& from);
  void MergeFrom(const SelectedItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectedItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.menu_dialog.SelectedItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2fmenu_5fdialog_2eproto);
    return ::descriptor_table_gui_2fmenu_5fdialog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // required uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gui.menu_dialog.SelectedItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_gui_2fmenu_5fdialog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MenuDialog

// required string caption = 1;
inline bool MenuDialog::_internal_has_caption() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MenuDialog::has_caption() const {
  return _internal_has_caption();
}
inline void MenuDialog::clear_caption() {
  caption_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MenuDialog::caption() const {
  // @@protoc_insertion_point(field_get:gui.menu_dialog.MenuDialog.caption)
  return _internal_caption();
}
inline void MenuDialog::set_caption(const std::string& value) {
  _internal_set_caption(value);
  // @@protoc_insertion_point(field_set:gui.menu_dialog.MenuDialog.caption)
}
inline std::string* MenuDialog::mutable_caption() {
  // @@protoc_insertion_point(field_mutable:gui.menu_dialog.MenuDialog.caption)
  return _internal_mutable_caption();
}
inline const std::string& MenuDialog::_internal_caption() const {
  return caption_.GetNoArena();
}
inline void MenuDialog::_internal_set_caption(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  caption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MenuDialog::set_caption(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  caption_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gui.menu_dialog.MenuDialog.caption)
}
inline void MenuDialog::set_caption(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  caption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gui.menu_dialog.MenuDialog.caption)
}
inline void MenuDialog::set_caption(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  caption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gui.menu_dialog.MenuDialog.caption)
}
inline std::string* MenuDialog::_internal_mutable_caption() {
  _has_bits_[0] |= 0x00000001u;
  return caption_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MenuDialog::release_caption() {
  // @@protoc_insertion_point(field_release:gui.menu_dialog.MenuDialog.caption)
  if (!_internal_has_caption()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return caption_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MenuDialog::set_allocated_caption(std::string* caption) {
  if (caption != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  caption_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caption);
  // @@protoc_insertion_point(field_set_allocated:gui.menu_dialog.MenuDialog.caption)
}

// required .gui.menu_dialog.ItemList item_list = 2;
inline bool MenuDialog::_internal_has_item_list() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || item_list_ != nullptr);
  return value;
}
inline bool MenuDialog::has_item_list() const {
  return _internal_has_item_list();
}
inline void MenuDialog::clear_item_list() {
  if (item_list_ != nullptr) item_list_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::gui::menu_dialog::ItemList& MenuDialog::_internal_item_list() const {
  const ::gui::menu_dialog::ItemList* p = item_list_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gui::menu_dialog::ItemList*>(
      &::gui::menu_dialog::_ItemList_default_instance_);
}
inline const ::gui::menu_dialog::ItemList& MenuDialog::item_list() const {
  // @@protoc_insertion_point(field_get:gui.menu_dialog.MenuDialog.item_list)
  return _internal_item_list();
}
inline ::gui::menu_dialog::ItemList* MenuDialog::release_item_list() {
  // @@protoc_insertion_point(field_release:gui.menu_dialog.MenuDialog.item_list)
  _has_bits_[0] &= ~0x00000002u;
  ::gui::menu_dialog::ItemList* temp = item_list_;
  item_list_ = nullptr;
  return temp;
}
inline ::gui::menu_dialog::ItemList* MenuDialog::_internal_mutable_item_list() {
  _has_bits_[0] |= 0x00000002u;
  if (item_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::gui::menu_dialog::ItemList>(GetArenaNoVirtual());
    item_list_ = p;
  }
  return item_list_;
}
inline ::gui::menu_dialog::ItemList* MenuDialog::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable:gui.menu_dialog.MenuDialog.item_list)
  return _internal_mutable_item_list();
}
inline void MenuDialog::set_allocated_item_list(::gui::menu_dialog::ItemList* item_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete item_list_;
  }
  if (item_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      item_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  item_list_ = item_list;
  // @@protoc_insertion_point(field_set_allocated:gui.menu_dialog.MenuDialog.item_list)
}

// optional uint32 timeout = 3;
inline bool MenuDialog::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MenuDialog::has_timeout() const {
  return _internal_has_timeout();
}
inline void MenuDialog::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MenuDialog::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MenuDialog::timeout() const {
  // @@protoc_insertion_point(field_get:gui.menu_dialog.MenuDialog.timeout)
  return _internal_timeout();
}
inline void MenuDialog::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  timeout_ = value;
}
inline void MenuDialog::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:gui.menu_dialog.MenuDialog.timeout)
}

// -------------------------------------------------------------------

// ItemList

// repeated .gui.menu_dialog.Item items = 1;
inline int ItemList::_internal_items_size() const {
  return items_.size();
}
inline int ItemList::items_size() const {
  return _internal_items_size();
}
inline void ItemList::clear_items() {
  items_.Clear();
}
inline ::gui::menu_dialog::Item* ItemList::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:gui.menu_dialog.ItemList.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gui::menu_dialog::Item >*
ItemList::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:gui.menu_dialog.ItemList.items)
  return &items_;
}
inline const ::gui::menu_dialog::Item& ItemList::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::gui::menu_dialog::Item& ItemList::items(int index) const {
  // @@protoc_insertion_point(field_get:gui.menu_dialog.ItemList.items)
  return _internal_items(index);
}
inline ::gui::menu_dialog::Item* ItemList::_internal_add_items() {
  return items_.Add();
}
inline ::gui::menu_dialog::Item* ItemList::add_items() {
  // @@protoc_insertion_point(field_add:gui.menu_dialog.ItemList.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gui::menu_dialog::Item >&
ItemList::items() const {
  // @@protoc_insertion_point(field_list:gui.menu_dialog.ItemList.items)
  return items_;
}

// -------------------------------------------------------------------

// LeafItem

// required uint32 id = 1;
inline bool LeafItem::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LeafItem::has_id() const {
  return _internal_has_id();
}
inline void LeafItem::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LeafItem::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LeafItem::id() const {
  // @@protoc_insertion_point(field_get:gui.menu_dialog.LeafItem.id)
  return _internal_id();
}
inline void LeafItem::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void LeafItem::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gui.menu_dialog.LeafItem.id)
}

// -------------------------------------------------------------------

// Item

// required string text = 1;
inline bool Item::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Item::has_text() const {
  return _internal_has_text();
}
inline void Item::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Item::text() const {
  // @@protoc_insertion_point(field_get:gui.menu_dialog.Item.text)
  return _internal_text();
}
inline void Item::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:gui.menu_dialog.Item.text)
}
inline std::string* Item::mutable_text() {
  // @@protoc_insertion_point(field_mutable:gui.menu_dialog.Item.text)
  return _internal_mutable_text();
}
inline const std::string& Item::_internal_text() const {
  return text_.GetNoArena();
}
inline void Item::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Item::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gui.menu_dialog.Item.text)
}
inline void Item::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gui.menu_dialog.Item.text)
}
inline void Item::set_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gui.menu_dialog.Item.text)
}
inline std::string* Item::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Item::release_text() {
  // @@protoc_insertion_point(field_release:gui.menu_dialog.Item.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:gui.menu_dialog.Item.text)
}

// optional .gui.menu_dialog.LeafItem leaf_item = 2;
inline bool Item::_internal_has_leaf_item() const {
  return item_case() == kLeafItem;
}
inline bool Item::has_leaf_item() const {
  return _internal_has_leaf_item();
}
inline void Item::set_has_leaf_item() {
  _oneof_case_[0] = kLeafItem;
}
inline void Item::clear_leaf_item() {
  if (_internal_has_leaf_item()) {
    delete item_.leaf_item_;
    clear_has_item();
  }
}
inline ::gui::menu_dialog::LeafItem* Item::release_leaf_item() {
  // @@protoc_insertion_point(field_release:gui.menu_dialog.Item.leaf_item)
  if (_internal_has_leaf_item()) {
    clear_has_item();
      ::gui::menu_dialog::LeafItem* temp = item_.leaf_item_;
    item_.leaf_item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gui::menu_dialog::LeafItem& Item::_internal_leaf_item() const {
  return _internal_has_leaf_item()
      ? *item_.leaf_item_
      : *reinterpret_cast< ::gui::menu_dialog::LeafItem*>(&::gui::menu_dialog::_LeafItem_default_instance_);
}
inline const ::gui::menu_dialog::LeafItem& Item::leaf_item() const {
  // @@protoc_insertion_point(field_get:gui.menu_dialog.Item.leaf_item)
  return _internal_leaf_item();
}
inline ::gui::menu_dialog::LeafItem* Item::_internal_mutable_leaf_item() {
  if (!_internal_has_leaf_item()) {
    clear_item();
    set_has_leaf_item();
    item_.leaf_item_ = CreateMaybeMessage< ::gui::menu_dialog::LeafItem >(
        GetArenaNoVirtual());
  }
  return item_.leaf_item_;
}
inline ::gui::menu_dialog::LeafItem* Item::mutable_leaf_item() {
  // @@protoc_insertion_point(field_mutable:gui.menu_dialog.Item.leaf_item)
  return _internal_mutable_leaf_item();
}

// optional .gui.menu_dialog.ItemList submenu = 3;
inline bool Item::_internal_has_submenu() const {
  return item_case() == kSubmenu;
}
inline bool Item::has_submenu() const {
  return _internal_has_submenu();
}
inline void Item::set_has_submenu() {
  _oneof_case_[0] = kSubmenu;
}
inline void Item::clear_submenu() {
  if (_internal_has_submenu()) {
    delete item_.submenu_;
    clear_has_item();
  }
}
inline ::gui::menu_dialog::ItemList* Item::release_submenu() {
  // @@protoc_insertion_point(field_release:gui.menu_dialog.Item.submenu)
  if (_internal_has_submenu()) {
    clear_has_item();
      ::gui::menu_dialog::ItemList* temp = item_.submenu_;
    item_.submenu_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gui::menu_dialog::ItemList& Item::_internal_submenu() const {
  return _internal_has_submenu()
      ? *item_.submenu_
      : *reinterpret_cast< ::gui::menu_dialog::ItemList*>(&::gui::menu_dialog::_ItemList_default_instance_);
}
inline const ::gui::menu_dialog::ItemList& Item::submenu() const {
  // @@protoc_insertion_point(field_get:gui.menu_dialog.Item.submenu)
  return _internal_submenu();
}
inline ::gui::menu_dialog::ItemList* Item::_internal_mutable_submenu() {
  if (!_internal_has_submenu()) {
    clear_item();
    set_has_submenu();
    item_.submenu_ = CreateMaybeMessage< ::gui::menu_dialog::ItemList >(
        GetArenaNoVirtual());
  }
  return item_.submenu_;
}
inline ::gui::menu_dialog::ItemList* Item::mutable_submenu() {
  // @@protoc_insertion_point(field_mutable:gui.menu_dialog.Item.submenu)
  return _internal_mutable_submenu();
}

inline bool Item::has_item() const {
  return item_case() != ITEM_NOT_SET;
}
inline void Item::clear_has_item() {
  _oneof_case_[0] = ITEM_NOT_SET;
}
inline Item::ItemCase Item::item_case() const {
  return Item::ItemCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SelectedItem

// required uint32 id = 1;
inline bool SelectedItem::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SelectedItem::has_id() const {
  return _internal_has_id();
}
inline void SelectedItem::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SelectedItem::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SelectedItem::id() const {
  // @@protoc_insertion_point(field_get:gui.menu_dialog.SelectedItem.id)
  return _internal_id();
}
inline void SelectedItem::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void SelectedItem::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gui.menu_dialog.SelectedItem.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace menu_dialog
}  // namespace gui

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gui_2fmenu_5fdialog_2eproto
