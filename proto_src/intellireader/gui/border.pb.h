// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gui/border.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gui_2fborder_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gui_2fborder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gui/background.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gui_2fborder_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gui_2fborder_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gui_2fborder_2eproto;
namespace gui {
namespace border {
class Border;
class BorderDefaultTypeInternal;
extern BorderDefaultTypeInternal _Border_default_instance_;
}  // namespace border
}  // namespace gui
PROTOBUF_NAMESPACE_OPEN
template<> ::gui::border::Border* Arena::CreateMaybeMessage<::gui::border::Border>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gui {
namespace border {

enum BorderStyle : int {
  SOLID_BORDER = 0,
  OUTSET_BORDER = 1,
  INSET_BORDER = 2
};
bool BorderStyle_IsValid(int value);
constexpr BorderStyle BorderStyle_MIN = SOLID_BORDER;
constexpr BorderStyle BorderStyle_MAX = INSET_BORDER;
constexpr int BorderStyle_ARRAYSIZE = BorderStyle_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BorderStyle_descriptor();
template<typename T>
inline const std::string& BorderStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BorderStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BorderStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BorderStyle_descriptor(), enum_t_value);
}
inline bool BorderStyle_Parse(
    const std::string& name, BorderStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BorderStyle>(
    BorderStyle_descriptor(), name, value);
}
// ===================================================================

class Border :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.border.Border) */ {
 public:
  Border();
  virtual ~Border();

  Border(const Border& from);
  Border(Border&& from) noexcept
    : Border() {
    *this = ::std::move(from);
  }

  inline Border& operator=(const Border& from) {
    CopyFrom(from);
    return *this;
  }
  inline Border& operator=(Border&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Border& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Border* internal_default_instance() {
    return reinterpret_cast<const Border*>(
               &_Border_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Border& a, Border& b) {
    a.Swap(&b);
  }
  inline void Swap(Border* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Border* New() const final {
    return CreateMaybeMessage<Border>(nullptr);
  }

  Border* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Border>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Border& from);
  void MergeFrom(const Border& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Border* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.border.Border";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2fborder_2eproto);
    return ::descriptor_table_gui_2fborder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 2,
    kStyleFieldNumber = 1,
    kWidthFieldNumber = 3,
  };
  // optional .gui.background.Background color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::gui::background::Background& color() const;
  ::gui::background::Background* release_color();
  ::gui::background::Background* mutable_color();
  void set_allocated_color(::gui::background::Background* color);
  private:
  const ::gui::background::Background& _internal_color() const;
  ::gui::background::Background* _internal_mutable_color();
  public:

  // required .gui.border.BorderStyle style = 1;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  ::gui::border::BorderStyle style() const;
  void set_style(::gui::border::BorderStyle value);
  private:
  ::gui::border::BorderStyle _internal_style() const;
  void _internal_set_style(::gui::border::BorderStyle value);
  public:

  // optional uint32 width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gui.border.Border)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::gui::background::Background* color_;
  int style_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  friend struct ::TableStruct_gui_2fborder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Border

// required .gui.border.BorderStyle style = 1;
inline bool Border::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Border::has_style() const {
  return _internal_has_style();
}
inline void Border::clear_style() {
  style_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::gui::border::BorderStyle Border::_internal_style() const {
  return static_cast< ::gui::border::BorderStyle >(style_);
}
inline ::gui::border::BorderStyle Border::style() const {
  // @@protoc_insertion_point(field_get:gui.border.Border.style)
  return _internal_style();
}
inline void Border::_internal_set_style(::gui::border::BorderStyle value) {
  assert(::gui::border::BorderStyle_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  style_ = value;
}
inline void Border::set_style(::gui::border::BorderStyle value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:gui.border.Border.style)
}

// optional .gui.background.Background color = 2;
inline bool Border::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || color_ != nullptr);
  return value;
}
inline bool Border::has_color() const {
  return _internal_has_color();
}
inline const ::gui::background::Background& Border::_internal_color() const {
  const ::gui::background::Background* p = color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gui::background::Background*>(
      &::gui::background::_Background_default_instance_);
}
inline const ::gui::background::Background& Border::color() const {
  // @@protoc_insertion_point(field_get:gui.border.Border.color)
  return _internal_color();
}
inline ::gui::background::Background* Border::release_color() {
  // @@protoc_insertion_point(field_release:gui.border.Border.color)
  _has_bits_[0] &= ~0x00000001u;
  ::gui::background::Background* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::gui::background::Background* Border::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000001u;
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::gui::background::Background>(GetArenaNoVirtual());
    color_ = p;
  }
  return color_;
}
inline ::gui::background::Background* Border::mutable_color() {
  // @@protoc_insertion_point(field_mutable:gui.border.Border.color)
  return _internal_mutable_color();
}
inline void Border::set_allocated_color(::gui::background::Background* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:gui.border.Border.color)
}

// optional uint32 width = 3;
inline bool Border::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Border::has_width() const {
  return _internal_has_width();
}
inline void Border::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Border::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Border::width() const {
  // @@protoc_insertion_point(field_get:gui.border.Border.width)
  return _internal_width();
}
inline void Border::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void Border::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:gui.border.Border.width)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace border
}  // namespace gui

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gui::border::BorderStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gui::border::BorderStyle>() {
  return ::gui::border::BorderStyle_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gui_2fborder_2eproto
