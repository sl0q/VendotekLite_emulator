// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gui/slideshow.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gui_2fslideshow_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gui_2fslideshow_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gui/alignment.pb.h"
#include "gui/background.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gui_2fslideshow_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gui_2fslideshow_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gui_2fslideshow_2eproto;
namespace gui {
namespace slideshow {
class Slideshow;
class SlideshowDefaultTypeInternal;
extern SlideshowDefaultTypeInternal _Slideshow_default_instance_;
}  // namespace slideshow
}  // namespace gui
PROTOBUF_NAMESPACE_OPEN
template<> ::gui::slideshow::Slideshow* Arena::CreateMaybeMessage<::gui::slideshow::Slideshow>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gui {
namespace slideshow {

// ===================================================================

class Slideshow :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.slideshow.Slideshow) */ {
 public:
  Slideshow();
  virtual ~Slideshow();

  Slideshow(const Slideshow& from);
  Slideshow(Slideshow&& from) noexcept
    : Slideshow() {
    *this = ::std::move(from);
  }

  inline Slideshow& operator=(const Slideshow& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slideshow& operator=(Slideshow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Slideshow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Slideshow* internal_default_instance() {
    return reinterpret_cast<const Slideshow*>(
               &_Slideshow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Slideshow& a, Slideshow& b) {
    a.Swap(&b);
  }
  inline void Swap(Slideshow* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Slideshow* New() const final {
    return CreateMaybeMessage<Slideshow>(nullptr);
  }

  Slideshow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Slideshow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Slideshow& from);
  void MergeFrom(const Slideshow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Slideshow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.slideshow.Slideshow";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2fslideshow_2eproto);
    return ::descriptor_table_gui_2fslideshow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kBackgroundFieldNumber = 2,
    kFramesCountFieldNumber = 3,
    kDelayMsFieldNumber = 4,
    kVerticalAlignmentFieldNumber = 5,
    kHorizontalAlignmentFieldNumber = 6,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .gui.background.Background background = 2;
  bool has_background() const;
  private:
  bool _internal_has_background() const;
  public:
  void clear_background();
  const ::gui::background::Background& background() const;
  ::gui::background::Background* release_background();
  ::gui::background::Background* mutable_background();
  void set_allocated_background(::gui::background::Background* background);
  private:
  const ::gui::background::Background& _internal_background() const;
  ::gui::background::Background* _internal_mutable_background();
  public:

  // required uint32 frames_count = 3;
  bool has_frames_count() const;
  private:
  bool _internal_has_frames_count() const;
  public:
  void clear_frames_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 frames_count() const;
  void set_frames_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frames_count() const;
  void _internal_set_frames_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 delay_ms = 4 [default = 0];
  bool has_delay_ms() const;
  private:
  bool _internal_has_delay_ms() const;
  public:
  void clear_delay_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 delay_ms() const;
  void set_delay_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_delay_ms() const;
  void _internal_set_delay_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .gui.alignment.VerticalAlignment vertical_alignment = 5 [default = CENTER_VERTICALLY];
  bool has_vertical_alignment() const;
  private:
  bool _internal_has_vertical_alignment() const;
  public:
  void clear_vertical_alignment();
  ::gui::alignment::VerticalAlignment vertical_alignment() const;
  void set_vertical_alignment(::gui::alignment::VerticalAlignment value);
  private:
  ::gui::alignment::VerticalAlignment _internal_vertical_alignment() const;
  void _internal_set_vertical_alignment(::gui::alignment::VerticalAlignment value);
  public:

  // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 6 [default = CENTER_HORIZONTALLY];
  bool has_horizontal_alignment() const;
  private:
  bool _internal_has_horizontal_alignment() const;
  public:
  void clear_horizontal_alignment();
  ::gui::alignment::HorizontalAlignment horizontal_alignment() const;
  void set_horizontal_alignment(::gui::alignment::HorizontalAlignment value);
  private:
  ::gui::alignment::HorizontalAlignment _internal_horizontal_alignment() const;
  void _internal_set_horizontal_alignment(::gui::alignment::HorizontalAlignment value);
  public:

  // @@protoc_insertion_point(class_scope:gui.slideshow.Slideshow)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::gui::background::Background* background_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frames_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 delay_ms_;
  int vertical_alignment_;
  int horizontal_alignment_;
  friend struct ::TableStruct_gui_2fslideshow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Slideshow

// required string name = 1;
inline bool Slideshow::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Slideshow::has_name() const {
  return _internal_has_name();
}
inline void Slideshow::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Slideshow::name() const {
  // @@protoc_insertion_point(field_get:gui.slideshow.Slideshow.name)
  return _internal_name();
}
inline void Slideshow::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gui.slideshow.Slideshow.name)
}
inline std::string* Slideshow::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gui.slideshow.Slideshow.name)
  return _internal_mutable_name();
}
inline const std::string& Slideshow::_internal_name() const {
  return name_.GetNoArena();
}
inline void Slideshow::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Slideshow::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gui.slideshow.Slideshow.name)
}
inline void Slideshow::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gui.slideshow.Slideshow.name)
}
inline void Slideshow::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gui.slideshow.Slideshow.name)
}
inline std::string* Slideshow::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Slideshow::release_name() {
  // @@protoc_insertion_point(field_release:gui.slideshow.Slideshow.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Slideshow::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gui.slideshow.Slideshow.name)
}

// required .gui.background.Background background = 2;
inline bool Slideshow::_internal_has_background() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || background_ != nullptr);
  return value;
}
inline bool Slideshow::has_background() const {
  return _internal_has_background();
}
inline const ::gui::background::Background& Slideshow::_internal_background() const {
  const ::gui::background::Background* p = background_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gui::background::Background*>(
      &::gui::background::_Background_default_instance_);
}
inline const ::gui::background::Background& Slideshow::background() const {
  // @@protoc_insertion_point(field_get:gui.slideshow.Slideshow.background)
  return _internal_background();
}
inline ::gui::background::Background* Slideshow::release_background() {
  // @@protoc_insertion_point(field_release:gui.slideshow.Slideshow.background)
  _has_bits_[0] &= ~0x00000002u;
  ::gui::background::Background* temp = background_;
  background_ = nullptr;
  return temp;
}
inline ::gui::background::Background* Slideshow::_internal_mutable_background() {
  _has_bits_[0] |= 0x00000002u;
  if (background_ == nullptr) {
    auto* p = CreateMaybeMessage<::gui::background::Background>(GetArenaNoVirtual());
    background_ = p;
  }
  return background_;
}
inline ::gui::background::Background* Slideshow::mutable_background() {
  // @@protoc_insertion_point(field_mutable:gui.slideshow.Slideshow.background)
  return _internal_mutable_background();
}
inline void Slideshow::set_allocated_background(::gui::background::Background* background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_);
  }
  if (background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  background_ = background;
  // @@protoc_insertion_point(field_set_allocated:gui.slideshow.Slideshow.background)
}

// required uint32 frames_count = 3;
inline bool Slideshow::_internal_has_frames_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Slideshow::has_frames_count() const {
  return _internal_has_frames_count();
}
inline void Slideshow::clear_frames_count() {
  frames_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Slideshow::_internal_frames_count() const {
  return frames_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Slideshow::frames_count() const {
  // @@protoc_insertion_point(field_get:gui.slideshow.Slideshow.frames_count)
  return _internal_frames_count();
}
inline void Slideshow::_internal_set_frames_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  frames_count_ = value;
}
inline void Slideshow::set_frames_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frames_count(value);
  // @@protoc_insertion_point(field_set:gui.slideshow.Slideshow.frames_count)
}

// optional uint32 delay_ms = 4 [default = 0];
inline bool Slideshow::_internal_has_delay_ms() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Slideshow::has_delay_ms() const {
  return _internal_has_delay_ms();
}
inline void Slideshow::clear_delay_ms() {
  delay_ms_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Slideshow::_internal_delay_ms() const {
  return delay_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Slideshow::delay_ms() const {
  // @@protoc_insertion_point(field_get:gui.slideshow.Slideshow.delay_ms)
  return _internal_delay_ms();
}
inline void Slideshow::_internal_set_delay_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  delay_ms_ = value;
}
inline void Slideshow::set_delay_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_delay_ms(value);
  // @@protoc_insertion_point(field_set:gui.slideshow.Slideshow.delay_ms)
}

// optional .gui.alignment.VerticalAlignment vertical_alignment = 5 [default = CENTER_VERTICALLY];
inline bool Slideshow::_internal_has_vertical_alignment() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Slideshow::has_vertical_alignment() const {
  return _internal_has_vertical_alignment();
}
inline void Slideshow::clear_vertical_alignment() {
  vertical_alignment_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::gui::alignment::VerticalAlignment Slideshow::_internal_vertical_alignment() const {
  return static_cast< ::gui::alignment::VerticalAlignment >(vertical_alignment_);
}
inline ::gui::alignment::VerticalAlignment Slideshow::vertical_alignment() const {
  // @@protoc_insertion_point(field_get:gui.slideshow.Slideshow.vertical_alignment)
  return _internal_vertical_alignment();
}
inline void Slideshow::_internal_set_vertical_alignment(::gui::alignment::VerticalAlignment value) {
  assert(::gui::alignment::VerticalAlignment_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  vertical_alignment_ = value;
}
inline void Slideshow::set_vertical_alignment(::gui::alignment::VerticalAlignment value) {
  _internal_set_vertical_alignment(value);
  // @@protoc_insertion_point(field_set:gui.slideshow.Slideshow.vertical_alignment)
}

// optional .gui.alignment.HorizontalAlignment horizontal_alignment = 6 [default = CENTER_HORIZONTALLY];
inline bool Slideshow::_internal_has_horizontal_alignment() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Slideshow::has_horizontal_alignment() const {
  return _internal_has_horizontal_alignment();
}
inline void Slideshow::clear_horizontal_alignment() {
  horizontal_alignment_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::gui::alignment::HorizontalAlignment Slideshow::_internal_horizontal_alignment() const {
  return static_cast< ::gui::alignment::HorizontalAlignment >(horizontal_alignment_);
}
inline ::gui::alignment::HorizontalAlignment Slideshow::horizontal_alignment() const {
  // @@protoc_insertion_point(field_get:gui.slideshow.Slideshow.horizontal_alignment)
  return _internal_horizontal_alignment();
}
inline void Slideshow::_internal_set_horizontal_alignment(::gui::alignment::HorizontalAlignment value) {
  assert(::gui::alignment::HorizontalAlignment_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  horizontal_alignment_ = value;
}
inline void Slideshow::set_horizontal_alignment(::gui::alignment::HorizontalAlignment value) {
  _internal_set_horizontal_alignment(value);
  // @@protoc_insertion_point(field_set:gui.slideshow.Slideshow.horizontal_alignment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace slideshow
}  // namespace gui

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gui_2fslideshow_2eproto
