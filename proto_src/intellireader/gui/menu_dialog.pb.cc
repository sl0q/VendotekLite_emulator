// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gui/menu_dialog.proto

#include "gui/menu_dialog.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gui_2fmenu_5fdialog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Item_gui_2fmenu_5fdialog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2fmenu_5fdialog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeafItem_gui_2fmenu_5fdialog_2eproto;
namespace gui {
namespace menu_dialog {
class MenuDialogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MenuDialog> _instance;
} _MenuDialog_default_instance_;
class ItemListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ItemList> _instance;
} _ItemList_default_instance_;
class LeafItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeafItem> _instance;
} _LeafItem_default_instance_;
class ItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Item> _instance;
  const ::gui::menu_dialog::LeafItem* leaf_item_;
  const ::gui::menu_dialog::ItemList* submenu_;
} _Item_default_instance_;
class SelectedItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectedItem> _instance;
} _SelectedItem_default_instance_;
}  // namespace menu_dialog
}  // namespace gui
static void InitDefaultsscc_info_Item_gui_2fmenu_5fdialog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gui::menu_dialog::_ItemList_default_instance_;
    new (ptr) ::gui::menu_dialog::ItemList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::gui::menu_dialog::_Item_default_instance_;
    new (ptr) ::gui::menu_dialog::Item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gui::menu_dialog::ItemList::InitAsDefaultInstance();
  ::gui::menu_dialog::Item::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Item_gui_2fmenu_5fdialog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Item_gui_2fmenu_5fdialog_2eproto}, {
      &scc_info_LeafItem_gui_2fmenu_5fdialog_2eproto.base,}};

static void InitDefaultsscc_info_LeafItem_gui_2fmenu_5fdialog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gui::menu_dialog::_LeafItem_default_instance_;
    new (ptr) ::gui::menu_dialog::LeafItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gui::menu_dialog::LeafItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeafItem_gui_2fmenu_5fdialog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeafItem_gui_2fmenu_5fdialog_2eproto}, {}};

static void InitDefaultsscc_info_MenuDialog_gui_2fmenu_5fdialog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gui::menu_dialog::_MenuDialog_default_instance_;
    new (ptr) ::gui::menu_dialog::MenuDialog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gui::menu_dialog::MenuDialog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MenuDialog_gui_2fmenu_5fdialog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MenuDialog_gui_2fmenu_5fdialog_2eproto}, {
      &scc_info_Item_gui_2fmenu_5fdialog_2eproto.base,}};

static void InitDefaultsscc_info_SelectedItem_gui_2fmenu_5fdialog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gui::menu_dialog::_SelectedItem_default_instance_;
    new (ptr) ::gui::menu_dialog::SelectedItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gui::menu_dialog::SelectedItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectedItem_gui_2fmenu_5fdialog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelectedItem_gui_2fmenu_5fdialog_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gui_2fmenu_5fdialog_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gui_2fmenu_5fdialog_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gui_2fmenu_5fdialog_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gui_2fmenu_5fdialog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::MenuDialog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::MenuDialog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::MenuDialog, caption_),
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::MenuDialog, item_list_),
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::MenuDialog, timeout_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::ItemList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::ItemList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::ItemList, items_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::LeafItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::LeafItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::LeafItem, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::Item, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::Item, text_),
  offsetof(::gui::menu_dialog::ItemDefaultTypeInternal, leaf_item_),
  offsetof(::gui::menu_dialog::ItemDefaultTypeInternal, submenu_),
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::Item, item_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::SelectedItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::SelectedItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gui::menu_dialog::SelectedItem, id_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::gui::menu_dialog::MenuDialog)},
  { 11, 17, sizeof(::gui::menu_dialog::ItemList)},
  { 18, 24, sizeof(::gui::menu_dialog::LeafItem)},
  { 25, 34, sizeof(::gui::menu_dialog::Item)},
  { 37, 43, sizeof(::gui::menu_dialog::SelectedItem)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gui::menu_dialog::_MenuDialog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gui::menu_dialog::_ItemList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gui::menu_dialog::_LeafItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gui::menu_dialog::_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gui::menu_dialog::_SelectedItem_default_instance_),
};

const char descriptor_table_protodef_gui_2fmenu_5fdialog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025gui/menu_dialog.proto\022\017gui.menu_dialog"
  "\"\\\n\nMenuDialog\022\017\n\007caption\030\001 \002(\t\022,\n\titem_"
  "list\030\002 \002(\0132\031.gui.menu_dialog.ItemList\022\017\n"
  "\007timeout\030\003 \001(\r\"0\n\010ItemList\022$\n\005items\030\001 \003("
  "\0132\025.gui.menu_dialog.Item\"\026\n\010LeafItem\022\n\n\002"
  "id\030\001 \002(\r\"z\n\004Item\022\014\n\004text\030\001 \002(\t\022.\n\tleaf_i"
  "tem\030\002 \001(\0132\031.gui.menu_dialog.LeafItemH\000\022,"
  "\n\007submenu\030\003 \001(\0132\031.gui.menu_dialog.ItemLi"
  "stH\000B\006\n\004item\"\032\n\014SelectedItem\022\n\n\002id\030\001 \002(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gui_2fmenu_5fdialog_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gui_2fmenu_5fdialog_2eproto_sccs[4] = {
  &scc_info_Item_gui_2fmenu_5fdialog_2eproto.base,
  &scc_info_LeafItem_gui_2fmenu_5fdialog_2eproto.base,
  &scc_info_MenuDialog_gui_2fmenu_5fdialog_2eproto.base,
  &scc_info_SelectedItem_gui_2fmenu_5fdialog_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gui_2fmenu_5fdialog_2eproto_once;
static bool descriptor_table_gui_2fmenu_5fdialog_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gui_2fmenu_5fdialog_2eproto = {
  &descriptor_table_gui_2fmenu_5fdialog_2eproto_initialized, descriptor_table_protodef_gui_2fmenu_5fdialog_2eproto, "gui/menu_dialog.proto", 360,
  &descriptor_table_gui_2fmenu_5fdialog_2eproto_once, descriptor_table_gui_2fmenu_5fdialog_2eproto_sccs, descriptor_table_gui_2fmenu_5fdialog_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_gui_2fmenu_5fdialog_2eproto::offsets,
  file_level_metadata_gui_2fmenu_5fdialog_2eproto, 5, file_level_enum_descriptors_gui_2fmenu_5fdialog_2eproto, file_level_service_descriptors_gui_2fmenu_5fdialog_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gui_2fmenu_5fdialog_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gui_2fmenu_5fdialog_2eproto), true);
namespace gui {
namespace menu_dialog {

// ===================================================================

void MenuDialog::InitAsDefaultInstance() {
  ::gui::menu_dialog::_MenuDialog_default_instance_._instance.get_mutable()->item_list_ = const_cast< ::gui::menu_dialog::ItemList*>(
      ::gui::menu_dialog::ItemList::internal_default_instance());
}
class MenuDialog::_Internal {
 public:
  using HasBits = decltype(std::declval<MenuDialog>()._has_bits_);
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gui::menu_dialog::ItemList& item_list(const MenuDialog* msg);
  static void set_has_item_list(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::gui::menu_dialog::ItemList&
MenuDialog::_Internal::item_list(const MenuDialog* msg) {
  return *msg->item_list_;
}
MenuDialog::MenuDialog()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gui.menu_dialog.MenuDialog)
}
MenuDialog::MenuDialog(const MenuDialog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_caption()) {
    caption_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.caption_);
  }
  if (from._internal_has_item_list()) {
    item_list_ = new ::gui::menu_dialog::ItemList(*from.item_list_);
  } else {
    item_list_ = nullptr;
  }
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:gui.menu_dialog.MenuDialog)
}

void MenuDialog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MenuDialog_gui_2fmenu_5fdialog_2eproto.base);
  caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&item_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&item_list_)) + sizeof(timeout_));
}

MenuDialog::~MenuDialog() {
  // @@protoc_insertion_point(destructor:gui.menu_dialog.MenuDialog)
  SharedDtor();
}

void MenuDialog::SharedDtor() {
  caption_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete item_list_;
}

void MenuDialog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MenuDialog& MenuDialog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MenuDialog_gui_2fmenu_5fdialog_2eproto.base);
  return *internal_default_instance();
}


void MenuDialog::Clear() {
// @@protoc_insertion_point(message_clear_start:gui.menu_dialog.MenuDialog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      caption_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(item_list_ != nullptr);
      item_list_->Clear();
    }
  }
  timeout_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MenuDialog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string caption = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_caption();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gui.menu_dialog.MenuDialog.caption");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gui.menu_dialog.ItemList item_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MenuDialog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gui.menu_dialog.MenuDialog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string caption = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gui.menu_dialog.MenuDialog.caption");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_caption(), target);
  }

  // required .gui.menu_dialog.ItemList item_list = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::item_list(this), target, stream);
  }

  // optional uint32 timeout = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gui.menu_dialog.MenuDialog)
  return target;
}

size_t MenuDialog::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gui.menu_dialog.MenuDialog)
  size_t total_size = 0;

  if (_internal_has_caption()) {
    // required string caption = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caption());
  }

  if (_internal_has_item_list()) {
    // required .gui.menu_dialog.ItemList item_list = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_list_);
  }

  return total_size;
}
size_t MenuDialog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gui.menu_dialog.MenuDialog)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string caption = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caption());

    // required .gui.menu_dialog.ItemList item_list = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_list_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 timeout = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MenuDialog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gui.menu_dialog.MenuDialog)
  GOOGLE_DCHECK_NE(&from, this);
  const MenuDialog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MenuDialog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gui.menu_dialog.MenuDialog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gui.menu_dialog.MenuDialog)
    MergeFrom(*source);
  }
}

void MenuDialog::MergeFrom(const MenuDialog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gui.menu_dialog.MenuDialog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      caption_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.caption_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_item_list()->::gui::menu_dialog::ItemList::MergeFrom(from._internal_item_list());
    }
    if (cached_has_bits & 0x00000004u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MenuDialog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gui.menu_dialog.MenuDialog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MenuDialog::CopyFrom(const MenuDialog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gui.menu_dialog.MenuDialog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenuDialog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_item_list()) {
    if (!item_list_->IsInitialized()) return false;
  }
  return true;
}

void MenuDialog::InternalSwap(MenuDialog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  caption_.Swap(&other->caption_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(item_list_, other->item_list_);
  swap(timeout_, other->timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MenuDialog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ItemList::InitAsDefaultInstance() {
}
class ItemList::_Internal {
 public:
  using HasBits = decltype(std::declval<ItemList>()._has_bits_);
};

ItemList::ItemList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gui.menu_dialog.ItemList)
}
ItemList::ItemList(const ItemList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gui.menu_dialog.ItemList)
}

void ItemList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Item_gui_2fmenu_5fdialog_2eproto.base);
}

ItemList::~ItemList() {
  // @@protoc_insertion_point(destructor:gui.menu_dialog.ItemList)
  SharedDtor();
}

void ItemList::SharedDtor() {
}

void ItemList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ItemList& ItemList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Item_gui_2fmenu_5fdialog_2eproto.base);
  return *internal_default_instance();
}


void ItemList::Clear() {
// @@protoc_insertion_point(message_clear_start:gui.menu_dialog.ItemList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ItemList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gui.menu_dialog.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ItemList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gui.menu_dialog.ItemList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gui.menu_dialog.Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gui.menu_dialog.ItemList)
  return target;
}

size_t ItemList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gui.menu_dialog.ItemList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gui.menu_dialog.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gui.menu_dialog.ItemList)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ItemList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gui.menu_dialog.ItemList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gui.menu_dialog.ItemList)
    MergeFrom(*source);
  }
}

void ItemList::MergeFrom(const ItemList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gui.menu_dialog.ItemList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void ItemList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gui.menu_dialog.ItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemList::CopyFrom(const ItemList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gui.menu_dialog.ItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(items_)) return false;
  return true;
}

void ItemList::InternalSwap(ItemList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeafItem::InitAsDefaultInstance() {
}
class LeafItem::_Internal {
 public:
  using HasBits = decltype(std::declval<LeafItem>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LeafItem::LeafItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gui.menu_dialog.LeafItem)
}
LeafItem::LeafItem(const LeafItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:gui.menu_dialog.LeafItem)
}

void LeafItem::SharedCtor() {
  id_ = 0u;
}

LeafItem::~LeafItem() {
  // @@protoc_insertion_point(destructor:gui.menu_dialog.LeafItem)
  SharedDtor();
}

void LeafItem::SharedDtor() {
}

void LeafItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeafItem& LeafItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeafItem_gui_2fmenu_5fdialog_2eproto.base);
  return *internal_default_instance();
}


void LeafItem::Clear() {
// @@protoc_insertion_point(message_clear_start:gui.menu_dialog.LeafItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LeafItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeafItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gui.menu_dialog.LeafItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gui.menu_dialog.LeafItem)
  return target;
}

size_t LeafItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gui.menu_dialog.LeafItem)
  size_t total_size = 0;

  // required uint32 id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeafItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gui.menu_dialog.LeafItem)
  GOOGLE_DCHECK_NE(&from, this);
  const LeafItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeafItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gui.menu_dialog.LeafItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gui.menu_dialog.LeafItem)
    MergeFrom(*source);
  }
}

void LeafItem::MergeFrom(const LeafItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gui.menu_dialog.LeafItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void LeafItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gui.menu_dialog.LeafItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeafItem::CopyFrom(const LeafItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gui.menu_dialog.LeafItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeafItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LeafItem::InternalSwap(LeafItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeafItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Item::InitAsDefaultInstance() {
  ::gui::menu_dialog::_Item_default_instance_.leaf_item_ = const_cast< ::gui::menu_dialog::LeafItem*>(
      ::gui::menu_dialog::LeafItem::internal_default_instance());
  ::gui::menu_dialog::_Item_default_instance_.submenu_ = const_cast< ::gui::menu_dialog::ItemList*>(
      ::gui::menu_dialog::ItemList::internal_default_instance());
}
class Item::_Internal {
 public:
  using HasBits = decltype(std::declval<Item>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gui::menu_dialog::LeafItem& leaf_item(const Item* msg);
  static const ::gui::menu_dialog::ItemList& submenu(const Item* msg);
};

const ::gui::menu_dialog::LeafItem&
Item::_Internal::leaf_item(const Item* msg) {
  return *msg->item_.leaf_item_;
}
const ::gui::menu_dialog::ItemList&
Item::_Internal::submenu(const Item* msg) {
  return *msg->item_.submenu_;
}
void Item::set_allocated_leaf_item(::gui::menu_dialog::LeafItem* leaf_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_item();
  if (leaf_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leaf_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaf_item, submessage_arena);
    }
    set_has_leaf_item();
    item_.leaf_item_ = leaf_item;
  }
  // @@protoc_insertion_point(field_set_allocated:gui.menu_dialog.Item.leaf_item)
}
void Item::set_allocated_submenu(::gui::menu_dialog::ItemList* submenu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_item();
  if (submenu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      submenu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submenu, submessage_arena);
    }
    set_has_submenu();
    item_.submenu_ = submenu;
  }
  // @@protoc_insertion_point(field_set_allocated:gui.menu_dialog.Item.submenu)
}
Item::Item()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gui.menu_dialog.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  clear_has_item();
  switch (from.item_case()) {
    case kLeafItem: {
      _internal_mutable_leaf_item()->::gui::menu_dialog::LeafItem::MergeFrom(from._internal_leaf_item());
      break;
    }
    case kSubmenu: {
      _internal_mutable_submenu()->::gui::menu_dialog::ItemList::MergeFrom(from._internal_submenu());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gui.menu_dialog.Item)
}

void Item::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Item_gui_2fmenu_5fdialog_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_item();
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:gui.menu_dialog.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_item()) {
    clear_item();
  }
}

void Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Item& Item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Item_gui_2fmenu_5fdialog_2eproto.base);
  return *internal_default_instance();
}


void Item::clear_item() {
// @@protoc_insertion_point(one_of_clear_start:gui.menu_dialog.Item)
  switch (item_case()) {
    case kLeafItem: {
      delete item_.leaf_item_;
      break;
    }
    case kSubmenu: {
      delete item_.submenu_;
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ITEM_NOT_SET;
}


void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:gui.menu_dialog.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  clear_item();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gui.menu_dialog.Item.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.menu_dialog.LeafItem leaf_item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaf_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.menu_dialog.ItemList submenu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_submenu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gui.menu_dialog.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gui.menu_dialog.Item.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  switch (item_case()) {
    case kLeafItem: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::leaf_item(this), target, stream);
      break;
    }
    case kSubmenu: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::submenu(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gui.menu_dialog.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gui.menu_dialog.Item)
  size_t total_size = 0;

  // required string text = 1;
  if (_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (item_case()) {
    // optional .gui.menu_dialog.LeafItem leaf_item = 2;
    case kLeafItem: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.leaf_item_);
      break;
    }
    // optional .gui.menu_dialog.ItemList submenu = 3;
    case kSubmenu: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_.submenu_);
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gui.menu_dialog.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gui.menu_dialog.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gui.menu_dialog.Item)
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gui.menu_dialog.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _has_bits_[0] |= 0x00000001u;
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  switch (from.item_case()) {
    case kLeafItem: {
      _internal_mutable_leaf_item()->::gui::menu_dialog::LeafItem::MergeFrom(from._internal_leaf_item());
      break;
    }
    case kSubmenu: {
      _internal_mutable_submenu()->::gui::menu_dialog::ItemList::MergeFrom(from._internal_submenu());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
}

void Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gui.menu_dialog.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gui.menu_dialog.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (item_case()) {
    case kLeafItem: {
      if (has_leaf_item()) {
        if (!this->leaf_item().IsInitialized()) return false;
      }
      break;
    }
    case kSubmenu: {
      if (has_submenu()) {
        if (!this->submenu().IsInitialized()) return false;
      }
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(item_, other->item_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelectedItem::InitAsDefaultInstance() {
}
class SelectedItem::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectedItem>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SelectedItem::SelectedItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gui.menu_dialog.SelectedItem)
}
SelectedItem::SelectedItem(const SelectedItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:gui.menu_dialog.SelectedItem)
}

void SelectedItem::SharedCtor() {
  id_ = 0u;
}

SelectedItem::~SelectedItem() {
  // @@protoc_insertion_point(destructor:gui.menu_dialog.SelectedItem)
  SharedDtor();
}

void SelectedItem::SharedDtor() {
}

void SelectedItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectedItem& SelectedItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectedItem_gui_2fmenu_5fdialog_2eproto.base);
  return *internal_default_instance();
}


void SelectedItem::Clear() {
// @@protoc_insertion_point(message_clear_start:gui.menu_dialog.SelectedItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SelectedItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectedItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gui.menu_dialog.SelectedItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gui.menu_dialog.SelectedItem)
  return target;
}

size_t SelectedItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gui.menu_dialog.SelectedItem)
  size_t total_size = 0;

  // required uint32 id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectedItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gui.menu_dialog.SelectedItem)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectedItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectedItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gui.menu_dialog.SelectedItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gui.menu_dialog.SelectedItem)
    MergeFrom(*source);
  }
}

void SelectedItem::MergeFrom(const SelectedItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gui.menu_dialog.SelectedItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void SelectedItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gui.menu_dialog.SelectedItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectedItem::CopyFrom(const SelectedItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gui.menu_dialog.SelectedItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectedItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SelectedItem::InternalSwap(SelectedItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectedItem::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace menu_dialog
}  // namespace gui
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gui::menu_dialog::MenuDialog* Arena::CreateMaybeMessage< ::gui::menu_dialog::MenuDialog >(Arena* arena) {
  return Arena::CreateInternal< ::gui::menu_dialog::MenuDialog >(arena);
}
template<> PROTOBUF_NOINLINE ::gui::menu_dialog::ItemList* Arena::CreateMaybeMessage< ::gui::menu_dialog::ItemList >(Arena* arena) {
  return Arena::CreateInternal< ::gui::menu_dialog::ItemList >(arena);
}
template<> PROTOBUF_NOINLINE ::gui::menu_dialog::LeafItem* Arena::CreateMaybeMessage< ::gui::menu_dialog::LeafItem >(Arena* arena) {
  return Arena::CreateInternal< ::gui::menu_dialog::LeafItem >(arena);
}
template<> PROTOBUF_NOINLINE ::gui::menu_dialog::Item* Arena::CreateMaybeMessage< ::gui::menu_dialog::Item >(Arena* arena) {
  return Arena::CreateInternal< ::gui::menu_dialog::Item >(arena);
}
template<> PROTOBUF_NOINLINE ::gui::menu_dialog::SelectedItem* Arena::CreateMaybeMessage< ::gui::menu_dialog::SelectedItem >(Arena* arena) {
  return Arena::CreateInternal< ::gui::menu_dialog::SelectedItem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
