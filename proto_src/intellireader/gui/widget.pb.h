// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gui/widget.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gui_2fwidget_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gui_2fwidget_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gui/alignment.pb.h"
#include "gui/background.pb.h"
#include "gui/border.pb.h"
#include "gui/font.pb.h"
#include "gui/foreground.pb.h"
#include "gui/picture_id.pb.h"
#include "gui/text_id.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gui_2fwidget_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gui_2fwidget_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gui_2fwidget_2eproto;
namespace gui {
namespace widget {
class CustomerPicture;
class CustomerPictureDefaultTypeInternal;
extern CustomerPictureDefaultTypeInternal _CustomerPicture_default_instance_;
class GeneratedText;
class GeneratedTextDefaultTypeInternal;
extern GeneratedTextDefaultTypeInternal _GeneratedText_default_instance_;
class HorizontalLayout;
class HorizontalLayoutDefaultTypeInternal;
extern HorizontalLayoutDefaultTypeInternal _HorizontalLayout_default_instance_;
class Picture;
class PictureDefaultTypeInternal;
extern PictureDefaultTypeInternal _Picture_default_instance_;
class QrCode;
class QrCodeDefaultTypeInternal;
extern QrCodeDefaultTypeInternal _QrCode_default_instance_;
class Text;
class TextDefaultTypeInternal;
extern TextDefaultTypeInternal _Text_default_instance_;
class VerticalLayout;
class VerticalLayoutDefaultTypeInternal;
extern VerticalLayoutDefaultTypeInternal _VerticalLayout_default_instance_;
class Widget;
class WidgetDefaultTypeInternal;
extern WidgetDefaultTypeInternal _Widget_default_instance_;
}  // namespace widget
}  // namespace gui
PROTOBUF_NAMESPACE_OPEN
template<> ::gui::widget::CustomerPicture* Arena::CreateMaybeMessage<::gui::widget::CustomerPicture>(Arena*);
template<> ::gui::widget::GeneratedText* Arena::CreateMaybeMessage<::gui::widget::GeneratedText>(Arena*);
template<> ::gui::widget::HorizontalLayout* Arena::CreateMaybeMessage<::gui::widget::HorizontalLayout>(Arena*);
template<> ::gui::widget::Picture* Arena::CreateMaybeMessage<::gui::widget::Picture>(Arena*);
template<> ::gui::widget::QrCode* Arena::CreateMaybeMessage<::gui::widget::QrCode>(Arena*);
template<> ::gui::widget::Text* Arena::CreateMaybeMessage<::gui::widget::Text>(Arena*);
template<> ::gui::widget::VerticalLayout* Arena::CreateMaybeMessage<::gui::widget::VerticalLayout>(Arena*);
template<> ::gui::widget::Widget* Arena::CreateMaybeMessage<::gui::widget::Widget>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gui {
namespace widget {

// ===================================================================

class Widget :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.widget.Widget) */ {
 public:
  Widget();
  virtual ~Widget();

  Widget(const Widget& from);
  Widget(Widget&& from) noexcept
    : Widget() {
    *this = ::std::move(from);
  }

  inline Widget& operator=(const Widget& from) {
    CopyFrom(from);
    return *this;
  }
  inline Widget& operator=(Widget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Widget& default_instance();

  enum WidgetCase {
    kVerticalLayout = 1,
    kHorizontalLayout = 2,
    kText = 3,
    kPicture = 4,
    kQrCode = 5,
    kCustomerPicture = 6,
    kGeneratedText = 7,
    WIDGET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Widget* internal_default_instance() {
    return reinterpret_cast<const Widget*>(
               &_Widget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Widget& a, Widget& b) {
    a.Swap(&b);
  }
  inline void Swap(Widget* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Widget* New() const final {
    return CreateMaybeMessage<Widget>(nullptr);
  }

  Widget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Widget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Widget& from);
  void MergeFrom(const Widget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Widget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.widget.Widget";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2fwidget_2eproto);
    return ::descriptor_table_gui_2fwidget_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticalLayoutFieldNumber = 1,
    kHorizontalLayoutFieldNumber = 2,
    kTextFieldNumber = 3,
    kPictureFieldNumber = 4,
    kQrCodeFieldNumber = 5,
    kCustomerPictureFieldNumber = 6,
    kGeneratedTextFieldNumber = 7,
  };
  // optional .gui.widget.VerticalLayout vertical_layout = 1;
  bool has_vertical_layout() const;
  private:
  bool _internal_has_vertical_layout() const;
  public:
  void clear_vertical_layout();
  const ::gui::widget::VerticalLayout& vertical_layout() const;
  ::gui::widget::VerticalLayout* release_vertical_layout();
  ::gui::widget::VerticalLayout* mutable_vertical_layout();
  void set_allocated_vertical_layout(::gui::widget::VerticalLayout* vertical_layout);
  private:
  const ::gui::widget::VerticalLayout& _internal_vertical_layout() const;
  ::gui::widget::VerticalLayout* _internal_mutable_vertical_layout();
  public:

  // optional .gui.widget.HorizontalLayout horizontal_layout = 2;
  bool has_horizontal_layout() const;
  private:
  bool _internal_has_horizontal_layout() const;
  public:
  void clear_horizontal_layout();
  const ::gui::widget::HorizontalLayout& horizontal_layout() const;
  ::gui::widget::HorizontalLayout* release_horizontal_layout();
  ::gui::widget::HorizontalLayout* mutable_horizontal_layout();
  void set_allocated_horizontal_layout(::gui::widget::HorizontalLayout* horizontal_layout);
  private:
  const ::gui::widget::HorizontalLayout& _internal_horizontal_layout() const;
  ::gui::widget::HorizontalLayout* _internal_mutable_horizontal_layout();
  public:

  // optional .gui.widget.Text text = 3;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::gui::widget::Text& text() const;
  ::gui::widget::Text* release_text();
  ::gui::widget::Text* mutable_text();
  void set_allocated_text(::gui::widget::Text* text);
  private:
  const ::gui::widget::Text& _internal_text() const;
  ::gui::widget::Text* _internal_mutable_text();
  public:

  // optional .gui.widget.Picture picture = 4;
  bool has_picture() const;
  private:
  bool _internal_has_picture() const;
  public:
  void clear_picture();
  const ::gui::widget::Picture& picture() const;
  ::gui::widget::Picture* release_picture();
  ::gui::widget::Picture* mutable_picture();
  void set_allocated_picture(::gui::widget::Picture* picture);
  private:
  const ::gui::widget::Picture& _internal_picture() const;
  ::gui::widget::Picture* _internal_mutable_picture();
  public:

  // optional .gui.widget.QrCode qr_code = 5;
  bool has_qr_code() const;
  private:
  bool _internal_has_qr_code() const;
  public:
  void clear_qr_code();
  const ::gui::widget::QrCode& qr_code() const;
  ::gui::widget::QrCode* release_qr_code();
  ::gui::widget::QrCode* mutable_qr_code();
  void set_allocated_qr_code(::gui::widget::QrCode* qr_code);
  private:
  const ::gui::widget::QrCode& _internal_qr_code() const;
  ::gui::widget::QrCode* _internal_mutable_qr_code();
  public:

  // optional .gui.widget.CustomerPicture customer_picture = 6;
  bool has_customer_picture() const;
  private:
  bool _internal_has_customer_picture() const;
  public:
  void clear_customer_picture();
  const ::gui::widget::CustomerPicture& customer_picture() const;
  ::gui::widget::CustomerPicture* release_customer_picture();
  ::gui::widget::CustomerPicture* mutable_customer_picture();
  void set_allocated_customer_picture(::gui::widget::CustomerPicture* customer_picture);
  private:
  const ::gui::widget::CustomerPicture& _internal_customer_picture() const;
  ::gui::widget::CustomerPicture* _internal_mutable_customer_picture();
  public:

  // optional .gui.widget.GeneratedText generated_text = 7;
  bool has_generated_text() const;
  private:
  bool _internal_has_generated_text() const;
  public:
  void clear_generated_text();
  const ::gui::widget::GeneratedText& generated_text() const;
  ::gui::widget::GeneratedText* release_generated_text();
  ::gui::widget::GeneratedText* mutable_generated_text();
  void set_allocated_generated_text(::gui::widget::GeneratedText* generated_text);
  private:
  const ::gui::widget::GeneratedText& _internal_generated_text() const;
  ::gui::widget::GeneratedText* _internal_mutable_generated_text();
  public:

  void clear_widget();
  WidgetCase widget_case() const;
  // @@protoc_insertion_point(class_scope:gui.widget.Widget)
 private:
  class _Internal;
  void set_has_vertical_layout();
  void set_has_horizontal_layout();
  void set_has_text();
  void set_has_picture();
  void set_has_qr_code();
  void set_has_customer_picture();
  void set_has_generated_text();

  inline bool has_widget() const;
  inline void clear_has_widget();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union WidgetUnion {
    WidgetUnion() {}
    ::gui::widget::VerticalLayout* vertical_layout_;
    ::gui::widget::HorizontalLayout* horizontal_layout_;
    ::gui::widget::Text* text_;
    ::gui::widget::Picture* picture_;
    ::gui::widget::QrCode* qr_code_;
    ::gui::widget::CustomerPicture* customer_picture_;
    ::gui::widget::GeneratedText* generated_text_;
  } widget_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_gui_2fwidget_2eproto;
};
// -------------------------------------------------------------------

class VerticalLayout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.widget.VerticalLayout) */ {
 public:
  VerticalLayout();
  virtual ~VerticalLayout();

  VerticalLayout(const VerticalLayout& from);
  VerticalLayout(VerticalLayout&& from) noexcept
    : VerticalLayout() {
    *this = ::std::move(from);
  }

  inline VerticalLayout& operator=(const VerticalLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerticalLayout& operator=(VerticalLayout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerticalLayout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerticalLayout* internal_default_instance() {
    return reinterpret_cast<const VerticalLayout*>(
               &_VerticalLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VerticalLayout& a, VerticalLayout& b) {
    a.Swap(&b);
  }
  inline void Swap(VerticalLayout* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerticalLayout* New() const final {
    return CreateMaybeMessage<VerticalLayout>(nullptr);
  }

  VerticalLayout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerticalLayout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerticalLayout& from);
  void MergeFrom(const VerticalLayout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerticalLayout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.widget.VerticalLayout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2fwidget_2eproto);
    return ::descriptor_table_gui_2fwidget_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidgetsFieldNumber = 1,
  };
  // repeated .gui.widget.Widget widgets = 1;
  int widgets_size() const;
  private:
  int _internal_widgets_size() const;
  public:
  void clear_widgets();
  ::gui::widget::Widget* mutable_widgets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gui::widget::Widget >*
      mutable_widgets();
  private:
  const ::gui::widget::Widget& _internal_widgets(int index) const;
  ::gui::widget::Widget* _internal_add_widgets();
  public:
  const ::gui::widget::Widget& widgets(int index) const;
  ::gui::widget::Widget* add_widgets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gui::widget::Widget >&
      widgets() const;

  // @@protoc_insertion_point(class_scope:gui.widget.VerticalLayout)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gui::widget::Widget > widgets_;
  friend struct ::TableStruct_gui_2fwidget_2eproto;
};
// -------------------------------------------------------------------

class HorizontalLayout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.widget.HorizontalLayout) */ {
 public:
  HorizontalLayout();
  virtual ~HorizontalLayout();

  HorizontalLayout(const HorizontalLayout& from);
  HorizontalLayout(HorizontalLayout&& from) noexcept
    : HorizontalLayout() {
    *this = ::std::move(from);
  }

  inline HorizontalLayout& operator=(const HorizontalLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline HorizontalLayout& operator=(HorizontalLayout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HorizontalLayout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HorizontalLayout* internal_default_instance() {
    return reinterpret_cast<const HorizontalLayout*>(
               &_HorizontalLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HorizontalLayout& a, HorizontalLayout& b) {
    a.Swap(&b);
  }
  inline void Swap(HorizontalLayout* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HorizontalLayout* New() const final {
    return CreateMaybeMessage<HorizontalLayout>(nullptr);
  }

  HorizontalLayout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HorizontalLayout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HorizontalLayout& from);
  void MergeFrom(const HorizontalLayout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HorizontalLayout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.widget.HorizontalLayout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2fwidget_2eproto);
    return ::descriptor_table_gui_2fwidget_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidgetsFieldNumber = 1,
  };
  // repeated .gui.widget.Widget widgets = 1;
  int widgets_size() const;
  private:
  int _internal_widgets_size() const;
  public:
  void clear_widgets();
  ::gui::widget::Widget* mutable_widgets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gui::widget::Widget >*
      mutable_widgets();
  private:
  const ::gui::widget::Widget& _internal_widgets(int index) const;
  ::gui::widget::Widget* _internal_add_widgets();
  public:
  const ::gui::widget::Widget& widgets(int index) const;
  ::gui::widget::Widget* add_widgets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gui::widget::Widget >&
      widgets() const;

  // @@protoc_insertion_point(class_scope:gui.widget.HorizontalLayout)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gui::widget::Widget > widgets_;
  friend struct ::TableStruct_gui_2fwidget_2eproto;
};
// -------------------------------------------------------------------

class Text :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.widget.Text) */ {
 public:
  Text();
  virtual ~Text();

  Text(const Text& from);
  Text(Text&& from) noexcept
    : Text() {
    *this = ::std::move(from);
  }

  inline Text& operator=(const Text& from) {
    CopyFrom(from);
    return *this;
  }
  inline Text& operator=(Text&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Text& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Text* internal_default_instance() {
    return reinterpret_cast<const Text*>(
               &_Text_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Text& a, Text& b) {
    a.Swap(&b);
  }
  inline void Swap(Text* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Text* New() const final {
    return CreateMaybeMessage<Text>(nullptr);
  }

  Text* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Text>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Text& from);
  void MergeFrom(const Text& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Text* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.widget.Text";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2fwidget_2eproto);
    return ::descriptor_table_gui_2fwidget_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kBackgroundFieldNumber = 4,
    kForegroundFieldNumber = 5,
    kBorderFieldNumber = 8,
    kVerticalAlignmentFieldNumber = 2,
    kHorizontalAlignmentFieldNumber = 3,
    kFontFieldNumber = 6,
    kButtonIdFieldNumber = 7,
  };
  // required string text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional .gui.background.Background background = 4;
  bool has_background() const;
  private:
  bool _internal_has_background() const;
  public:
  void clear_background();
  const ::gui::background::Background& background() const;
  ::gui::background::Background* release_background();
  ::gui::background::Background* mutable_background();
  void set_allocated_background(::gui::background::Background* background);
  private:
  const ::gui::background::Background& _internal_background() const;
  ::gui::background::Background* _internal_mutable_background();
  public:

  // optional .gui.foreground.Foreground foreground = 5;
  bool has_foreground() const;
  private:
  bool _internal_has_foreground() const;
  public:
  void clear_foreground();
  const ::gui::foreground::Foreground& foreground() const;
  ::gui::foreground::Foreground* release_foreground();
  ::gui::foreground::Foreground* mutable_foreground();
  void set_allocated_foreground(::gui::foreground::Foreground* foreground);
  private:
  const ::gui::foreground::Foreground& _internal_foreground() const;
  ::gui::foreground::Foreground* _internal_mutable_foreground();
  public:

  // optional .gui.border.Border border = 8;
  bool has_border() const;
  private:
  bool _internal_has_border() const;
  public:
  void clear_border();
  const ::gui::border::Border& border() const;
  ::gui::border::Border* release_border();
  ::gui::border::Border* mutable_border();
  void set_allocated_border(::gui::border::Border* border);
  private:
  const ::gui::border::Border& _internal_border() const;
  ::gui::border::Border* _internal_mutable_border();
  public:

  // optional .gui.alignment.VerticalAlignment vertical_alignment = 2 [default = CENTER_VERTICALLY];
  bool has_vertical_alignment() const;
  private:
  bool _internal_has_vertical_alignment() const;
  public:
  void clear_vertical_alignment();
  ::gui::alignment::VerticalAlignment vertical_alignment() const;
  void set_vertical_alignment(::gui::alignment::VerticalAlignment value);
  private:
  ::gui::alignment::VerticalAlignment _internal_vertical_alignment() const;
  void _internal_set_vertical_alignment(::gui::alignment::VerticalAlignment value);
  public:

  // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 3 [default = CENTER_HORIZONTALLY];
  bool has_horizontal_alignment() const;
  private:
  bool _internal_has_horizontal_alignment() const;
  public:
  void clear_horizontal_alignment();
  ::gui::alignment::HorizontalAlignment horizontal_alignment() const;
  void set_horizontal_alignment(::gui::alignment::HorizontalAlignment value);
  private:
  ::gui::alignment::HorizontalAlignment _internal_horizontal_alignment() const;
  void _internal_set_horizontal_alignment(::gui::alignment::HorizontalAlignment value);
  public:

  // optional .gui.font.Font font = 6 [default = REGULAR_FONT];
  bool has_font() const;
  private:
  bool _internal_has_font() const;
  public:
  void clear_font();
  ::gui::font::Font font() const;
  void set_font(::gui::font::Font value);
  private:
  ::gui::font::Font _internal_font() const;
  void _internal_set_font(::gui::font::Font value);
  public:

  // optional uint32 button_id = 7;
  bool has_button_id() const;
  private:
  bool _internal_has_button_id() const;
  public:
  void clear_button_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 button_id() const;
  void set_button_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_button_id() const;
  void _internal_set_button_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gui.widget.Text)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::gui::background::Background* background_;
  ::gui::foreground::Foreground* foreground_;
  ::gui::border::Border* border_;
  int vertical_alignment_;
  int horizontal_alignment_;
  int font_;
  ::PROTOBUF_NAMESPACE_ID::uint32 button_id_;
  friend struct ::TableStruct_gui_2fwidget_2eproto;
};
// -------------------------------------------------------------------

class Picture :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.widget.Picture) */ {
 public:
  Picture();
  virtual ~Picture();

  Picture(const Picture& from);
  Picture(Picture&& from) noexcept
    : Picture() {
    *this = ::std::move(from);
  }

  inline Picture& operator=(const Picture& from) {
    CopyFrom(from);
    return *this;
  }
  inline Picture& operator=(Picture&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Picture& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Picture* internal_default_instance() {
    return reinterpret_cast<const Picture*>(
               &_Picture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Picture& a, Picture& b) {
    a.Swap(&b);
  }
  inline void Swap(Picture* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Picture* New() const final {
    return CreateMaybeMessage<Picture>(nullptr);
  }

  Picture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Picture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Picture& from);
  void MergeFrom(const Picture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Picture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.widget.Picture";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2fwidget_2eproto);
    return ::descriptor_table_gui_2fwidget_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackgroundFieldNumber = 4,
    kPictureIdFieldNumber = 1,
    kVerticalAlignmentFieldNumber = 2,
    kHorizontalAlignmentFieldNumber = 3,
    kButtonIdFieldNumber = 5,
  };
  // optional .gui.background.Background background = 4;
  bool has_background() const;
  private:
  bool _internal_has_background() const;
  public:
  void clear_background();
  const ::gui::background::Background& background() const;
  ::gui::background::Background* release_background();
  ::gui::background::Background* mutable_background();
  void set_allocated_background(::gui::background::Background* background);
  private:
  const ::gui::background::Background& _internal_background() const;
  ::gui::background::Background* _internal_mutable_background();
  public:

  // required .gui.picture_id.PictureId picture_id = 1;
  bool has_picture_id() const;
  private:
  bool _internal_has_picture_id() const;
  public:
  void clear_picture_id();
  ::gui::picture_id::PictureId picture_id() const;
  void set_picture_id(::gui::picture_id::PictureId value);
  private:
  ::gui::picture_id::PictureId _internal_picture_id() const;
  void _internal_set_picture_id(::gui::picture_id::PictureId value);
  public:

  // optional .gui.alignment.VerticalAlignment vertical_alignment = 2 [default = CENTER_VERTICALLY];
  bool has_vertical_alignment() const;
  private:
  bool _internal_has_vertical_alignment() const;
  public:
  void clear_vertical_alignment();
  ::gui::alignment::VerticalAlignment vertical_alignment() const;
  void set_vertical_alignment(::gui::alignment::VerticalAlignment value);
  private:
  ::gui::alignment::VerticalAlignment _internal_vertical_alignment() const;
  void _internal_set_vertical_alignment(::gui::alignment::VerticalAlignment value);
  public:

  // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 3 [default = CENTER_HORIZONTALLY];
  bool has_horizontal_alignment() const;
  private:
  bool _internal_has_horizontal_alignment() const;
  public:
  void clear_horizontal_alignment();
  ::gui::alignment::HorizontalAlignment horizontal_alignment() const;
  void set_horizontal_alignment(::gui::alignment::HorizontalAlignment value);
  private:
  ::gui::alignment::HorizontalAlignment _internal_horizontal_alignment() const;
  void _internal_set_horizontal_alignment(::gui::alignment::HorizontalAlignment value);
  public:

  // optional uint32 button_id = 5;
  bool has_button_id() const;
  private:
  bool _internal_has_button_id() const;
  public:
  void clear_button_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 button_id() const;
  void set_button_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_button_id() const;
  void _internal_set_button_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gui.widget.Picture)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::gui::background::Background* background_;
  int picture_id_;
  int vertical_alignment_;
  int horizontal_alignment_;
  ::PROTOBUF_NAMESPACE_ID::uint32 button_id_;
  friend struct ::TableStruct_gui_2fwidget_2eproto;
};
// -------------------------------------------------------------------

class QrCode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.widget.QrCode) */ {
 public:
  QrCode();
  virtual ~QrCode();

  QrCode(const QrCode& from);
  QrCode(QrCode&& from) noexcept
    : QrCode() {
    *this = ::std::move(from);
  }

  inline QrCode& operator=(const QrCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline QrCode& operator=(QrCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QrCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QrCode* internal_default_instance() {
    return reinterpret_cast<const QrCode*>(
               &_QrCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QrCode& a, QrCode& b) {
    a.Swap(&b);
  }
  inline void Swap(QrCode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QrCode* New() const final {
    return CreateMaybeMessage<QrCode>(nullptr);
  }

  QrCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QrCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QrCode& from);
  void MergeFrom(const QrCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QrCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.widget.QrCode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2fwidget_2eproto);
    return ::descriptor_table_gui_2fwidget_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kModuleDimensionFieldNumber = 2,
    kVerticalAlignmentFieldNumber = 3,
    kHorizontalAlignmentFieldNumber = 4,
  };
  // required bytes text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const void* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional uint32 module_dimension = 2;
  bool has_module_dimension() const;
  private:
  bool _internal_has_module_dimension() const;
  public:
  void clear_module_dimension();
  ::PROTOBUF_NAMESPACE_ID::uint32 module_dimension() const;
  void set_module_dimension(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_module_dimension() const;
  void _internal_set_module_dimension(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .gui.alignment.VerticalAlignment vertical_alignment = 3 [default = CENTER_VERTICALLY];
  bool has_vertical_alignment() const;
  private:
  bool _internal_has_vertical_alignment() const;
  public:
  void clear_vertical_alignment();
  ::gui::alignment::VerticalAlignment vertical_alignment() const;
  void set_vertical_alignment(::gui::alignment::VerticalAlignment value);
  private:
  ::gui::alignment::VerticalAlignment _internal_vertical_alignment() const;
  void _internal_set_vertical_alignment(::gui::alignment::VerticalAlignment value);
  public:

  // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 4 [default = CENTER_HORIZONTALLY];
  bool has_horizontal_alignment() const;
  private:
  bool _internal_has_horizontal_alignment() const;
  public:
  void clear_horizontal_alignment();
  ::gui::alignment::HorizontalAlignment horizontal_alignment() const;
  void set_horizontal_alignment(::gui::alignment::HorizontalAlignment value);
  private:
  ::gui::alignment::HorizontalAlignment _internal_horizontal_alignment() const;
  void _internal_set_horizontal_alignment(::gui::alignment::HorizontalAlignment value);
  public:

  // @@protoc_insertion_point(class_scope:gui.widget.QrCode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::uint32 module_dimension_;
  int vertical_alignment_;
  int horizontal_alignment_;
  friend struct ::TableStruct_gui_2fwidget_2eproto;
};
// -------------------------------------------------------------------

class CustomerPicture :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.widget.CustomerPicture) */ {
 public:
  CustomerPicture();
  virtual ~CustomerPicture();

  CustomerPicture(const CustomerPicture& from);
  CustomerPicture(CustomerPicture&& from) noexcept
    : CustomerPicture() {
    *this = ::std::move(from);
  }

  inline CustomerPicture& operator=(const CustomerPicture& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomerPicture& operator=(CustomerPicture&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomerPicture& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomerPicture* internal_default_instance() {
    return reinterpret_cast<const CustomerPicture*>(
               &_CustomerPicture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CustomerPicture& a, CustomerPicture& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomerPicture* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomerPicture* New() const final {
    return CreateMaybeMessage<CustomerPicture>(nullptr);
  }

  CustomerPicture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomerPicture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomerPicture& from);
  void MergeFrom(const CustomerPicture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerPicture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.widget.CustomerPicture";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2fwidget_2eproto);
    return ::descriptor_table_gui_2fwidget_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kBackgroundFieldNumber = 4,
    kVerticalAlignmentFieldNumber = 2,
    kHorizontalAlignmentFieldNumber = 3,
    kButtonIdFieldNumber = 5,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .gui.background.Background background = 4;
  bool has_background() const;
  private:
  bool _internal_has_background() const;
  public:
  void clear_background();
  const ::gui::background::Background& background() const;
  ::gui::background::Background* release_background();
  ::gui::background::Background* mutable_background();
  void set_allocated_background(::gui::background::Background* background);
  private:
  const ::gui::background::Background& _internal_background() const;
  ::gui::background::Background* _internal_mutable_background();
  public:

  // optional .gui.alignment.VerticalAlignment vertical_alignment = 2 [default = CENTER_VERTICALLY];
  bool has_vertical_alignment() const;
  private:
  bool _internal_has_vertical_alignment() const;
  public:
  void clear_vertical_alignment();
  ::gui::alignment::VerticalAlignment vertical_alignment() const;
  void set_vertical_alignment(::gui::alignment::VerticalAlignment value);
  private:
  ::gui::alignment::VerticalAlignment _internal_vertical_alignment() const;
  void _internal_set_vertical_alignment(::gui::alignment::VerticalAlignment value);
  public:

  // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 3 [default = CENTER_HORIZONTALLY];
  bool has_horizontal_alignment() const;
  private:
  bool _internal_has_horizontal_alignment() const;
  public:
  void clear_horizontal_alignment();
  ::gui::alignment::HorizontalAlignment horizontal_alignment() const;
  void set_horizontal_alignment(::gui::alignment::HorizontalAlignment value);
  private:
  ::gui::alignment::HorizontalAlignment _internal_horizontal_alignment() const;
  void _internal_set_horizontal_alignment(::gui::alignment::HorizontalAlignment value);
  public:

  // optional uint32 button_id = 5;
  bool has_button_id() const;
  private:
  bool _internal_has_button_id() const;
  public:
  void clear_button_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 button_id() const;
  void set_button_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_button_id() const;
  void _internal_set_button_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gui.widget.CustomerPicture)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::gui::background::Background* background_;
  int vertical_alignment_;
  int horizontal_alignment_;
  ::PROTOBUF_NAMESPACE_ID::uint32 button_id_;
  friend struct ::TableStruct_gui_2fwidget_2eproto;
};
// -------------------------------------------------------------------

class GeneratedText :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.widget.GeneratedText) */ {
 public:
  GeneratedText();
  virtual ~GeneratedText();

  GeneratedText(const GeneratedText& from);
  GeneratedText(GeneratedText&& from) noexcept
    : GeneratedText() {
    *this = ::std::move(from);
  }

  inline GeneratedText& operator=(const GeneratedText& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneratedText& operator=(GeneratedText&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeneratedText& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneratedText* internal_default_instance() {
    return reinterpret_cast<const GeneratedText*>(
               &_GeneratedText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GeneratedText& a, GeneratedText& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneratedText* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeneratedText* New() const final {
    return CreateMaybeMessage<GeneratedText>(nullptr);
  }

  GeneratedText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeneratedText>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeneratedText& from);
  void MergeFrom(const GeneratedText& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneratedText* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.widget.GeneratedText";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2fwidget_2eproto);
    return ::descriptor_table_gui_2fwidget_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 2,
    kBackgroundFieldNumber = 5,
    kForegroundFieldNumber = 6,
    kTextIdFieldNumber = 1,
    kVerticalAlignmentFieldNumber = 3,
    kHorizontalAlignmentFieldNumber = 4,
    kFontFieldNumber = 7,
    kButtonIdFieldNumber = 8,
  };
  // optional string prefix = 2 [default = ""];
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // optional .gui.background.Background background = 5;
  bool has_background() const;
  private:
  bool _internal_has_background() const;
  public:
  void clear_background();
  const ::gui::background::Background& background() const;
  ::gui::background::Background* release_background();
  ::gui::background::Background* mutable_background();
  void set_allocated_background(::gui::background::Background* background);
  private:
  const ::gui::background::Background& _internal_background() const;
  ::gui::background::Background* _internal_mutable_background();
  public:

  // optional .gui.foreground.Foreground foreground = 6;
  bool has_foreground() const;
  private:
  bool _internal_has_foreground() const;
  public:
  void clear_foreground();
  const ::gui::foreground::Foreground& foreground() const;
  ::gui::foreground::Foreground* release_foreground();
  ::gui::foreground::Foreground* mutable_foreground();
  void set_allocated_foreground(::gui::foreground::Foreground* foreground);
  private:
  const ::gui::foreground::Foreground& _internal_foreground() const;
  ::gui::foreground::Foreground* _internal_mutable_foreground();
  public:

  // required .gui.text_id.TextId text_id = 1;
  bool has_text_id() const;
  private:
  bool _internal_has_text_id() const;
  public:
  void clear_text_id();
  ::gui::text_id::TextId text_id() const;
  void set_text_id(::gui::text_id::TextId value);
  private:
  ::gui::text_id::TextId _internal_text_id() const;
  void _internal_set_text_id(::gui::text_id::TextId value);
  public:

  // optional .gui.alignment.VerticalAlignment vertical_alignment = 3 [default = CENTER_VERTICALLY];
  bool has_vertical_alignment() const;
  private:
  bool _internal_has_vertical_alignment() const;
  public:
  void clear_vertical_alignment();
  ::gui::alignment::VerticalAlignment vertical_alignment() const;
  void set_vertical_alignment(::gui::alignment::VerticalAlignment value);
  private:
  ::gui::alignment::VerticalAlignment _internal_vertical_alignment() const;
  void _internal_set_vertical_alignment(::gui::alignment::VerticalAlignment value);
  public:

  // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 4 [default = CENTER_HORIZONTALLY];
  bool has_horizontal_alignment() const;
  private:
  bool _internal_has_horizontal_alignment() const;
  public:
  void clear_horizontal_alignment();
  ::gui::alignment::HorizontalAlignment horizontal_alignment() const;
  void set_horizontal_alignment(::gui::alignment::HorizontalAlignment value);
  private:
  ::gui::alignment::HorizontalAlignment _internal_horizontal_alignment() const;
  void _internal_set_horizontal_alignment(::gui::alignment::HorizontalAlignment value);
  public:

  // optional .gui.font.Font font = 7 [default = REGULAR_FONT];
  bool has_font() const;
  private:
  bool _internal_has_font() const;
  public:
  void clear_font();
  ::gui::font::Font font() const;
  void set_font(::gui::font::Font value);
  private:
  ::gui::font::Font _internal_font() const;
  void _internal_set_font(::gui::font::Font value);
  public:

  // optional uint32 button_id = 8;
  bool has_button_id() const;
  private:
  bool _internal_has_button_id() const;
  public:
  void clear_button_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 button_id() const;
  void set_button_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_button_id() const;
  void _internal_set_button_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gui.widget.GeneratedText)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::gui::background::Background* background_;
  ::gui::foreground::Foreground* foreground_;
  int text_id_;
  int vertical_alignment_;
  int horizontal_alignment_;
  int font_;
  ::PROTOBUF_NAMESPACE_ID::uint32 button_id_;
  friend struct ::TableStruct_gui_2fwidget_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Widget

// optional .gui.widget.VerticalLayout vertical_layout = 1;
inline bool Widget::_internal_has_vertical_layout() const {
  return widget_case() == kVerticalLayout;
}
inline bool Widget::has_vertical_layout() const {
  return _internal_has_vertical_layout();
}
inline void Widget::set_has_vertical_layout() {
  _oneof_case_[0] = kVerticalLayout;
}
inline void Widget::clear_vertical_layout() {
  if (_internal_has_vertical_layout()) {
    delete widget_.vertical_layout_;
    clear_has_widget();
  }
}
inline ::gui::widget::VerticalLayout* Widget::release_vertical_layout() {
  // @@protoc_insertion_point(field_release:gui.widget.Widget.vertical_layout)
  if (_internal_has_vertical_layout()) {
    clear_has_widget();
      ::gui::widget::VerticalLayout* temp = widget_.vertical_layout_;
    widget_.vertical_layout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gui::widget::VerticalLayout& Widget::_internal_vertical_layout() const {
  return _internal_has_vertical_layout()
      ? *widget_.vertical_layout_
      : *reinterpret_cast< ::gui::widget::VerticalLayout*>(&::gui::widget::_VerticalLayout_default_instance_);
}
inline const ::gui::widget::VerticalLayout& Widget::vertical_layout() const {
  // @@protoc_insertion_point(field_get:gui.widget.Widget.vertical_layout)
  return _internal_vertical_layout();
}
inline ::gui::widget::VerticalLayout* Widget::_internal_mutable_vertical_layout() {
  if (!_internal_has_vertical_layout()) {
    clear_widget();
    set_has_vertical_layout();
    widget_.vertical_layout_ = CreateMaybeMessage< ::gui::widget::VerticalLayout >(
        GetArenaNoVirtual());
  }
  return widget_.vertical_layout_;
}
inline ::gui::widget::VerticalLayout* Widget::mutable_vertical_layout() {
  // @@protoc_insertion_point(field_mutable:gui.widget.Widget.vertical_layout)
  return _internal_mutable_vertical_layout();
}

// optional .gui.widget.HorizontalLayout horizontal_layout = 2;
inline bool Widget::_internal_has_horizontal_layout() const {
  return widget_case() == kHorizontalLayout;
}
inline bool Widget::has_horizontal_layout() const {
  return _internal_has_horizontal_layout();
}
inline void Widget::set_has_horizontal_layout() {
  _oneof_case_[0] = kHorizontalLayout;
}
inline void Widget::clear_horizontal_layout() {
  if (_internal_has_horizontal_layout()) {
    delete widget_.horizontal_layout_;
    clear_has_widget();
  }
}
inline ::gui::widget::HorizontalLayout* Widget::release_horizontal_layout() {
  // @@protoc_insertion_point(field_release:gui.widget.Widget.horizontal_layout)
  if (_internal_has_horizontal_layout()) {
    clear_has_widget();
      ::gui::widget::HorizontalLayout* temp = widget_.horizontal_layout_;
    widget_.horizontal_layout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gui::widget::HorizontalLayout& Widget::_internal_horizontal_layout() const {
  return _internal_has_horizontal_layout()
      ? *widget_.horizontal_layout_
      : *reinterpret_cast< ::gui::widget::HorizontalLayout*>(&::gui::widget::_HorizontalLayout_default_instance_);
}
inline const ::gui::widget::HorizontalLayout& Widget::horizontal_layout() const {
  // @@protoc_insertion_point(field_get:gui.widget.Widget.horizontal_layout)
  return _internal_horizontal_layout();
}
inline ::gui::widget::HorizontalLayout* Widget::_internal_mutable_horizontal_layout() {
  if (!_internal_has_horizontal_layout()) {
    clear_widget();
    set_has_horizontal_layout();
    widget_.horizontal_layout_ = CreateMaybeMessage< ::gui::widget::HorizontalLayout >(
        GetArenaNoVirtual());
  }
  return widget_.horizontal_layout_;
}
inline ::gui::widget::HorizontalLayout* Widget::mutable_horizontal_layout() {
  // @@protoc_insertion_point(field_mutable:gui.widget.Widget.horizontal_layout)
  return _internal_mutable_horizontal_layout();
}

// optional .gui.widget.Text text = 3;
inline bool Widget::_internal_has_text() const {
  return widget_case() == kText;
}
inline bool Widget::has_text() const {
  return _internal_has_text();
}
inline void Widget::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void Widget::clear_text() {
  if (_internal_has_text()) {
    delete widget_.text_;
    clear_has_widget();
  }
}
inline ::gui::widget::Text* Widget::release_text() {
  // @@protoc_insertion_point(field_release:gui.widget.Widget.text)
  if (_internal_has_text()) {
    clear_has_widget();
      ::gui::widget::Text* temp = widget_.text_;
    widget_.text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gui::widget::Text& Widget::_internal_text() const {
  return _internal_has_text()
      ? *widget_.text_
      : *reinterpret_cast< ::gui::widget::Text*>(&::gui::widget::_Text_default_instance_);
}
inline const ::gui::widget::Text& Widget::text() const {
  // @@protoc_insertion_point(field_get:gui.widget.Widget.text)
  return _internal_text();
}
inline ::gui::widget::Text* Widget::_internal_mutable_text() {
  if (!_internal_has_text()) {
    clear_widget();
    set_has_text();
    widget_.text_ = CreateMaybeMessage< ::gui::widget::Text >(
        GetArenaNoVirtual());
  }
  return widget_.text_;
}
inline ::gui::widget::Text* Widget::mutable_text() {
  // @@protoc_insertion_point(field_mutable:gui.widget.Widget.text)
  return _internal_mutable_text();
}

// optional .gui.widget.Picture picture = 4;
inline bool Widget::_internal_has_picture() const {
  return widget_case() == kPicture;
}
inline bool Widget::has_picture() const {
  return _internal_has_picture();
}
inline void Widget::set_has_picture() {
  _oneof_case_[0] = kPicture;
}
inline void Widget::clear_picture() {
  if (_internal_has_picture()) {
    delete widget_.picture_;
    clear_has_widget();
  }
}
inline ::gui::widget::Picture* Widget::release_picture() {
  // @@protoc_insertion_point(field_release:gui.widget.Widget.picture)
  if (_internal_has_picture()) {
    clear_has_widget();
      ::gui::widget::Picture* temp = widget_.picture_;
    widget_.picture_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gui::widget::Picture& Widget::_internal_picture() const {
  return _internal_has_picture()
      ? *widget_.picture_
      : *reinterpret_cast< ::gui::widget::Picture*>(&::gui::widget::_Picture_default_instance_);
}
inline const ::gui::widget::Picture& Widget::picture() const {
  // @@protoc_insertion_point(field_get:gui.widget.Widget.picture)
  return _internal_picture();
}
inline ::gui::widget::Picture* Widget::_internal_mutable_picture() {
  if (!_internal_has_picture()) {
    clear_widget();
    set_has_picture();
    widget_.picture_ = CreateMaybeMessage< ::gui::widget::Picture >(
        GetArenaNoVirtual());
  }
  return widget_.picture_;
}
inline ::gui::widget::Picture* Widget::mutable_picture() {
  // @@protoc_insertion_point(field_mutable:gui.widget.Widget.picture)
  return _internal_mutable_picture();
}

// optional .gui.widget.QrCode qr_code = 5;
inline bool Widget::_internal_has_qr_code() const {
  return widget_case() == kQrCode;
}
inline bool Widget::has_qr_code() const {
  return _internal_has_qr_code();
}
inline void Widget::set_has_qr_code() {
  _oneof_case_[0] = kQrCode;
}
inline void Widget::clear_qr_code() {
  if (_internal_has_qr_code()) {
    delete widget_.qr_code_;
    clear_has_widget();
  }
}
inline ::gui::widget::QrCode* Widget::release_qr_code() {
  // @@protoc_insertion_point(field_release:gui.widget.Widget.qr_code)
  if (_internal_has_qr_code()) {
    clear_has_widget();
      ::gui::widget::QrCode* temp = widget_.qr_code_;
    widget_.qr_code_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gui::widget::QrCode& Widget::_internal_qr_code() const {
  return _internal_has_qr_code()
      ? *widget_.qr_code_
      : *reinterpret_cast< ::gui::widget::QrCode*>(&::gui::widget::_QrCode_default_instance_);
}
inline const ::gui::widget::QrCode& Widget::qr_code() const {
  // @@protoc_insertion_point(field_get:gui.widget.Widget.qr_code)
  return _internal_qr_code();
}
inline ::gui::widget::QrCode* Widget::_internal_mutable_qr_code() {
  if (!_internal_has_qr_code()) {
    clear_widget();
    set_has_qr_code();
    widget_.qr_code_ = CreateMaybeMessage< ::gui::widget::QrCode >(
        GetArenaNoVirtual());
  }
  return widget_.qr_code_;
}
inline ::gui::widget::QrCode* Widget::mutable_qr_code() {
  // @@protoc_insertion_point(field_mutable:gui.widget.Widget.qr_code)
  return _internal_mutable_qr_code();
}

// optional .gui.widget.CustomerPicture customer_picture = 6;
inline bool Widget::_internal_has_customer_picture() const {
  return widget_case() == kCustomerPicture;
}
inline bool Widget::has_customer_picture() const {
  return _internal_has_customer_picture();
}
inline void Widget::set_has_customer_picture() {
  _oneof_case_[0] = kCustomerPicture;
}
inline void Widget::clear_customer_picture() {
  if (_internal_has_customer_picture()) {
    delete widget_.customer_picture_;
    clear_has_widget();
  }
}
inline ::gui::widget::CustomerPicture* Widget::release_customer_picture() {
  // @@protoc_insertion_point(field_release:gui.widget.Widget.customer_picture)
  if (_internal_has_customer_picture()) {
    clear_has_widget();
      ::gui::widget::CustomerPicture* temp = widget_.customer_picture_;
    widget_.customer_picture_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gui::widget::CustomerPicture& Widget::_internal_customer_picture() const {
  return _internal_has_customer_picture()
      ? *widget_.customer_picture_
      : *reinterpret_cast< ::gui::widget::CustomerPicture*>(&::gui::widget::_CustomerPicture_default_instance_);
}
inline const ::gui::widget::CustomerPicture& Widget::customer_picture() const {
  // @@protoc_insertion_point(field_get:gui.widget.Widget.customer_picture)
  return _internal_customer_picture();
}
inline ::gui::widget::CustomerPicture* Widget::_internal_mutable_customer_picture() {
  if (!_internal_has_customer_picture()) {
    clear_widget();
    set_has_customer_picture();
    widget_.customer_picture_ = CreateMaybeMessage< ::gui::widget::CustomerPicture >(
        GetArenaNoVirtual());
  }
  return widget_.customer_picture_;
}
inline ::gui::widget::CustomerPicture* Widget::mutable_customer_picture() {
  // @@protoc_insertion_point(field_mutable:gui.widget.Widget.customer_picture)
  return _internal_mutable_customer_picture();
}

// optional .gui.widget.GeneratedText generated_text = 7;
inline bool Widget::_internal_has_generated_text() const {
  return widget_case() == kGeneratedText;
}
inline bool Widget::has_generated_text() const {
  return _internal_has_generated_text();
}
inline void Widget::set_has_generated_text() {
  _oneof_case_[0] = kGeneratedText;
}
inline void Widget::clear_generated_text() {
  if (_internal_has_generated_text()) {
    delete widget_.generated_text_;
    clear_has_widget();
  }
}
inline ::gui::widget::GeneratedText* Widget::release_generated_text() {
  // @@protoc_insertion_point(field_release:gui.widget.Widget.generated_text)
  if (_internal_has_generated_text()) {
    clear_has_widget();
      ::gui::widget::GeneratedText* temp = widget_.generated_text_;
    widget_.generated_text_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gui::widget::GeneratedText& Widget::_internal_generated_text() const {
  return _internal_has_generated_text()
      ? *widget_.generated_text_
      : *reinterpret_cast< ::gui::widget::GeneratedText*>(&::gui::widget::_GeneratedText_default_instance_);
}
inline const ::gui::widget::GeneratedText& Widget::generated_text() const {
  // @@protoc_insertion_point(field_get:gui.widget.Widget.generated_text)
  return _internal_generated_text();
}
inline ::gui::widget::GeneratedText* Widget::_internal_mutable_generated_text() {
  if (!_internal_has_generated_text()) {
    clear_widget();
    set_has_generated_text();
    widget_.generated_text_ = CreateMaybeMessage< ::gui::widget::GeneratedText >(
        GetArenaNoVirtual());
  }
  return widget_.generated_text_;
}
inline ::gui::widget::GeneratedText* Widget::mutable_generated_text() {
  // @@protoc_insertion_point(field_mutable:gui.widget.Widget.generated_text)
  return _internal_mutable_generated_text();
}

inline bool Widget::has_widget() const {
  return widget_case() != WIDGET_NOT_SET;
}
inline void Widget::clear_has_widget() {
  _oneof_case_[0] = WIDGET_NOT_SET;
}
inline Widget::WidgetCase Widget::widget_case() const {
  return Widget::WidgetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// VerticalLayout

// repeated .gui.widget.Widget widgets = 1;
inline int VerticalLayout::_internal_widgets_size() const {
  return widgets_.size();
}
inline int VerticalLayout::widgets_size() const {
  return _internal_widgets_size();
}
inline void VerticalLayout::clear_widgets() {
  widgets_.Clear();
}
inline ::gui::widget::Widget* VerticalLayout::mutable_widgets(int index) {
  // @@protoc_insertion_point(field_mutable:gui.widget.VerticalLayout.widgets)
  return widgets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gui::widget::Widget >*
VerticalLayout::mutable_widgets() {
  // @@protoc_insertion_point(field_mutable_list:gui.widget.VerticalLayout.widgets)
  return &widgets_;
}
inline const ::gui::widget::Widget& VerticalLayout::_internal_widgets(int index) const {
  return widgets_.Get(index);
}
inline const ::gui::widget::Widget& VerticalLayout::widgets(int index) const {
  // @@protoc_insertion_point(field_get:gui.widget.VerticalLayout.widgets)
  return _internal_widgets(index);
}
inline ::gui::widget::Widget* VerticalLayout::_internal_add_widgets() {
  return widgets_.Add();
}
inline ::gui::widget::Widget* VerticalLayout::add_widgets() {
  // @@protoc_insertion_point(field_add:gui.widget.VerticalLayout.widgets)
  return _internal_add_widgets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gui::widget::Widget >&
VerticalLayout::widgets() const {
  // @@protoc_insertion_point(field_list:gui.widget.VerticalLayout.widgets)
  return widgets_;
}

// -------------------------------------------------------------------

// HorizontalLayout

// repeated .gui.widget.Widget widgets = 1;
inline int HorizontalLayout::_internal_widgets_size() const {
  return widgets_.size();
}
inline int HorizontalLayout::widgets_size() const {
  return _internal_widgets_size();
}
inline void HorizontalLayout::clear_widgets() {
  widgets_.Clear();
}
inline ::gui::widget::Widget* HorizontalLayout::mutable_widgets(int index) {
  // @@protoc_insertion_point(field_mutable:gui.widget.HorizontalLayout.widgets)
  return widgets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gui::widget::Widget >*
HorizontalLayout::mutable_widgets() {
  // @@protoc_insertion_point(field_mutable_list:gui.widget.HorizontalLayout.widgets)
  return &widgets_;
}
inline const ::gui::widget::Widget& HorizontalLayout::_internal_widgets(int index) const {
  return widgets_.Get(index);
}
inline const ::gui::widget::Widget& HorizontalLayout::widgets(int index) const {
  // @@protoc_insertion_point(field_get:gui.widget.HorizontalLayout.widgets)
  return _internal_widgets(index);
}
inline ::gui::widget::Widget* HorizontalLayout::_internal_add_widgets() {
  return widgets_.Add();
}
inline ::gui::widget::Widget* HorizontalLayout::add_widgets() {
  // @@protoc_insertion_point(field_add:gui.widget.HorizontalLayout.widgets)
  return _internal_add_widgets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gui::widget::Widget >&
HorizontalLayout::widgets() const {
  // @@protoc_insertion_point(field_list:gui.widget.HorizontalLayout.widgets)
  return widgets_;
}

// -------------------------------------------------------------------

// Text

// required string text = 1;
inline bool Text::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Text::has_text() const {
  return _internal_has_text();
}
inline void Text::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Text::text() const {
  // @@protoc_insertion_point(field_get:gui.widget.Text.text)
  return _internal_text();
}
inline void Text::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:gui.widget.Text.text)
}
inline std::string* Text::mutable_text() {
  // @@protoc_insertion_point(field_mutable:gui.widget.Text.text)
  return _internal_mutable_text();
}
inline const std::string& Text::_internal_text() const {
  return text_.GetNoArena();
}
inline void Text::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Text::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gui.widget.Text.text)
}
inline void Text::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gui.widget.Text.text)
}
inline void Text::set_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gui.widget.Text.text)
}
inline std::string* Text::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Text::release_text() {
  // @@protoc_insertion_point(field_release:gui.widget.Text.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Text::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:gui.widget.Text.text)
}

// optional .gui.alignment.VerticalAlignment vertical_alignment = 2 [default = CENTER_VERTICALLY];
inline bool Text::_internal_has_vertical_alignment() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Text::has_vertical_alignment() const {
  return _internal_has_vertical_alignment();
}
inline void Text::clear_vertical_alignment() {
  vertical_alignment_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::gui::alignment::VerticalAlignment Text::_internal_vertical_alignment() const {
  return static_cast< ::gui::alignment::VerticalAlignment >(vertical_alignment_);
}
inline ::gui::alignment::VerticalAlignment Text::vertical_alignment() const {
  // @@protoc_insertion_point(field_get:gui.widget.Text.vertical_alignment)
  return _internal_vertical_alignment();
}
inline void Text::_internal_set_vertical_alignment(::gui::alignment::VerticalAlignment value) {
  assert(::gui::alignment::VerticalAlignment_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  vertical_alignment_ = value;
}
inline void Text::set_vertical_alignment(::gui::alignment::VerticalAlignment value) {
  _internal_set_vertical_alignment(value);
  // @@protoc_insertion_point(field_set:gui.widget.Text.vertical_alignment)
}

// optional .gui.alignment.HorizontalAlignment horizontal_alignment = 3 [default = CENTER_HORIZONTALLY];
inline bool Text::_internal_has_horizontal_alignment() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Text::has_horizontal_alignment() const {
  return _internal_has_horizontal_alignment();
}
inline void Text::clear_horizontal_alignment() {
  horizontal_alignment_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::gui::alignment::HorizontalAlignment Text::_internal_horizontal_alignment() const {
  return static_cast< ::gui::alignment::HorizontalAlignment >(horizontal_alignment_);
}
inline ::gui::alignment::HorizontalAlignment Text::horizontal_alignment() const {
  // @@protoc_insertion_point(field_get:gui.widget.Text.horizontal_alignment)
  return _internal_horizontal_alignment();
}
inline void Text::_internal_set_horizontal_alignment(::gui::alignment::HorizontalAlignment value) {
  assert(::gui::alignment::HorizontalAlignment_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  horizontal_alignment_ = value;
}
inline void Text::set_horizontal_alignment(::gui::alignment::HorizontalAlignment value) {
  _internal_set_horizontal_alignment(value);
  // @@protoc_insertion_point(field_set:gui.widget.Text.horizontal_alignment)
}

// optional .gui.background.Background background = 4;
inline bool Text::_internal_has_background() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || background_ != nullptr);
  return value;
}
inline bool Text::has_background() const {
  return _internal_has_background();
}
inline const ::gui::background::Background& Text::_internal_background() const {
  const ::gui::background::Background* p = background_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gui::background::Background*>(
      &::gui::background::_Background_default_instance_);
}
inline const ::gui::background::Background& Text::background() const {
  // @@protoc_insertion_point(field_get:gui.widget.Text.background)
  return _internal_background();
}
inline ::gui::background::Background* Text::release_background() {
  // @@protoc_insertion_point(field_release:gui.widget.Text.background)
  _has_bits_[0] &= ~0x00000002u;
  ::gui::background::Background* temp = background_;
  background_ = nullptr;
  return temp;
}
inline ::gui::background::Background* Text::_internal_mutable_background() {
  _has_bits_[0] |= 0x00000002u;
  if (background_ == nullptr) {
    auto* p = CreateMaybeMessage<::gui::background::Background>(GetArenaNoVirtual());
    background_ = p;
  }
  return background_;
}
inline ::gui::background::Background* Text::mutable_background() {
  // @@protoc_insertion_point(field_mutable:gui.widget.Text.background)
  return _internal_mutable_background();
}
inline void Text::set_allocated_background(::gui::background::Background* background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_);
  }
  if (background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  background_ = background;
  // @@protoc_insertion_point(field_set_allocated:gui.widget.Text.background)
}

// optional .gui.foreground.Foreground foreground = 5;
inline bool Text::_internal_has_foreground() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || foreground_ != nullptr);
  return value;
}
inline bool Text::has_foreground() const {
  return _internal_has_foreground();
}
inline const ::gui::foreground::Foreground& Text::_internal_foreground() const {
  const ::gui::foreground::Foreground* p = foreground_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gui::foreground::Foreground*>(
      &::gui::foreground::_Foreground_default_instance_);
}
inline const ::gui::foreground::Foreground& Text::foreground() const {
  // @@protoc_insertion_point(field_get:gui.widget.Text.foreground)
  return _internal_foreground();
}
inline ::gui::foreground::Foreground* Text::release_foreground() {
  // @@protoc_insertion_point(field_release:gui.widget.Text.foreground)
  _has_bits_[0] &= ~0x00000004u;
  ::gui::foreground::Foreground* temp = foreground_;
  foreground_ = nullptr;
  return temp;
}
inline ::gui::foreground::Foreground* Text::_internal_mutable_foreground() {
  _has_bits_[0] |= 0x00000004u;
  if (foreground_ == nullptr) {
    auto* p = CreateMaybeMessage<::gui::foreground::Foreground>(GetArenaNoVirtual());
    foreground_ = p;
  }
  return foreground_;
}
inline ::gui::foreground::Foreground* Text::mutable_foreground() {
  // @@protoc_insertion_point(field_mutable:gui.widget.Text.foreground)
  return _internal_mutable_foreground();
}
inline void Text::set_allocated_foreground(::gui::foreground::Foreground* foreground) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(foreground_);
  }
  if (foreground) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      foreground = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foreground, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  foreground_ = foreground;
  // @@protoc_insertion_point(field_set_allocated:gui.widget.Text.foreground)
}

// optional .gui.font.Font font = 6 [default = REGULAR_FONT];
inline bool Text::_internal_has_font() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Text::has_font() const {
  return _internal_has_font();
}
inline void Text::clear_font() {
  font_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::gui::font::Font Text::_internal_font() const {
  return static_cast< ::gui::font::Font >(font_);
}
inline ::gui::font::Font Text::font() const {
  // @@protoc_insertion_point(field_get:gui.widget.Text.font)
  return _internal_font();
}
inline void Text::_internal_set_font(::gui::font::Font value) {
  assert(::gui::font::Font_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  font_ = value;
}
inline void Text::set_font(::gui::font::Font value) {
  _internal_set_font(value);
  // @@protoc_insertion_point(field_set:gui.widget.Text.font)
}

// optional uint32 button_id = 7;
inline bool Text::_internal_has_button_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Text::has_button_id() const {
  return _internal_has_button_id();
}
inline void Text::clear_button_id() {
  button_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Text::_internal_button_id() const {
  return button_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Text::button_id() const {
  // @@protoc_insertion_point(field_get:gui.widget.Text.button_id)
  return _internal_button_id();
}
inline void Text::_internal_set_button_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  button_id_ = value;
}
inline void Text::set_button_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_button_id(value);
  // @@protoc_insertion_point(field_set:gui.widget.Text.button_id)
}

// optional .gui.border.Border border = 8;
inline bool Text::_internal_has_border() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || border_ != nullptr);
  return value;
}
inline bool Text::has_border() const {
  return _internal_has_border();
}
inline const ::gui::border::Border& Text::_internal_border() const {
  const ::gui::border::Border* p = border_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gui::border::Border*>(
      &::gui::border::_Border_default_instance_);
}
inline const ::gui::border::Border& Text::border() const {
  // @@protoc_insertion_point(field_get:gui.widget.Text.border)
  return _internal_border();
}
inline ::gui::border::Border* Text::release_border() {
  // @@protoc_insertion_point(field_release:gui.widget.Text.border)
  _has_bits_[0] &= ~0x00000008u;
  ::gui::border::Border* temp = border_;
  border_ = nullptr;
  return temp;
}
inline ::gui::border::Border* Text::_internal_mutable_border() {
  _has_bits_[0] |= 0x00000008u;
  if (border_ == nullptr) {
    auto* p = CreateMaybeMessage<::gui::border::Border>(GetArenaNoVirtual());
    border_ = p;
  }
  return border_;
}
inline ::gui::border::Border* Text::mutable_border() {
  // @@protoc_insertion_point(field_mutable:gui.widget.Text.border)
  return _internal_mutable_border();
}
inline void Text::set_allocated_border(::gui::border::Border* border) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(border_);
  }
  if (border) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      border = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, border, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  border_ = border;
  // @@protoc_insertion_point(field_set_allocated:gui.widget.Text.border)
}

// -------------------------------------------------------------------

// Picture

// required .gui.picture_id.PictureId picture_id = 1;
inline bool Picture::_internal_has_picture_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Picture::has_picture_id() const {
  return _internal_has_picture_id();
}
inline void Picture::clear_picture_id() {
  picture_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::gui::picture_id::PictureId Picture::_internal_picture_id() const {
  return static_cast< ::gui::picture_id::PictureId >(picture_id_);
}
inline ::gui::picture_id::PictureId Picture::picture_id() const {
  // @@protoc_insertion_point(field_get:gui.widget.Picture.picture_id)
  return _internal_picture_id();
}
inline void Picture::_internal_set_picture_id(::gui::picture_id::PictureId value) {
  assert(::gui::picture_id::PictureId_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  picture_id_ = value;
}
inline void Picture::set_picture_id(::gui::picture_id::PictureId value) {
  _internal_set_picture_id(value);
  // @@protoc_insertion_point(field_set:gui.widget.Picture.picture_id)
}

// optional .gui.alignment.VerticalAlignment vertical_alignment = 2 [default = CENTER_VERTICALLY];
inline bool Picture::_internal_has_vertical_alignment() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Picture::has_vertical_alignment() const {
  return _internal_has_vertical_alignment();
}
inline void Picture::clear_vertical_alignment() {
  vertical_alignment_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::gui::alignment::VerticalAlignment Picture::_internal_vertical_alignment() const {
  return static_cast< ::gui::alignment::VerticalAlignment >(vertical_alignment_);
}
inline ::gui::alignment::VerticalAlignment Picture::vertical_alignment() const {
  // @@protoc_insertion_point(field_get:gui.widget.Picture.vertical_alignment)
  return _internal_vertical_alignment();
}
inline void Picture::_internal_set_vertical_alignment(::gui::alignment::VerticalAlignment value) {
  assert(::gui::alignment::VerticalAlignment_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  vertical_alignment_ = value;
}
inline void Picture::set_vertical_alignment(::gui::alignment::VerticalAlignment value) {
  _internal_set_vertical_alignment(value);
  // @@protoc_insertion_point(field_set:gui.widget.Picture.vertical_alignment)
}

// optional .gui.alignment.HorizontalAlignment horizontal_alignment = 3 [default = CENTER_HORIZONTALLY];
inline bool Picture::_internal_has_horizontal_alignment() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Picture::has_horizontal_alignment() const {
  return _internal_has_horizontal_alignment();
}
inline void Picture::clear_horizontal_alignment() {
  horizontal_alignment_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::gui::alignment::HorizontalAlignment Picture::_internal_horizontal_alignment() const {
  return static_cast< ::gui::alignment::HorizontalAlignment >(horizontal_alignment_);
}
inline ::gui::alignment::HorizontalAlignment Picture::horizontal_alignment() const {
  // @@protoc_insertion_point(field_get:gui.widget.Picture.horizontal_alignment)
  return _internal_horizontal_alignment();
}
inline void Picture::_internal_set_horizontal_alignment(::gui::alignment::HorizontalAlignment value) {
  assert(::gui::alignment::HorizontalAlignment_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  horizontal_alignment_ = value;
}
inline void Picture::set_horizontal_alignment(::gui::alignment::HorizontalAlignment value) {
  _internal_set_horizontal_alignment(value);
  // @@protoc_insertion_point(field_set:gui.widget.Picture.horizontal_alignment)
}

// optional .gui.background.Background background = 4;
inline bool Picture::_internal_has_background() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || background_ != nullptr);
  return value;
}
inline bool Picture::has_background() const {
  return _internal_has_background();
}
inline const ::gui::background::Background& Picture::_internal_background() const {
  const ::gui::background::Background* p = background_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gui::background::Background*>(
      &::gui::background::_Background_default_instance_);
}
inline const ::gui::background::Background& Picture::background() const {
  // @@protoc_insertion_point(field_get:gui.widget.Picture.background)
  return _internal_background();
}
inline ::gui::background::Background* Picture::release_background() {
  // @@protoc_insertion_point(field_release:gui.widget.Picture.background)
  _has_bits_[0] &= ~0x00000001u;
  ::gui::background::Background* temp = background_;
  background_ = nullptr;
  return temp;
}
inline ::gui::background::Background* Picture::_internal_mutable_background() {
  _has_bits_[0] |= 0x00000001u;
  if (background_ == nullptr) {
    auto* p = CreateMaybeMessage<::gui::background::Background>(GetArenaNoVirtual());
    background_ = p;
  }
  return background_;
}
inline ::gui::background::Background* Picture::mutable_background() {
  // @@protoc_insertion_point(field_mutable:gui.widget.Picture.background)
  return _internal_mutable_background();
}
inline void Picture::set_allocated_background(::gui::background::Background* background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_);
  }
  if (background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  background_ = background;
  // @@protoc_insertion_point(field_set_allocated:gui.widget.Picture.background)
}

// optional uint32 button_id = 5;
inline bool Picture::_internal_has_button_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Picture::has_button_id() const {
  return _internal_has_button_id();
}
inline void Picture::clear_button_id() {
  button_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Picture::_internal_button_id() const {
  return button_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Picture::button_id() const {
  // @@protoc_insertion_point(field_get:gui.widget.Picture.button_id)
  return _internal_button_id();
}
inline void Picture::_internal_set_button_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  button_id_ = value;
}
inline void Picture::set_button_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_button_id(value);
  // @@protoc_insertion_point(field_set:gui.widget.Picture.button_id)
}

// -------------------------------------------------------------------

// QrCode

// required bytes text = 1;
inline bool QrCode::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QrCode::has_text() const {
  return _internal_has_text();
}
inline void QrCode::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& QrCode::text() const {
  // @@protoc_insertion_point(field_get:gui.widget.QrCode.text)
  return _internal_text();
}
inline void QrCode::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:gui.widget.QrCode.text)
}
inline std::string* QrCode::mutable_text() {
  // @@protoc_insertion_point(field_mutable:gui.widget.QrCode.text)
  return _internal_mutable_text();
}
inline const std::string& QrCode::_internal_text() const {
  return text_.GetNoArena();
}
inline void QrCode::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QrCode::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gui.widget.QrCode.text)
}
inline void QrCode::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gui.widget.QrCode.text)
}
inline void QrCode::set_text(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gui.widget.QrCode.text)
}
inline std::string* QrCode::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QrCode::release_text() {
  // @@protoc_insertion_point(field_release:gui.widget.QrCode.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QrCode::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:gui.widget.QrCode.text)
}

// optional uint32 module_dimension = 2;
inline bool QrCode::_internal_has_module_dimension() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QrCode::has_module_dimension() const {
  return _internal_has_module_dimension();
}
inline void QrCode::clear_module_dimension() {
  module_dimension_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QrCode::_internal_module_dimension() const {
  return module_dimension_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QrCode::module_dimension() const {
  // @@protoc_insertion_point(field_get:gui.widget.QrCode.module_dimension)
  return _internal_module_dimension();
}
inline void QrCode::_internal_set_module_dimension(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  module_dimension_ = value;
}
inline void QrCode::set_module_dimension(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_module_dimension(value);
  // @@protoc_insertion_point(field_set:gui.widget.QrCode.module_dimension)
}

// optional .gui.alignment.VerticalAlignment vertical_alignment = 3 [default = CENTER_VERTICALLY];
inline bool QrCode::_internal_has_vertical_alignment() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool QrCode::has_vertical_alignment() const {
  return _internal_has_vertical_alignment();
}
inline void QrCode::clear_vertical_alignment() {
  vertical_alignment_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::gui::alignment::VerticalAlignment QrCode::_internal_vertical_alignment() const {
  return static_cast< ::gui::alignment::VerticalAlignment >(vertical_alignment_);
}
inline ::gui::alignment::VerticalAlignment QrCode::vertical_alignment() const {
  // @@protoc_insertion_point(field_get:gui.widget.QrCode.vertical_alignment)
  return _internal_vertical_alignment();
}
inline void QrCode::_internal_set_vertical_alignment(::gui::alignment::VerticalAlignment value) {
  assert(::gui::alignment::VerticalAlignment_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  vertical_alignment_ = value;
}
inline void QrCode::set_vertical_alignment(::gui::alignment::VerticalAlignment value) {
  _internal_set_vertical_alignment(value);
  // @@protoc_insertion_point(field_set:gui.widget.QrCode.vertical_alignment)
}

// optional .gui.alignment.HorizontalAlignment horizontal_alignment = 4 [default = CENTER_HORIZONTALLY];
inline bool QrCode::_internal_has_horizontal_alignment() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool QrCode::has_horizontal_alignment() const {
  return _internal_has_horizontal_alignment();
}
inline void QrCode::clear_horizontal_alignment() {
  horizontal_alignment_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::gui::alignment::HorizontalAlignment QrCode::_internal_horizontal_alignment() const {
  return static_cast< ::gui::alignment::HorizontalAlignment >(horizontal_alignment_);
}
inline ::gui::alignment::HorizontalAlignment QrCode::horizontal_alignment() const {
  // @@protoc_insertion_point(field_get:gui.widget.QrCode.horizontal_alignment)
  return _internal_horizontal_alignment();
}
inline void QrCode::_internal_set_horizontal_alignment(::gui::alignment::HorizontalAlignment value) {
  assert(::gui::alignment::HorizontalAlignment_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  horizontal_alignment_ = value;
}
inline void QrCode::set_horizontal_alignment(::gui::alignment::HorizontalAlignment value) {
  _internal_set_horizontal_alignment(value);
  // @@protoc_insertion_point(field_set:gui.widget.QrCode.horizontal_alignment)
}

// -------------------------------------------------------------------

// CustomerPicture

// required string name = 1;
inline bool CustomerPicture::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomerPicture::has_name() const {
  return _internal_has_name();
}
inline void CustomerPicture::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomerPicture::name() const {
  // @@protoc_insertion_point(field_get:gui.widget.CustomerPicture.name)
  return _internal_name();
}
inline void CustomerPicture::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:gui.widget.CustomerPicture.name)
}
inline std::string* CustomerPicture::mutable_name() {
  // @@protoc_insertion_point(field_mutable:gui.widget.CustomerPicture.name)
  return _internal_mutable_name();
}
inline const std::string& CustomerPicture::_internal_name() const {
  return name_.GetNoArena();
}
inline void CustomerPicture::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CustomerPicture::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gui.widget.CustomerPicture.name)
}
inline void CustomerPicture::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gui.widget.CustomerPicture.name)
}
inline void CustomerPicture::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gui.widget.CustomerPicture.name)
}
inline std::string* CustomerPicture::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CustomerPicture::release_name() {
  // @@protoc_insertion_point(field_release:gui.widget.CustomerPicture.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CustomerPicture::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gui.widget.CustomerPicture.name)
}

// optional .gui.alignment.VerticalAlignment vertical_alignment = 2 [default = CENTER_VERTICALLY];
inline bool CustomerPicture::_internal_has_vertical_alignment() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CustomerPicture::has_vertical_alignment() const {
  return _internal_has_vertical_alignment();
}
inline void CustomerPicture::clear_vertical_alignment() {
  vertical_alignment_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::gui::alignment::VerticalAlignment CustomerPicture::_internal_vertical_alignment() const {
  return static_cast< ::gui::alignment::VerticalAlignment >(vertical_alignment_);
}
inline ::gui::alignment::VerticalAlignment CustomerPicture::vertical_alignment() const {
  // @@protoc_insertion_point(field_get:gui.widget.CustomerPicture.vertical_alignment)
  return _internal_vertical_alignment();
}
inline void CustomerPicture::_internal_set_vertical_alignment(::gui::alignment::VerticalAlignment value) {
  assert(::gui::alignment::VerticalAlignment_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  vertical_alignment_ = value;
}
inline void CustomerPicture::set_vertical_alignment(::gui::alignment::VerticalAlignment value) {
  _internal_set_vertical_alignment(value);
  // @@protoc_insertion_point(field_set:gui.widget.CustomerPicture.vertical_alignment)
}

// optional .gui.alignment.HorizontalAlignment horizontal_alignment = 3 [default = CENTER_HORIZONTALLY];
inline bool CustomerPicture::_internal_has_horizontal_alignment() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CustomerPicture::has_horizontal_alignment() const {
  return _internal_has_horizontal_alignment();
}
inline void CustomerPicture::clear_horizontal_alignment() {
  horizontal_alignment_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::gui::alignment::HorizontalAlignment CustomerPicture::_internal_horizontal_alignment() const {
  return static_cast< ::gui::alignment::HorizontalAlignment >(horizontal_alignment_);
}
inline ::gui::alignment::HorizontalAlignment CustomerPicture::horizontal_alignment() const {
  // @@protoc_insertion_point(field_get:gui.widget.CustomerPicture.horizontal_alignment)
  return _internal_horizontal_alignment();
}
inline void CustomerPicture::_internal_set_horizontal_alignment(::gui::alignment::HorizontalAlignment value) {
  assert(::gui::alignment::HorizontalAlignment_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  horizontal_alignment_ = value;
}
inline void CustomerPicture::set_horizontal_alignment(::gui::alignment::HorizontalAlignment value) {
  _internal_set_horizontal_alignment(value);
  // @@protoc_insertion_point(field_set:gui.widget.CustomerPicture.horizontal_alignment)
}

// optional .gui.background.Background background = 4;
inline bool CustomerPicture::_internal_has_background() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || background_ != nullptr);
  return value;
}
inline bool CustomerPicture::has_background() const {
  return _internal_has_background();
}
inline const ::gui::background::Background& CustomerPicture::_internal_background() const {
  const ::gui::background::Background* p = background_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gui::background::Background*>(
      &::gui::background::_Background_default_instance_);
}
inline const ::gui::background::Background& CustomerPicture::background() const {
  // @@protoc_insertion_point(field_get:gui.widget.CustomerPicture.background)
  return _internal_background();
}
inline ::gui::background::Background* CustomerPicture::release_background() {
  // @@protoc_insertion_point(field_release:gui.widget.CustomerPicture.background)
  _has_bits_[0] &= ~0x00000002u;
  ::gui::background::Background* temp = background_;
  background_ = nullptr;
  return temp;
}
inline ::gui::background::Background* CustomerPicture::_internal_mutable_background() {
  _has_bits_[0] |= 0x00000002u;
  if (background_ == nullptr) {
    auto* p = CreateMaybeMessage<::gui::background::Background>(GetArenaNoVirtual());
    background_ = p;
  }
  return background_;
}
inline ::gui::background::Background* CustomerPicture::mutable_background() {
  // @@protoc_insertion_point(field_mutable:gui.widget.CustomerPicture.background)
  return _internal_mutable_background();
}
inline void CustomerPicture::set_allocated_background(::gui::background::Background* background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_);
  }
  if (background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  background_ = background;
  // @@protoc_insertion_point(field_set_allocated:gui.widget.CustomerPicture.background)
}

// optional uint32 button_id = 5;
inline bool CustomerPicture::_internal_has_button_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CustomerPicture::has_button_id() const {
  return _internal_has_button_id();
}
inline void CustomerPicture::clear_button_id() {
  button_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomerPicture::_internal_button_id() const {
  return button_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomerPicture::button_id() const {
  // @@protoc_insertion_point(field_get:gui.widget.CustomerPicture.button_id)
  return _internal_button_id();
}
inline void CustomerPicture::_internal_set_button_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  button_id_ = value;
}
inline void CustomerPicture::set_button_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_button_id(value);
  // @@protoc_insertion_point(field_set:gui.widget.CustomerPicture.button_id)
}

// -------------------------------------------------------------------

// GeneratedText

// required .gui.text_id.TextId text_id = 1;
inline bool GeneratedText::_internal_has_text_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GeneratedText::has_text_id() const {
  return _internal_has_text_id();
}
inline void GeneratedText::clear_text_id() {
  text_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::gui::text_id::TextId GeneratedText::_internal_text_id() const {
  return static_cast< ::gui::text_id::TextId >(text_id_);
}
inline ::gui::text_id::TextId GeneratedText::text_id() const {
  // @@protoc_insertion_point(field_get:gui.widget.GeneratedText.text_id)
  return _internal_text_id();
}
inline void GeneratedText::_internal_set_text_id(::gui::text_id::TextId value) {
  assert(::gui::text_id::TextId_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  text_id_ = value;
}
inline void GeneratedText::set_text_id(::gui::text_id::TextId value) {
  _internal_set_text_id(value);
  // @@protoc_insertion_point(field_set:gui.widget.GeneratedText.text_id)
}

// optional string prefix = 2 [default = ""];
inline bool GeneratedText::_internal_has_prefix() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GeneratedText::has_prefix() const {
  return _internal_has_prefix();
}
inline void GeneratedText::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GeneratedText::prefix() const {
  // @@protoc_insertion_point(field_get:gui.widget.GeneratedText.prefix)
  return _internal_prefix();
}
inline void GeneratedText::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:gui.widget.GeneratedText.prefix)
}
inline std::string* GeneratedText::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:gui.widget.GeneratedText.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& GeneratedText::_internal_prefix() const {
  return prefix_.GetNoArena();
}
inline void GeneratedText::_internal_set_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GeneratedText::set_prefix(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gui.widget.GeneratedText.prefix)
}
inline void GeneratedText::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gui.widget.GeneratedText.prefix)
}
inline void GeneratedText::set_prefix(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gui.widget.GeneratedText.prefix)
}
inline std::string* GeneratedText::_internal_mutable_prefix() {
  _has_bits_[0] |= 0x00000001u;
  return prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneratedText::release_prefix() {
  // @@protoc_insertion_point(field_release:gui.widget.GeneratedText.prefix)
  if (!_internal_has_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return prefix_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneratedText::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:gui.widget.GeneratedText.prefix)
}

// optional .gui.alignment.VerticalAlignment vertical_alignment = 3 [default = CENTER_VERTICALLY];
inline bool GeneratedText::_internal_has_vertical_alignment() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GeneratedText::has_vertical_alignment() const {
  return _internal_has_vertical_alignment();
}
inline void GeneratedText::clear_vertical_alignment() {
  vertical_alignment_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::gui::alignment::VerticalAlignment GeneratedText::_internal_vertical_alignment() const {
  return static_cast< ::gui::alignment::VerticalAlignment >(vertical_alignment_);
}
inline ::gui::alignment::VerticalAlignment GeneratedText::vertical_alignment() const {
  // @@protoc_insertion_point(field_get:gui.widget.GeneratedText.vertical_alignment)
  return _internal_vertical_alignment();
}
inline void GeneratedText::_internal_set_vertical_alignment(::gui::alignment::VerticalAlignment value) {
  assert(::gui::alignment::VerticalAlignment_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  vertical_alignment_ = value;
}
inline void GeneratedText::set_vertical_alignment(::gui::alignment::VerticalAlignment value) {
  _internal_set_vertical_alignment(value);
  // @@protoc_insertion_point(field_set:gui.widget.GeneratedText.vertical_alignment)
}

// optional .gui.alignment.HorizontalAlignment horizontal_alignment = 4 [default = CENTER_HORIZONTALLY];
inline bool GeneratedText::_internal_has_horizontal_alignment() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GeneratedText::has_horizontal_alignment() const {
  return _internal_has_horizontal_alignment();
}
inline void GeneratedText::clear_horizontal_alignment() {
  horizontal_alignment_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::gui::alignment::HorizontalAlignment GeneratedText::_internal_horizontal_alignment() const {
  return static_cast< ::gui::alignment::HorizontalAlignment >(horizontal_alignment_);
}
inline ::gui::alignment::HorizontalAlignment GeneratedText::horizontal_alignment() const {
  // @@protoc_insertion_point(field_get:gui.widget.GeneratedText.horizontal_alignment)
  return _internal_horizontal_alignment();
}
inline void GeneratedText::_internal_set_horizontal_alignment(::gui::alignment::HorizontalAlignment value) {
  assert(::gui::alignment::HorizontalAlignment_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  horizontal_alignment_ = value;
}
inline void GeneratedText::set_horizontal_alignment(::gui::alignment::HorizontalAlignment value) {
  _internal_set_horizontal_alignment(value);
  // @@protoc_insertion_point(field_set:gui.widget.GeneratedText.horizontal_alignment)
}

// optional .gui.background.Background background = 5;
inline bool GeneratedText::_internal_has_background() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || background_ != nullptr);
  return value;
}
inline bool GeneratedText::has_background() const {
  return _internal_has_background();
}
inline const ::gui::background::Background& GeneratedText::_internal_background() const {
  const ::gui::background::Background* p = background_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gui::background::Background*>(
      &::gui::background::_Background_default_instance_);
}
inline const ::gui::background::Background& GeneratedText::background() const {
  // @@protoc_insertion_point(field_get:gui.widget.GeneratedText.background)
  return _internal_background();
}
inline ::gui::background::Background* GeneratedText::release_background() {
  // @@protoc_insertion_point(field_release:gui.widget.GeneratedText.background)
  _has_bits_[0] &= ~0x00000002u;
  ::gui::background::Background* temp = background_;
  background_ = nullptr;
  return temp;
}
inline ::gui::background::Background* GeneratedText::_internal_mutable_background() {
  _has_bits_[0] |= 0x00000002u;
  if (background_ == nullptr) {
    auto* p = CreateMaybeMessage<::gui::background::Background>(GetArenaNoVirtual());
    background_ = p;
  }
  return background_;
}
inline ::gui::background::Background* GeneratedText::mutable_background() {
  // @@protoc_insertion_point(field_mutable:gui.widget.GeneratedText.background)
  return _internal_mutable_background();
}
inline void GeneratedText::set_allocated_background(::gui::background::Background* background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_);
  }
  if (background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  background_ = background;
  // @@protoc_insertion_point(field_set_allocated:gui.widget.GeneratedText.background)
}

// optional .gui.foreground.Foreground foreground = 6;
inline bool GeneratedText::_internal_has_foreground() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || foreground_ != nullptr);
  return value;
}
inline bool GeneratedText::has_foreground() const {
  return _internal_has_foreground();
}
inline const ::gui::foreground::Foreground& GeneratedText::_internal_foreground() const {
  const ::gui::foreground::Foreground* p = foreground_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gui::foreground::Foreground*>(
      &::gui::foreground::_Foreground_default_instance_);
}
inline const ::gui::foreground::Foreground& GeneratedText::foreground() const {
  // @@protoc_insertion_point(field_get:gui.widget.GeneratedText.foreground)
  return _internal_foreground();
}
inline ::gui::foreground::Foreground* GeneratedText::release_foreground() {
  // @@protoc_insertion_point(field_release:gui.widget.GeneratedText.foreground)
  _has_bits_[0] &= ~0x00000004u;
  ::gui::foreground::Foreground* temp = foreground_;
  foreground_ = nullptr;
  return temp;
}
inline ::gui::foreground::Foreground* GeneratedText::_internal_mutable_foreground() {
  _has_bits_[0] |= 0x00000004u;
  if (foreground_ == nullptr) {
    auto* p = CreateMaybeMessage<::gui::foreground::Foreground>(GetArenaNoVirtual());
    foreground_ = p;
  }
  return foreground_;
}
inline ::gui::foreground::Foreground* GeneratedText::mutable_foreground() {
  // @@protoc_insertion_point(field_mutable:gui.widget.GeneratedText.foreground)
  return _internal_mutable_foreground();
}
inline void GeneratedText::set_allocated_foreground(::gui::foreground::Foreground* foreground) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(foreground_);
  }
  if (foreground) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      foreground = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foreground, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  foreground_ = foreground;
  // @@protoc_insertion_point(field_set_allocated:gui.widget.GeneratedText.foreground)
}

// optional .gui.font.Font font = 7 [default = REGULAR_FONT];
inline bool GeneratedText::_internal_has_font() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GeneratedText::has_font() const {
  return _internal_has_font();
}
inline void GeneratedText::clear_font() {
  font_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::gui::font::Font GeneratedText::_internal_font() const {
  return static_cast< ::gui::font::Font >(font_);
}
inline ::gui::font::Font GeneratedText::font() const {
  // @@protoc_insertion_point(field_get:gui.widget.GeneratedText.font)
  return _internal_font();
}
inline void GeneratedText::_internal_set_font(::gui::font::Font value) {
  assert(::gui::font::Font_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  font_ = value;
}
inline void GeneratedText::set_font(::gui::font::Font value) {
  _internal_set_font(value);
  // @@protoc_insertion_point(field_set:gui.widget.GeneratedText.font)
}

// optional uint32 button_id = 8;
inline bool GeneratedText::_internal_has_button_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GeneratedText::has_button_id() const {
  return _internal_has_button_id();
}
inline void GeneratedText::clear_button_id() {
  button_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GeneratedText::_internal_button_id() const {
  return button_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GeneratedText::button_id() const {
  // @@protoc_insertion_point(field_get:gui.widget.GeneratedText.button_id)
  return _internal_button_id();
}
inline void GeneratedText::_internal_set_button_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  button_id_ = value;
}
inline void GeneratedText::set_button_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_button_id(value);
  // @@protoc_insertion_point(field_set:gui.widget.GeneratedText.button_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace widget
}  // namespace gui

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gui_2fwidget_2eproto
