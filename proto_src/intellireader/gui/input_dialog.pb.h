// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gui/input_dialog.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gui_2finput_5fdialog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gui_2finput_5fdialog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gui_2finput_5fdialog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gui_2finput_5fdialog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gui_2finput_5fdialog_2eproto;
namespace gui {
namespace input_dialog {
class EnteredText;
class EnteredTextDefaultTypeInternal;
extern EnteredTextDefaultTypeInternal _EnteredText_default_instance_;
class InputDialog;
class InputDialogDefaultTypeInternal;
extern InputDialogDefaultTypeInternal _InputDialog_default_instance_;
}  // namespace input_dialog
}  // namespace gui
PROTOBUF_NAMESPACE_OPEN
template<> ::gui::input_dialog::EnteredText* Arena::CreateMaybeMessage<::gui::input_dialog::EnteredText>(Arena*);
template<> ::gui::input_dialog::InputDialog* Arena::CreateMaybeMessage<::gui::input_dialog::InputDialog>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gui {
namespace input_dialog {

enum KeypadLayout : int {
  DECIMAL_DIGITS = 0,
  SPECIAL_CHARS = 1,
  ENGLISH_LOWER = 2,
  ENGLISH_UPPER = 3,
  RUSSIAN_LOWER = 4,
  RUSSIAN_UPPER = 5
};
bool KeypadLayout_IsValid(int value);
constexpr KeypadLayout KeypadLayout_MIN = DECIMAL_DIGITS;
constexpr KeypadLayout KeypadLayout_MAX = RUSSIAN_UPPER;
constexpr int KeypadLayout_ARRAYSIZE = KeypadLayout_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeypadLayout_descriptor();
template<typename T>
inline const std::string& KeypadLayout_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeypadLayout>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeypadLayout_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KeypadLayout_descriptor(), enum_t_value);
}
inline bool KeypadLayout_Parse(
    const std::string& name, KeypadLayout* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KeypadLayout>(
    KeypadLayout_descriptor(), name, value);
}
// ===================================================================

class InputDialog :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.input_dialog.InputDialog) */ {
 public:
  InputDialog();
  virtual ~InputDialog();

  InputDialog(const InputDialog& from);
  InputDialog(InputDialog&& from) noexcept
    : InputDialog() {
    *this = ::std::move(from);
  }

  inline InputDialog& operator=(const InputDialog& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputDialog& operator=(InputDialog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputDialog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputDialog* internal_default_instance() {
    return reinterpret_cast<const InputDialog*>(
               &_InputDialog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputDialog& a, InputDialog& b) {
    a.Swap(&b);
  }
  inline void Swap(InputDialog* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputDialog* New() const final {
    return CreateMaybeMessage<InputDialog>(nullptr);
  }

  InputDialog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputDialog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputDialog& from);
  void MergeFrom(const InputDialog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputDialog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.input_dialog.InputDialog";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2finput_5fdialog_2eproto);
    return ::descriptor_table_gui_2finput_5fdialog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayoutsFieldNumber = 6,
    kCaptionFieldNumber = 1,
    kPlaceholderFieldNumber = 2,
    kTimeoutFieldNumber = 3,
    kMinTextLengthFieldNumber = 4,
    kMaxTextLengthFieldNumber = 5,
  };
  // repeated .gui.input_dialog.KeypadLayout layouts = 6 [packed = true];
  int layouts_size() const;
  private:
  int _internal_layouts_size() const;
  public:
  void clear_layouts();
  private:
  ::gui::input_dialog::KeypadLayout _internal_layouts(int index) const;
  void _internal_add_layouts(::gui::input_dialog::KeypadLayout value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_layouts();
  public:
  ::gui::input_dialog::KeypadLayout layouts(int index) const;
  void set_layouts(int index, ::gui::input_dialog::KeypadLayout value);
  void add_layouts(::gui::input_dialog::KeypadLayout value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& layouts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_layouts();

  // required string caption = 1;
  bool has_caption() const;
  private:
  bool _internal_has_caption() const;
  public:
  void clear_caption();
  const std::string& caption() const;
  void set_caption(const std::string& value);
  void set_caption(std::string&& value);
  void set_caption(const char* value);
  void set_caption(const char* value, size_t size);
  std::string* mutable_caption();
  std::string* release_caption();
  void set_allocated_caption(std::string* caption);
  private:
  const std::string& _internal_caption() const;
  void _internal_set_caption(const std::string& value);
  std::string* _internal_mutable_caption();
  public:

  // optional string placeholder = 2;
  bool has_placeholder() const;
  private:
  bool _internal_has_placeholder() const;
  public:
  void clear_placeholder();
  const std::string& placeholder() const;
  void set_placeholder(const std::string& value);
  void set_placeholder(std::string&& value);
  void set_placeholder(const char* value);
  void set_placeholder(const char* value, size_t size);
  std::string* mutable_placeholder();
  std::string* release_placeholder();
  void set_allocated_placeholder(std::string* placeholder);
  private:
  const std::string& _internal_placeholder() const;
  void _internal_set_placeholder(const std::string& value);
  std::string* _internal_mutable_placeholder();
  public:

  // optional uint32 timeout = 3;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 min_text_length = 4 [default = 0];
  bool has_min_text_length() const;
  private:
  bool _internal_has_min_text_length() const;
  public:
  void clear_min_text_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_text_length() const;
  void set_min_text_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_text_length() const;
  void _internal_set_min_text_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_text_length = 5 [default = 1024];
  bool has_max_text_length() const;
  private:
  bool _internal_has_max_text_length() const;
  public:
  void clear_max_text_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_text_length() const;
  void set_max_text_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_text_length() const;
  void _internal_set_max_text_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:gui.input_dialog.InputDialog)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> layouts_;
  mutable std::atomic<int> _layouts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caption_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placeholder_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_text_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_text_length_;
  friend struct ::TableStruct_gui_2finput_5fdialog_2eproto;
};
// -------------------------------------------------------------------

class EnteredText :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.input_dialog.EnteredText) */ {
 public:
  EnteredText();
  virtual ~EnteredText();

  EnteredText(const EnteredText& from);
  EnteredText(EnteredText&& from) noexcept
    : EnteredText() {
    *this = ::std::move(from);
  }

  inline EnteredText& operator=(const EnteredText& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnteredText& operator=(EnteredText&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnteredText& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnteredText* internal_default_instance() {
    return reinterpret_cast<const EnteredText*>(
               &_EnteredText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnteredText& a, EnteredText& b) {
    a.Swap(&b);
  }
  inline void Swap(EnteredText* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnteredText* New() const final {
    return CreateMaybeMessage<EnteredText>(nullptr);
  }

  EnteredText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnteredText>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnteredText& from);
  void MergeFrom(const EnteredText& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnteredText* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.input_dialog.EnteredText";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2finput_5fdialog_2eproto);
    return ::descriptor_table_gui_2finput_5fdialog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // required string text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:gui.input_dialog.EnteredText)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  friend struct ::TableStruct_gui_2finput_5fdialog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputDialog

// required string caption = 1;
inline bool InputDialog::_internal_has_caption() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InputDialog::has_caption() const {
  return _internal_has_caption();
}
inline void InputDialog::clear_caption() {
  caption_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InputDialog::caption() const {
  // @@protoc_insertion_point(field_get:gui.input_dialog.InputDialog.caption)
  return _internal_caption();
}
inline void InputDialog::set_caption(const std::string& value) {
  _internal_set_caption(value);
  // @@protoc_insertion_point(field_set:gui.input_dialog.InputDialog.caption)
}
inline std::string* InputDialog::mutable_caption() {
  // @@protoc_insertion_point(field_mutable:gui.input_dialog.InputDialog.caption)
  return _internal_mutable_caption();
}
inline const std::string& InputDialog::_internal_caption() const {
  return caption_.GetNoArena();
}
inline void InputDialog::_internal_set_caption(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  caption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InputDialog::set_caption(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  caption_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gui.input_dialog.InputDialog.caption)
}
inline void InputDialog::set_caption(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  caption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gui.input_dialog.InputDialog.caption)
}
inline void InputDialog::set_caption(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  caption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gui.input_dialog.InputDialog.caption)
}
inline std::string* InputDialog::_internal_mutable_caption() {
  _has_bits_[0] |= 0x00000001u;
  return caption_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InputDialog::release_caption() {
  // @@protoc_insertion_point(field_release:gui.input_dialog.InputDialog.caption)
  if (!_internal_has_caption()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return caption_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InputDialog::set_allocated_caption(std::string* caption) {
  if (caption != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  caption_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caption);
  // @@protoc_insertion_point(field_set_allocated:gui.input_dialog.InputDialog.caption)
}

// optional string placeholder = 2;
inline bool InputDialog::_internal_has_placeholder() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InputDialog::has_placeholder() const {
  return _internal_has_placeholder();
}
inline void InputDialog::clear_placeholder() {
  placeholder_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InputDialog::placeholder() const {
  // @@protoc_insertion_point(field_get:gui.input_dialog.InputDialog.placeholder)
  return _internal_placeholder();
}
inline void InputDialog::set_placeholder(const std::string& value) {
  _internal_set_placeholder(value);
  // @@protoc_insertion_point(field_set:gui.input_dialog.InputDialog.placeholder)
}
inline std::string* InputDialog::mutable_placeholder() {
  // @@protoc_insertion_point(field_mutable:gui.input_dialog.InputDialog.placeholder)
  return _internal_mutable_placeholder();
}
inline const std::string& InputDialog::_internal_placeholder() const {
  return placeholder_.GetNoArena();
}
inline void InputDialog::_internal_set_placeholder(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  placeholder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InputDialog::set_placeholder(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  placeholder_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gui.input_dialog.InputDialog.placeholder)
}
inline void InputDialog::set_placeholder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  placeholder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gui.input_dialog.InputDialog.placeholder)
}
inline void InputDialog::set_placeholder(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  placeholder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gui.input_dialog.InputDialog.placeholder)
}
inline std::string* InputDialog::_internal_mutable_placeholder() {
  _has_bits_[0] |= 0x00000002u;
  return placeholder_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InputDialog::release_placeholder() {
  // @@protoc_insertion_point(field_release:gui.input_dialog.InputDialog.placeholder)
  if (!_internal_has_placeholder()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return placeholder_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InputDialog::set_allocated_placeholder(std::string* placeholder) {
  if (placeholder != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  placeholder_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), placeholder);
  // @@protoc_insertion_point(field_set_allocated:gui.input_dialog.InputDialog.placeholder)
}

// optional uint32 timeout = 3;
inline bool InputDialog::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InputDialog::has_timeout() const {
  return _internal_has_timeout();
}
inline void InputDialog::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputDialog::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputDialog::timeout() const {
  // @@protoc_insertion_point(field_get:gui.input_dialog.InputDialog.timeout)
  return _internal_timeout();
}
inline void InputDialog::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  timeout_ = value;
}
inline void InputDialog::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:gui.input_dialog.InputDialog.timeout)
}

// optional uint32 min_text_length = 4 [default = 0];
inline bool InputDialog::_internal_has_min_text_length() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InputDialog::has_min_text_length() const {
  return _internal_has_min_text_length();
}
inline void InputDialog::clear_min_text_length() {
  min_text_length_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputDialog::_internal_min_text_length() const {
  return min_text_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputDialog::min_text_length() const {
  // @@protoc_insertion_point(field_get:gui.input_dialog.InputDialog.min_text_length)
  return _internal_min_text_length();
}
inline void InputDialog::_internal_set_min_text_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  min_text_length_ = value;
}
inline void InputDialog::set_min_text_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_text_length(value);
  // @@protoc_insertion_point(field_set:gui.input_dialog.InputDialog.min_text_length)
}

// optional uint32 max_text_length = 5 [default = 1024];
inline bool InputDialog::_internal_has_max_text_length() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InputDialog::has_max_text_length() const {
  return _internal_has_max_text_length();
}
inline void InputDialog::clear_max_text_length() {
  max_text_length_ = 1024u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputDialog::_internal_max_text_length() const {
  return max_text_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputDialog::max_text_length() const {
  // @@protoc_insertion_point(field_get:gui.input_dialog.InputDialog.max_text_length)
  return _internal_max_text_length();
}
inline void InputDialog::_internal_set_max_text_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  max_text_length_ = value;
}
inline void InputDialog::set_max_text_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_text_length(value);
  // @@protoc_insertion_point(field_set:gui.input_dialog.InputDialog.max_text_length)
}

// repeated .gui.input_dialog.KeypadLayout layouts = 6 [packed = true];
inline int InputDialog::_internal_layouts_size() const {
  return layouts_.size();
}
inline int InputDialog::layouts_size() const {
  return _internal_layouts_size();
}
inline void InputDialog::clear_layouts() {
  layouts_.Clear();
}
inline ::gui::input_dialog::KeypadLayout InputDialog::_internal_layouts(int index) const {
  return static_cast< ::gui::input_dialog::KeypadLayout >(layouts_.Get(index));
}
inline ::gui::input_dialog::KeypadLayout InputDialog::layouts(int index) const {
  // @@protoc_insertion_point(field_get:gui.input_dialog.InputDialog.layouts)
  return _internal_layouts(index);
}
inline void InputDialog::set_layouts(int index, ::gui::input_dialog::KeypadLayout value) {
  assert(::gui::input_dialog::KeypadLayout_IsValid(value));
  layouts_.Set(index, value);
  // @@protoc_insertion_point(field_set:gui.input_dialog.InputDialog.layouts)
}
inline void InputDialog::_internal_add_layouts(::gui::input_dialog::KeypadLayout value) {
  assert(::gui::input_dialog::KeypadLayout_IsValid(value));
  layouts_.Add(value);
}
inline void InputDialog::add_layouts(::gui::input_dialog::KeypadLayout value) {
  // @@protoc_insertion_point(field_add:gui.input_dialog.InputDialog.layouts)
  _internal_add_layouts(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
InputDialog::layouts() const {
  // @@protoc_insertion_point(field_list:gui.input_dialog.InputDialog.layouts)
  return layouts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InputDialog::_internal_mutable_layouts() {
  return &layouts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InputDialog::mutable_layouts() {
  // @@protoc_insertion_point(field_mutable_list:gui.input_dialog.InputDialog.layouts)
  return _internal_mutable_layouts();
}

// -------------------------------------------------------------------

// EnteredText

// required string text = 1;
inline bool EnteredText::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EnteredText::has_text() const {
  return _internal_has_text();
}
inline void EnteredText::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EnteredText::text() const {
  // @@protoc_insertion_point(field_get:gui.input_dialog.EnteredText.text)
  return _internal_text();
}
inline void EnteredText::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:gui.input_dialog.EnteredText.text)
}
inline std::string* EnteredText::mutable_text() {
  // @@protoc_insertion_point(field_mutable:gui.input_dialog.EnteredText.text)
  return _internal_mutable_text();
}
inline const std::string& EnteredText::_internal_text() const {
  return text_.GetNoArena();
}
inline void EnteredText::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnteredText::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gui.input_dialog.EnteredText.text)
}
inline void EnteredText::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gui.input_dialog.EnteredText.text)
}
inline void EnteredText::set_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gui.input_dialog.EnteredText.text)
}
inline std::string* EnteredText::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnteredText::release_text() {
  // @@protoc_insertion_point(field_release:gui.input_dialog.EnteredText.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnteredText::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:gui.input_dialog.EnteredText.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace input_dialog
}  // namespace gui

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gui::input_dialog::KeypadLayout> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gui::input_dialog::KeypadLayout>() {
  return ::gui::input_dialog::KeypadLayout_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gui_2finput_5fdialog_2eproto
