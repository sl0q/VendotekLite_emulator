// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gui/border.proto

#include "gui/border.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gui_2fbackground_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Background_gui_2fbackground_2eproto;
namespace gui {
namespace border {
class BorderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Border> _instance;
} _Border_default_instance_;
}  // namespace border
}  // namespace gui
static void InitDefaultsscc_info_Border_gui_2fborder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gui::border::_Border_default_instance_;
    new (ptr) ::gui::border::Border();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gui::border::Border::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Border_gui_2fborder_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Border_gui_2fborder_2eproto}, {
      &scc_info_Background_gui_2fbackground_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gui_2fborder_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gui_2fborder_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gui_2fborder_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gui_2fborder_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gui::border::Border, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gui::border::Border, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gui::border::Border, style_),
  PROTOBUF_FIELD_OFFSET(::gui::border::Border, color_),
  PROTOBUF_FIELD_OFFSET(::gui::border::Border, width_),
  1,
  0,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::gui::border::Border)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gui::border::_Border_default_instance_),
};

const char descriptor_table_protodef_gui_2fborder_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020gui/border.proto\022\ngui.border\032\024gui/back"
  "ground.proto\"j\n\006Border\022&\n\005style\030\001 \002(\0162\027."
  "gui.border.BorderStyle\022)\n\005color\030\002 \001(\0132\032."
  "gui.background.Background\022\r\n\005width\030\003 \001(\r"
  "*D\n\013BorderStyle\022\020\n\014SOLID_BORDER\020\000\022\021\n\rOUT"
  "SET_BORDER\020\001\022\020\n\014INSET_BORDER\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gui_2fborder_2eproto_deps[1] = {
  &::descriptor_table_gui_2fbackground_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gui_2fborder_2eproto_sccs[1] = {
  &scc_info_Border_gui_2fborder_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gui_2fborder_2eproto_once;
static bool descriptor_table_gui_2fborder_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gui_2fborder_2eproto = {
  &descriptor_table_gui_2fborder_2eproto_initialized, descriptor_table_protodef_gui_2fborder_2eproto, "gui/border.proto", 230,
  &descriptor_table_gui_2fborder_2eproto_once, descriptor_table_gui_2fborder_2eproto_sccs, descriptor_table_gui_2fborder_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_gui_2fborder_2eproto::offsets,
  file_level_metadata_gui_2fborder_2eproto, 1, file_level_enum_descriptors_gui_2fborder_2eproto, file_level_service_descriptors_gui_2fborder_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gui_2fborder_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gui_2fborder_2eproto), true);
namespace gui {
namespace border {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BorderStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gui_2fborder_2eproto);
  return file_level_enum_descriptors_gui_2fborder_2eproto[0];
}
bool BorderStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Border::InitAsDefaultInstance() {
  ::gui::border::_Border_default_instance_._instance.get_mutable()->color_ = const_cast< ::gui::background::Background*>(
      ::gui::background::Background::internal_default_instance());
}
class Border::_Internal {
 public:
  using HasBits = decltype(std::declval<Border>()._has_bits_);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gui::background::Background& color(const Border* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::gui::background::Background&
Border::_Internal::color(const Border* msg) {
  return *msg->color_;
}
void Border::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Border::Border()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gui.border.Border)
}
Border::Border(const Border& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_color()) {
    color_ = new ::gui::background::Background(*from.color_);
  } else {
    color_ = nullptr;
  }
  ::memcpy(&style_, &from.style_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&style_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:gui.border.Border)
}

void Border::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Border_gui_2fborder_2eproto.base);
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&color_)) + sizeof(width_));
}

Border::~Border() {
  // @@protoc_insertion_point(destructor:gui.border.Border)
  SharedDtor();
}

void Border::SharedDtor() {
  if (this != internal_default_instance()) delete color_;
}

void Border::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Border& Border::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Border_gui_2fborder_2eproto.base);
  return *internal_default_instance();
}


void Border::Clear() {
// @@protoc_insertion_point(message_clear_start:gui.border.Border)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(color_ != nullptr);
    color_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&style_)) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Border::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .gui.border.BorderStyle style = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::border::BorderStyle_IsValid(val))) {
            _internal_set_style(static_cast<::gui::border::BorderStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .gui.background.Background color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Border::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gui.border.Border)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gui.border.BorderStyle style = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_style(), target);
  }

  // optional .gui.background.Background color = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::color(this), target, stream);
  }

  // optional uint32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gui.border.Border)
  return target;
}

size_t Border::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gui.border.Border)
  size_t total_size = 0;

  // required .gui.border.BorderStyle style = 1;
  if (_internal_has_style()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_style());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .gui.background.Background color = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // optional uint32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Border::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gui.border.Border)
  GOOGLE_DCHECK_NE(&from, this);
  const Border* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Border>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gui.border.Border)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gui.border.Border)
    MergeFrom(*source);
  }
}

void Border::MergeFrom(const Border& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gui.border.Border)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_color()->::gui::background::Background::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Border::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gui.border.Border)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Border::CopyFrom(const Border& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gui.border.Border)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Border::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Border::InternalSwap(Border* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(color_, other->color_);
  swap(style_, other->style_);
  swap(width_, other->width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Border::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace border
}  // namespace gui
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gui::border::Border* Arena::CreateMaybeMessage< ::gui::border::Border >(Arena* arena) {
  return Arena::CreateInternal< ::gui::border::Border >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
