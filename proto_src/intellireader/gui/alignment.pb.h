// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gui/alignment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gui_2falignment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gui_2falignment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gui_2falignment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gui_2falignment_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gui_2falignment_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace gui {
namespace alignment {

enum VerticalAlignment : int {
  CENTER_VERTICALLY = 0,
  BOTTOM = 1,
  TOP = 2,
  OPTIMAL_VERTICALLY = 3
};
bool VerticalAlignment_IsValid(int value);
constexpr VerticalAlignment VerticalAlignment_MIN = CENTER_VERTICALLY;
constexpr VerticalAlignment VerticalAlignment_MAX = OPTIMAL_VERTICALLY;
constexpr int VerticalAlignment_ARRAYSIZE = VerticalAlignment_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VerticalAlignment_descriptor();
template<typename T>
inline const std::string& VerticalAlignment_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VerticalAlignment>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VerticalAlignment_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VerticalAlignment_descriptor(), enum_t_value);
}
inline bool VerticalAlignment_Parse(
    const std::string& name, VerticalAlignment* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VerticalAlignment>(
    VerticalAlignment_descriptor(), name, value);
}
enum HorizontalAlignment : int {
  CENTER_HORIZONTALLY = 0,
  LEFT = 1,
  RIGHT = 2,
  OPTIMAL_HORIZONTALLY = 3
};
bool HorizontalAlignment_IsValid(int value);
constexpr HorizontalAlignment HorizontalAlignment_MIN = CENTER_HORIZONTALLY;
constexpr HorizontalAlignment HorizontalAlignment_MAX = OPTIMAL_HORIZONTALLY;
constexpr int HorizontalAlignment_ARRAYSIZE = HorizontalAlignment_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HorizontalAlignment_descriptor();
template<typename T>
inline const std::string& HorizontalAlignment_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HorizontalAlignment>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HorizontalAlignment_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HorizontalAlignment_descriptor(), enum_t_value);
}
inline bool HorizontalAlignment_Parse(
    const std::string& name, HorizontalAlignment* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HorizontalAlignment>(
    HorizontalAlignment_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace alignment
}  // namespace gui

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gui::alignment::VerticalAlignment> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gui::alignment::VerticalAlignment>() {
  return ::gui::alignment::VerticalAlignment_descriptor();
}
template <> struct is_proto_enum< ::gui::alignment::HorizontalAlignment> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gui::alignment::HorizontalAlignment>() {
  return ::gui::alignment::HorizontalAlignment_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gui_2falignment_2eproto
