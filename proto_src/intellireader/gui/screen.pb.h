// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gui/screen.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gui_2fscreen_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gui_2fscreen_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gui/background.pb.h"
#include "gui/foreground.pb.h"
#include "gui/widget.pb.h"
#include "gui/border.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gui_2fscreen_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gui_2fscreen_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gui_2fscreen_2eproto;
namespace gui {
namespace screen {
class ShowScreen;
class ShowScreenDefaultTypeInternal;
extern ShowScreenDefaultTypeInternal _ShowScreen_default_instance_;
}  // namespace screen
}  // namespace gui
PROTOBUF_NAMESPACE_OPEN
template<> ::gui::screen::ShowScreen* Arena::CreateMaybeMessage<::gui::screen::ShowScreen>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gui {
namespace screen {

// ===================================================================

class ShowScreen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gui.screen.ShowScreen) */ {
 public:
  ShowScreen();
  virtual ~ShowScreen();

  ShowScreen(const ShowScreen& from);
  ShowScreen(ShowScreen&& from) noexcept
    : ShowScreen() {
    *this = ::std::move(from);
  }

  inline ShowScreen& operator=(const ShowScreen& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowScreen& operator=(ShowScreen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowScreen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowScreen* internal_default_instance() {
    return reinterpret_cast<const ShowScreen*>(
               &_ShowScreen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ShowScreen& a, ShowScreen& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowScreen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowScreen* New() const final {
    return CreateMaybeMessage<ShowScreen>(nullptr);
  }

  ShowScreen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowScreen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowScreen& from);
  void MergeFrom(const ShowScreen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowScreen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gui.screen.ShowScreen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gui_2fscreen_2eproto);
    return ::descriptor_table_gui_2fscreen_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootFieldNumber = 1,
    kBackgroundFieldNumber = 2,
    kForegroundFieldNumber = 3,
    kBorderFieldNumber = 4,
  };
  // required .gui.widget.Widget root = 1;
  bool has_root() const;
  private:
  bool _internal_has_root() const;
  public:
  void clear_root();
  const ::gui::widget::Widget& root() const;
  ::gui::widget::Widget* release_root();
  ::gui::widget::Widget* mutable_root();
  void set_allocated_root(::gui::widget::Widget* root);
  private:
  const ::gui::widget::Widget& _internal_root() const;
  ::gui::widget::Widget* _internal_mutable_root();
  public:

  // optional .gui.background.Background background = 2;
  bool has_background() const;
  private:
  bool _internal_has_background() const;
  public:
  void clear_background();
  const ::gui::background::Background& background() const;
  ::gui::background::Background* release_background();
  ::gui::background::Background* mutable_background();
  void set_allocated_background(::gui::background::Background* background);
  private:
  const ::gui::background::Background& _internal_background() const;
  ::gui::background::Background* _internal_mutable_background();
  public:

  // optional .gui.foreground.Foreground foreground = 3;
  bool has_foreground() const;
  private:
  bool _internal_has_foreground() const;
  public:
  void clear_foreground();
  const ::gui::foreground::Foreground& foreground() const;
  ::gui::foreground::Foreground* release_foreground();
  ::gui::foreground::Foreground* mutable_foreground();
  void set_allocated_foreground(::gui::foreground::Foreground* foreground);
  private:
  const ::gui::foreground::Foreground& _internal_foreground() const;
  ::gui::foreground::Foreground* _internal_mutable_foreground();
  public:

  // optional .gui.border.Border border = 4;
  bool has_border() const;
  private:
  bool _internal_has_border() const;
  public:
  void clear_border();
  const ::gui::border::Border& border() const;
  ::gui::border::Border* release_border();
  ::gui::border::Border* mutable_border();
  void set_allocated_border(::gui::border::Border* border);
  private:
  const ::gui::border::Border& _internal_border() const;
  ::gui::border::Border* _internal_mutable_border();
  public:

  // @@protoc_insertion_point(class_scope:gui.screen.ShowScreen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::gui::widget::Widget* root_;
  ::gui::background::Background* background_;
  ::gui::foreground::Foreground* foreground_;
  ::gui::border::Border* border_;
  friend struct ::TableStruct_gui_2fscreen_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShowScreen

// required .gui.widget.Widget root = 1;
inline bool ShowScreen::_internal_has_root() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || root_ != nullptr);
  return value;
}
inline bool ShowScreen::has_root() const {
  return _internal_has_root();
}
inline const ::gui::widget::Widget& ShowScreen::_internal_root() const {
  const ::gui::widget::Widget* p = root_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gui::widget::Widget*>(
      &::gui::widget::_Widget_default_instance_);
}
inline const ::gui::widget::Widget& ShowScreen::root() const {
  // @@protoc_insertion_point(field_get:gui.screen.ShowScreen.root)
  return _internal_root();
}
inline ::gui::widget::Widget* ShowScreen::release_root() {
  // @@protoc_insertion_point(field_release:gui.screen.ShowScreen.root)
  _has_bits_[0] &= ~0x00000001u;
  ::gui::widget::Widget* temp = root_;
  root_ = nullptr;
  return temp;
}
inline ::gui::widget::Widget* ShowScreen::_internal_mutable_root() {
  _has_bits_[0] |= 0x00000001u;
  if (root_ == nullptr) {
    auto* p = CreateMaybeMessage<::gui::widget::Widget>(GetArenaNoVirtual());
    root_ = p;
  }
  return root_;
}
inline ::gui::widget::Widget* ShowScreen::mutable_root() {
  // @@protoc_insertion_point(field_mutable:gui.screen.ShowScreen.root)
  return _internal_mutable_root();
}
inline void ShowScreen::set_allocated_root(::gui::widget::Widget* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_);
  }
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:gui.screen.ShowScreen.root)
}

// optional .gui.background.Background background = 2;
inline bool ShowScreen::_internal_has_background() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || background_ != nullptr);
  return value;
}
inline bool ShowScreen::has_background() const {
  return _internal_has_background();
}
inline const ::gui::background::Background& ShowScreen::_internal_background() const {
  const ::gui::background::Background* p = background_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gui::background::Background*>(
      &::gui::background::_Background_default_instance_);
}
inline const ::gui::background::Background& ShowScreen::background() const {
  // @@protoc_insertion_point(field_get:gui.screen.ShowScreen.background)
  return _internal_background();
}
inline ::gui::background::Background* ShowScreen::release_background() {
  // @@protoc_insertion_point(field_release:gui.screen.ShowScreen.background)
  _has_bits_[0] &= ~0x00000002u;
  ::gui::background::Background* temp = background_;
  background_ = nullptr;
  return temp;
}
inline ::gui::background::Background* ShowScreen::_internal_mutable_background() {
  _has_bits_[0] |= 0x00000002u;
  if (background_ == nullptr) {
    auto* p = CreateMaybeMessage<::gui::background::Background>(GetArenaNoVirtual());
    background_ = p;
  }
  return background_;
}
inline ::gui::background::Background* ShowScreen::mutable_background() {
  // @@protoc_insertion_point(field_mutable:gui.screen.ShowScreen.background)
  return _internal_mutable_background();
}
inline void ShowScreen::set_allocated_background(::gui::background::Background* background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(background_);
  }
  if (background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  background_ = background;
  // @@protoc_insertion_point(field_set_allocated:gui.screen.ShowScreen.background)
}

// optional .gui.foreground.Foreground foreground = 3;
inline bool ShowScreen::_internal_has_foreground() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || foreground_ != nullptr);
  return value;
}
inline bool ShowScreen::has_foreground() const {
  return _internal_has_foreground();
}
inline const ::gui::foreground::Foreground& ShowScreen::_internal_foreground() const {
  const ::gui::foreground::Foreground* p = foreground_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gui::foreground::Foreground*>(
      &::gui::foreground::_Foreground_default_instance_);
}
inline const ::gui::foreground::Foreground& ShowScreen::foreground() const {
  // @@protoc_insertion_point(field_get:gui.screen.ShowScreen.foreground)
  return _internal_foreground();
}
inline ::gui::foreground::Foreground* ShowScreen::release_foreground() {
  // @@protoc_insertion_point(field_release:gui.screen.ShowScreen.foreground)
  _has_bits_[0] &= ~0x00000004u;
  ::gui::foreground::Foreground* temp = foreground_;
  foreground_ = nullptr;
  return temp;
}
inline ::gui::foreground::Foreground* ShowScreen::_internal_mutable_foreground() {
  _has_bits_[0] |= 0x00000004u;
  if (foreground_ == nullptr) {
    auto* p = CreateMaybeMessage<::gui::foreground::Foreground>(GetArenaNoVirtual());
    foreground_ = p;
  }
  return foreground_;
}
inline ::gui::foreground::Foreground* ShowScreen::mutable_foreground() {
  // @@protoc_insertion_point(field_mutable:gui.screen.ShowScreen.foreground)
  return _internal_mutable_foreground();
}
inline void ShowScreen::set_allocated_foreground(::gui::foreground::Foreground* foreground) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(foreground_);
  }
  if (foreground) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      foreground = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foreground, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  foreground_ = foreground;
  // @@protoc_insertion_point(field_set_allocated:gui.screen.ShowScreen.foreground)
}

// optional .gui.border.Border border = 4;
inline bool ShowScreen::_internal_has_border() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || border_ != nullptr);
  return value;
}
inline bool ShowScreen::has_border() const {
  return _internal_has_border();
}
inline const ::gui::border::Border& ShowScreen::_internal_border() const {
  const ::gui::border::Border* p = border_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gui::border::Border*>(
      &::gui::border::_Border_default_instance_);
}
inline const ::gui::border::Border& ShowScreen::border() const {
  // @@protoc_insertion_point(field_get:gui.screen.ShowScreen.border)
  return _internal_border();
}
inline ::gui::border::Border* ShowScreen::release_border() {
  // @@protoc_insertion_point(field_release:gui.screen.ShowScreen.border)
  _has_bits_[0] &= ~0x00000008u;
  ::gui::border::Border* temp = border_;
  border_ = nullptr;
  return temp;
}
inline ::gui::border::Border* ShowScreen::_internal_mutable_border() {
  _has_bits_[0] |= 0x00000008u;
  if (border_ == nullptr) {
    auto* p = CreateMaybeMessage<::gui::border::Border>(GetArenaNoVirtual());
    border_ = p;
  }
  return border_;
}
inline ::gui::border::Border* ShowScreen::mutable_border() {
  // @@protoc_insertion_point(field_mutable:gui.screen.ShowScreen.border)
  return _internal_mutable_border();
}
inline void ShowScreen::set_allocated_border(::gui::border::Border* border) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(border_);
  }
  if (border) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      border = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, border, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  border_ = border;
  // @@protoc_insertion_point(field_set_allocated:gui.screen.ShowScreen.border)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace screen
}  // namespace gui

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gui_2fscreen_2eproto
