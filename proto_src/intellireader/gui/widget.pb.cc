// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gui/widget.proto

#include "gui/widget.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gui_2fbackground_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Background_gui_2fbackground_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2fborder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Border_gui_2fborder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2fforeground_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Foreground_gui_2fforeground_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2fwidget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomerPicture_gui_2fwidget_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2fwidget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeneratedText_gui_2fwidget_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2fwidget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_HorizontalLayout_gui_2fwidget_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2fwidget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Picture_gui_2fwidget_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2fwidget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QrCode_gui_2fwidget_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2fwidget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Text_gui_2fwidget_2eproto;
namespace gui {
namespace widget {
class WidgetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Widget> _instance;
  const ::gui::widget::VerticalLayout* vertical_layout_;
  const ::gui::widget::HorizontalLayout* horizontal_layout_;
  const ::gui::widget::Text* text_;
  const ::gui::widget::Picture* picture_;
  const ::gui::widget::QrCode* qr_code_;
  const ::gui::widget::CustomerPicture* customer_picture_;
  const ::gui::widget::GeneratedText* generated_text_;
} _Widget_default_instance_;
class VerticalLayoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerticalLayout> _instance;
} _VerticalLayout_default_instance_;
class HorizontalLayoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HorizontalLayout> _instance;
} _HorizontalLayout_default_instance_;
class TextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Text> _instance;
} _Text_default_instance_;
class PictureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Picture> _instance;
} _Picture_default_instance_;
class QrCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QrCode> _instance;
} _QrCode_default_instance_;
class CustomerPictureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomerPicture> _instance;
} _CustomerPicture_default_instance_;
class GeneratedTextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeneratedText> _instance;
} _GeneratedText_default_instance_;
}  // namespace widget
}  // namespace gui
static void InitDefaultsscc_info_CustomerPicture_gui_2fwidget_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gui::widget::_CustomerPicture_default_instance_;
    new (ptr) ::gui::widget::CustomerPicture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gui::widget::CustomerPicture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomerPicture_gui_2fwidget_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CustomerPicture_gui_2fwidget_2eproto}, {
      &scc_info_Background_gui_2fbackground_2eproto.base,}};

static void InitDefaultsscc_info_GeneratedText_gui_2fwidget_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gui::widget::_GeneratedText_default_instance_;
    new (ptr) ::gui::widget::GeneratedText();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gui::widget::GeneratedText::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeneratedText_gui_2fwidget_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GeneratedText_gui_2fwidget_2eproto}, {
      &scc_info_Background_gui_2fbackground_2eproto.base,
      &scc_info_Foreground_gui_2fforeground_2eproto.base,}};

static void InitDefaultsscc_info_HorizontalLayout_gui_2fwidget_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gui::widget::_Widget_default_instance_;
    new (ptr) ::gui::widget::Widget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::gui::widget::_VerticalLayout_default_instance_;
    new (ptr) ::gui::widget::VerticalLayout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::gui::widget::_HorizontalLayout_default_instance_;
    new (ptr) ::gui::widget::HorizontalLayout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gui::widget::Widget::InitAsDefaultInstance();
  ::gui::widget::VerticalLayout::InitAsDefaultInstance();
  ::gui::widget::HorizontalLayout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_HorizontalLayout_gui_2fwidget_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_HorizontalLayout_gui_2fwidget_2eproto}, {
      &scc_info_Text_gui_2fwidget_2eproto.base,
      &scc_info_Picture_gui_2fwidget_2eproto.base,
      &scc_info_QrCode_gui_2fwidget_2eproto.base,
      &scc_info_CustomerPicture_gui_2fwidget_2eproto.base,
      &scc_info_GeneratedText_gui_2fwidget_2eproto.base,}};

static void InitDefaultsscc_info_Picture_gui_2fwidget_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gui::widget::_Picture_default_instance_;
    new (ptr) ::gui::widget::Picture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gui::widget::Picture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Picture_gui_2fwidget_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Picture_gui_2fwidget_2eproto}, {
      &scc_info_Background_gui_2fbackground_2eproto.base,}};

static void InitDefaultsscc_info_QrCode_gui_2fwidget_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gui::widget::_QrCode_default_instance_;
    new (ptr) ::gui::widget::QrCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gui::widget::QrCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QrCode_gui_2fwidget_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QrCode_gui_2fwidget_2eproto}, {}};

static void InitDefaultsscc_info_Text_gui_2fwidget_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gui::widget::_Text_default_instance_;
    new (ptr) ::gui::widget::Text();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gui::widget::Text::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Text_gui_2fwidget_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Text_gui_2fwidget_2eproto}, {
      &scc_info_Background_gui_2fbackground_2eproto.base,
      &scc_info_Foreground_gui_2fforeground_2eproto.base,
      &scc_info_Border_gui_2fborder_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gui_2fwidget_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gui_2fwidget_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gui_2fwidget_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gui_2fwidget_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gui::widget::Widget, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::Widget, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gui::widget::Widget, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::gui::widget::WidgetDefaultTypeInternal, vertical_layout_),
  offsetof(::gui::widget::WidgetDefaultTypeInternal, horizontal_layout_),
  offsetof(::gui::widget::WidgetDefaultTypeInternal, text_),
  offsetof(::gui::widget::WidgetDefaultTypeInternal, picture_),
  offsetof(::gui::widget::WidgetDefaultTypeInternal, qr_code_),
  offsetof(::gui::widget::WidgetDefaultTypeInternal, customer_picture_),
  offsetof(::gui::widget::WidgetDefaultTypeInternal, generated_text_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::Widget, widget_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::gui::widget::VerticalLayout, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::VerticalLayout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gui::widget::VerticalLayout, widgets_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::gui::widget::HorizontalLayout, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::HorizontalLayout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gui::widget::HorizontalLayout, widgets_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::gui::widget::Text, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::Text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gui::widget::Text, text_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::Text, vertical_alignment_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::Text, horizontal_alignment_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::Text, background_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::Text, foreground_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::Text, font_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::Text, button_id_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::Text, border_),
  0,
  4,
  5,
  1,
  2,
  6,
  7,
  3,
  PROTOBUF_FIELD_OFFSET(::gui::widget::Picture, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::Picture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gui::widget::Picture, picture_id_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::Picture, vertical_alignment_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::Picture, horizontal_alignment_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::Picture, background_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::Picture, button_id_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::gui::widget::QrCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::QrCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gui::widget::QrCode, text_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::QrCode, module_dimension_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::QrCode, vertical_alignment_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::QrCode, horizontal_alignment_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::gui::widget::CustomerPicture, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::CustomerPicture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gui::widget::CustomerPicture, name_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::CustomerPicture, vertical_alignment_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::CustomerPicture, horizontal_alignment_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::CustomerPicture, background_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::CustomerPicture, button_id_),
  0,
  2,
  3,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::gui::widget::GeneratedText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::GeneratedText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gui::widget::GeneratedText, text_id_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::GeneratedText, prefix_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::GeneratedText, vertical_alignment_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::GeneratedText, horizontal_alignment_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::GeneratedText, background_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::GeneratedText, foreground_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::GeneratedText, font_),
  PROTOBUF_FIELD_OFFSET(::gui::widget::GeneratedText, button_id_),
  3,
  0,
  4,
  5,
  1,
  2,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::gui::widget::Widget)},
  { 20, 26, sizeof(::gui::widget::VerticalLayout)},
  { 27, 33, sizeof(::gui::widget::HorizontalLayout)},
  { 34, 47, sizeof(::gui::widget::Text)},
  { 55, 65, sizeof(::gui::widget::Picture)},
  { 70, 79, sizeof(::gui::widget::QrCode)},
  { 83, 93, sizeof(::gui::widget::CustomerPicture)},
  { 98, 111, sizeof(::gui::widget::GeneratedText)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gui::widget::_Widget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gui::widget::_VerticalLayout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gui::widget::_HorizontalLayout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gui::widget::_Text_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gui::widget::_Picture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gui::widget::_QrCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gui::widget::_CustomerPicture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gui::widget::_GeneratedText_default_instance_),
};

const char descriptor_table_protodef_gui_2fwidget_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020gui/widget.proto\022\ngui.widget\032\023gui/alig"
  "nment.proto\032\024gui/background.proto\032\020gui/b"
  "order.proto\032\016gui/font.proto\032\024gui/foregro"
  "und.proto\032\024gui/picture_id.proto\032\021gui/tex"
  "t_id.proto\"\343\002\n\006Widget\0225\n\017vertical_layout"
  "\030\001 \001(\0132\032.gui.widget.VerticalLayoutH\000\0229\n\021"
  "horizontal_layout\030\002 \001(\0132\034.gui.widget.Hor"
  "izontalLayoutH\000\022 \n\004text\030\003 \001(\0132\020.gui.widg"
  "et.TextH\000\022&\n\007picture\030\004 \001(\0132\023.gui.widget."
  "PictureH\000\022%\n\007qr_code\030\005 \001(\0132\022.gui.widget."
  "QrCodeH\000\0227\n\020customer_picture\030\006 \001(\0132\033.gui"
  ".widget.CustomerPictureH\000\0223\n\016generated_t"
  "ext\030\007 \001(\0132\031.gui.widget.GeneratedTextH\000B\010"
  "\n\006widget\"5\n\016VerticalLayout\022#\n\007widgets\030\001 "
  "\003(\0132\022.gui.widget.Widget\"7\n\020HorizontalLay"
  "out\022#\n\007widgets\030\001 \003(\0132\022.gui.widget.Widget"
  "\"\377\002\n\004Text\022\014\n\004text\030\001 \002(\t\022O\n\022vertical_alig"
  "nment\030\002 \001(\0162 .gui.alignment.VerticalAlig"
  "nment:\021CENTER_VERTICALLY\022U\n\024horizontal_a"
  "lignment\030\003 \001(\0162\".gui.alignment.Horizonta"
  "lAlignment:\023CENTER_HORIZONTALLY\022.\n\nbackg"
  "round\030\004 \001(\0132\032.gui.background.Background\022"
  ".\n\nforeground\030\005 \001(\0132\032.gui.foreground.For"
  "eground\022*\n\004font\030\006 \001(\0162\016.gui.font.Font:\014R"
  "EGULAR_FONT\022\021\n\tbutton_id\030\007 \001(\r\022\"\n\006border"
  "\030\010 \001(\0132\022.gui.border.Border\"\243\002\n\007Picture\022-"
  "\n\npicture_id\030\001 \002(\0162\031.gui.picture_id.Pict"
  "ureId\022O\n\022vertical_alignment\030\002 \001(\0162 .gui."
  "alignment.VerticalAlignment:\021CENTER_VERT"
  "ICALLY\022U\n\024horizontal_alignment\030\003 \001(\0162\".g"
  "ui.alignment.HorizontalAlignment:\023CENTER"
  "_HORIZONTALLY\022.\n\nbackground\030\004 \001(\0132\032.gui."
  "background.Background\022\021\n\tbutton_id\030\005 \001(\r"
  "\"\330\001\n\006QrCode\022\014\n\004text\030\001 \002(\014\022\030\n\020module_dime"
  "nsion\030\002 \001(\r\022O\n\022vertical_alignment\030\003 \001(\0162"
  " .gui.alignment.VerticalAlignment:\021CENTE"
  "R_VERTICALLY\022U\n\024horizontal_alignment\030\004 \001"
  "(\0162\".gui.alignment.HorizontalAlignment:\023"
  "CENTER_HORIZONTALLY\"\212\002\n\017CustomerPicture\022"
  "\014\n\004name\030\001 \002(\t\022O\n\022vertical_alignment\030\002 \001("
  "\0162 .gui.alignment.VerticalAlignment:\021CEN"
  "TER_VERTICALLY\022U\n\024horizontal_alignment\030\003"
  " \001(\0162\".gui.alignment.HorizontalAlignment"
  ":\023CENTER_HORIZONTALLY\022.\n\nbackground\030\004 \001("
  "\0132\032.gui.background.Background\022\021\n\tbutton_"
  "id\030\005 \001(\r\"\216\003\n\rGeneratedText\022$\n\007text_id\030\001 "
  "\002(\0162\023.gui.text_id.TextId\022\020\n\006prefix\030\002 \001(\t"
  ":\000\022O\n\022vertical_alignment\030\003 \001(\0162 .gui.ali"
  "gnment.VerticalAlignment:\021CENTER_VERTICA"
  "LLY\022U\n\024horizontal_alignment\030\004 \001(\0162\".gui."
  "alignment.HorizontalAlignment:\023CENTER_HO"
  "RIZONTALLY\022.\n\nbackground\030\005 \001(\0132\032.gui.bac"
  "kground.Background\022.\n\nforeground\030\006 \001(\0132\032"
  ".gui.foreground.Foreground\022*\n\004font\030\007 \001(\016"
  "2\016.gui.font.Font:\014REGULAR_FONT\022\021\n\tbutton"
  "_id\030\010 \001(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gui_2fwidget_2eproto_deps[7] = {
  &::descriptor_table_gui_2falignment_2eproto,
  &::descriptor_table_gui_2fbackground_2eproto,
  &::descriptor_table_gui_2fborder_2eproto,
  &::descriptor_table_gui_2ffont_2eproto,
  &::descriptor_table_gui_2fforeground_2eproto,
  &::descriptor_table_gui_2fpicture_5fid_2eproto,
  &::descriptor_table_gui_2ftext_5fid_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gui_2fwidget_2eproto_sccs[6] = {
  &scc_info_CustomerPicture_gui_2fwidget_2eproto.base,
  &scc_info_GeneratedText_gui_2fwidget_2eproto.base,
  &scc_info_HorizontalLayout_gui_2fwidget_2eproto.base,
  &scc_info_Picture_gui_2fwidget_2eproto.base,
  &scc_info_QrCode_gui_2fwidget_2eproto.base,
  &scc_info_Text_gui_2fwidget_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gui_2fwidget_2eproto_once;
static bool descriptor_table_gui_2fwidget_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gui_2fwidget_2eproto = {
  &descriptor_table_gui_2fwidget_2eproto_initialized, descriptor_table_protodef_gui_2fwidget_2eproto, "gui/widget.proto", 2209,
  &descriptor_table_gui_2fwidget_2eproto_once, descriptor_table_gui_2fwidget_2eproto_sccs, descriptor_table_gui_2fwidget_2eproto_deps, 6, 7,
  schemas, file_default_instances, TableStruct_gui_2fwidget_2eproto::offsets,
  file_level_metadata_gui_2fwidget_2eproto, 8, file_level_enum_descriptors_gui_2fwidget_2eproto, file_level_service_descriptors_gui_2fwidget_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gui_2fwidget_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gui_2fwidget_2eproto), true);
namespace gui {
namespace widget {

// ===================================================================

void Widget::InitAsDefaultInstance() {
  ::gui::widget::_Widget_default_instance_.vertical_layout_ = const_cast< ::gui::widget::VerticalLayout*>(
      ::gui::widget::VerticalLayout::internal_default_instance());
  ::gui::widget::_Widget_default_instance_.horizontal_layout_ = const_cast< ::gui::widget::HorizontalLayout*>(
      ::gui::widget::HorizontalLayout::internal_default_instance());
  ::gui::widget::_Widget_default_instance_.text_ = const_cast< ::gui::widget::Text*>(
      ::gui::widget::Text::internal_default_instance());
  ::gui::widget::_Widget_default_instance_.picture_ = const_cast< ::gui::widget::Picture*>(
      ::gui::widget::Picture::internal_default_instance());
  ::gui::widget::_Widget_default_instance_.qr_code_ = const_cast< ::gui::widget::QrCode*>(
      ::gui::widget::QrCode::internal_default_instance());
  ::gui::widget::_Widget_default_instance_.customer_picture_ = const_cast< ::gui::widget::CustomerPicture*>(
      ::gui::widget::CustomerPicture::internal_default_instance());
  ::gui::widget::_Widget_default_instance_.generated_text_ = const_cast< ::gui::widget::GeneratedText*>(
      ::gui::widget::GeneratedText::internal_default_instance());
}
class Widget::_Internal {
 public:
  using HasBits = decltype(std::declval<Widget>()._has_bits_);
  static const ::gui::widget::VerticalLayout& vertical_layout(const Widget* msg);
  static const ::gui::widget::HorizontalLayout& horizontal_layout(const Widget* msg);
  static const ::gui::widget::Text& text(const Widget* msg);
  static const ::gui::widget::Picture& picture(const Widget* msg);
  static const ::gui::widget::QrCode& qr_code(const Widget* msg);
  static const ::gui::widget::CustomerPicture& customer_picture(const Widget* msg);
  static const ::gui::widget::GeneratedText& generated_text(const Widget* msg);
};

const ::gui::widget::VerticalLayout&
Widget::_Internal::vertical_layout(const Widget* msg) {
  return *msg->widget_.vertical_layout_;
}
const ::gui::widget::HorizontalLayout&
Widget::_Internal::horizontal_layout(const Widget* msg) {
  return *msg->widget_.horizontal_layout_;
}
const ::gui::widget::Text&
Widget::_Internal::text(const Widget* msg) {
  return *msg->widget_.text_;
}
const ::gui::widget::Picture&
Widget::_Internal::picture(const Widget* msg) {
  return *msg->widget_.picture_;
}
const ::gui::widget::QrCode&
Widget::_Internal::qr_code(const Widget* msg) {
  return *msg->widget_.qr_code_;
}
const ::gui::widget::CustomerPicture&
Widget::_Internal::customer_picture(const Widget* msg) {
  return *msg->widget_.customer_picture_;
}
const ::gui::widget::GeneratedText&
Widget::_Internal::generated_text(const Widget* msg) {
  return *msg->widget_.generated_text_;
}
void Widget::set_allocated_vertical_layout(::gui::widget::VerticalLayout* vertical_layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_widget();
  if (vertical_layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vertical_layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vertical_layout, submessage_arena);
    }
    set_has_vertical_layout();
    widget_.vertical_layout_ = vertical_layout;
  }
  // @@protoc_insertion_point(field_set_allocated:gui.widget.Widget.vertical_layout)
}
void Widget::set_allocated_horizontal_layout(::gui::widget::HorizontalLayout* horizontal_layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_widget();
  if (horizontal_layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      horizontal_layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, horizontal_layout, submessage_arena);
    }
    set_has_horizontal_layout();
    widget_.horizontal_layout_ = horizontal_layout;
  }
  // @@protoc_insertion_point(field_set_allocated:gui.widget.Widget.horizontal_layout)
}
void Widget::set_allocated_text(::gui::widget::Text* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_widget();
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    set_has_text();
    widget_.text_ = text;
  }
  // @@protoc_insertion_point(field_set_allocated:gui.widget.Widget.text)
}
void Widget::set_allocated_picture(::gui::widget::Picture* picture) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_widget();
  if (picture) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      picture = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, picture, submessage_arena);
    }
    set_has_picture();
    widget_.picture_ = picture;
  }
  // @@protoc_insertion_point(field_set_allocated:gui.widget.Widget.picture)
}
void Widget::set_allocated_qr_code(::gui::widget::QrCode* qr_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_widget();
  if (qr_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      qr_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qr_code, submessage_arena);
    }
    set_has_qr_code();
    widget_.qr_code_ = qr_code;
  }
  // @@protoc_insertion_point(field_set_allocated:gui.widget.Widget.qr_code)
}
void Widget::set_allocated_customer_picture(::gui::widget::CustomerPicture* customer_picture) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_widget();
  if (customer_picture) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      customer_picture = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_picture, submessage_arena);
    }
    set_has_customer_picture();
    widget_.customer_picture_ = customer_picture;
  }
  // @@protoc_insertion_point(field_set_allocated:gui.widget.Widget.customer_picture)
}
void Widget::set_allocated_generated_text(::gui::widget::GeneratedText* generated_text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_widget();
  if (generated_text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generated_text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generated_text, submessage_arena);
    }
    set_has_generated_text();
    widget_.generated_text_ = generated_text;
  }
  // @@protoc_insertion_point(field_set_allocated:gui.widget.Widget.generated_text)
}
Widget::Widget()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gui.widget.Widget)
}
Widget::Widget(const Widget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_widget();
  switch (from.widget_case()) {
    case kVerticalLayout: {
      _internal_mutable_vertical_layout()->::gui::widget::VerticalLayout::MergeFrom(from._internal_vertical_layout());
      break;
    }
    case kHorizontalLayout: {
      _internal_mutable_horizontal_layout()->::gui::widget::HorizontalLayout::MergeFrom(from._internal_horizontal_layout());
      break;
    }
    case kText: {
      _internal_mutable_text()->::gui::widget::Text::MergeFrom(from._internal_text());
      break;
    }
    case kPicture: {
      _internal_mutable_picture()->::gui::widget::Picture::MergeFrom(from._internal_picture());
      break;
    }
    case kQrCode: {
      _internal_mutable_qr_code()->::gui::widget::QrCode::MergeFrom(from._internal_qr_code());
      break;
    }
    case kCustomerPicture: {
      _internal_mutable_customer_picture()->::gui::widget::CustomerPicture::MergeFrom(from._internal_customer_picture());
      break;
    }
    case kGeneratedText: {
      _internal_mutable_generated_text()->::gui::widget::GeneratedText::MergeFrom(from._internal_generated_text());
      break;
    }
    case WIDGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gui.widget.Widget)
}

void Widget::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HorizontalLayout_gui_2fwidget_2eproto.base);
  clear_has_widget();
}

Widget::~Widget() {
  // @@protoc_insertion_point(destructor:gui.widget.Widget)
  SharedDtor();
}

void Widget::SharedDtor() {
  if (has_widget()) {
    clear_widget();
  }
}

void Widget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Widget& Widget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HorizontalLayout_gui_2fwidget_2eproto.base);
  return *internal_default_instance();
}


void Widget::clear_widget() {
// @@protoc_insertion_point(one_of_clear_start:gui.widget.Widget)
  switch (widget_case()) {
    case kVerticalLayout: {
      delete widget_.vertical_layout_;
      break;
    }
    case kHorizontalLayout: {
      delete widget_.horizontal_layout_;
      break;
    }
    case kText: {
      delete widget_.text_;
      break;
    }
    case kPicture: {
      delete widget_.picture_;
      break;
    }
    case kQrCode: {
      delete widget_.qr_code_;
      break;
    }
    case kCustomerPicture: {
      delete widget_.customer_picture_;
      break;
    }
    case kGeneratedText: {
      delete widget_.generated_text_;
      break;
    }
    case WIDGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WIDGET_NOT_SET;
}


void Widget::Clear() {
// @@protoc_insertion_point(message_clear_start:gui.widget.Widget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_widget();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Widget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .gui.widget.VerticalLayout vertical_layout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vertical_layout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.widget.HorizontalLayout horizontal_layout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_horizontal_layout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.widget.Text text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.widget.Picture picture = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_picture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.widget.QrCode qr_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_qr_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.widget.CustomerPicture customer_picture = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_picture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.widget.GeneratedText generated_text = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_generated_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Widget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gui.widget.Widget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (widget_case()) {
    case kVerticalLayout: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::vertical_layout(this), target, stream);
      break;
    }
    case kHorizontalLayout: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::horizontal_layout(this), target, stream);
      break;
    }
    case kText: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::text(this), target, stream);
      break;
    }
    case kPicture: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::picture(this), target, stream);
      break;
    }
    case kQrCode: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::qr_code(this), target, stream);
      break;
    }
    case kCustomerPicture: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::customer_picture(this), target, stream);
      break;
    }
    case kGeneratedText: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::generated_text(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gui.widget.Widget)
  return target;
}

size_t Widget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gui.widget.Widget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (widget_case()) {
    // optional .gui.widget.VerticalLayout vertical_layout = 1;
    case kVerticalLayout: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *widget_.vertical_layout_);
      break;
    }
    // optional .gui.widget.HorizontalLayout horizontal_layout = 2;
    case kHorizontalLayout: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *widget_.horizontal_layout_);
      break;
    }
    // optional .gui.widget.Text text = 3;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *widget_.text_);
      break;
    }
    // optional .gui.widget.Picture picture = 4;
    case kPicture: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *widget_.picture_);
      break;
    }
    // optional .gui.widget.QrCode qr_code = 5;
    case kQrCode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *widget_.qr_code_);
      break;
    }
    // optional .gui.widget.CustomerPicture customer_picture = 6;
    case kCustomerPicture: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *widget_.customer_picture_);
      break;
    }
    // optional .gui.widget.GeneratedText generated_text = 7;
    case kGeneratedText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *widget_.generated_text_);
      break;
    }
    case WIDGET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Widget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gui.widget.Widget)
  GOOGLE_DCHECK_NE(&from, this);
  const Widget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Widget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gui.widget.Widget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gui.widget.Widget)
    MergeFrom(*source);
  }
}

void Widget::MergeFrom(const Widget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gui.widget.Widget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.widget_case()) {
    case kVerticalLayout: {
      _internal_mutable_vertical_layout()->::gui::widget::VerticalLayout::MergeFrom(from._internal_vertical_layout());
      break;
    }
    case kHorizontalLayout: {
      _internal_mutable_horizontal_layout()->::gui::widget::HorizontalLayout::MergeFrom(from._internal_horizontal_layout());
      break;
    }
    case kText: {
      _internal_mutable_text()->::gui::widget::Text::MergeFrom(from._internal_text());
      break;
    }
    case kPicture: {
      _internal_mutable_picture()->::gui::widget::Picture::MergeFrom(from._internal_picture());
      break;
    }
    case kQrCode: {
      _internal_mutable_qr_code()->::gui::widget::QrCode::MergeFrom(from._internal_qr_code());
      break;
    }
    case kCustomerPicture: {
      _internal_mutable_customer_picture()->::gui::widget::CustomerPicture::MergeFrom(from._internal_customer_picture());
      break;
    }
    case kGeneratedText: {
      _internal_mutable_generated_text()->::gui::widget::GeneratedText::MergeFrom(from._internal_generated_text());
      break;
    }
    case WIDGET_NOT_SET: {
      break;
    }
  }
}

void Widget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gui.widget.Widget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Widget::CopyFrom(const Widget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gui.widget.Widget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Widget::IsInitialized() const {
  switch (widget_case()) {
    case kVerticalLayout: {
      if (has_vertical_layout()) {
        if (!this->vertical_layout().IsInitialized()) return false;
      }
      break;
    }
    case kHorizontalLayout: {
      if (has_horizontal_layout()) {
        if (!this->horizontal_layout().IsInitialized()) return false;
      }
      break;
    }
    case kText: {
      if (has_text()) {
        if (!this->text().IsInitialized()) return false;
      }
      break;
    }
    case kPicture: {
      if (has_picture()) {
        if (!this->picture().IsInitialized()) return false;
      }
      break;
    }
    case kQrCode: {
      if (has_qr_code()) {
        if (!this->qr_code().IsInitialized()) return false;
      }
      break;
    }
    case kCustomerPicture: {
      if (has_customer_picture()) {
        if (!this->customer_picture().IsInitialized()) return false;
      }
      break;
    }
    case kGeneratedText: {
      if (has_generated_text()) {
        if (!this->generated_text().IsInitialized()) return false;
      }
      break;
    }
    case WIDGET_NOT_SET: {
      break;
    }
  }
  return true;
}

void Widget::InternalSwap(Widget* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(widget_, other->widget_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Widget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerticalLayout::InitAsDefaultInstance() {
}
class VerticalLayout::_Internal {
 public:
  using HasBits = decltype(std::declval<VerticalLayout>()._has_bits_);
};

VerticalLayout::VerticalLayout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gui.widget.VerticalLayout)
}
VerticalLayout::VerticalLayout(const VerticalLayout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      widgets_(from.widgets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gui.widget.VerticalLayout)
}

void VerticalLayout::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HorizontalLayout_gui_2fwidget_2eproto.base);
}

VerticalLayout::~VerticalLayout() {
  // @@protoc_insertion_point(destructor:gui.widget.VerticalLayout)
  SharedDtor();
}

void VerticalLayout::SharedDtor() {
}

void VerticalLayout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerticalLayout& VerticalLayout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HorizontalLayout_gui_2fwidget_2eproto.base);
  return *internal_default_instance();
}


void VerticalLayout::Clear() {
// @@protoc_insertion_point(message_clear_start:gui.widget.VerticalLayout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  widgets_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VerticalLayout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gui.widget.Widget widgets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_widgets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerticalLayout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gui.widget.VerticalLayout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gui.widget.Widget widgets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_widgets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_widgets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gui.widget.VerticalLayout)
  return target;
}

size_t VerticalLayout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gui.widget.VerticalLayout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gui.widget.Widget widgets = 1;
  total_size += 1UL * this->_internal_widgets_size();
  for (const auto& msg : this->widgets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerticalLayout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gui.widget.VerticalLayout)
  GOOGLE_DCHECK_NE(&from, this);
  const VerticalLayout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerticalLayout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gui.widget.VerticalLayout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gui.widget.VerticalLayout)
    MergeFrom(*source);
  }
}

void VerticalLayout::MergeFrom(const VerticalLayout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gui.widget.VerticalLayout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  widgets_.MergeFrom(from.widgets_);
}

void VerticalLayout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gui.widget.VerticalLayout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerticalLayout::CopyFrom(const VerticalLayout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gui.widget.VerticalLayout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerticalLayout::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(widgets_)) return false;
  return true;
}

void VerticalLayout::InternalSwap(VerticalLayout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  widgets_.InternalSwap(&other->widgets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerticalLayout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HorizontalLayout::InitAsDefaultInstance() {
}
class HorizontalLayout::_Internal {
 public:
  using HasBits = decltype(std::declval<HorizontalLayout>()._has_bits_);
};

HorizontalLayout::HorizontalLayout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gui.widget.HorizontalLayout)
}
HorizontalLayout::HorizontalLayout(const HorizontalLayout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      widgets_(from.widgets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gui.widget.HorizontalLayout)
}

void HorizontalLayout::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HorizontalLayout_gui_2fwidget_2eproto.base);
}

HorizontalLayout::~HorizontalLayout() {
  // @@protoc_insertion_point(destructor:gui.widget.HorizontalLayout)
  SharedDtor();
}

void HorizontalLayout::SharedDtor() {
}

void HorizontalLayout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HorizontalLayout& HorizontalLayout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HorizontalLayout_gui_2fwidget_2eproto.base);
  return *internal_default_instance();
}


void HorizontalLayout::Clear() {
// @@protoc_insertion_point(message_clear_start:gui.widget.HorizontalLayout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  widgets_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HorizontalLayout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .gui.widget.Widget widgets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_widgets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HorizontalLayout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gui.widget.HorizontalLayout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gui.widget.Widget widgets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_widgets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_widgets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gui.widget.HorizontalLayout)
  return target;
}

size_t HorizontalLayout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gui.widget.HorizontalLayout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gui.widget.Widget widgets = 1;
  total_size += 1UL * this->_internal_widgets_size();
  for (const auto& msg : this->widgets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HorizontalLayout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gui.widget.HorizontalLayout)
  GOOGLE_DCHECK_NE(&from, this);
  const HorizontalLayout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HorizontalLayout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gui.widget.HorizontalLayout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gui.widget.HorizontalLayout)
    MergeFrom(*source);
  }
}

void HorizontalLayout::MergeFrom(const HorizontalLayout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gui.widget.HorizontalLayout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  widgets_.MergeFrom(from.widgets_);
}

void HorizontalLayout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gui.widget.HorizontalLayout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HorizontalLayout::CopyFrom(const HorizontalLayout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gui.widget.HorizontalLayout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HorizontalLayout::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(widgets_)) return false;
  return true;
}

void HorizontalLayout::InternalSwap(HorizontalLayout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  widgets_.InternalSwap(&other->widgets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HorizontalLayout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Text::InitAsDefaultInstance() {
  ::gui::widget::_Text_default_instance_._instance.get_mutable()->background_ = const_cast< ::gui::background::Background*>(
      ::gui::background::Background::internal_default_instance());
  ::gui::widget::_Text_default_instance_._instance.get_mutable()->foreground_ = const_cast< ::gui::foreground::Foreground*>(
      ::gui::foreground::Foreground::internal_default_instance());
  ::gui::widget::_Text_default_instance_._instance.get_mutable()->border_ = const_cast< ::gui::border::Border*>(
      ::gui::border::Border::internal_default_instance());
}
class Text::_Internal {
 public:
  using HasBits = decltype(std::declval<Text>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vertical_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_horizontal_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::gui::background::Background& background(const Text* msg);
  static void set_has_background(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gui::foreground::Foreground& foreground(const Text* msg);
  static void set_has_foreground(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_font(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_button_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::gui::border::Border& border(const Text* msg);
  static void set_has_border(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::gui::background::Background&
Text::_Internal::background(const Text* msg) {
  return *msg->background_;
}
const ::gui::foreground::Foreground&
Text::_Internal::foreground(const Text* msg) {
  return *msg->foreground_;
}
const ::gui::border::Border&
Text::_Internal::border(const Text* msg) {
  return *msg->border_;
}
void Text::clear_background() {
  if (background_ != nullptr) background_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Text::clear_foreground() {
  if (foreground_ != nullptr) foreground_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Text::clear_border() {
  if (border_ != nullptr) border_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
Text::Text()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gui.widget.Text)
}
Text::Text(const Text& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from._internal_has_background()) {
    background_ = new ::gui::background::Background(*from.background_);
  } else {
    background_ = nullptr;
  }
  if (from._internal_has_foreground()) {
    foreground_ = new ::gui::foreground::Foreground(*from.foreground_);
  } else {
    foreground_ = nullptr;
  }
  if (from._internal_has_border()) {
    border_ = new ::gui::border::Border(*from.border_);
  } else {
    border_ = nullptr;
  }
  ::memcpy(&vertical_alignment_, &from.vertical_alignment_,
    static_cast<size_t>(reinterpret_cast<char*>(&button_id_) -
    reinterpret_cast<char*>(&vertical_alignment_)) + sizeof(button_id_));
  // @@protoc_insertion_point(copy_constructor:gui.widget.Text)
}

void Text::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Text_gui_2fwidget_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&background_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_id_) -
      reinterpret_cast<char*>(&background_)) + sizeof(button_id_));
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:gui.widget.Text)
  SharedDtor();
}

void Text::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete background_;
  if (this != internal_default_instance()) delete foreground_;
  if (this != internal_default_instance()) delete border_;
}

void Text::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Text& Text::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Text_gui_2fwidget_2eproto.base);
  return *internal_default_instance();
}


void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:gui.widget.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(background_ != nullptr);
      background_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(foreground_ != nullptr);
      foreground_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(border_ != nullptr);
      border_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&vertical_alignment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&button_id_) -
        reinterpret_cast<char*>(&vertical_alignment_)) + sizeof(button_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Text::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gui.widget.Text.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.alignment.VerticalAlignment vertical_alignment = 2 [default = CENTER_VERTICALLY];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::alignment::VerticalAlignment_IsValid(val))) {
            _internal_set_vertical_alignment(static_cast<::gui::alignment::VerticalAlignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 3 [default = CENTER_HORIZONTALLY];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::alignment::HorizontalAlignment_IsValid(val))) {
            _internal_set_horizontal_alignment(static_cast<::gui::alignment::HorizontalAlignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .gui.background.Background background = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_background(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.foreground.Foreground foreground = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_foreground(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.font.Font font = 6 [default = REGULAR_FONT];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::font::Font_IsValid(val))) {
            _internal_set_font(static_cast<::gui::font::Font>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 button_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_button_id(&has_bits);
          button_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.border.Border border = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_border(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Text::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gui.widget.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gui.widget.Text.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // optional .gui.alignment.VerticalAlignment vertical_alignment = 2 [default = CENTER_VERTICALLY];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_vertical_alignment(), target);
  }

  // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 3 [default = CENTER_HORIZONTALLY];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_horizontal_alignment(), target);
  }

  // optional .gui.background.Background background = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::background(this), target, stream);
  }

  // optional .gui.foreground.Foreground foreground = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::foreground(this), target, stream);
  }

  // optional .gui.font.Font font = 6 [default = REGULAR_FONT];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_font(), target);
  }

  // optional uint32 button_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_button_id(), target);
  }

  // optional .gui.border.Border border = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::border(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gui.widget.Text)
  return target;
}

size_t Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gui.widget.Text)
  size_t total_size = 0;

  // required string text = 1;
  if (_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .gui.background.Background background = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_);
    }

    // optional .gui.foreground.Foreground foreground = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foreground_);
    }

    // optional .gui.border.Border border = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *border_);
    }

    // optional .gui.alignment.VerticalAlignment vertical_alignment = 2 [default = CENTER_VERTICALLY];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vertical_alignment());
    }

    // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 3 [default = CENTER_HORIZONTALLY];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_horizontal_alignment());
    }

    // optional .gui.font.Font font = 6 [default = REGULAR_FONT];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_font());
    }

    // optional uint32 button_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_button_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Text::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gui.widget.Text)
  GOOGLE_DCHECK_NE(&from, this);
  const Text* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Text>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gui.widget.Text)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gui.widget.Text)
    MergeFrom(*source);
  }
}

void Text::MergeFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gui.widget.Text)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_background()->::gui::background::Background::MergeFrom(from._internal_background());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_foreground()->::gui::foreground::Foreground::MergeFrom(from._internal_foreground());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_border()->::gui::border::Border::MergeFrom(from._internal_border());
    }
    if (cached_has_bits & 0x00000010u) {
      vertical_alignment_ = from.vertical_alignment_;
    }
    if (cached_has_bits & 0x00000020u) {
      horizontal_alignment_ = from.horizontal_alignment_;
    }
    if (cached_has_bits & 0x00000040u) {
      font_ = from.font_;
    }
    if (cached_has_bits & 0x00000080u) {
      button_id_ = from.button_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Text::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gui.widget.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gui.widget.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_border()) {
    if (!border_->IsInitialized()) return false;
  }
  return true;
}

void Text::InternalSwap(Text* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(background_, other->background_);
  swap(foreground_, other->foreground_);
  swap(border_, other->border_);
  swap(vertical_alignment_, other->vertical_alignment_);
  swap(horizontal_alignment_, other->horizontal_alignment_);
  swap(font_, other->font_);
  swap(button_id_, other->button_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Text::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Picture::InitAsDefaultInstance() {
  ::gui::widget::_Picture_default_instance_._instance.get_mutable()->background_ = const_cast< ::gui::background::Background*>(
      ::gui::background::Background::internal_default_instance());
}
class Picture::_Internal {
 public:
  using HasBits = decltype(std::declval<Picture>()._has_bits_);
  static void set_has_picture_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vertical_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_horizontal_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::gui::background::Background& background(const Picture* msg);
  static void set_has_background(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_button_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::gui::background::Background&
Picture::_Internal::background(const Picture* msg) {
  return *msg->background_;
}
void Picture::clear_background() {
  if (background_ != nullptr) background_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Picture::Picture()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gui.widget.Picture)
}
Picture::Picture(const Picture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_background()) {
    background_ = new ::gui::background::Background(*from.background_);
  } else {
    background_ = nullptr;
  }
  ::memcpy(&picture_id_, &from.picture_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&button_id_) -
    reinterpret_cast<char*>(&picture_id_)) + sizeof(button_id_));
  // @@protoc_insertion_point(copy_constructor:gui.widget.Picture)
}

void Picture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Picture_gui_2fwidget_2eproto.base);
  ::memset(&background_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_id_) -
      reinterpret_cast<char*>(&background_)) + sizeof(button_id_));
}

Picture::~Picture() {
  // @@protoc_insertion_point(destructor:gui.widget.Picture)
  SharedDtor();
}

void Picture::SharedDtor() {
  if (this != internal_default_instance()) delete background_;
}

void Picture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Picture& Picture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Picture_gui_2fwidget_2eproto.base);
  return *internal_default_instance();
}


void Picture::Clear() {
// @@protoc_insertion_point(message_clear_start:gui.widget.Picture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(background_ != nullptr);
    background_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&picture_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&button_id_) -
        reinterpret_cast<char*>(&picture_id_)) + sizeof(button_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Picture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .gui.picture_id.PictureId picture_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::picture_id::PictureId_IsValid(val))) {
            _internal_set_picture_id(static_cast<::gui::picture_id::PictureId>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .gui.alignment.VerticalAlignment vertical_alignment = 2 [default = CENTER_VERTICALLY];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::alignment::VerticalAlignment_IsValid(val))) {
            _internal_set_vertical_alignment(static_cast<::gui::alignment::VerticalAlignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 3 [default = CENTER_HORIZONTALLY];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::alignment::HorizontalAlignment_IsValid(val))) {
            _internal_set_horizontal_alignment(static_cast<::gui::alignment::HorizontalAlignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .gui.background.Background background = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_background(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 button_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_button_id(&has_bits);
          button_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Picture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gui.widget.Picture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gui.picture_id.PictureId picture_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_picture_id(), target);
  }

  // optional .gui.alignment.VerticalAlignment vertical_alignment = 2 [default = CENTER_VERTICALLY];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_vertical_alignment(), target);
  }

  // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 3 [default = CENTER_HORIZONTALLY];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_horizontal_alignment(), target);
  }

  // optional .gui.background.Background background = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::background(this), target, stream);
  }

  // optional uint32 button_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_button_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gui.widget.Picture)
  return target;
}

size_t Picture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gui.widget.Picture)
  size_t total_size = 0;

  // required .gui.picture_id.PictureId picture_id = 1;
  if (_internal_has_picture_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_picture_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .gui.background.Background background = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *background_);
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional .gui.alignment.VerticalAlignment vertical_alignment = 2 [default = CENTER_VERTICALLY];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vertical_alignment());
    }

    // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 3 [default = CENTER_HORIZONTALLY];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_horizontal_alignment());
    }

    // optional uint32 button_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_button_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Picture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gui.widget.Picture)
  GOOGLE_DCHECK_NE(&from, this);
  const Picture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Picture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gui.widget.Picture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gui.widget.Picture)
    MergeFrom(*source);
  }
}

void Picture::MergeFrom(const Picture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gui.widget.Picture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_background()->::gui::background::Background::MergeFrom(from._internal_background());
    }
    if (cached_has_bits & 0x00000002u) {
      picture_id_ = from.picture_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      vertical_alignment_ = from.vertical_alignment_;
    }
    if (cached_has_bits & 0x00000008u) {
      horizontal_alignment_ = from.horizontal_alignment_;
    }
    if (cached_has_bits & 0x00000010u) {
      button_id_ = from.button_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Picture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gui.widget.Picture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Picture::CopyFrom(const Picture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gui.widget.Picture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Picture::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Picture::InternalSwap(Picture* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(background_, other->background_);
  swap(picture_id_, other->picture_id_);
  swap(vertical_alignment_, other->vertical_alignment_);
  swap(horizontal_alignment_, other->horizontal_alignment_);
  swap(button_id_, other->button_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Picture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QrCode::InitAsDefaultInstance() {
}
class QrCode::_Internal {
 public:
  using HasBits = decltype(std::declval<QrCode>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_module_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vertical_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_horizontal_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

QrCode::QrCode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gui.widget.QrCode)
}
QrCode::QrCode(const QrCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&module_dimension_, &from.module_dimension_,
    static_cast<size_t>(reinterpret_cast<char*>(&horizontal_alignment_) -
    reinterpret_cast<char*>(&module_dimension_)) + sizeof(horizontal_alignment_));
  // @@protoc_insertion_point(copy_constructor:gui.widget.QrCode)
}

void QrCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QrCode_gui_2fwidget_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&module_dimension_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&horizontal_alignment_) -
      reinterpret_cast<char*>(&module_dimension_)) + sizeof(horizontal_alignment_));
}

QrCode::~QrCode() {
  // @@protoc_insertion_point(destructor:gui.widget.QrCode)
  SharedDtor();
}

void QrCode::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QrCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QrCode& QrCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QrCode_gui_2fwidget_2eproto.base);
  return *internal_default_instance();
}


void QrCode::Clear() {
// @@protoc_insertion_point(message_clear_start:gui.widget.QrCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&module_dimension_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&horizontal_alignment_) -
        reinterpret_cast<char*>(&module_dimension_)) + sizeof(horizontal_alignment_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* QrCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 module_dimension = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_module_dimension(&has_bits);
          module_dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.alignment.VerticalAlignment vertical_alignment = 3 [default = CENTER_VERTICALLY];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::alignment::VerticalAlignment_IsValid(val))) {
            _internal_set_vertical_alignment(static_cast<::gui::alignment::VerticalAlignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 4 [default = CENTER_HORIZONTALLY];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::alignment::HorizontalAlignment_IsValid(val))) {
            _internal_set_horizontal_alignment(static_cast<::gui::alignment::HorizontalAlignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QrCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gui.widget.QrCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes text = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_text(), target);
  }

  // optional uint32 module_dimension = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_module_dimension(), target);
  }

  // optional .gui.alignment.VerticalAlignment vertical_alignment = 3 [default = CENTER_VERTICALLY];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_vertical_alignment(), target);
  }

  // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 4 [default = CENTER_HORIZONTALLY];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_horizontal_alignment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gui.widget.QrCode)
  return target;
}

size_t QrCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gui.widget.QrCode)
  size_t total_size = 0;

  // required bytes text = 1;
  if (_internal_has_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_text());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional uint32 module_dimension = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_module_dimension());
    }

    // optional .gui.alignment.VerticalAlignment vertical_alignment = 3 [default = CENTER_VERTICALLY];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vertical_alignment());
    }

    // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 4 [default = CENTER_HORIZONTALLY];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_horizontal_alignment());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QrCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gui.widget.QrCode)
  GOOGLE_DCHECK_NE(&from, this);
  const QrCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QrCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gui.widget.QrCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gui.widget.QrCode)
    MergeFrom(*source);
  }
}

void QrCode::MergeFrom(const QrCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gui.widget.QrCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      module_dimension_ = from.module_dimension_;
    }
    if (cached_has_bits & 0x00000004u) {
      vertical_alignment_ = from.vertical_alignment_;
    }
    if (cached_has_bits & 0x00000008u) {
      horizontal_alignment_ = from.horizontal_alignment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QrCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gui.widget.QrCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QrCode::CopyFrom(const QrCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gui.widget.QrCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QrCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void QrCode::InternalSwap(QrCode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(module_dimension_, other->module_dimension_);
  swap(vertical_alignment_, other->vertical_alignment_);
  swap(horizontal_alignment_, other->horizontal_alignment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QrCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CustomerPicture::InitAsDefaultInstance() {
  ::gui::widget::_CustomerPicture_default_instance_._instance.get_mutable()->background_ = const_cast< ::gui::background::Background*>(
      ::gui::background::Background::internal_default_instance());
}
class CustomerPicture::_Internal {
 public:
  using HasBits = decltype(std::declval<CustomerPicture>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vertical_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_horizontal_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::gui::background::Background& background(const CustomerPicture* msg);
  static void set_has_background(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_button_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::gui::background::Background&
CustomerPicture::_Internal::background(const CustomerPicture* msg) {
  return *msg->background_;
}
void CustomerPicture::clear_background() {
  if (background_ != nullptr) background_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CustomerPicture::CustomerPicture()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gui.widget.CustomerPicture)
}
CustomerPicture::CustomerPicture(const CustomerPicture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_background()) {
    background_ = new ::gui::background::Background(*from.background_);
  } else {
    background_ = nullptr;
  }
  ::memcpy(&vertical_alignment_, &from.vertical_alignment_,
    static_cast<size_t>(reinterpret_cast<char*>(&button_id_) -
    reinterpret_cast<char*>(&vertical_alignment_)) + sizeof(button_id_));
  // @@protoc_insertion_point(copy_constructor:gui.widget.CustomerPicture)
}

void CustomerPicture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomerPicture_gui_2fwidget_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&background_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_id_) -
      reinterpret_cast<char*>(&background_)) + sizeof(button_id_));
}

CustomerPicture::~CustomerPicture() {
  // @@protoc_insertion_point(destructor:gui.widget.CustomerPicture)
  SharedDtor();
}

void CustomerPicture::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete background_;
}

void CustomerPicture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomerPicture& CustomerPicture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomerPicture_gui_2fwidget_2eproto.base);
  return *internal_default_instance();
}


void CustomerPicture::Clear() {
// @@protoc_insertion_point(message_clear_start:gui.widget.CustomerPicture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(background_ != nullptr);
      background_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&vertical_alignment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&button_id_) -
        reinterpret_cast<char*>(&vertical_alignment_)) + sizeof(button_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CustomerPicture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gui.widget.CustomerPicture.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.alignment.VerticalAlignment vertical_alignment = 2 [default = CENTER_VERTICALLY];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::alignment::VerticalAlignment_IsValid(val))) {
            _internal_set_vertical_alignment(static_cast<::gui::alignment::VerticalAlignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 3 [default = CENTER_HORIZONTALLY];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::alignment::HorizontalAlignment_IsValid(val))) {
            _internal_set_horizontal_alignment(static_cast<::gui::alignment::HorizontalAlignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .gui.background.Background background = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_background(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 button_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_button_id(&has_bits);
          button_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomerPicture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gui.widget.CustomerPicture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gui.widget.CustomerPicture.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .gui.alignment.VerticalAlignment vertical_alignment = 2 [default = CENTER_VERTICALLY];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_vertical_alignment(), target);
  }

  // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 3 [default = CENTER_HORIZONTALLY];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_horizontal_alignment(), target);
  }

  // optional .gui.background.Background background = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::background(this), target, stream);
  }

  // optional uint32 button_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_button_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gui.widget.CustomerPicture)
  return target;
}

size_t CustomerPicture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gui.widget.CustomerPicture)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .gui.background.Background background = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_);
    }

    // optional .gui.alignment.VerticalAlignment vertical_alignment = 2 [default = CENTER_VERTICALLY];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vertical_alignment());
    }

    // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 3 [default = CENTER_HORIZONTALLY];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_horizontal_alignment());
    }

    // optional uint32 button_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_button_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomerPicture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gui.widget.CustomerPicture)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomerPicture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomerPicture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gui.widget.CustomerPicture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gui.widget.CustomerPicture)
    MergeFrom(*source);
  }
}

void CustomerPicture::MergeFrom(const CustomerPicture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gui.widget.CustomerPicture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_background()->::gui::background::Background::MergeFrom(from._internal_background());
    }
    if (cached_has_bits & 0x00000004u) {
      vertical_alignment_ = from.vertical_alignment_;
    }
    if (cached_has_bits & 0x00000008u) {
      horizontal_alignment_ = from.horizontal_alignment_;
    }
    if (cached_has_bits & 0x00000010u) {
      button_id_ = from.button_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CustomerPicture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gui.widget.CustomerPicture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomerPicture::CopyFrom(const CustomerPicture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gui.widget.CustomerPicture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomerPicture::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CustomerPicture::InternalSwap(CustomerPicture* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(background_, other->background_);
  swap(vertical_alignment_, other->vertical_alignment_);
  swap(horizontal_alignment_, other->horizontal_alignment_);
  swap(button_id_, other->button_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomerPicture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeneratedText::InitAsDefaultInstance() {
  ::gui::widget::_GeneratedText_default_instance_._instance.get_mutable()->background_ = const_cast< ::gui::background::Background*>(
      ::gui::background::Background::internal_default_instance());
  ::gui::widget::_GeneratedText_default_instance_._instance.get_mutable()->foreground_ = const_cast< ::gui::foreground::Foreground*>(
      ::gui::foreground::Foreground::internal_default_instance());
}
class GeneratedText::_Internal {
 public:
  using HasBits = decltype(std::declval<GeneratedText>()._has_bits_);
  static void set_has_text_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vertical_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_horizontal_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::gui::background::Background& background(const GeneratedText* msg);
  static void set_has_background(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gui::foreground::Foreground& foreground(const GeneratedText* msg);
  static void set_has_foreground(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_font(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_button_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::gui::background::Background&
GeneratedText::_Internal::background(const GeneratedText* msg) {
  return *msg->background_;
}
const ::gui::foreground::Foreground&
GeneratedText::_Internal::foreground(const GeneratedText* msg) {
  return *msg->foreground_;
}
void GeneratedText::clear_background() {
  if (background_ != nullptr) background_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GeneratedText::clear_foreground() {
  if (foreground_ != nullptr) foreground_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
GeneratedText::GeneratedText()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gui.widget.GeneratedText)
}
GeneratedText::GeneratedText(const GeneratedText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prefix()) {
    prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
  }
  if (from._internal_has_background()) {
    background_ = new ::gui::background::Background(*from.background_);
  } else {
    background_ = nullptr;
  }
  if (from._internal_has_foreground()) {
    foreground_ = new ::gui::foreground::Foreground(*from.foreground_);
  } else {
    foreground_ = nullptr;
  }
  ::memcpy(&text_id_, &from.text_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&button_id_) -
    reinterpret_cast<char*>(&text_id_)) + sizeof(button_id_));
  // @@protoc_insertion_point(copy_constructor:gui.widget.GeneratedText)
}

void GeneratedText::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeneratedText_gui_2fwidget_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&background_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_id_) -
      reinterpret_cast<char*>(&background_)) + sizeof(button_id_));
}

GeneratedText::~GeneratedText() {
  // @@protoc_insertion_point(destructor:gui.widget.GeneratedText)
  SharedDtor();
}

void GeneratedText::SharedDtor() {
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete background_;
  if (this != internal_default_instance()) delete foreground_;
}

void GeneratedText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeneratedText& GeneratedText::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeneratedText_gui_2fwidget_2eproto.base);
  return *internal_default_instance();
}


void GeneratedText::Clear() {
// @@protoc_insertion_point(message_clear_start:gui.widget.GeneratedText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      prefix_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(background_ != nullptr);
      background_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(foreground_ != nullptr);
      foreground_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&text_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&button_id_) -
        reinterpret_cast<char*>(&text_id_)) + sizeof(button_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GeneratedText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .gui.text_id.TextId text_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::text_id::TextId_IsValid(val))) {
            _internal_set_text_id(static_cast<::gui::text_id::TextId>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string prefix = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gui.widget.GeneratedText.prefix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.alignment.VerticalAlignment vertical_alignment = 3 [default = CENTER_VERTICALLY];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::alignment::VerticalAlignment_IsValid(val))) {
            _internal_set_vertical_alignment(static_cast<::gui::alignment::VerticalAlignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 4 [default = CENTER_HORIZONTALLY];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::alignment::HorizontalAlignment_IsValid(val))) {
            _internal_set_horizontal_alignment(static_cast<::gui::alignment::HorizontalAlignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .gui.background.Background background = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_background(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.foreground.Foreground foreground = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_foreground(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.font.Font font = 7 [default = REGULAR_FONT];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::font::Font_IsValid(val))) {
            _internal_set_font(static_cast<::gui::font::Font>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 button_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_button_id(&has_bits);
          button_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeneratedText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gui.widget.GeneratedText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gui.text_id.TextId text_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_text_id(), target);
  }

  // optional string prefix = 2 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gui.widget.GeneratedText.prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_prefix(), target);
  }

  // optional .gui.alignment.VerticalAlignment vertical_alignment = 3 [default = CENTER_VERTICALLY];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_vertical_alignment(), target);
  }

  // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 4 [default = CENTER_HORIZONTALLY];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_horizontal_alignment(), target);
  }

  // optional .gui.background.Background background = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::background(this), target, stream);
  }

  // optional .gui.foreground.Foreground foreground = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::foreground(this), target, stream);
  }

  // optional .gui.font.Font font = 7 [default = REGULAR_FONT];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_font(), target);
  }

  // optional uint32 button_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_button_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gui.widget.GeneratedText)
  return target;
}

size_t GeneratedText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gui.widget.GeneratedText)
  size_t total_size = 0;

  // required .gui.text_id.TextId text_id = 1;
  if (_internal_has_text_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_text_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string prefix = 2 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prefix());
    }

    // optional .gui.background.Background background = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_);
    }

    // optional .gui.foreground.Foreground foreground = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foreground_);
    }

  }
  if (cached_has_bits & 0x000000f0u) {
    // optional .gui.alignment.VerticalAlignment vertical_alignment = 3 [default = CENTER_VERTICALLY];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vertical_alignment());
    }

    // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 4 [default = CENTER_HORIZONTALLY];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_horizontal_alignment());
    }

    // optional .gui.font.Font font = 7 [default = REGULAR_FONT];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_font());
    }

    // optional uint32 button_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_button_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneratedText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gui.widget.GeneratedText)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneratedText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeneratedText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gui.widget.GeneratedText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gui.widget.GeneratedText)
    MergeFrom(*source);
  }
}

void GeneratedText::MergeFrom(const GeneratedText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gui.widget.GeneratedText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      prefix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prefix_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_background()->::gui::background::Background::MergeFrom(from._internal_background());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_foreground()->::gui::foreground::Foreground::MergeFrom(from._internal_foreground());
    }
    if (cached_has_bits & 0x00000008u) {
      text_id_ = from.text_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      vertical_alignment_ = from.vertical_alignment_;
    }
    if (cached_has_bits & 0x00000020u) {
      horizontal_alignment_ = from.horizontal_alignment_;
    }
    if (cached_has_bits & 0x00000040u) {
      font_ = from.font_;
    }
    if (cached_has_bits & 0x00000080u) {
      button_id_ = from.button_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GeneratedText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gui.widget.GeneratedText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneratedText::CopyFrom(const GeneratedText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gui.widget.GeneratedText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneratedText::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void GeneratedText::InternalSwap(GeneratedText* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(background_, other->background_);
  swap(foreground_, other->foreground_);
  swap(text_id_, other->text_id_);
  swap(vertical_alignment_, other->vertical_alignment_);
  swap(horizontal_alignment_, other->horizontal_alignment_);
  swap(font_, other->font_);
  swap(button_id_, other->button_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeneratedText::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace widget
}  // namespace gui
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gui::widget::Widget* Arena::CreateMaybeMessage< ::gui::widget::Widget >(Arena* arena) {
  return Arena::CreateInternal< ::gui::widget::Widget >(arena);
}
template<> PROTOBUF_NOINLINE ::gui::widget::VerticalLayout* Arena::CreateMaybeMessage< ::gui::widget::VerticalLayout >(Arena* arena) {
  return Arena::CreateInternal< ::gui::widget::VerticalLayout >(arena);
}
template<> PROTOBUF_NOINLINE ::gui::widget::HorizontalLayout* Arena::CreateMaybeMessage< ::gui::widget::HorizontalLayout >(Arena* arena) {
  return Arena::CreateInternal< ::gui::widget::HorizontalLayout >(arena);
}
template<> PROTOBUF_NOINLINE ::gui::widget::Text* Arena::CreateMaybeMessage< ::gui::widget::Text >(Arena* arena) {
  return Arena::CreateInternal< ::gui::widget::Text >(arena);
}
template<> PROTOBUF_NOINLINE ::gui::widget::Picture* Arena::CreateMaybeMessage< ::gui::widget::Picture >(Arena* arena) {
  return Arena::CreateInternal< ::gui::widget::Picture >(arena);
}
template<> PROTOBUF_NOINLINE ::gui::widget::QrCode* Arena::CreateMaybeMessage< ::gui::widget::QrCode >(Arena* arena) {
  return Arena::CreateInternal< ::gui::widget::QrCode >(arena);
}
template<> PROTOBUF_NOINLINE ::gui::widget::CustomerPicture* Arena::CreateMaybeMessage< ::gui::widget::CustomerPicture >(Arena* arena) {
  return Arena::CreateInternal< ::gui::widget::CustomerPicture >(arena);
}
template<> PROTOBUF_NOINLINE ::gui::widget::GeneratedText* Arena::CreateMaybeMessage< ::gui::widget::GeneratedText >(Arena* arena) {
  return Arena::CreateInternal< ::gui::widget::GeneratedText >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
