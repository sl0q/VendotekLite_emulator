// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gui/screen.proto

#include "gui/screen.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gui_2fbackground_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Background_gui_2fbackground_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2fborder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Border_gui_2fborder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2fforeground_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Foreground_gui_2fforeground_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2fwidget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_HorizontalLayout_gui_2fwidget_2eproto;
namespace gui {
namespace screen {
class ShowScreenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShowScreen> _instance;
} _ShowScreen_default_instance_;
}  // namespace screen
}  // namespace gui
static void InitDefaultsscc_info_ShowScreen_gui_2fscreen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gui::screen::_ShowScreen_default_instance_;
    new (ptr) ::gui::screen::ShowScreen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gui::screen::ShowScreen::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ShowScreen_gui_2fscreen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ShowScreen_gui_2fscreen_2eproto}, {
      &scc_info_HorizontalLayout_gui_2fwidget_2eproto.base,
      &scc_info_Background_gui_2fbackground_2eproto.base,
      &scc_info_Foreground_gui_2fforeground_2eproto.base,
      &scc_info_Border_gui_2fborder_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gui_2fscreen_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gui_2fscreen_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gui_2fscreen_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gui_2fscreen_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gui::screen::ShowScreen, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gui::screen::ShowScreen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gui::screen::ShowScreen, root_),
  PROTOBUF_FIELD_OFFSET(::gui::screen::ShowScreen, background_),
  PROTOBUF_FIELD_OFFSET(::gui::screen::ShowScreen, foreground_),
  PROTOBUF_FIELD_OFFSET(::gui::screen::ShowScreen, border_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::gui::screen::ShowScreen)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gui::screen::_ShowScreen_default_instance_),
};

const char descriptor_table_protodef_gui_2fscreen_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020gui/screen.proto\022\ngui.screen\032\024gui/back"
  "ground.proto\032\024gui/foreground.proto\032\020gui/"
  "widget.proto\032\020gui/border.proto\"\262\001\n\nShowS"
  "creen\022 \n\004root\030\001 \002(\0132\022.gui.widget.Widget\022"
  ".\n\nbackground\030\002 \001(\0132\032.gui.background.Bac"
  "kground\022.\n\nforeground\030\003 \001(\0132\032.gui.foregr"
  "ound.Foreground\022\"\n\006border\030\004 \001(\0132\022.gui.bo"
  "rder.Border"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gui_2fscreen_2eproto_deps[4] = {
  &::descriptor_table_gui_2fbackground_2eproto,
  &::descriptor_table_gui_2fborder_2eproto,
  &::descriptor_table_gui_2fforeground_2eproto,
  &::descriptor_table_gui_2fwidget_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gui_2fscreen_2eproto_sccs[1] = {
  &scc_info_ShowScreen_gui_2fscreen_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gui_2fscreen_2eproto_once;
static bool descriptor_table_gui_2fscreen_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gui_2fscreen_2eproto = {
  &descriptor_table_gui_2fscreen_2eproto_initialized, descriptor_table_protodef_gui_2fscreen_2eproto, "gui/screen.proto", 291,
  &descriptor_table_gui_2fscreen_2eproto_once, descriptor_table_gui_2fscreen_2eproto_sccs, descriptor_table_gui_2fscreen_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_gui_2fscreen_2eproto::offsets,
  file_level_metadata_gui_2fscreen_2eproto, 1, file_level_enum_descriptors_gui_2fscreen_2eproto, file_level_service_descriptors_gui_2fscreen_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gui_2fscreen_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gui_2fscreen_2eproto), true);
namespace gui {
namespace screen {

// ===================================================================

void ShowScreen::InitAsDefaultInstance() {
  ::gui::screen::_ShowScreen_default_instance_._instance.get_mutable()->root_ = const_cast< ::gui::widget::Widget*>(
      ::gui::widget::Widget::internal_default_instance());
  ::gui::screen::_ShowScreen_default_instance_._instance.get_mutable()->background_ = const_cast< ::gui::background::Background*>(
      ::gui::background::Background::internal_default_instance());
  ::gui::screen::_ShowScreen_default_instance_._instance.get_mutable()->foreground_ = const_cast< ::gui::foreground::Foreground*>(
      ::gui::foreground::Foreground::internal_default_instance());
  ::gui::screen::_ShowScreen_default_instance_._instance.get_mutable()->border_ = const_cast< ::gui::border::Border*>(
      ::gui::border::Border::internal_default_instance());
}
class ShowScreen::_Internal {
 public:
  using HasBits = decltype(std::declval<ShowScreen>()._has_bits_);
  static const ::gui::widget::Widget& root(const ShowScreen* msg);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gui::background::Background& background(const ShowScreen* msg);
  static void set_has_background(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gui::foreground::Foreground& foreground(const ShowScreen* msg);
  static void set_has_foreground(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::gui::border::Border& border(const ShowScreen* msg);
  static void set_has_border(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::gui::widget::Widget&
ShowScreen::_Internal::root(const ShowScreen* msg) {
  return *msg->root_;
}
const ::gui::background::Background&
ShowScreen::_Internal::background(const ShowScreen* msg) {
  return *msg->background_;
}
const ::gui::foreground::Foreground&
ShowScreen::_Internal::foreground(const ShowScreen* msg) {
  return *msg->foreground_;
}
const ::gui::border::Border&
ShowScreen::_Internal::border(const ShowScreen* msg) {
  return *msg->border_;
}
void ShowScreen::clear_root() {
  if (root_ != nullptr) root_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ShowScreen::clear_background() {
  if (background_ != nullptr) background_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ShowScreen::clear_foreground() {
  if (foreground_ != nullptr) foreground_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ShowScreen::clear_border() {
  if (border_ != nullptr) border_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ShowScreen::ShowScreen()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gui.screen.ShowScreen)
}
ShowScreen::ShowScreen(const ShowScreen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_root()) {
    root_ = new ::gui::widget::Widget(*from.root_);
  } else {
    root_ = nullptr;
  }
  if (from._internal_has_background()) {
    background_ = new ::gui::background::Background(*from.background_);
  } else {
    background_ = nullptr;
  }
  if (from._internal_has_foreground()) {
    foreground_ = new ::gui::foreground::Foreground(*from.foreground_);
  } else {
    foreground_ = nullptr;
  }
  if (from._internal_has_border()) {
    border_ = new ::gui::border::Border(*from.border_);
  } else {
    border_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gui.screen.ShowScreen)
}

void ShowScreen::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShowScreen_gui_2fscreen_2eproto.base);
  ::memset(&root_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&border_) -
      reinterpret_cast<char*>(&root_)) + sizeof(border_));
}

ShowScreen::~ShowScreen() {
  // @@protoc_insertion_point(destructor:gui.screen.ShowScreen)
  SharedDtor();
}

void ShowScreen::SharedDtor() {
  if (this != internal_default_instance()) delete root_;
  if (this != internal_default_instance()) delete background_;
  if (this != internal_default_instance()) delete foreground_;
  if (this != internal_default_instance()) delete border_;
}

void ShowScreen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShowScreen& ShowScreen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShowScreen_gui_2fscreen_2eproto.base);
  return *internal_default_instance();
}


void ShowScreen::Clear() {
// @@protoc_insertion_point(message_clear_start:gui.screen.ShowScreen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(root_ != nullptr);
      root_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(background_ != nullptr);
      background_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(foreground_ != nullptr);
      foreground_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(border_ != nullptr);
      border_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ShowScreen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .gui.widget.Widget root = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.background.Background background = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_background(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.foreground.Foreground foreground = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_foreground(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.border.Border border = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_border(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShowScreen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gui.screen.ShowScreen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gui.widget.Widget root = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::root(this), target, stream);
  }

  // optional .gui.background.Background background = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::background(this), target, stream);
  }

  // optional .gui.foreground.Foreground foreground = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::foreground(this), target, stream);
  }

  // optional .gui.border.Border border = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::border(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gui.screen.ShowScreen)
  return target;
}

size_t ShowScreen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gui.screen.ShowScreen)
  size_t total_size = 0;

  // required .gui.widget.Widget root = 1;
  if (_internal_has_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .gui.background.Background background = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_);
    }

    // optional .gui.foreground.Foreground foreground = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foreground_);
    }

    // optional .gui.border.Border border = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *border_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShowScreen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gui.screen.ShowScreen)
  GOOGLE_DCHECK_NE(&from, this);
  const ShowScreen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShowScreen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gui.screen.ShowScreen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gui.screen.ShowScreen)
    MergeFrom(*source);
  }
}

void ShowScreen::MergeFrom(const ShowScreen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gui.screen.ShowScreen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_root()->::gui::widget::Widget::MergeFrom(from._internal_root());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_background()->::gui::background::Background::MergeFrom(from._internal_background());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_foreground()->::gui::foreground::Foreground::MergeFrom(from._internal_foreground());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_border()->::gui::border::Border::MergeFrom(from._internal_border());
    }
  }
}

void ShowScreen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gui.screen.ShowScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowScreen::CopyFrom(const ShowScreen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gui.screen.ShowScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowScreen::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_root()) {
    if (!root_->IsInitialized()) return false;
  }
  if (_internal_has_border()) {
    if (!border_->IsInitialized()) return false;
  }
  return true;
}

void ShowScreen::InternalSwap(ShowScreen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(root_, other->root_);
  swap(background_, other->background_);
  swap(foreground_, other->foreground_);
  swap(border_, other->border_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShowScreen::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace screen
}  // namespace gui
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gui::screen::ShowScreen* Arena::CreateMaybeMessage< ::gui::screen::ShowScreen >(Arena* arena) {
  return Arena::CreateInternal< ::gui::screen::ShowScreen >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
