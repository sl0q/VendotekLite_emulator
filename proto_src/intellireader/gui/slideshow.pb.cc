// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gui/slideshow.proto

#include "gui/slideshow.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gui_2fbackground_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Background_gui_2fbackground_2eproto;
namespace gui {
namespace slideshow {
class SlideshowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Slideshow> _instance;
} _Slideshow_default_instance_;
}  // namespace slideshow
}  // namespace gui
static void InitDefaultsscc_info_Slideshow_gui_2fslideshow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gui::slideshow::_Slideshow_default_instance_;
    new (ptr) ::gui::slideshow::Slideshow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gui::slideshow::Slideshow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Slideshow_gui_2fslideshow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Slideshow_gui_2fslideshow_2eproto}, {
      &scc_info_Background_gui_2fbackground_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gui_2fslideshow_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gui_2fslideshow_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gui_2fslideshow_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gui_2fslideshow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gui::slideshow::Slideshow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gui::slideshow::Slideshow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gui::slideshow::Slideshow, name_),
  PROTOBUF_FIELD_OFFSET(::gui::slideshow::Slideshow, background_),
  PROTOBUF_FIELD_OFFSET(::gui::slideshow::Slideshow, frames_count_),
  PROTOBUF_FIELD_OFFSET(::gui::slideshow::Slideshow, delay_ms_),
  PROTOBUF_FIELD_OFFSET(::gui::slideshow::Slideshow, vertical_alignment_),
  PROTOBUF_FIELD_OFFSET(::gui::slideshow::Slideshow, horizontal_alignment_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::gui::slideshow::Slideshow)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gui::slideshow::_Slideshow_default_instance_),
};

const char descriptor_table_protodef_gui_2fslideshow_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023gui/slideshow.proto\022\rgui.slideshow\032\023gu"
  "i/alignment.proto\032\024gui/background.proto\""
  "\234\002\n\tSlideshow\022\014\n\004name\030\001 \002(\t\022.\n\nbackgroun"
  "d\030\002 \002(\0132\032.gui.background.Background\022\024\n\014f"
  "rames_count\030\003 \002(\r\022\023\n\010delay_ms\030\004 \001(\r:\0010\022O"
  "\n\022vertical_alignment\030\005 \001(\0162 .gui.alignme"
  "nt.VerticalAlignment:\021CENTER_VERTICALLY\022"
  "U\n\024horizontal_alignment\030\006 \001(\0162\".gui.alig"
  "nment.HorizontalAlignment:\023CENTER_HORIZO"
  "NTALLY"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gui_2fslideshow_2eproto_deps[2] = {
  &::descriptor_table_gui_2falignment_2eproto,
  &::descriptor_table_gui_2fbackground_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gui_2fslideshow_2eproto_sccs[1] = {
  &scc_info_Slideshow_gui_2fslideshow_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gui_2fslideshow_2eproto_once;
static bool descriptor_table_gui_2fslideshow_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gui_2fslideshow_2eproto = {
  &descriptor_table_gui_2fslideshow_2eproto_initialized, descriptor_table_protodef_gui_2fslideshow_2eproto, "gui/slideshow.proto", 366,
  &descriptor_table_gui_2fslideshow_2eproto_once, descriptor_table_gui_2fslideshow_2eproto_sccs, descriptor_table_gui_2fslideshow_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_gui_2fslideshow_2eproto::offsets,
  file_level_metadata_gui_2fslideshow_2eproto, 1, file_level_enum_descriptors_gui_2fslideshow_2eproto, file_level_service_descriptors_gui_2fslideshow_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gui_2fslideshow_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gui_2fslideshow_2eproto), true);
namespace gui {
namespace slideshow {

// ===================================================================

void Slideshow::InitAsDefaultInstance() {
  ::gui::slideshow::_Slideshow_default_instance_._instance.get_mutable()->background_ = const_cast< ::gui::background::Background*>(
      ::gui::background::Background::internal_default_instance());
}
class Slideshow::_Internal {
 public:
  using HasBits = decltype(std::declval<Slideshow>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gui::background::Background& background(const Slideshow* msg);
  static void set_has_background(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frames_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vertical_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_horizontal_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::gui::background::Background&
Slideshow::_Internal::background(const Slideshow* msg) {
  return *msg->background_;
}
void Slideshow::clear_background() {
  if (background_ != nullptr) background_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Slideshow::Slideshow()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gui.slideshow.Slideshow)
}
Slideshow::Slideshow(const Slideshow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_background()) {
    background_ = new ::gui::background::Background(*from.background_);
  } else {
    background_ = nullptr;
  }
  ::memcpy(&frames_count_, &from.frames_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&horizontal_alignment_) -
    reinterpret_cast<char*>(&frames_count_)) + sizeof(horizontal_alignment_));
  // @@protoc_insertion_point(copy_constructor:gui.slideshow.Slideshow)
}

void Slideshow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Slideshow_gui_2fslideshow_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&background_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&horizontal_alignment_) -
      reinterpret_cast<char*>(&background_)) + sizeof(horizontal_alignment_));
}

Slideshow::~Slideshow() {
  // @@protoc_insertion_point(destructor:gui.slideshow.Slideshow)
  SharedDtor();
}

void Slideshow::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete background_;
}

void Slideshow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Slideshow& Slideshow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Slideshow_gui_2fslideshow_2eproto.base);
  return *internal_default_instance();
}


void Slideshow::Clear() {
// @@protoc_insertion_point(message_clear_start:gui.slideshow.Slideshow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(background_ != nullptr);
      background_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&frames_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&horizontal_alignment_) -
        reinterpret_cast<char*>(&frames_count_)) + sizeof(horizontal_alignment_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Slideshow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gui.slideshow.Slideshow.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gui.background.Background background = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_background(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 frames_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_frames_count(&has_bits);
          frames_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 delay_ms = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_delay_ms(&has_bits);
          delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.alignment.VerticalAlignment vertical_alignment = 5 [default = CENTER_VERTICALLY];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::alignment::VerticalAlignment_IsValid(val))) {
            _internal_set_vertical_alignment(static_cast<::gui::alignment::VerticalAlignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 6 [default = CENTER_HORIZONTALLY];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::gui::alignment::HorizontalAlignment_IsValid(val))) {
            _internal_set_horizontal_alignment(static_cast<::gui::alignment::HorizontalAlignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Slideshow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gui.slideshow.Slideshow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "gui.slideshow.Slideshow.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required .gui.background.Background background = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::background(this), target, stream);
  }

  // required uint32 frames_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_frames_count(), target);
  }

  // optional uint32 delay_ms = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_delay_ms(), target);
  }

  // optional .gui.alignment.VerticalAlignment vertical_alignment = 5 [default = CENTER_VERTICALLY];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_vertical_alignment(), target);
  }

  // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 6 [default = CENTER_HORIZONTALLY];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_horizontal_alignment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gui.slideshow.Slideshow)
  return target;
}

size_t Slideshow::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gui.slideshow.Slideshow)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_background()) {
    // required .gui.background.Background background = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *background_);
  }

  if (_internal_has_frames_count()) {
    // required uint32 frames_count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frames_count());
  }

  return total_size;
}
size_t Slideshow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gui.slideshow.Slideshow)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .gui.background.Background background = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *background_);

    // required uint32 frames_count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frames_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000038u) {
    // optional uint32 delay_ms = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delay_ms());
    }

    // optional .gui.alignment.VerticalAlignment vertical_alignment = 5 [default = CENTER_VERTICALLY];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vertical_alignment());
    }

    // optional .gui.alignment.HorizontalAlignment horizontal_alignment = 6 [default = CENTER_HORIZONTALLY];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_horizontal_alignment());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Slideshow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gui.slideshow.Slideshow)
  GOOGLE_DCHECK_NE(&from, this);
  const Slideshow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Slideshow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gui.slideshow.Slideshow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gui.slideshow.Slideshow)
    MergeFrom(*source);
  }
}

void Slideshow::MergeFrom(const Slideshow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gui.slideshow.Slideshow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_background()->::gui::background::Background::MergeFrom(from._internal_background());
    }
    if (cached_has_bits & 0x00000004u) {
      frames_count_ = from.frames_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      delay_ms_ = from.delay_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      vertical_alignment_ = from.vertical_alignment_;
    }
    if (cached_has_bits & 0x00000020u) {
      horizontal_alignment_ = from.horizontal_alignment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Slideshow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gui.slideshow.Slideshow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Slideshow::CopyFrom(const Slideshow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gui.slideshow.Slideshow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slideshow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Slideshow::InternalSwap(Slideshow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(background_, other->background_);
  swap(frames_count_, other->frames_count_);
  swap(delay_ms_, other->delay_ms_);
  swap(vertical_alignment_, other->vertical_alignment_);
  swap(horizontal_alignment_, other->horizontal_alignment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Slideshow::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace slideshow
}  // namespace gui
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gui::slideshow::Slideshow* Arena::CreateMaybeMessage< ::gui::slideshow::Slideshow >(Arena* arena) {
  return Arena::CreateInternal< ::gui::slideshow::Slideshow >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
