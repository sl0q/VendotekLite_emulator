// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: complex/poll_for_event.proto

#include "complex/poll_for_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_complex_2fpoll_5ffor_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MifareCardAction_complex_2fpoll_5ffor_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_complex_2fpoll_5ffor_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UserInterface_complex_2fpoll_5ffor_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2fpoll_5ffor_5ftoken_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PollForToken_contactless_2fpoll_5ffor_5ftoken_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2ftoken_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Token_contactless_2ftoken_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerformTransaction_contactless_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransactionResult_contactless_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2fscreen_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ShowScreen_gui_2fscreen_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2fleds_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Leds_misc_2fleds_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qrcode_2fqrcode_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QrCodeEvent_qrcode_2fqrcode_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qrcode_2fpoll_5ffor_5fqrcode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PollForQrCode_qrcode_2fpoll_5ffor_5fqrcode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_touchscreen_2ftouchscreen_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TouchscreenEvent_touchscreen_2ftouchscreen_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_touchscreen_2fpoll_5ftouchscreen_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PollTouchscreen_touchscreen_2fpoll_5ftouchscreen_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_troika_2fav3_2fread_5fticket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReadTicket_troika_2fav3_2fread_5fticket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_troika_2fav3_2fread_5fticket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ticket_troika_2fav3_2fread_5fticket_2eproto;
namespace complex {
namespace poll {
class PollForEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PollForEvent> _instance;
  const ::contactless::poll::PollForToken* poll_for_token_;
  const ::contactless::transaction::PerformTransaction* perform_txn_;
} _PollForEvent_default_instance_;
class UserInterfaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInterface> _instance;
} _UserInterface_default_instance_;
class MifareCardActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MifareCardAction> _instance;
  const ::troika::av3::read_ticket::ReadTicket* troika_av3_read_ticket_;
} _MifareCardAction_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event> _instance;
  const ::contactless::token::Token* contactless_token_;
  const ::contactless::transaction::TransactionResult* contactless_txn_result_;
  const ::touchscreen::event::TouchscreenEvent* touchscreen_event_;
  const ::qrcode::event::QrCodeEvent* qrcode_;
  const ::troika::av3::read_ticket::Ticket* troika_ticket_;
} _Event_default_instance_;
}  // namespace poll
}  // namespace complex
static void InitDefaultsscc_info_Event_complex_2fpoll_5ffor_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::complex::poll::_Event_default_instance_;
    new (ptr) ::complex::poll::Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::complex::poll::Event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Event_complex_2fpoll_5ffor_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Event_complex_2fpoll_5ffor_5fevent_2eproto}, {
      &scc_info_Token_contactless_2ftoken_2eproto.base,
      &scc_info_TransactionResult_contactless_2ftransaction_2eproto.base,
      &scc_info_TouchscreenEvent_touchscreen_2ftouchscreen_5fevent_2eproto.base,
      &scc_info_QrCodeEvent_qrcode_2fqrcode_5fevent_2eproto.base,
      &scc_info_Ticket_troika_2fav3_2fread_5fticket_2eproto.base,}};

static void InitDefaultsscc_info_MifareCardAction_complex_2fpoll_5ffor_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::complex::poll::_MifareCardAction_default_instance_;
    new (ptr) ::complex::poll::MifareCardAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::complex::poll::MifareCardAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MifareCardAction_complex_2fpoll_5ffor_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MifareCardAction_complex_2fpoll_5ffor_5fevent_2eproto}, {
      &scc_info_ReadTicket_troika_2fav3_2fread_5fticket_2eproto.base,}};

static void InitDefaultsscc_info_PollForEvent_complex_2fpoll_5ffor_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::complex::poll::_PollForEvent_default_instance_;
    new (ptr) ::complex::poll::PollForEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::complex::poll::PollForEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_PollForEvent_complex_2fpoll_5ffor_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_PollForEvent_complex_2fpoll_5ffor_5fevent_2eproto}, {
      &scc_info_PollForToken_contactless_2fpoll_5ffor_5ftoken_2eproto.base,
      &scc_info_PerformTransaction_contactless_2ftransaction_2eproto.base,
      &scc_info_PollTouchscreen_touchscreen_2fpoll_5ftouchscreen_2eproto.base,
      &scc_info_PollForQrCode_qrcode_2fpoll_5ffor_5fqrcode_2eproto.base,
      &scc_info_UserInterface_complex_2fpoll_5ffor_5fevent_2eproto.base,
      &scc_info_MifareCardAction_complex_2fpoll_5ffor_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_UserInterface_complex_2fpoll_5ffor_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::complex::poll::_UserInterface_default_instance_;
    new (ptr) ::complex::poll::UserInterface();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::complex::poll::UserInterface::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UserInterface_complex_2fpoll_5ffor_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UserInterface_complex_2fpoll_5ffor_5fevent_2eproto}, {
      &scc_info_Leds_misc_2fleds_2eproto.base,
      &scc_info_ShowScreen_gui_2fscreen_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_complex_2fpoll_5ffor_5fevent_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_complex_2fpoll_5ffor_5fevent_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_complex_2fpoll_5ffor_5fevent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_complex_2fpoll_5ffor_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::complex::poll::PollForEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::complex::poll::PollForEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::complex::poll::PollForEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::complex::poll::PollForEventDefaultTypeInternal, poll_for_token_),
  offsetof(::complex::poll::PollForEventDefaultTypeInternal, perform_txn_),
  PROTOBUF_FIELD_OFFSET(::complex::poll::PollForEvent, poll_touchscreen_),
  PROTOBUF_FIELD_OFFSET(::complex::poll::PollForEvent, poll_for_qrcode_),
  PROTOBUF_FIELD_OFFSET(::complex::poll::PollForEvent, on_start_ui_action_),
  PROTOBUF_FIELD_OFFSET(::complex::poll::PollForEvent, on_event_ui_action_),
  PROTOBUF_FIELD_OFFSET(::complex::poll::PollForEvent, on_mifare_card_present_),
  PROTOBUF_FIELD_OFFSET(::complex::poll::PollForEvent, contactless_),
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::complex::poll::UserInterface, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::complex::poll::UserInterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::complex::poll::UserInterface, set_leds_state_),
  PROTOBUF_FIELD_OFFSET(::complex::poll::UserInterface, show_screen_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::complex::poll::MifareCardAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::complex::poll::MifareCardAction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::complex::poll::MifareCardAction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::complex::poll::MifareCardActionDefaultTypeInternal, troika_av3_read_ticket_),
  PROTOBUF_FIELD_OFFSET(::complex::poll::MifareCardAction, action_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::complex::poll::Event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::complex::poll::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::complex::poll::Event, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::complex::poll::EventDefaultTypeInternal, contactless_token_),
  offsetof(::complex::poll::EventDefaultTypeInternal, contactless_txn_result_),
  offsetof(::complex::poll::EventDefaultTypeInternal, touchscreen_event_),
  offsetof(::complex::poll::EventDefaultTypeInternal, qrcode_),
  offsetof(::complex::poll::EventDefaultTypeInternal, troika_ticket_),
  PROTOBUF_FIELD_OFFSET(::complex::poll::Event, event_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::complex::poll::PollForEvent)},
  { 20, 27, sizeof(::complex::poll::UserInterface)},
  { 29, 36, sizeof(::complex::poll::MifareCardAction)},
  { 37, 48, sizeof(::complex::poll::Event)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::complex::poll::_PollForEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::complex::poll::_UserInterface_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::complex::poll::_MifareCardAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::complex::poll::_Event_default_instance_),
};

const char descriptor_table_protodef_complex_2fpoll_5ffor_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034complex/poll_for_event.proto\022\014complex."
  "poll\032 contactless/poll_for_token.proto\032\027"
  "contactless/token.proto\032\035contactless/tra"
  "nsaction.proto\032\020gui/screen.proto\032\017misc/l"
  "eds.proto\032\034qrcode/poll_for_qrcode.proto\032"
  "\031qrcode/qrcode_event.proto\032\"touchscreen/"
  "poll_touchscreen.proto\032#touchscreen/touc"
  "hscreen_event.proto\032\034troika/av3/read_tic"
  "ket.proto\"\277\003\n\014PollForEvent\0228\n\016poll_for_t"
  "oken\030\001 \001(\0132\036.contactless.poll.PollForTok"
  "enH\000\022B\n\013perform_txn\030\002 \001(\0132+.contactless."
  "transaction.PerformTransactionH\000\022;\n\020poll"
  "_touchscreen\030\003 \001(\0132!.touchscreen.poll.Po"
  "llTouchscreen\0223\n\017poll_for_qrcode\030\004 \001(\0132\032"
  ".qrcode.poll.PollForQrCode\0227\n\022on_start_u"
  "i_action\030\005 \001(\0132\033.complex.poll.UserInterf"
  "ace\0227\n\022on_event_ui_action\030\006 \001(\0132\033.comple"
  "x.poll.UserInterface\022>\n\026on_mifare_card_p"
  "resent\030\007 \001(\0132\036.complex.poll.MifareCardAc"
  "tionB\r\n\013contactless\"e\n\rUserInterface\022\'\n\016"
  "set_leds_state\030\001 \001(\0132\017.misc.leds.Leds\022+\n"
  "\013show_screen\030\002 \001(\0132\026.gui.screen.ShowScre"
  "en\"b\n\020MifareCardAction\022D\n\026troika_av3_rea"
  "d_ticket\030\001 \001(\0132\".troika.av3.read_ticket."
  "ReadTicketH\000B\010\n\006action\"\275\002\n\005Event\0225\n\021cont"
  "actless_token\030\001 \001(\0132\030.contactless.token."
  "TokenH\000\022L\n\026contactless_txn_result\030\002 \001(\0132"
  "*.contactless.transaction.TransactionRes"
  "ultH\000\022@\n\021touchscreen_event\030\003 \001(\0132#.touch"
  "screen.event.TouchscreenEventH\000\022+\n\006qrcod"
  "e\030\004 \001(\0132\031.qrcode.event.QrCodeEventH\000\0227\n\r"
  "troika_ticket\030\005 \001(\0132\036.troika.av3.read_ti"
  "cket.TicketH\000B\007\n\005event"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_complex_2fpoll_5ffor_5fevent_2eproto_deps[10] = {
  &::descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto,
  &::descriptor_table_contactless_2ftoken_2eproto,
  &::descriptor_table_contactless_2ftransaction_2eproto,
  &::descriptor_table_gui_2fscreen_2eproto,
  &::descriptor_table_misc_2fleds_2eproto,
  &::descriptor_table_qrcode_2fpoll_5ffor_5fqrcode_2eproto,
  &::descriptor_table_qrcode_2fqrcode_5fevent_2eproto,
  &::descriptor_table_touchscreen_2fpoll_5ftouchscreen_2eproto,
  &::descriptor_table_touchscreen_2ftouchscreen_5fevent_2eproto,
  &::descriptor_table_troika_2fav3_2fread_5fticket_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_complex_2fpoll_5ffor_5fevent_2eproto_sccs[4] = {
  &scc_info_Event_complex_2fpoll_5ffor_5fevent_2eproto.base,
  &scc_info_MifareCardAction_complex_2fpoll_5ffor_5fevent_2eproto.base,
  &scc_info_PollForEvent_complex_2fpoll_5ffor_5fevent_2eproto.base,
  &scc_info_UserInterface_complex_2fpoll_5ffor_5fevent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_complex_2fpoll_5ffor_5fevent_2eproto_once;
static bool descriptor_table_complex_2fpoll_5ffor_5fevent_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_complex_2fpoll_5ffor_5fevent_2eproto = {
  &descriptor_table_complex_2fpoll_5ffor_5fevent_2eproto_initialized, descriptor_table_protodef_complex_2fpoll_5ffor_5fevent_2eproto, "complex/poll_for_event.proto", 1302,
  &descriptor_table_complex_2fpoll_5ffor_5fevent_2eproto_once, descriptor_table_complex_2fpoll_5ffor_5fevent_2eproto_sccs, descriptor_table_complex_2fpoll_5ffor_5fevent_2eproto_deps, 4, 10,
  schemas, file_default_instances, TableStruct_complex_2fpoll_5ffor_5fevent_2eproto::offsets,
  file_level_metadata_complex_2fpoll_5ffor_5fevent_2eproto, 4, file_level_enum_descriptors_complex_2fpoll_5ffor_5fevent_2eproto, file_level_service_descriptors_complex_2fpoll_5ffor_5fevent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_complex_2fpoll_5ffor_5fevent_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_complex_2fpoll_5ffor_5fevent_2eproto), true);
namespace complex {
namespace poll {

// ===================================================================

void PollForEvent::InitAsDefaultInstance() {
  ::complex::poll::_PollForEvent_default_instance_.poll_for_token_ = const_cast< ::contactless::poll::PollForToken*>(
      ::contactless::poll::PollForToken::internal_default_instance());
  ::complex::poll::_PollForEvent_default_instance_.perform_txn_ = const_cast< ::contactless::transaction::PerformTransaction*>(
      ::contactless::transaction::PerformTransaction::internal_default_instance());
  ::complex::poll::_PollForEvent_default_instance_._instance.get_mutable()->poll_touchscreen_ = const_cast< ::touchscreen::poll::PollTouchscreen*>(
      ::touchscreen::poll::PollTouchscreen::internal_default_instance());
  ::complex::poll::_PollForEvent_default_instance_._instance.get_mutable()->poll_for_qrcode_ = const_cast< ::qrcode::poll::PollForQrCode*>(
      ::qrcode::poll::PollForQrCode::internal_default_instance());
  ::complex::poll::_PollForEvent_default_instance_._instance.get_mutable()->on_start_ui_action_ = const_cast< ::complex::poll::UserInterface*>(
      ::complex::poll::UserInterface::internal_default_instance());
  ::complex::poll::_PollForEvent_default_instance_._instance.get_mutable()->on_event_ui_action_ = const_cast< ::complex::poll::UserInterface*>(
      ::complex::poll::UserInterface::internal_default_instance());
  ::complex::poll::_PollForEvent_default_instance_._instance.get_mutable()->on_mifare_card_present_ = const_cast< ::complex::poll::MifareCardAction*>(
      ::complex::poll::MifareCardAction::internal_default_instance());
}
class PollForEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<PollForEvent>()._has_bits_);
  static const ::contactless::poll::PollForToken& poll_for_token(const PollForEvent* msg);
  static const ::contactless::transaction::PerformTransaction& perform_txn(const PollForEvent* msg);
  static const ::touchscreen::poll::PollTouchscreen& poll_touchscreen(const PollForEvent* msg);
  static void set_has_poll_touchscreen(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::qrcode::poll::PollForQrCode& poll_for_qrcode(const PollForEvent* msg);
  static void set_has_poll_for_qrcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::complex::poll::UserInterface& on_start_ui_action(const PollForEvent* msg);
  static void set_has_on_start_ui_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::complex::poll::UserInterface& on_event_ui_action(const PollForEvent* msg);
  static void set_has_on_event_ui_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::complex::poll::MifareCardAction& on_mifare_card_present(const PollForEvent* msg);
  static void set_has_on_mifare_card_present(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::contactless::poll::PollForToken&
PollForEvent::_Internal::poll_for_token(const PollForEvent* msg) {
  return *msg->contactless_.poll_for_token_;
}
const ::contactless::transaction::PerformTransaction&
PollForEvent::_Internal::perform_txn(const PollForEvent* msg) {
  return *msg->contactless_.perform_txn_;
}
const ::touchscreen::poll::PollTouchscreen&
PollForEvent::_Internal::poll_touchscreen(const PollForEvent* msg) {
  return *msg->poll_touchscreen_;
}
const ::qrcode::poll::PollForQrCode&
PollForEvent::_Internal::poll_for_qrcode(const PollForEvent* msg) {
  return *msg->poll_for_qrcode_;
}
const ::complex::poll::UserInterface&
PollForEvent::_Internal::on_start_ui_action(const PollForEvent* msg) {
  return *msg->on_start_ui_action_;
}
const ::complex::poll::UserInterface&
PollForEvent::_Internal::on_event_ui_action(const PollForEvent* msg) {
  return *msg->on_event_ui_action_;
}
const ::complex::poll::MifareCardAction&
PollForEvent::_Internal::on_mifare_card_present(const PollForEvent* msg) {
  return *msg->on_mifare_card_present_;
}
void PollForEvent::set_allocated_poll_for_token(::contactless::poll::PollForToken* poll_for_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contactless();
  if (poll_for_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      poll_for_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poll_for_token, submessage_arena);
    }
    set_has_poll_for_token();
    contactless_.poll_for_token_ = poll_for_token;
  }
  // @@protoc_insertion_point(field_set_allocated:complex.poll.PollForEvent.poll_for_token)
}
void PollForEvent::clear_poll_for_token() {
  if (_internal_has_poll_for_token()) {
    delete contactless_.poll_for_token_;
    clear_has_contactless();
  }
}
void PollForEvent::set_allocated_perform_txn(::contactless::transaction::PerformTransaction* perform_txn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contactless();
  if (perform_txn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      perform_txn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perform_txn, submessage_arena);
    }
    set_has_perform_txn();
    contactless_.perform_txn_ = perform_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:complex.poll.PollForEvent.perform_txn)
}
void PollForEvent::clear_perform_txn() {
  if (_internal_has_perform_txn()) {
    delete contactless_.perform_txn_;
    clear_has_contactless();
  }
}
void PollForEvent::clear_poll_touchscreen() {
  if (poll_touchscreen_ != nullptr) poll_touchscreen_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void PollForEvent::clear_poll_for_qrcode() {
  if (poll_for_qrcode_ != nullptr) poll_for_qrcode_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PollForEvent::PollForEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:complex.poll.PollForEvent)
}
PollForEvent::PollForEvent(const PollForEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_poll_touchscreen()) {
    poll_touchscreen_ = new ::touchscreen::poll::PollTouchscreen(*from.poll_touchscreen_);
  } else {
    poll_touchscreen_ = nullptr;
  }
  if (from._internal_has_poll_for_qrcode()) {
    poll_for_qrcode_ = new ::qrcode::poll::PollForQrCode(*from.poll_for_qrcode_);
  } else {
    poll_for_qrcode_ = nullptr;
  }
  if (from._internal_has_on_start_ui_action()) {
    on_start_ui_action_ = new ::complex::poll::UserInterface(*from.on_start_ui_action_);
  } else {
    on_start_ui_action_ = nullptr;
  }
  if (from._internal_has_on_event_ui_action()) {
    on_event_ui_action_ = new ::complex::poll::UserInterface(*from.on_event_ui_action_);
  } else {
    on_event_ui_action_ = nullptr;
  }
  if (from._internal_has_on_mifare_card_present()) {
    on_mifare_card_present_ = new ::complex::poll::MifareCardAction(*from.on_mifare_card_present_);
  } else {
    on_mifare_card_present_ = nullptr;
  }
  clear_has_contactless();
  switch (from.contactless_case()) {
    case kPollForToken: {
      _internal_mutable_poll_for_token()->::contactless::poll::PollForToken::MergeFrom(from._internal_poll_for_token());
      break;
    }
    case kPerformTxn: {
      _internal_mutable_perform_txn()->::contactless::transaction::PerformTransaction::MergeFrom(from._internal_perform_txn());
      break;
    }
    case CONTACTLESS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:complex.poll.PollForEvent)
}

void PollForEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PollForEvent_complex_2fpoll_5ffor_5fevent_2eproto.base);
  ::memset(&poll_touchscreen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&on_mifare_card_present_) -
      reinterpret_cast<char*>(&poll_touchscreen_)) + sizeof(on_mifare_card_present_));
  clear_has_contactless();
}

PollForEvent::~PollForEvent() {
  // @@protoc_insertion_point(destructor:complex.poll.PollForEvent)
  SharedDtor();
}

void PollForEvent::SharedDtor() {
  if (this != internal_default_instance()) delete poll_touchscreen_;
  if (this != internal_default_instance()) delete poll_for_qrcode_;
  if (this != internal_default_instance()) delete on_start_ui_action_;
  if (this != internal_default_instance()) delete on_event_ui_action_;
  if (this != internal_default_instance()) delete on_mifare_card_present_;
  if (has_contactless()) {
    clear_contactless();
  }
}

void PollForEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PollForEvent& PollForEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PollForEvent_complex_2fpoll_5ffor_5fevent_2eproto.base);
  return *internal_default_instance();
}


void PollForEvent::clear_contactless() {
// @@protoc_insertion_point(one_of_clear_start:complex.poll.PollForEvent)
  switch (contactless_case()) {
    case kPollForToken: {
      delete contactless_.poll_for_token_;
      break;
    }
    case kPerformTxn: {
      delete contactless_.perform_txn_;
      break;
    }
    case CONTACTLESS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTACTLESS_NOT_SET;
}


void PollForEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:complex.poll.PollForEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(poll_touchscreen_ != nullptr);
      poll_touchscreen_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(poll_for_qrcode_ != nullptr);
      poll_for_qrcode_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(on_start_ui_action_ != nullptr);
      on_start_ui_action_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(on_event_ui_action_ != nullptr);
      on_event_ui_action_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(on_mifare_card_present_ != nullptr);
      on_mifare_card_present_->Clear();
    }
  }
  clear_contactless();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PollForEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .contactless.poll.PollForToken poll_for_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_poll_for_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contactless.transaction.PerformTransaction perform_txn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_perform_txn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .touchscreen.poll.PollTouchscreen poll_touchscreen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_poll_touchscreen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .qrcode.poll.PollForQrCode poll_for_qrcode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_poll_for_qrcode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .complex.poll.UserInterface on_start_ui_action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_on_start_ui_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .complex.poll.UserInterface on_event_ui_action = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_on_event_ui_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .complex.poll.MifareCardAction on_mifare_card_present = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_on_mifare_card_present(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PollForEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:complex.poll.PollForEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (contactless_case()) {
    case kPollForToken: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::poll_for_token(this), target, stream);
      break;
    }
    case kPerformTxn: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::perform_txn(this), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .touchscreen.poll.PollTouchscreen poll_touchscreen = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::poll_touchscreen(this), target, stream);
  }

  // optional .qrcode.poll.PollForQrCode poll_for_qrcode = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::poll_for_qrcode(this), target, stream);
  }

  // optional .complex.poll.UserInterface on_start_ui_action = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::on_start_ui_action(this), target, stream);
  }

  // optional .complex.poll.UserInterface on_event_ui_action = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::on_event_ui_action(this), target, stream);
  }

  // optional .complex.poll.MifareCardAction on_mifare_card_present = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::on_mifare_card_present(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:complex.poll.PollForEvent)
  return target;
}

size_t PollForEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:complex.poll.PollForEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .touchscreen.poll.PollTouchscreen poll_touchscreen = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *poll_touchscreen_);
    }

    // optional .qrcode.poll.PollForQrCode poll_for_qrcode = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *poll_for_qrcode_);
    }

    // optional .complex.poll.UserInterface on_start_ui_action = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *on_start_ui_action_);
    }

    // optional .complex.poll.UserInterface on_event_ui_action = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *on_event_ui_action_);
    }

    // optional .complex.poll.MifareCardAction on_mifare_card_present = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *on_mifare_card_present_);
    }

  }
  switch (contactless_case()) {
    // optional .contactless.poll.PollForToken poll_for_token = 1;
    case kPollForToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contactless_.poll_for_token_);
      break;
    }
    // optional .contactless.transaction.PerformTransaction perform_txn = 2;
    case kPerformTxn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contactless_.perform_txn_);
      break;
    }
    case CONTACTLESS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PollForEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:complex.poll.PollForEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const PollForEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PollForEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:complex.poll.PollForEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:complex.poll.PollForEvent)
    MergeFrom(*source);
  }
}

void PollForEvent::MergeFrom(const PollForEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:complex.poll.PollForEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_poll_touchscreen()->::touchscreen::poll::PollTouchscreen::MergeFrom(from._internal_poll_touchscreen());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_poll_for_qrcode()->::qrcode::poll::PollForQrCode::MergeFrom(from._internal_poll_for_qrcode());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_on_start_ui_action()->::complex::poll::UserInterface::MergeFrom(from._internal_on_start_ui_action());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_on_event_ui_action()->::complex::poll::UserInterface::MergeFrom(from._internal_on_event_ui_action());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_on_mifare_card_present()->::complex::poll::MifareCardAction::MergeFrom(from._internal_on_mifare_card_present());
    }
  }
  switch (from.contactless_case()) {
    case kPollForToken: {
      _internal_mutable_poll_for_token()->::contactless::poll::PollForToken::MergeFrom(from._internal_poll_for_token());
      break;
    }
    case kPerformTxn: {
      _internal_mutable_perform_txn()->::contactless::transaction::PerformTransaction::MergeFrom(from._internal_perform_txn());
      break;
    }
    case CONTACTLESS_NOT_SET: {
      break;
    }
  }
}

void PollForEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:complex.poll.PollForEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PollForEvent::CopyFrom(const PollForEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:complex.poll.PollForEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollForEvent::IsInitialized() const {
  if (_internal_has_poll_touchscreen()) {
    if (!poll_touchscreen_->IsInitialized()) return false;
  }
  if (_internal_has_on_start_ui_action()) {
    if (!on_start_ui_action_->IsInitialized()) return false;
  }
  if (_internal_has_on_event_ui_action()) {
    if (!on_event_ui_action_->IsInitialized()) return false;
  }
  if (_internal_has_on_mifare_card_present()) {
    if (!on_mifare_card_present_->IsInitialized()) return false;
  }
  switch (contactless_case()) {
    case kPollForToken: {
      break;
    }
    case kPerformTxn: {
      if (has_perform_txn()) {
        if (!this->perform_txn().IsInitialized()) return false;
      }
      break;
    }
    case CONTACTLESS_NOT_SET: {
      break;
    }
  }
  return true;
}

void PollForEvent::InternalSwap(PollForEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(poll_touchscreen_, other->poll_touchscreen_);
  swap(poll_for_qrcode_, other->poll_for_qrcode_);
  swap(on_start_ui_action_, other->on_start_ui_action_);
  swap(on_event_ui_action_, other->on_event_ui_action_);
  swap(on_mifare_card_present_, other->on_mifare_card_present_);
  swap(contactless_, other->contactless_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PollForEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInterface::InitAsDefaultInstance() {
  ::complex::poll::_UserInterface_default_instance_._instance.get_mutable()->set_leds_state_ = const_cast< ::misc::leds::Leds*>(
      ::misc::leds::Leds::internal_default_instance());
  ::complex::poll::_UserInterface_default_instance_._instance.get_mutable()->show_screen_ = const_cast< ::gui::screen::ShowScreen*>(
      ::gui::screen::ShowScreen::internal_default_instance());
}
class UserInterface::_Internal {
 public:
  using HasBits = decltype(std::declval<UserInterface>()._has_bits_);
  static const ::misc::leds::Leds& set_leds_state(const UserInterface* msg);
  static void set_has_set_leds_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gui::screen::ShowScreen& show_screen(const UserInterface* msg);
  static void set_has_show_screen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::misc::leds::Leds&
UserInterface::_Internal::set_leds_state(const UserInterface* msg) {
  return *msg->set_leds_state_;
}
const ::gui::screen::ShowScreen&
UserInterface::_Internal::show_screen(const UserInterface* msg) {
  return *msg->show_screen_;
}
void UserInterface::clear_set_leds_state() {
  if (set_leds_state_ != nullptr) set_leds_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UserInterface::clear_show_screen() {
  if (show_screen_ != nullptr) show_screen_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
UserInterface::UserInterface()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:complex.poll.UserInterface)
}
UserInterface::UserInterface(const UserInterface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_set_leds_state()) {
    set_leds_state_ = new ::misc::leds::Leds(*from.set_leds_state_);
  } else {
    set_leds_state_ = nullptr;
  }
  if (from._internal_has_show_screen()) {
    show_screen_ = new ::gui::screen::ShowScreen(*from.show_screen_);
  } else {
    show_screen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:complex.poll.UserInterface)
}

void UserInterface::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInterface_complex_2fpoll_5ffor_5fevent_2eproto.base);
  ::memset(&set_leds_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_screen_) -
      reinterpret_cast<char*>(&set_leds_state_)) + sizeof(show_screen_));
}

UserInterface::~UserInterface() {
  // @@protoc_insertion_point(destructor:complex.poll.UserInterface)
  SharedDtor();
}

void UserInterface::SharedDtor() {
  if (this != internal_default_instance()) delete set_leds_state_;
  if (this != internal_default_instance()) delete show_screen_;
}

void UserInterface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInterface& UserInterface::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInterface_complex_2fpoll_5ffor_5fevent_2eproto.base);
  return *internal_default_instance();
}


void UserInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:complex.poll.UserInterface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(set_leds_state_ != nullptr);
      set_leds_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(show_screen_ != nullptr);
      show_screen_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UserInterface::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .misc.leds.Leds set_leds_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_leds_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.screen.ShowScreen show_screen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_show_screen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInterface::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:complex.poll.UserInterface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .misc.leds.Leds set_leds_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::set_leds_state(this), target, stream);
  }

  // optional .gui.screen.ShowScreen show_screen = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::show_screen(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:complex.poll.UserInterface)
  return target;
}

size_t UserInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:complex.poll.UserInterface)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .misc.leds.Leds set_leds_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_leds_state_);
    }

    // optional .gui.screen.ShowScreen show_screen = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_screen_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInterface::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:complex.poll.UserInterface)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInterface* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInterface>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:complex.poll.UserInterface)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:complex.poll.UserInterface)
    MergeFrom(*source);
  }
}

void UserInterface::MergeFrom(const UserInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:complex.poll.UserInterface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_set_leds_state()->::misc::leds::Leds::MergeFrom(from._internal_set_leds_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_show_screen()->::gui::screen::ShowScreen::MergeFrom(from._internal_show_screen());
    }
  }
}

void UserInterface::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:complex.poll.UserInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInterface::CopyFrom(const UserInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:complex.poll.UserInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInterface::IsInitialized() const {
  if (_internal_has_show_screen()) {
    if (!show_screen_->IsInitialized()) return false;
  }
  return true;
}

void UserInterface::InternalSwap(UserInterface* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(set_leds_state_, other->set_leds_state_);
  swap(show_screen_, other->show_screen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInterface::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MifareCardAction::InitAsDefaultInstance() {
  ::complex::poll::_MifareCardAction_default_instance_.troika_av3_read_ticket_ = const_cast< ::troika::av3::read_ticket::ReadTicket*>(
      ::troika::av3::read_ticket::ReadTicket::internal_default_instance());
}
class MifareCardAction::_Internal {
 public:
  using HasBits = decltype(std::declval<MifareCardAction>()._has_bits_);
  static const ::troika::av3::read_ticket::ReadTicket& troika_av3_read_ticket(const MifareCardAction* msg);
};

const ::troika::av3::read_ticket::ReadTicket&
MifareCardAction::_Internal::troika_av3_read_ticket(const MifareCardAction* msg) {
  return *msg->action_.troika_av3_read_ticket_;
}
void MifareCardAction::set_allocated_troika_av3_read_ticket(::troika::av3::read_ticket::ReadTicket* troika_av3_read_ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (troika_av3_read_ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      troika_av3_read_ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, troika_av3_read_ticket, submessage_arena);
    }
    set_has_troika_av3_read_ticket();
    action_.troika_av3_read_ticket_ = troika_av3_read_ticket;
  }
  // @@protoc_insertion_point(field_set_allocated:complex.poll.MifareCardAction.troika_av3_read_ticket)
}
void MifareCardAction::clear_troika_av3_read_ticket() {
  if (_internal_has_troika_av3_read_ticket()) {
    delete action_.troika_av3_read_ticket_;
    clear_has_action();
  }
}
MifareCardAction::MifareCardAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:complex.poll.MifareCardAction)
}
MifareCardAction::MifareCardAction(const MifareCardAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kTroikaAv3ReadTicket: {
      _internal_mutable_troika_av3_read_ticket()->::troika::av3::read_ticket::ReadTicket::MergeFrom(from._internal_troika_av3_read_ticket());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:complex.poll.MifareCardAction)
}

void MifareCardAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MifareCardAction_complex_2fpoll_5ffor_5fevent_2eproto.base);
  clear_has_action();
}

MifareCardAction::~MifareCardAction() {
  // @@protoc_insertion_point(destructor:complex.poll.MifareCardAction)
  SharedDtor();
}

void MifareCardAction::SharedDtor() {
  if (has_action()) {
    clear_action();
  }
}

void MifareCardAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MifareCardAction& MifareCardAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MifareCardAction_complex_2fpoll_5ffor_5fevent_2eproto.base);
  return *internal_default_instance();
}


void MifareCardAction::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:complex.poll.MifareCardAction)
  switch (action_case()) {
    case kTroikaAv3ReadTicket: {
      delete action_.troika_av3_read_ticket_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void MifareCardAction::Clear() {
// @@protoc_insertion_point(message_clear_start:complex.poll.MifareCardAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MifareCardAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .troika.av3.read_ticket.ReadTicket troika_av3_read_ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_troika_av3_read_ticket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MifareCardAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:complex.poll.MifareCardAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .troika.av3.read_ticket.ReadTicket troika_av3_read_ticket = 1;
  if (_internal_has_troika_av3_read_ticket()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::troika_av3_read_ticket(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:complex.poll.MifareCardAction)
  return target;
}

size_t MifareCardAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:complex.poll.MifareCardAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (action_case()) {
    // optional .troika.av3.read_ticket.ReadTicket troika_av3_read_ticket = 1;
    case kTroikaAv3ReadTicket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.troika_av3_read_ticket_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MifareCardAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:complex.poll.MifareCardAction)
  GOOGLE_DCHECK_NE(&from, this);
  const MifareCardAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MifareCardAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:complex.poll.MifareCardAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:complex.poll.MifareCardAction)
    MergeFrom(*source);
  }
}

void MifareCardAction::MergeFrom(const MifareCardAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:complex.poll.MifareCardAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_case()) {
    case kTroikaAv3ReadTicket: {
      _internal_mutable_troika_av3_read_ticket()->::troika::av3::read_ticket::ReadTicket::MergeFrom(from._internal_troika_av3_read_ticket());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void MifareCardAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:complex.poll.MifareCardAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MifareCardAction::CopyFrom(const MifareCardAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:complex.poll.MifareCardAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MifareCardAction::IsInitialized() const {
  switch (action_case()) {
    case kTroikaAv3ReadTicket: {
      if (has_troika_av3_read_ticket()) {
        if (!this->troika_av3_read_ticket().IsInitialized()) return false;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  return true;
}

void MifareCardAction::InternalSwap(MifareCardAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MifareCardAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event::InitAsDefaultInstance() {
  ::complex::poll::_Event_default_instance_.contactless_token_ = const_cast< ::contactless::token::Token*>(
      ::contactless::token::Token::internal_default_instance());
  ::complex::poll::_Event_default_instance_.contactless_txn_result_ = const_cast< ::contactless::transaction::TransactionResult*>(
      ::contactless::transaction::TransactionResult::internal_default_instance());
  ::complex::poll::_Event_default_instance_.touchscreen_event_ = const_cast< ::touchscreen::event::TouchscreenEvent*>(
      ::touchscreen::event::TouchscreenEvent::internal_default_instance());
  ::complex::poll::_Event_default_instance_.qrcode_ = const_cast< ::qrcode::event::QrCodeEvent*>(
      ::qrcode::event::QrCodeEvent::internal_default_instance());
  ::complex::poll::_Event_default_instance_.troika_ticket_ = const_cast< ::troika::av3::read_ticket::Ticket*>(
      ::troika::av3::read_ticket::Ticket::internal_default_instance());
}
class Event::_Internal {
 public:
  using HasBits = decltype(std::declval<Event>()._has_bits_);
  static const ::contactless::token::Token& contactless_token(const Event* msg);
  static const ::contactless::transaction::TransactionResult& contactless_txn_result(const Event* msg);
  static const ::touchscreen::event::TouchscreenEvent& touchscreen_event(const Event* msg);
  static const ::qrcode::event::QrCodeEvent& qrcode(const Event* msg);
  static const ::troika::av3::read_ticket::Ticket& troika_ticket(const Event* msg);
};

const ::contactless::token::Token&
Event::_Internal::contactless_token(const Event* msg) {
  return *msg->event_.contactless_token_;
}
const ::contactless::transaction::TransactionResult&
Event::_Internal::contactless_txn_result(const Event* msg) {
  return *msg->event_.contactless_txn_result_;
}
const ::touchscreen::event::TouchscreenEvent&
Event::_Internal::touchscreen_event(const Event* msg) {
  return *msg->event_.touchscreen_event_;
}
const ::qrcode::event::QrCodeEvent&
Event::_Internal::qrcode(const Event* msg) {
  return *msg->event_.qrcode_;
}
const ::troika::av3::read_ticket::Ticket&
Event::_Internal::troika_ticket(const Event* msg) {
  return *msg->event_.troika_ticket_;
}
void Event::set_allocated_contactless_token(::contactless::token::Token* contactless_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (contactless_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      contactless_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contactless_token, submessage_arena);
    }
    set_has_contactless_token();
    event_.contactless_token_ = contactless_token;
  }
  // @@protoc_insertion_point(field_set_allocated:complex.poll.Event.contactless_token)
}
void Event::clear_contactless_token() {
  if (_internal_has_contactless_token()) {
    delete event_.contactless_token_;
    clear_has_event();
  }
}
void Event::set_allocated_contactless_txn_result(::contactless::transaction::TransactionResult* contactless_txn_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (contactless_txn_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      contactless_txn_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contactless_txn_result, submessage_arena);
    }
    set_has_contactless_txn_result();
    event_.contactless_txn_result_ = contactless_txn_result;
  }
  // @@protoc_insertion_point(field_set_allocated:complex.poll.Event.contactless_txn_result)
}
void Event::clear_contactless_txn_result() {
  if (_internal_has_contactless_txn_result()) {
    delete event_.contactless_txn_result_;
    clear_has_event();
  }
}
void Event::set_allocated_touchscreen_event(::touchscreen::event::TouchscreenEvent* touchscreen_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (touchscreen_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      touchscreen_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touchscreen_event, submessage_arena);
    }
    set_has_touchscreen_event();
    event_.touchscreen_event_ = touchscreen_event;
  }
  // @@protoc_insertion_point(field_set_allocated:complex.poll.Event.touchscreen_event)
}
void Event::clear_touchscreen_event() {
  if (_internal_has_touchscreen_event()) {
    delete event_.touchscreen_event_;
    clear_has_event();
  }
}
void Event::set_allocated_qrcode(::qrcode::event::QrCodeEvent* qrcode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (qrcode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      qrcode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qrcode, submessage_arena);
    }
    set_has_qrcode();
    event_.qrcode_ = qrcode;
  }
  // @@protoc_insertion_point(field_set_allocated:complex.poll.Event.qrcode)
}
void Event::clear_qrcode() {
  if (_internal_has_qrcode()) {
    delete event_.qrcode_;
    clear_has_event();
  }
}
void Event::set_allocated_troika_ticket(::troika::av3::read_ticket::Ticket* troika_ticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (troika_ticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      troika_ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, troika_ticket, submessage_arena);
    }
    set_has_troika_ticket();
    event_.troika_ticket_ = troika_ticket;
  }
  // @@protoc_insertion_point(field_set_allocated:complex.poll.Event.troika_ticket)
}
void Event::clear_troika_ticket() {
  if (_internal_has_troika_ticket()) {
    delete event_.troika_ticket_;
    clear_has_event();
  }
}
Event::Event()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:complex.poll.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_event();
  switch (from.event_case()) {
    case kContactlessToken: {
      _internal_mutable_contactless_token()->::contactless::token::Token::MergeFrom(from._internal_contactless_token());
      break;
    }
    case kContactlessTxnResult: {
      _internal_mutable_contactless_txn_result()->::contactless::transaction::TransactionResult::MergeFrom(from._internal_contactless_txn_result());
      break;
    }
    case kTouchscreenEvent: {
      _internal_mutable_touchscreen_event()->::touchscreen::event::TouchscreenEvent::MergeFrom(from._internal_touchscreen_event());
      break;
    }
    case kQrcode: {
      _internal_mutable_qrcode()->::qrcode::event::QrCodeEvent::MergeFrom(from._internal_qrcode());
      break;
    }
    case kTroikaTicket: {
      _internal_mutable_troika_ticket()->::troika::av3::read_ticket::Ticket::MergeFrom(from._internal_troika_ticket());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:complex.poll.Event)
}

void Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_complex_2fpoll_5ffor_5fevent_2eproto.base);
  clear_has_event();
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:complex.poll.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (has_event()) {
    clear_event();
  }
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_complex_2fpoll_5ffor_5fevent_2eproto.base);
  return *internal_default_instance();
}


void Event::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:complex.poll.Event)
  switch (event_case()) {
    case kContactlessToken: {
      delete event_.contactless_token_;
      break;
    }
    case kContactlessTxnResult: {
      delete event_.contactless_txn_result_;
      break;
    }
    case kTouchscreenEvent: {
      delete event_.touchscreen_event_;
      break;
    }
    case kQrcode: {
      delete event_.qrcode_;
      break;
    }
    case kTroikaTicket: {
      delete event_.troika_ticket_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:complex.poll.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .contactless.token.Token contactless_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_contactless_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contactless.transaction.TransactionResult contactless_txn_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_contactless_txn_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .touchscreen.event.TouchscreenEvent touchscreen_event = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_touchscreen_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .qrcode.event.QrCodeEvent qrcode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_qrcode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .troika.av3.read_ticket.Ticket troika_ticket = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_troika_ticket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:complex.poll.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (event_case()) {
    case kContactlessToken: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::contactless_token(this), target, stream);
      break;
    }
    case kContactlessTxnResult: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::contactless_txn_result(this), target, stream);
      break;
    }
    case kTouchscreenEvent: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::touchscreen_event(this), target, stream);
      break;
    }
    case kQrcode: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::qrcode(this), target, stream);
      break;
    }
    case kTroikaTicket: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::troika_ticket(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:complex.poll.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:complex.poll.Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_case()) {
    // optional .contactless.token.Token contactless_token = 1;
    case kContactlessToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.contactless_token_);
      break;
    }
    // optional .contactless.transaction.TransactionResult contactless_txn_result = 2;
    case kContactlessTxnResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.contactless_txn_result_);
      break;
    }
    // optional .touchscreen.event.TouchscreenEvent touchscreen_event = 3;
    case kTouchscreenEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.touchscreen_event_);
      break;
    }
    // optional .qrcode.event.QrCodeEvent qrcode = 4;
    case kQrcode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.qrcode_);
      break;
    }
    // optional .troika.av3.read_ticket.Ticket troika_ticket = 5;
    case kTroikaTicket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.troika_ticket_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:complex.poll.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:complex.poll.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:complex.poll.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:complex.poll.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kContactlessToken: {
      _internal_mutable_contactless_token()->::contactless::token::Token::MergeFrom(from._internal_contactless_token());
      break;
    }
    case kContactlessTxnResult: {
      _internal_mutable_contactless_txn_result()->::contactless::transaction::TransactionResult::MergeFrom(from._internal_contactless_txn_result());
      break;
    }
    case kTouchscreenEvent: {
      _internal_mutable_touchscreen_event()->::touchscreen::event::TouchscreenEvent::MergeFrom(from._internal_touchscreen_event());
      break;
    }
    case kQrcode: {
      _internal_mutable_qrcode()->::qrcode::event::QrCodeEvent::MergeFrom(from._internal_qrcode());
      break;
    }
    case kTroikaTicket: {
      _internal_mutable_troika_ticket()->::troika::av3::read_ticket::Ticket::MergeFrom(from._internal_troika_ticket());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:complex.poll.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:complex.poll.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  switch (event_case()) {
    case kContactlessToken: {
      if (has_contactless_token()) {
        if (!this->contactless_token().IsInitialized()) return false;
      }
      break;
    }
    case kContactlessTxnResult: {
      if (has_contactless_txn_result()) {
        if (!this->contactless_txn_result().IsInitialized()) return false;
      }
      break;
    }
    case kTouchscreenEvent: {
      if (has_touchscreen_event()) {
        if (!this->touchscreen_event().IsInitialized()) return false;
      }
      break;
    }
    case kQrcode: {
      if (has_qrcode()) {
        if (!this->qrcode().IsInitialized()) return false;
      }
      break;
    }
    case kTroikaTicket: {
      if (has_troika_ticket()) {
        if (!this->troika_ticket().IsInitialized()) return false;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace poll
}  // namespace complex
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::complex::poll::PollForEvent* Arena::CreateMaybeMessage< ::complex::poll::PollForEvent >(Arena* arena) {
  return Arena::CreateInternal< ::complex::poll::PollForEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::complex::poll::UserInterface* Arena::CreateMaybeMessage< ::complex::poll::UserInterface >(Arena* arena) {
  return Arena::CreateInternal< ::complex::poll::UserInterface >(arena);
}
template<> PROTOBUF_NOINLINE ::complex::poll::MifareCardAction* Arena::CreateMaybeMessage< ::complex::poll::MifareCardAction >(Arena* arena) {
  return Arena::CreateInternal< ::complex::poll::MifareCardAction >(arena);
}
template<> PROTOBUF_NOINLINE ::complex::poll::Event* Arena::CreateMaybeMessage< ::complex::poll::Event >(Arena* arena) {
  return Arena::CreateInternal< ::complex::poll::Event >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
