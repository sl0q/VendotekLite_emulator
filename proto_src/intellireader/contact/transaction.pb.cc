// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contact/transaction.proto

#include "contact/transaction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_contact_2femv_5ftag_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmvTag_contact_2femv_5ftag_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pinpad_2fonline_5fpin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PinEncryptionParams_pinpad_2fonline_5fpin_2eproto;
namespace contact {
namespace transaction {
class PerformTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerformTransaction> _instance;
} _PerformTransaction_default_instance_;
class ContactTransactionResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContactTransactionResult> _instance;
} _ContactTransactionResult_default_instance_;
}  // namespace transaction
}  // namespace contact
static void InitDefaultsscc_info_ContactTransactionResult_contact_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contact::transaction::_ContactTransactionResult_default_instance_;
    new (ptr) ::contact::transaction::ContactTransactionResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contact::transaction::ContactTransactionResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContactTransactionResult_contact_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContactTransactionResult_contact_2ftransaction_2eproto}, {
      &scc_info_EmvTag_contact_2femv_5ftag_2eproto.base,}};

static void InitDefaultsscc_info_PerformTransaction_contact_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contact::transaction::_PerformTransaction_default_instance_;
    new (ptr) ::contact::transaction::PerformTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contact::transaction::PerformTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerformTransaction_contact_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PerformTransaction_contact_2ftransaction_2eproto}, {
      &scc_info_PinEncryptionParams_pinpad_2fonline_5fpin_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_contact_2ftransaction_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_contact_2ftransaction_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_contact_2ftransaction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_contact_2ftransaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::contact::transaction::PerformTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contact::transaction::PerformTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contact::transaction::PerformTransaction, amount_authorized_),
  PROTOBUF_FIELD_OFFSET(::contact::transaction::PerformTransaction, transaction_date_),
  PROTOBUF_FIELD_OFFSET(::contact::transaction::PerformTransaction, transaction_type_),
  PROTOBUF_FIELD_OFFSET(::contact::transaction::PerformTransaction, terminal_country_code_),
  PROTOBUF_FIELD_OFFSET(::contact::transaction::PerformTransaction, transaction_time_),
  PROTOBUF_FIELD_OFFSET(::contact::transaction::PerformTransaction, transaction_currency_code_),
  PROTOBUF_FIELD_OFFSET(::contact::transaction::PerformTransaction, merchant_name_and_location_),
  PROTOBUF_FIELD_OFFSET(::contact::transaction::PerformTransaction, merchant_category_code_),
  PROTOBUF_FIELD_OFFSET(::contact::transaction::PerformTransaction, terminal_identification_),
  PROTOBUF_FIELD_OFFSET(::contact::transaction::PerformTransaction, online_pin_params_),
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::contact::transaction::ContactTransactionResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contact::transaction::ContactTransactionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contact::transaction::ContactTransactionResult, status_),
  PROTOBUF_FIELD_OFFSET(::contact::transaction::ContactTransactionResult, emv_tags_),
  PROTOBUF_FIELD_OFFSET(::contact::transaction::ContactTransactionResult, error_reason_),
  PROTOBUF_FIELD_OFFSET(::contact::transaction::ContactTransactionResult, online_pin_block_),
  2,
  ~0u,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::contact::transaction::PerformTransaction)},
  { 25, 34, sizeof(::contact::transaction::ContactTransactionResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contact::transaction::_PerformTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contact::transaction::_ContactTransactionResult_default_instance_),
};

const char descriptor_table_protodef_contact_2ftransaction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031contact/transaction.proto\022\023contact.tra"
  "nsaction\032\025contact/emv_tag.proto\032\027pinpad/"
  "online_pin.proto\"\347\002\n\022PerformTransaction\022"
  "\031\n\021amount_authorized\030\001 \002(\004\022\030\n\020transactio"
  "n_date\030\002 \002(\014\022\030\n\020transaction_type\030\003 \002(\014\022\035"
  "\n\025terminal_country_code\030\004 \002(\014\022\030\n\020transac"
  "tion_time\030\005 \002(\014\022!\n\031transaction_currency_"
  "code\030\006 \002(\014\022\"\n\032merchant_name_and_location"
  "\030\007 \001(\014\022\036\n\026merchant_category_code\030\010 \001(\014\022\037"
  "\n\027terminal_identification\030\t \001(\014\022A\n\021onlin"
  "e_pin_params\030\n \001(\0132&.pinpad.online_pin.P"
  "inEncryptionParams\"\255\001\n\030ContactTransactio"
  "nResult\0226\n\006status\030\001 \002(\0162&.contact.transa"
  "ction.TransactionStatus\022)\n\010emv_tags\030\002 \003("
  "\0132\027.contact.emv_tag.EmvTag\022\024\n\014error_reas"
  "on\030\003 \001(\t\022\030\n\020online_pin_block\030\004 \001(\014*a\n\021Tr"
  "ansactionStatus\022\014\n\010APPROVED\020\000\022\014\n\010DECLINE"
  "D\020\001\022\036\n\032UNABLE_PERFORM_TRANSACTION\020\002\022\020\n\014C"
  "ARD_EXPIRED\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_contact_2ftransaction_2eproto_deps[2] = {
  &::descriptor_table_contact_2femv_5ftag_2eproto,
  &::descriptor_table_pinpad_2fonline_5fpin_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_contact_2ftransaction_2eproto_sccs[2] = {
  &scc_info_ContactTransactionResult_contact_2ftransaction_2eproto.base,
  &scc_info_PerformTransaction_contact_2ftransaction_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_contact_2ftransaction_2eproto_once;
static bool descriptor_table_contact_2ftransaction_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contact_2ftransaction_2eproto = {
  &descriptor_table_contact_2ftransaction_2eproto_initialized, descriptor_table_protodef_contact_2ftransaction_2eproto, "contact/transaction.proto", 733,
  &descriptor_table_contact_2ftransaction_2eproto_once, descriptor_table_contact_2ftransaction_2eproto_sccs, descriptor_table_contact_2ftransaction_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_contact_2ftransaction_2eproto::offsets,
  file_level_metadata_contact_2ftransaction_2eproto, 2, file_level_enum_descriptors_contact_2ftransaction_2eproto, file_level_service_descriptors_contact_2ftransaction_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_contact_2ftransaction_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_contact_2ftransaction_2eproto), true);
namespace contact {
namespace transaction {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_contact_2ftransaction_2eproto);
  return file_level_enum_descriptors_contact_2ftransaction_2eproto[0];
}
bool TransactionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PerformTransaction::InitAsDefaultInstance() {
  ::contact::transaction::_PerformTransaction_default_instance_._instance.get_mutable()->online_pin_params_ = const_cast< ::pinpad::online_pin::PinEncryptionParams*>(
      ::pinpad::online_pin::PinEncryptionParams::internal_default_instance());
}
class PerformTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<PerformTransaction>()._has_bits_);
  static void set_has_amount_authorized(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_transaction_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transaction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_terminal_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_transaction_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_transaction_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_merchant_name_and_location(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_merchant_category_code(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_terminal_identification(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::pinpad::online_pin::PinEncryptionParams& online_pin_params(const PerformTransaction* msg);
  static void set_has_online_pin_params(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::pinpad::online_pin::PinEncryptionParams&
PerformTransaction::_Internal::online_pin_params(const PerformTransaction* msg) {
  return *msg->online_pin_params_;
}
void PerformTransaction::clear_online_pin_params() {
  if (online_pin_params_ != nullptr) online_pin_params_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
PerformTransaction::PerformTransaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contact.transaction.PerformTransaction)
}
PerformTransaction::PerformTransaction(const PerformTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transaction_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_transaction_date()) {
    transaction_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_date_);
  }
  transaction_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_transaction_type()) {
    transaction_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_type_);
  }
  terminal_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_terminal_country_code()) {
    terminal_country_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.terminal_country_code_);
  }
  transaction_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_transaction_time()) {
    transaction_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_time_);
  }
  transaction_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_transaction_currency_code()) {
    transaction_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_currency_code_);
  }
  merchant_name_and_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_merchant_name_and_location()) {
    merchant_name_and_location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merchant_name_and_location_);
  }
  merchant_category_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_merchant_category_code()) {
    merchant_category_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merchant_category_code_);
  }
  terminal_identification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_terminal_identification()) {
    terminal_identification_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.terminal_identification_);
  }
  if (from._internal_has_online_pin_params()) {
    online_pin_params_ = new ::pinpad::online_pin::PinEncryptionParams(*from.online_pin_params_);
  } else {
    online_pin_params_ = nullptr;
  }
  amount_authorized_ = from.amount_authorized_;
  // @@protoc_insertion_point(copy_constructor:contact.transaction.PerformTransaction)
}

void PerformTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerformTransaction_contact_2ftransaction_2eproto.base);
  transaction_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merchant_name_and_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merchant_category_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_identification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&online_pin_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_authorized_) -
      reinterpret_cast<char*>(&online_pin_params_)) + sizeof(amount_authorized_));
}

PerformTransaction::~PerformTransaction() {
  // @@protoc_insertion_point(destructor:contact.transaction.PerformTransaction)
  SharedDtor();
}

void PerformTransaction::SharedDtor() {
  transaction_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merchant_name_and_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merchant_category_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_identification_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete online_pin_params_;
}

void PerformTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerformTransaction& PerformTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerformTransaction_contact_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void PerformTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:contact.transaction.PerformTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      transaction_date_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      transaction_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      terminal_country_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      transaction_time_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      transaction_currency_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      merchant_name_and_location_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      merchant_category_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      terminal_identification_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(online_pin_params_ != nullptr);
    online_pin_params_->Clear();
  }
  amount_authorized_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PerformTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 amount_authorized = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_amount_authorized(&has_bits);
          amount_authorized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes transaction_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_transaction_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes transaction_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_transaction_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes terminal_country_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_terminal_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes transaction_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_transaction_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes transaction_currency_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_transaction_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes merchant_name_and_location = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_merchant_name_and_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes merchant_category_code = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_merchant_category_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes terminal_identification = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_terminal_identification();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pinpad.online_pin.PinEncryptionParams online_pin_params = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_online_pin_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerformTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contact.transaction.PerformTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 amount_authorized = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_amount_authorized(), target);
  }

  // required bytes transaction_date = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_transaction_date(), target);
  }

  // required bytes transaction_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_transaction_type(), target);
  }

  // required bytes terminal_country_code = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_terminal_country_code(), target);
  }

  // required bytes transaction_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_transaction_time(), target);
  }

  // required bytes transaction_currency_code = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_transaction_currency_code(), target);
  }

  // optional bytes merchant_name_and_location = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_merchant_name_and_location(), target);
  }

  // optional bytes merchant_category_code = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_merchant_category_code(), target);
  }

  // optional bytes terminal_identification = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_terminal_identification(), target);
  }

  // optional .pinpad.online_pin.PinEncryptionParams online_pin_params = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::online_pin_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contact.transaction.PerformTransaction)
  return target;
}

size_t PerformTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:contact.transaction.PerformTransaction)
  size_t total_size = 0;

  if (_internal_has_transaction_date()) {
    // required bytes transaction_date = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_date());
  }

  if (_internal_has_transaction_type()) {
    // required bytes transaction_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_type());
  }

  if (_internal_has_terminal_country_code()) {
    // required bytes terminal_country_code = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_terminal_country_code());
  }

  if (_internal_has_transaction_time()) {
    // required bytes transaction_time = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_time());
  }

  if (_internal_has_transaction_currency_code()) {
    // required bytes transaction_currency_code = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_currency_code());
  }

  if (_internal_has_amount_authorized()) {
    // required uint64 amount_authorized = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount_authorized());
  }

  return total_size;
}
size_t PerformTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contact.transaction.PerformTransaction)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000021f) ^ 0x0000021f) == 0) {  // All required fields are present.
    // required bytes transaction_date = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_date());

    // required bytes transaction_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_type());

    // required bytes terminal_country_code = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_terminal_country_code());

    // required bytes transaction_time = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_time());

    // required bytes transaction_currency_code = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_currency_code());

    // required uint64 amount_authorized = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount_authorized());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000e0u) {
    // optional bytes merchant_name_and_location = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_merchant_name_and_location());
    }

    // optional bytes merchant_category_code = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_merchant_category_code());
    }

    // optional bytes terminal_identification = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_terminal_identification());
    }

  }
  // optional .pinpad.online_pin.PinEncryptionParams online_pin_params = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *online_pin_params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerformTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contact.transaction.PerformTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const PerformTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerformTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contact.transaction.PerformTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contact.transaction.PerformTransaction)
    MergeFrom(*source);
  }
}

void PerformTransaction::MergeFrom(const PerformTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contact.transaction.PerformTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      transaction_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_date_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      transaction_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      terminal_country_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.terminal_country_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      transaction_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_time_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      transaction_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_currency_code_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      merchant_name_and_location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merchant_name_and_location_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      merchant_category_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merchant_category_code_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      terminal_identification_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.terminal_identification_);
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_online_pin_params()->::pinpad::online_pin::PinEncryptionParams::MergeFrom(from._internal_online_pin_params());
    }
    if (cached_has_bits & 0x00000200u) {
      amount_authorized_ = from.amount_authorized_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerformTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contact.transaction.PerformTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerformTransaction::CopyFrom(const PerformTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contact.transaction.PerformTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformTransaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000021f) != 0x0000021f) return false;
  if (_internal_has_online_pin_params()) {
    if (!online_pin_params_->IsInitialized()) return false;
  }
  return true;
}

void PerformTransaction::InternalSwap(PerformTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  transaction_date_.Swap(&other->transaction_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transaction_type_.Swap(&other->transaction_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  terminal_country_code_.Swap(&other->terminal_country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transaction_time_.Swap(&other->transaction_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transaction_currency_code_.Swap(&other->transaction_currency_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  merchant_name_and_location_.Swap(&other->merchant_name_and_location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  merchant_category_code_.Swap(&other->merchant_category_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  terminal_identification_.Swap(&other->terminal_identification_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(online_pin_params_, other->online_pin_params_);
  swap(amount_authorized_, other->amount_authorized_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerformTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContactTransactionResult::InitAsDefaultInstance() {
}
class ContactTransactionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<ContactTransactionResult>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_online_pin_block(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void ContactTransactionResult::clear_emv_tags() {
  emv_tags_.Clear();
}
ContactTransactionResult::ContactTransactionResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contact.transaction.ContactTransactionResult)
}
ContactTransactionResult::ContactTransactionResult(const ContactTransactionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      emv_tags_(from.emv_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_reason()) {
    error_reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_reason_);
  }
  online_pin_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_online_pin_block()) {
    online_pin_block_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.online_pin_block_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:contact.transaction.ContactTransactionResult)
}

void ContactTransactionResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContactTransactionResult_contact_2ftransaction_2eproto.base);
  error_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  online_pin_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

ContactTransactionResult::~ContactTransactionResult() {
  // @@protoc_insertion_point(destructor:contact.transaction.ContactTransactionResult)
  SharedDtor();
}

void ContactTransactionResult::SharedDtor() {
  error_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  online_pin_block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContactTransactionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContactTransactionResult& ContactTransactionResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContactTransactionResult_contact_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void ContactTransactionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:contact.transaction.ContactTransactionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emv_tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_reason_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      online_pin_block_.ClearNonDefaultToEmptyNoArena();
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContactTransactionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .contact.transaction.TransactionStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::contact::transaction::TransactionStatus_IsValid(val))) {
            _internal_set_status(static_cast<::contact::transaction::TransactionStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .contact.emv_tag.EmvTag emv_tags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_emv_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string error_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "contact.transaction.ContactTransactionResult.error_reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes online_pin_block = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_online_pin_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContactTransactionResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contact.transaction.ContactTransactionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .contact.transaction.TransactionStatus status = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // repeated .contact.emv_tag.EmvTag emv_tags = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_emv_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_emv_tags(i), target, stream);
  }

  // optional string error_reason = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_reason().data(), static_cast<int>(this->_internal_error_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "contact.transaction.ContactTransactionResult.error_reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_reason(), target);
  }

  // optional bytes online_pin_block = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_online_pin_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contact.transaction.ContactTransactionResult)
  return target;
}

size_t ContactTransactionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contact.transaction.ContactTransactionResult)
  size_t total_size = 0;

  // required .contact.transaction.TransactionStatus status = 1;
  if (_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .contact.emv_tag.EmvTag emv_tags = 2;
  total_size += 1UL * this->_internal_emv_tags_size();
  for (const auto& msg : this->emv_tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error_reason = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_reason());
    }

    // optional bytes online_pin_block = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_online_pin_block());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContactTransactionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contact.transaction.ContactTransactionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ContactTransactionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContactTransactionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contact.transaction.ContactTransactionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contact.transaction.ContactTransactionResult)
    MergeFrom(*source);
  }
}

void ContactTransactionResult::MergeFrom(const ContactTransactionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contact.transaction.ContactTransactionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emv_tags_.MergeFrom(from.emv_tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      error_reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      online_pin_block_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.online_pin_block_);
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContactTransactionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contact.transaction.ContactTransactionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactTransactionResult::CopyFrom(const ContactTransactionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contact.transaction.ContactTransactionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactTransactionResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(emv_tags_)) return false;
  return true;
}

void ContactTransactionResult::InternalSwap(ContactTransactionResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  emv_tags_.InternalSwap(&other->emv_tags_);
  error_reason_.Swap(&other->error_reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  online_pin_block_.Swap(&other->online_pin_block_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContactTransactionResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace transaction
}  // namespace contact
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::contact::transaction::PerformTransaction* Arena::CreateMaybeMessage< ::contact::transaction::PerformTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::contact::transaction::PerformTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::contact::transaction::ContactTransactionResult* Arena::CreateMaybeMessage< ::contact::transaction::ContactTransactionResult >(Arena* arena) {
  return Arena::CreateInternal< ::contact::transaction::ContactTransactionResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
