// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contact/power_on.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_contact_2fpower_5fon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_contact_2fpower_5fon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "contact/card_slot.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_contact_2fpower_5fon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_contact_2fpower_5fon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contact_2fpower_5fon_2eproto;
namespace contact {
namespace power_on {
class ContactCard;
class ContactCardDefaultTypeInternal;
extern ContactCardDefaultTypeInternal _ContactCard_default_instance_;
class PowerOnCard;
class PowerOnCardDefaultTypeInternal;
extern PowerOnCardDefaultTypeInternal _PowerOnCard_default_instance_;
}  // namespace power_on
}  // namespace contact
PROTOBUF_NAMESPACE_OPEN
template<> ::contact::power_on::ContactCard* Arena::CreateMaybeMessage<::contact::power_on::ContactCard>(Arena*);
template<> ::contact::power_on::PowerOnCard* Arena::CreateMaybeMessage<::contact::power_on::PowerOnCard>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace contact {
namespace power_on {

// ===================================================================

class PowerOnCard :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contact.power_on.PowerOnCard) */ {
 public:
  PowerOnCard();
  virtual ~PowerOnCard();

  PowerOnCard(const PowerOnCard& from);
  PowerOnCard(PowerOnCard&& from) noexcept
    : PowerOnCard() {
    *this = ::std::move(from);
  }

  inline PowerOnCard& operator=(const PowerOnCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerOnCard& operator=(PowerOnCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PowerOnCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerOnCard* internal_default_instance() {
    return reinterpret_cast<const PowerOnCard*>(
               &_PowerOnCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PowerOnCard& a, PowerOnCard& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerOnCard* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerOnCard* New() const final {
    return CreateMaybeMessage<PowerOnCard>(nullptr);
  }

  PowerOnCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerOnCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PowerOnCard& from);
  void MergeFrom(const PowerOnCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PowerOnCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contact.power_on.PowerOnCard";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contact_2fpower_5fon_2eproto);
    return ::descriptor_table_contact_2fpower_5fon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotFieldNumber = 1,
  };
  // required .contact.card_slot.CardSlot slot = 1;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  ::contact::card_slot::CardSlot slot() const;
  void set_slot(::contact::card_slot::CardSlot value);
  private:
  ::contact::card_slot::CardSlot _internal_slot() const;
  void _internal_set_slot(::contact::card_slot::CardSlot value);
  public:

  // @@protoc_insertion_point(class_scope:contact.power_on.PowerOnCard)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int slot_;
  friend struct ::TableStruct_contact_2fpower_5fon_2eproto;
};
// -------------------------------------------------------------------

class ContactCard :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contact.power_on.ContactCard) */ {
 public:
  ContactCard();
  virtual ~ContactCard();

  ContactCard(const ContactCard& from);
  ContactCard(ContactCard&& from) noexcept
    : ContactCard() {
    *this = ::std::move(from);
  }

  inline ContactCard& operator=(const ContactCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContactCard& operator=(ContactCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContactCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactCard* internal_default_instance() {
    return reinterpret_cast<const ContactCard*>(
               &_ContactCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContactCard& a, ContactCard& b) {
    a.Swap(&b);
  }
  inline void Swap(ContactCard* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContactCard* New() const final {
    return CreateMaybeMessage<ContactCard>(nullptr);
  }

  ContactCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContactCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContactCard& from);
  void MergeFrom(const ContactCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContactCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contact.power_on.ContactCard";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contact_2fpower_5fon_2eproto);
    return ::descriptor_table_contact_2fpower_5fon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoricalBytesFieldNumber = 1,
  };
  // required bytes historical_bytes = 1;
  bool has_historical_bytes() const;
  private:
  bool _internal_has_historical_bytes() const;
  public:
  void clear_historical_bytes();
  const std::string& historical_bytes() const;
  void set_historical_bytes(const std::string& value);
  void set_historical_bytes(std::string&& value);
  void set_historical_bytes(const char* value);
  void set_historical_bytes(const void* value, size_t size);
  std::string* mutable_historical_bytes();
  std::string* release_historical_bytes();
  void set_allocated_historical_bytes(std::string* historical_bytes);
  private:
  const std::string& _internal_historical_bytes() const;
  void _internal_set_historical_bytes(const std::string& value);
  std::string* _internal_mutable_historical_bytes();
  public:

  // @@protoc_insertion_point(class_scope:contact.power_on.ContactCard)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr historical_bytes_;
  friend struct ::TableStruct_contact_2fpower_5fon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PowerOnCard

// required .contact.card_slot.CardSlot slot = 1;
inline bool PowerOnCard::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PowerOnCard::has_slot() const {
  return _internal_has_slot();
}
inline void PowerOnCard::clear_slot() {
  slot_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::contact::card_slot::CardSlot PowerOnCard::_internal_slot() const {
  return static_cast< ::contact::card_slot::CardSlot >(slot_);
}
inline ::contact::card_slot::CardSlot PowerOnCard::slot() const {
  // @@protoc_insertion_point(field_get:contact.power_on.PowerOnCard.slot)
  return _internal_slot();
}
inline void PowerOnCard::_internal_set_slot(::contact::card_slot::CardSlot value) {
  assert(::contact::card_slot::CardSlot_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  slot_ = value;
}
inline void PowerOnCard::set_slot(::contact::card_slot::CardSlot value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:contact.power_on.PowerOnCard.slot)
}

// -------------------------------------------------------------------

// ContactCard

// required bytes historical_bytes = 1;
inline bool ContactCard::_internal_has_historical_bytes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContactCard::has_historical_bytes() const {
  return _internal_has_historical_bytes();
}
inline void ContactCard::clear_historical_bytes() {
  historical_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContactCard::historical_bytes() const {
  // @@protoc_insertion_point(field_get:contact.power_on.ContactCard.historical_bytes)
  return _internal_historical_bytes();
}
inline void ContactCard::set_historical_bytes(const std::string& value) {
  _internal_set_historical_bytes(value);
  // @@protoc_insertion_point(field_set:contact.power_on.ContactCard.historical_bytes)
}
inline std::string* ContactCard::mutable_historical_bytes() {
  // @@protoc_insertion_point(field_mutable:contact.power_on.ContactCard.historical_bytes)
  return _internal_mutable_historical_bytes();
}
inline const std::string& ContactCard::_internal_historical_bytes() const {
  return historical_bytes_.GetNoArena();
}
inline void ContactCard::_internal_set_historical_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  historical_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContactCard::set_historical_bytes(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  historical_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact.power_on.ContactCard.historical_bytes)
}
inline void ContactCard::set_historical_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  historical_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact.power_on.ContactCard.historical_bytes)
}
inline void ContactCard::set_historical_bytes(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  historical_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact.power_on.ContactCard.historical_bytes)
}
inline std::string* ContactCard::_internal_mutable_historical_bytes() {
  _has_bits_[0] |= 0x00000001u;
  return historical_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContactCard::release_historical_bytes() {
  // @@protoc_insertion_point(field_release:contact.power_on.ContactCard.historical_bytes)
  if (!_internal_has_historical_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return historical_bytes_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContactCard::set_allocated_historical_bytes(std::string* historical_bytes) {
  if (historical_bytes != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  historical_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), historical_bytes);
  // @@protoc_insertion_point(field_set_allocated:contact.power_on.ContactCard.historical_bytes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace power_on
}  // namespace contact

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_contact_2fpower_5fon_2eproto
