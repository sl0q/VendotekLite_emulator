// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contact/transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_contact_2ftransaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_contact_2ftransaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "contact/emv_tag.pb.h"
#include "pinpad/online_pin.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_contact_2ftransaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_contact_2ftransaction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contact_2ftransaction_2eproto;
namespace contact {
namespace transaction {
class ContactTransactionResult;
class ContactTransactionResultDefaultTypeInternal;
extern ContactTransactionResultDefaultTypeInternal _ContactTransactionResult_default_instance_;
class PerformTransaction;
class PerformTransactionDefaultTypeInternal;
extern PerformTransactionDefaultTypeInternal _PerformTransaction_default_instance_;
}  // namespace transaction
}  // namespace contact
PROTOBUF_NAMESPACE_OPEN
template<> ::contact::transaction::ContactTransactionResult* Arena::CreateMaybeMessage<::contact::transaction::ContactTransactionResult>(Arena*);
template<> ::contact::transaction::PerformTransaction* Arena::CreateMaybeMessage<::contact::transaction::PerformTransaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace contact {
namespace transaction {

enum TransactionStatus : int {
  APPROVED = 0,
  DECLINED = 1,
  UNABLE_PERFORM_TRANSACTION = 2,
  CARD_EXPIRED = 3
};
bool TransactionStatus_IsValid(int value);
constexpr TransactionStatus TransactionStatus_MIN = APPROVED;
constexpr TransactionStatus TransactionStatus_MAX = CARD_EXPIRED;
constexpr int TransactionStatus_ARRAYSIZE = TransactionStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionStatus_descriptor();
template<typename T>
inline const std::string& TransactionStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransactionStatus_descriptor(), enum_t_value);
}
inline bool TransactionStatus_Parse(
    const std::string& name, TransactionStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransactionStatus>(
    TransactionStatus_descriptor(), name, value);
}
// ===================================================================

class PerformTransaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contact.transaction.PerformTransaction) */ {
 public:
  PerformTransaction();
  virtual ~PerformTransaction();

  PerformTransaction(const PerformTransaction& from);
  PerformTransaction(PerformTransaction&& from) noexcept
    : PerformTransaction() {
    *this = ::std::move(from);
  }

  inline PerformTransaction& operator=(const PerformTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerformTransaction& operator=(PerformTransaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PerformTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerformTransaction* internal_default_instance() {
    return reinterpret_cast<const PerformTransaction*>(
               &_PerformTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerformTransaction& a, PerformTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(PerformTransaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerformTransaction* New() const final {
    return CreateMaybeMessage<PerformTransaction>(nullptr);
  }

  PerformTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerformTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PerformTransaction& from);
  void MergeFrom(const PerformTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerformTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contact.transaction.PerformTransaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contact_2ftransaction_2eproto);
    return ::descriptor_table_contact_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionDateFieldNumber = 2,
    kTransactionTypeFieldNumber = 3,
    kTerminalCountryCodeFieldNumber = 4,
    kTransactionTimeFieldNumber = 5,
    kTransactionCurrencyCodeFieldNumber = 6,
    kMerchantNameAndLocationFieldNumber = 7,
    kMerchantCategoryCodeFieldNumber = 8,
    kTerminalIdentificationFieldNumber = 9,
    kOnlinePinParamsFieldNumber = 10,
    kAmountAuthorizedFieldNumber = 1,
  };
  // required bytes transaction_date = 2;
  bool has_transaction_date() const;
  private:
  bool _internal_has_transaction_date() const;
  public:
  void clear_transaction_date();
  const std::string& transaction_date() const;
  void set_transaction_date(const std::string& value);
  void set_transaction_date(std::string&& value);
  void set_transaction_date(const char* value);
  void set_transaction_date(const void* value, size_t size);
  std::string* mutable_transaction_date();
  std::string* release_transaction_date();
  void set_allocated_transaction_date(std::string* transaction_date);
  private:
  const std::string& _internal_transaction_date() const;
  void _internal_set_transaction_date(const std::string& value);
  std::string* _internal_mutable_transaction_date();
  public:

  // required bytes transaction_type = 3;
  bool has_transaction_type() const;
  private:
  bool _internal_has_transaction_type() const;
  public:
  void clear_transaction_type();
  const std::string& transaction_type() const;
  void set_transaction_type(const std::string& value);
  void set_transaction_type(std::string&& value);
  void set_transaction_type(const char* value);
  void set_transaction_type(const void* value, size_t size);
  std::string* mutable_transaction_type();
  std::string* release_transaction_type();
  void set_allocated_transaction_type(std::string* transaction_type);
  private:
  const std::string& _internal_transaction_type() const;
  void _internal_set_transaction_type(const std::string& value);
  std::string* _internal_mutable_transaction_type();
  public:

  // required bytes terminal_country_code = 4;
  bool has_terminal_country_code() const;
  private:
  bool _internal_has_terminal_country_code() const;
  public:
  void clear_terminal_country_code();
  const std::string& terminal_country_code() const;
  void set_terminal_country_code(const std::string& value);
  void set_terminal_country_code(std::string&& value);
  void set_terminal_country_code(const char* value);
  void set_terminal_country_code(const void* value, size_t size);
  std::string* mutable_terminal_country_code();
  std::string* release_terminal_country_code();
  void set_allocated_terminal_country_code(std::string* terminal_country_code);
  private:
  const std::string& _internal_terminal_country_code() const;
  void _internal_set_terminal_country_code(const std::string& value);
  std::string* _internal_mutable_terminal_country_code();
  public:

  // required bytes transaction_time = 5;
  bool has_transaction_time() const;
  private:
  bool _internal_has_transaction_time() const;
  public:
  void clear_transaction_time();
  const std::string& transaction_time() const;
  void set_transaction_time(const std::string& value);
  void set_transaction_time(std::string&& value);
  void set_transaction_time(const char* value);
  void set_transaction_time(const void* value, size_t size);
  std::string* mutable_transaction_time();
  std::string* release_transaction_time();
  void set_allocated_transaction_time(std::string* transaction_time);
  private:
  const std::string& _internal_transaction_time() const;
  void _internal_set_transaction_time(const std::string& value);
  std::string* _internal_mutable_transaction_time();
  public:

  // required bytes transaction_currency_code = 6;
  bool has_transaction_currency_code() const;
  private:
  bool _internal_has_transaction_currency_code() const;
  public:
  void clear_transaction_currency_code();
  const std::string& transaction_currency_code() const;
  void set_transaction_currency_code(const std::string& value);
  void set_transaction_currency_code(std::string&& value);
  void set_transaction_currency_code(const char* value);
  void set_transaction_currency_code(const void* value, size_t size);
  std::string* mutable_transaction_currency_code();
  std::string* release_transaction_currency_code();
  void set_allocated_transaction_currency_code(std::string* transaction_currency_code);
  private:
  const std::string& _internal_transaction_currency_code() const;
  void _internal_set_transaction_currency_code(const std::string& value);
  std::string* _internal_mutable_transaction_currency_code();
  public:

  // optional bytes merchant_name_and_location = 7;
  bool has_merchant_name_and_location() const;
  private:
  bool _internal_has_merchant_name_and_location() const;
  public:
  void clear_merchant_name_and_location();
  const std::string& merchant_name_and_location() const;
  void set_merchant_name_and_location(const std::string& value);
  void set_merchant_name_and_location(std::string&& value);
  void set_merchant_name_and_location(const char* value);
  void set_merchant_name_and_location(const void* value, size_t size);
  std::string* mutable_merchant_name_and_location();
  std::string* release_merchant_name_and_location();
  void set_allocated_merchant_name_and_location(std::string* merchant_name_and_location);
  private:
  const std::string& _internal_merchant_name_and_location() const;
  void _internal_set_merchant_name_and_location(const std::string& value);
  std::string* _internal_mutable_merchant_name_and_location();
  public:

  // optional bytes merchant_category_code = 8;
  bool has_merchant_category_code() const;
  private:
  bool _internal_has_merchant_category_code() const;
  public:
  void clear_merchant_category_code();
  const std::string& merchant_category_code() const;
  void set_merchant_category_code(const std::string& value);
  void set_merchant_category_code(std::string&& value);
  void set_merchant_category_code(const char* value);
  void set_merchant_category_code(const void* value, size_t size);
  std::string* mutable_merchant_category_code();
  std::string* release_merchant_category_code();
  void set_allocated_merchant_category_code(std::string* merchant_category_code);
  private:
  const std::string& _internal_merchant_category_code() const;
  void _internal_set_merchant_category_code(const std::string& value);
  std::string* _internal_mutable_merchant_category_code();
  public:

  // optional bytes terminal_identification = 9;
  bool has_terminal_identification() const;
  private:
  bool _internal_has_terminal_identification() const;
  public:
  void clear_terminal_identification();
  const std::string& terminal_identification() const;
  void set_terminal_identification(const std::string& value);
  void set_terminal_identification(std::string&& value);
  void set_terminal_identification(const char* value);
  void set_terminal_identification(const void* value, size_t size);
  std::string* mutable_terminal_identification();
  std::string* release_terminal_identification();
  void set_allocated_terminal_identification(std::string* terminal_identification);
  private:
  const std::string& _internal_terminal_identification() const;
  void _internal_set_terminal_identification(const std::string& value);
  std::string* _internal_mutable_terminal_identification();
  public:

  // optional .pinpad.online_pin.PinEncryptionParams online_pin_params = 10;
  bool has_online_pin_params() const;
  private:
  bool _internal_has_online_pin_params() const;
  public:
  void clear_online_pin_params();
  const ::pinpad::online_pin::PinEncryptionParams& online_pin_params() const;
  ::pinpad::online_pin::PinEncryptionParams* release_online_pin_params();
  ::pinpad::online_pin::PinEncryptionParams* mutable_online_pin_params();
  void set_allocated_online_pin_params(::pinpad::online_pin::PinEncryptionParams* online_pin_params);
  private:
  const ::pinpad::online_pin::PinEncryptionParams& _internal_online_pin_params() const;
  ::pinpad::online_pin::PinEncryptionParams* _internal_mutable_online_pin_params();
  public:

  // required uint64 amount_authorized = 1;
  bool has_amount_authorized() const;
  private:
  bool _internal_has_amount_authorized() const;
  public:
  void clear_amount_authorized();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_authorized() const;
  void set_amount_authorized(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount_authorized() const;
  void _internal_set_amount_authorized(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:contact.transaction.PerformTransaction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terminal_country_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_currency_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_name_and_location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_category_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terminal_identification_;
  ::pinpad::online_pin::PinEncryptionParams* online_pin_params_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_authorized_;
  friend struct ::TableStruct_contact_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class ContactTransactionResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contact.transaction.ContactTransactionResult) */ {
 public:
  ContactTransactionResult();
  virtual ~ContactTransactionResult();

  ContactTransactionResult(const ContactTransactionResult& from);
  ContactTransactionResult(ContactTransactionResult&& from) noexcept
    : ContactTransactionResult() {
    *this = ::std::move(from);
  }

  inline ContactTransactionResult& operator=(const ContactTransactionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContactTransactionResult& operator=(ContactTransactionResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContactTransactionResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactTransactionResult* internal_default_instance() {
    return reinterpret_cast<const ContactTransactionResult*>(
               &_ContactTransactionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContactTransactionResult& a, ContactTransactionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ContactTransactionResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContactTransactionResult* New() const final {
    return CreateMaybeMessage<ContactTransactionResult>(nullptr);
  }

  ContactTransactionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContactTransactionResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContactTransactionResult& from);
  void MergeFrom(const ContactTransactionResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContactTransactionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contact.transaction.ContactTransactionResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contact_2ftransaction_2eproto);
    return ::descriptor_table_contact_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmvTagsFieldNumber = 2,
    kErrorReasonFieldNumber = 3,
    kOnlinePinBlockFieldNumber = 4,
    kStatusFieldNumber = 1,
  };
  // repeated .contact.emv_tag.EmvTag emv_tags = 2;
  int emv_tags_size() const;
  private:
  int _internal_emv_tags_size() const;
  public:
  void clear_emv_tags();
  ::contact::emv_tag::EmvTag* mutable_emv_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contact::emv_tag::EmvTag >*
      mutable_emv_tags();
  private:
  const ::contact::emv_tag::EmvTag& _internal_emv_tags(int index) const;
  ::contact::emv_tag::EmvTag* _internal_add_emv_tags();
  public:
  const ::contact::emv_tag::EmvTag& emv_tags(int index) const;
  ::contact::emv_tag::EmvTag* add_emv_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contact::emv_tag::EmvTag >&
      emv_tags() const;

  // optional string error_reason = 3;
  bool has_error_reason() const;
  private:
  bool _internal_has_error_reason() const;
  public:
  void clear_error_reason();
  const std::string& error_reason() const;
  void set_error_reason(const std::string& value);
  void set_error_reason(std::string&& value);
  void set_error_reason(const char* value);
  void set_error_reason(const char* value, size_t size);
  std::string* mutable_error_reason();
  std::string* release_error_reason();
  void set_allocated_error_reason(std::string* error_reason);
  private:
  const std::string& _internal_error_reason() const;
  void _internal_set_error_reason(const std::string& value);
  std::string* _internal_mutable_error_reason();
  public:

  // optional bytes online_pin_block = 4;
  bool has_online_pin_block() const;
  private:
  bool _internal_has_online_pin_block() const;
  public:
  void clear_online_pin_block();
  const std::string& online_pin_block() const;
  void set_online_pin_block(const std::string& value);
  void set_online_pin_block(std::string&& value);
  void set_online_pin_block(const char* value);
  void set_online_pin_block(const void* value, size_t size);
  std::string* mutable_online_pin_block();
  std::string* release_online_pin_block();
  void set_allocated_online_pin_block(std::string* online_pin_block);
  private:
  const std::string& _internal_online_pin_block() const;
  void _internal_set_online_pin_block(const std::string& value);
  std::string* _internal_mutable_online_pin_block();
  public:

  // required .contact.transaction.TransactionStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::contact::transaction::TransactionStatus status() const;
  void set_status(::contact::transaction::TransactionStatus value);
  private:
  ::contact::transaction::TransactionStatus _internal_status() const;
  void _internal_set_status(::contact::transaction::TransactionStatus value);
  public:

  // @@protoc_insertion_point(class_scope:contact.transaction.ContactTransactionResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contact::emv_tag::EmvTag > emv_tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr online_pin_block_;
  int status_;
  friend struct ::TableStruct_contact_2ftransaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerformTransaction

// required uint64 amount_authorized = 1;
inline bool PerformTransaction::_internal_has_amount_authorized() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PerformTransaction::has_amount_authorized() const {
  return _internal_has_amount_authorized();
}
inline void PerformTransaction::clear_amount_authorized() {
  amount_authorized_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerformTransaction::_internal_amount_authorized() const {
  return amount_authorized_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerformTransaction::amount_authorized() const {
  // @@protoc_insertion_point(field_get:contact.transaction.PerformTransaction.amount_authorized)
  return _internal_amount_authorized();
}
inline void PerformTransaction::_internal_set_amount_authorized(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  amount_authorized_ = value;
}
inline void PerformTransaction::set_amount_authorized(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount_authorized(value);
  // @@protoc_insertion_point(field_set:contact.transaction.PerformTransaction.amount_authorized)
}

// required bytes transaction_date = 2;
inline bool PerformTransaction::_internal_has_transaction_date() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerformTransaction::has_transaction_date() const {
  return _internal_has_transaction_date();
}
inline void PerformTransaction::clear_transaction_date() {
  transaction_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PerformTransaction::transaction_date() const {
  // @@protoc_insertion_point(field_get:contact.transaction.PerformTransaction.transaction_date)
  return _internal_transaction_date();
}
inline void PerformTransaction::set_transaction_date(const std::string& value) {
  _internal_set_transaction_date(value);
  // @@protoc_insertion_point(field_set:contact.transaction.PerformTransaction.transaction_date)
}
inline std::string* PerformTransaction::mutable_transaction_date() {
  // @@protoc_insertion_point(field_mutable:contact.transaction.PerformTransaction.transaction_date)
  return _internal_mutable_transaction_date();
}
inline const std::string& PerformTransaction::_internal_transaction_date() const {
  return transaction_date_.GetNoArena();
}
inline void PerformTransaction::_internal_set_transaction_date(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  transaction_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PerformTransaction::set_transaction_date(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  transaction_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact.transaction.PerformTransaction.transaction_date)
}
inline void PerformTransaction::set_transaction_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  transaction_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact.transaction.PerformTransaction.transaction_date)
}
inline void PerformTransaction::set_transaction_date(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  transaction_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact.transaction.PerformTransaction.transaction_date)
}
inline std::string* PerformTransaction::_internal_mutable_transaction_date() {
  _has_bits_[0] |= 0x00000001u;
  return transaction_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerformTransaction::release_transaction_date() {
  // @@protoc_insertion_point(field_release:contact.transaction.PerformTransaction.transaction_date)
  if (!_internal_has_transaction_date()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return transaction_date_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerformTransaction::set_allocated_transaction_date(std::string* transaction_date) {
  if (transaction_date != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  transaction_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_date);
  // @@protoc_insertion_point(field_set_allocated:contact.transaction.PerformTransaction.transaction_date)
}

// required bytes transaction_type = 3;
inline bool PerformTransaction::_internal_has_transaction_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerformTransaction::has_transaction_type() const {
  return _internal_has_transaction_type();
}
inline void PerformTransaction::clear_transaction_type() {
  transaction_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PerformTransaction::transaction_type() const {
  // @@protoc_insertion_point(field_get:contact.transaction.PerformTransaction.transaction_type)
  return _internal_transaction_type();
}
inline void PerformTransaction::set_transaction_type(const std::string& value) {
  _internal_set_transaction_type(value);
  // @@protoc_insertion_point(field_set:contact.transaction.PerformTransaction.transaction_type)
}
inline std::string* PerformTransaction::mutable_transaction_type() {
  // @@protoc_insertion_point(field_mutable:contact.transaction.PerformTransaction.transaction_type)
  return _internal_mutable_transaction_type();
}
inline const std::string& PerformTransaction::_internal_transaction_type() const {
  return transaction_type_.GetNoArena();
}
inline void PerformTransaction::_internal_set_transaction_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  transaction_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PerformTransaction::set_transaction_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  transaction_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact.transaction.PerformTransaction.transaction_type)
}
inline void PerformTransaction::set_transaction_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  transaction_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact.transaction.PerformTransaction.transaction_type)
}
inline void PerformTransaction::set_transaction_type(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  transaction_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact.transaction.PerformTransaction.transaction_type)
}
inline std::string* PerformTransaction::_internal_mutable_transaction_type() {
  _has_bits_[0] |= 0x00000002u;
  return transaction_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerformTransaction::release_transaction_type() {
  // @@protoc_insertion_point(field_release:contact.transaction.PerformTransaction.transaction_type)
  if (!_internal_has_transaction_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return transaction_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerformTransaction::set_allocated_transaction_type(std::string* transaction_type) {
  if (transaction_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  transaction_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_type);
  // @@protoc_insertion_point(field_set_allocated:contact.transaction.PerformTransaction.transaction_type)
}

// required bytes terminal_country_code = 4;
inline bool PerformTransaction::_internal_has_terminal_country_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerformTransaction::has_terminal_country_code() const {
  return _internal_has_terminal_country_code();
}
inline void PerformTransaction::clear_terminal_country_code() {
  terminal_country_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PerformTransaction::terminal_country_code() const {
  // @@protoc_insertion_point(field_get:contact.transaction.PerformTransaction.terminal_country_code)
  return _internal_terminal_country_code();
}
inline void PerformTransaction::set_terminal_country_code(const std::string& value) {
  _internal_set_terminal_country_code(value);
  // @@protoc_insertion_point(field_set:contact.transaction.PerformTransaction.terminal_country_code)
}
inline std::string* PerformTransaction::mutable_terminal_country_code() {
  // @@protoc_insertion_point(field_mutable:contact.transaction.PerformTransaction.terminal_country_code)
  return _internal_mutable_terminal_country_code();
}
inline const std::string& PerformTransaction::_internal_terminal_country_code() const {
  return terminal_country_code_.GetNoArena();
}
inline void PerformTransaction::_internal_set_terminal_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  terminal_country_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PerformTransaction::set_terminal_country_code(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  terminal_country_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact.transaction.PerformTransaction.terminal_country_code)
}
inline void PerformTransaction::set_terminal_country_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  terminal_country_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact.transaction.PerformTransaction.terminal_country_code)
}
inline void PerformTransaction::set_terminal_country_code(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  terminal_country_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact.transaction.PerformTransaction.terminal_country_code)
}
inline std::string* PerformTransaction::_internal_mutable_terminal_country_code() {
  _has_bits_[0] |= 0x00000004u;
  return terminal_country_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerformTransaction::release_terminal_country_code() {
  // @@protoc_insertion_point(field_release:contact.transaction.PerformTransaction.terminal_country_code)
  if (!_internal_has_terminal_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return terminal_country_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerformTransaction::set_allocated_terminal_country_code(std::string* terminal_country_code) {
  if (terminal_country_code != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  terminal_country_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terminal_country_code);
  // @@protoc_insertion_point(field_set_allocated:contact.transaction.PerformTransaction.terminal_country_code)
}

// required bytes transaction_time = 5;
inline bool PerformTransaction::_internal_has_transaction_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerformTransaction::has_transaction_time() const {
  return _internal_has_transaction_time();
}
inline void PerformTransaction::clear_transaction_time() {
  transaction_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PerformTransaction::transaction_time() const {
  // @@protoc_insertion_point(field_get:contact.transaction.PerformTransaction.transaction_time)
  return _internal_transaction_time();
}
inline void PerformTransaction::set_transaction_time(const std::string& value) {
  _internal_set_transaction_time(value);
  // @@protoc_insertion_point(field_set:contact.transaction.PerformTransaction.transaction_time)
}
inline std::string* PerformTransaction::mutable_transaction_time() {
  // @@protoc_insertion_point(field_mutable:contact.transaction.PerformTransaction.transaction_time)
  return _internal_mutable_transaction_time();
}
inline const std::string& PerformTransaction::_internal_transaction_time() const {
  return transaction_time_.GetNoArena();
}
inline void PerformTransaction::_internal_set_transaction_time(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  transaction_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PerformTransaction::set_transaction_time(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  transaction_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact.transaction.PerformTransaction.transaction_time)
}
inline void PerformTransaction::set_transaction_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  transaction_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact.transaction.PerformTransaction.transaction_time)
}
inline void PerformTransaction::set_transaction_time(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  transaction_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact.transaction.PerformTransaction.transaction_time)
}
inline std::string* PerformTransaction::_internal_mutable_transaction_time() {
  _has_bits_[0] |= 0x00000008u;
  return transaction_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerformTransaction::release_transaction_time() {
  // @@protoc_insertion_point(field_release:contact.transaction.PerformTransaction.transaction_time)
  if (!_internal_has_transaction_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return transaction_time_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerformTransaction::set_allocated_transaction_time(std::string* transaction_time) {
  if (transaction_time != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  transaction_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_time);
  // @@protoc_insertion_point(field_set_allocated:contact.transaction.PerformTransaction.transaction_time)
}

// required bytes transaction_currency_code = 6;
inline bool PerformTransaction::_internal_has_transaction_currency_code() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PerformTransaction::has_transaction_currency_code() const {
  return _internal_has_transaction_currency_code();
}
inline void PerformTransaction::clear_transaction_currency_code() {
  transaction_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PerformTransaction::transaction_currency_code() const {
  // @@protoc_insertion_point(field_get:contact.transaction.PerformTransaction.transaction_currency_code)
  return _internal_transaction_currency_code();
}
inline void PerformTransaction::set_transaction_currency_code(const std::string& value) {
  _internal_set_transaction_currency_code(value);
  // @@protoc_insertion_point(field_set:contact.transaction.PerformTransaction.transaction_currency_code)
}
inline std::string* PerformTransaction::mutable_transaction_currency_code() {
  // @@protoc_insertion_point(field_mutable:contact.transaction.PerformTransaction.transaction_currency_code)
  return _internal_mutable_transaction_currency_code();
}
inline const std::string& PerformTransaction::_internal_transaction_currency_code() const {
  return transaction_currency_code_.GetNoArena();
}
inline void PerformTransaction::_internal_set_transaction_currency_code(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  transaction_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PerformTransaction::set_transaction_currency_code(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  transaction_currency_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact.transaction.PerformTransaction.transaction_currency_code)
}
inline void PerformTransaction::set_transaction_currency_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  transaction_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact.transaction.PerformTransaction.transaction_currency_code)
}
inline void PerformTransaction::set_transaction_currency_code(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  transaction_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact.transaction.PerformTransaction.transaction_currency_code)
}
inline std::string* PerformTransaction::_internal_mutable_transaction_currency_code() {
  _has_bits_[0] |= 0x00000010u;
  return transaction_currency_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerformTransaction::release_transaction_currency_code() {
  // @@protoc_insertion_point(field_release:contact.transaction.PerformTransaction.transaction_currency_code)
  if (!_internal_has_transaction_currency_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return transaction_currency_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerformTransaction::set_allocated_transaction_currency_code(std::string* transaction_currency_code) {
  if (transaction_currency_code != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  transaction_currency_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_currency_code);
  // @@protoc_insertion_point(field_set_allocated:contact.transaction.PerformTransaction.transaction_currency_code)
}

// optional bytes merchant_name_and_location = 7;
inline bool PerformTransaction::_internal_has_merchant_name_and_location() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PerformTransaction::has_merchant_name_and_location() const {
  return _internal_has_merchant_name_and_location();
}
inline void PerformTransaction::clear_merchant_name_and_location() {
  merchant_name_and_location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PerformTransaction::merchant_name_and_location() const {
  // @@protoc_insertion_point(field_get:contact.transaction.PerformTransaction.merchant_name_and_location)
  return _internal_merchant_name_and_location();
}
inline void PerformTransaction::set_merchant_name_and_location(const std::string& value) {
  _internal_set_merchant_name_and_location(value);
  // @@protoc_insertion_point(field_set:contact.transaction.PerformTransaction.merchant_name_and_location)
}
inline std::string* PerformTransaction::mutable_merchant_name_and_location() {
  // @@protoc_insertion_point(field_mutable:contact.transaction.PerformTransaction.merchant_name_and_location)
  return _internal_mutable_merchant_name_and_location();
}
inline const std::string& PerformTransaction::_internal_merchant_name_and_location() const {
  return merchant_name_and_location_.GetNoArena();
}
inline void PerformTransaction::_internal_set_merchant_name_and_location(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  merchant_name_and_location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PerformTransaction::set_merchant_name_and_location(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  merchant_name_and_location_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact.transaction.PerformTransaction.merchant_name_and_location)
}
inline void PerformTransaction::set_merchant_name_and_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  merchant_name_and_location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact.transaction.PerformTransaction.merchant_name_and_location)
}
inline void PerformTransaction::set_merchant_name_and_location(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  merchant_name_and_location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact.transaction.PerformTransaction.merchant_name_and_location)
}
inline std::string* PerformTransaction::_internal_mutable_merchant_name_and_location() {
  _has_bits_[0] |= 0x00000020u;
  return merchant_name_and_location_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerformTransaction::release_merchant_name_and_location() {
  // @@protoc_insertion_point(field_release:contact.transaction.PerformTransaction.merchant_name_and_location)
  if (!_internal_has_merchant_name_and_location()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return merchant_name_and_location_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerformTransaction::set_allocated_merchant_name_and_location(std::string* merchant_name_and_location) {
  if (merchant_name_and_location != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  merchant_name_and_location_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_name_and_location);
  // @@protoc_insertion_point(field_set_allocated:contact.transaction.PerformTransaction.merchant_name_and_location)
}

// optional bytes merchant_category_code = 8;
inline bool PerformTransaction::_internal_has_merchant_category_code() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PerformTransaction::has_merchant_category_code() const {
  return _internal_has_merchant_category_code();
}
inline void PerformTransaction::clear_merchant_category_code() {
  merchant_category_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& PerformTransaction::merchant_category_code() const {
  // @@protoc_insertion_point(field_get:contact.transaction.PerformTransaction.merchant_category_code)
  return _internal_merchant_category_code();
}
inline void PerformTransaction::set_merchant_category_code(const std::string& value) {
  _internal_set_merchant_category_code(value);
  // @@protoc_insertion_point(field_set:contact.transaction.PerformTransaction.merchant_category_code)
}
inline std::string* PerformTransaction::mutable_merchant_category_code() {
  // @@protoc_insertion_point(field_mutable:contact.transaction.PerformTransaction.merchant_category_code)
  return _internal_mutable_merchant_category_code();
}
inline const std::string& PerformTransaction::_internal_merchant_category_code() const {
  return merchant_category_code_.GetNoArena();
}
inline void PerformTransaction::_internal_set_merchant_category_code(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  merchant_category_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PerformTransaction::set_merchant_category_code(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  merchant_category_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact.transaction.PerformTransaction.merchant_category_code)
}
inline void PerformTransaction::set_merchant_category_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  merchant_category_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact.transaction.PerformTransaction.merchant_category_code)
}
inline void PerformTransaction::set_merchant_category_code(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  merchant_category_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact.transaction.PerformTransaction.merchant_category_code)
}
inline std::string* PerformTransaction::_internal_mutable_merchant_category_code() {
  _has_bits_[0] |= 0x00000040u;
  return merchant_category_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerformTransaction::release_merchant_category_code() {
  // @@protoc_insertion_point(field_release:contact.transaction.PerformTransaction.merchant_category_code)
  if (!_internal_has_merchant_category_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return merchant_category_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerformTransaction::set_allocated_merchant_category_code(std::string* merchant_category_code) {
  if (merchant_category_code != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  merchant_category_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_category_code);
  // @@protoc_insertion_point(field_set_allocated:contact.transaction.PerformTransaction.merchant_category_code)
}

// optional bytes terminal_identification = 9;
inline bool PerformTransaction::_internal_has_terminal_identification() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PerformTransaction::has_terminal_identification() const {
  return _internal_has_terminal_identification();
}
inline void PerformTransaction::clear_terminal_identification() {
  terminal_identification_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& PerformTransaction::terminal_identification() const {
  // @@protoc_insertion_point(field_get:contact.transaction.PerformTransaction.terminal_identification)
  return _internal_terminal_identification();
}
inline void PerformTransaction::set_terminal_identification(const std::string& value) {
  _internal_set_terminal_identification(value);
  // @@protoc_insertion_point(field_set:contact.transaction.PerformTransaction.terminal_identification)
}
inline std::string* PerformTransaction::mutable_terminal_identification() {
  // @@protoc_insertion_point(field_mutable:contact.transaction.PerformTransaction.terminal_identification)
  return _internal_mutable_terminal_identification();
}
inline const std::string& PerformTransaction::_internal_terminal_identification() const {
  return terminal_identification_.GetNoArena();
}
inline void PerformTransaction::_internal_set_terminal_identification(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  terminal_identification_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PerformTransaction::set_terminal_identification(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  terminal_identification_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact.transaction.PerformTransaction.terminal_identification)
}
inline void PerformTransaction::set_terminal_identification(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  terminal_identification_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact.transaction.PerformTransaction.terminal_identification)
}
inline void PerformTransaction::set_terminal_identification(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  terminal_identification_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact.transaction.PerformTransaction.terminal_identification)
}
inline std::string* PerformTransaction::_internal_mutable_terminal_identification() {
  _has_bits_[0] |= 0x00000080u;
  return terminal_identification_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerformTransaction::release_terminal_identification() {
  // @@protoc_insertion_point(field_release:contact.transaction.PerformTransaction.terminal_identification)
  if (!_internal_has_terminal_identification()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return terminal_identification_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerformTransaction::set_allocated_terminal_identification(std::string* terminal_identification) {
  if (terminal_identification != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  terminal_identification_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terminal_identification);
  // @@protoc_insertion_point(field_set_allocated:contact.transaction.PerformTransaction.terminal_identification)
}

// optional .pinpad.online_pin.PinEncryptionParams online_pin_params = 10;
inline bool PerformTransaction::_internal_has_online_pin_params() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || online_pin_params_ != nullptr);
  return value;
}
inline bool PerformTransaction::has_online_pin_params() const {
  return _internal_has_online_pin_params();
}
inline const ::pinpad::online_pin::PinEncryptionParams& PerformTransaction::_internal_online_pin_params() const {
  const ::pinpad::online_pin::PinEncryptionParams* p = online_pin_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pinpad::online_pin::PinEncryptionParams*>(
      &::pinpad::online_pin::_PinEncryptionParams_default_instance_);
}
inline const ::pinpad::online_pin::PinEncryptionParams& PerformTransaction::online_pin_params() const {
  // @@protoc_insertion_point(field_get:contact.transaction.PerformTransaction.online_pin_params)
  return _internal_online_pin_params();
}
inline ::pinpad::online_pin::PinEncryptionParams* PerformTransaction::release_online_pin_params() {
  // @@protoc_insertion_point(field_release:contact.transaction.PerformTransaction.online_pin_params)
  _has_bits_[0] &= ~0x00000100u;
  ::pinpad::online_pin::PinEncryptionParams* temp = online_pin_params_;
  online_pin_params_ = nullptr;
  return temp;
}
inline ::pinpad::online_pin::PinEncryptionParams* PerformTransaction::_internal_mutable_online_pin_params() {
  _has_bits_[0] |= 0x00000100u;
  if (online_pin_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::pinpad::online_pin::PinEncryptionParams>(GetArenaNoVirtual());
    online_pin_params_ = p;
  }
  return online_pin_params_;
}
inline ::pinpad::online_pin::PinEncryptionParams* PerformTransaction::mutable_online_pin_params() {
  // @@protoc_insertion_point(field_mutable:contact.transaction.PerformTransaction.online_pin_params)
  return _internal_mutable_online_pin_params();
}
inline void PerformTransaction::set_allocated_online_pin_params(::pinpad::online_pin::PinEncryptionParams* online_pin_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(online_pin_params_);
  }
  if (online_pin_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      online_pin_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, online_pin_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  online_pin_params_ = online_pin_params;
  // @@protoc_insertion_point(field_set_allocated:contact.transaction.PerformTransaction.online_pin_params)
}

// -------------------------------------------------------------------

// ContactTransactionResult

// required .contact.transaction.TransactionStatus status = 1;
inline bool ContactTransactionResult::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContactTransactionResult::has_status() const {
  return _internal_has_status();
}
inline void ContactTransactionResult::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::contact::transaction::TransactionStatus ContactTransactionResult::_internal_status() const {
  return static_cast< ::contact::transaction::TransactionStatus >(status_);
}
inline ::contact::transaction::TransactionStatus ContactTransactionResult::status() const {
  // @@protoc_insertion_point(field_get:contact.transaction.ContactTransactionResult.status)
  return _internal_status();
}
inline void ContactTransactionResult::_internal_set_status(::contact::transaction::TransactionStatus value) {
  assert(::contact::transaction::TransactionStatus_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
}
inline void ContactTransactionResult::set_status(::contact::transaction::TransactionStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:contact.transaction.ContactTransactionResult.status)
}

// repeated .contact.emv_tag.EmvTag emv_tags = 2;
inline int ContactTransactionResult::_internal_emv_tags_size() const {
  return emv_tags_.size();
}
inline int ContactTransactionResult::emv_tags_size() const {
  return _internal_emv_tags_size();
}
inline ::contact::emv_tag::EmvTag* ContactTransactionResult::mutable_emv_tags(int index) {
  // @@protoc_insertion_point(field_mutable:contact.transaction.ContactTransactionResult.emv_tags)
  return emv_tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contact::emv_tag::EmvTag >*
ContactTransactionResult::mutable_emv_tags() {
  // @@protoc_insertion_point(field_mutable_list:contact.transaction.ContactTransactionResult.emv_tags)
  return &emv_tags_;
}
inline const ::contact::emv_tag::EmvTag& ContactTransactionResult::_internal_emv_tags(int index) const {
  return emv_tags_.Get(index);
}
inline const ::contact::emv_tag::EmvTag& ContactTransactionResult::emv_tags(int index) const {
  // @@protoc_insertion_point(field_get:contact.transaction.ContactTransactionResult.emv_tags)
  return _internal_emv_tags(index);
}
inline ::contact::emv_tag::EmvTag* ContactTransactionResult::_internal_add_emv_tags() {
  return emv_tags_.Add();
}
inline ::contact::emv_tag::EmvTag* ContactTransactionResult::add_emv_tags() {
  // @@protoc_insertion_point(field_add:contact.transaction.ContactTransactionResult.emv_tags)
  return _internal_add_emv_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contact::emv_tag::EmvTag >&
ContactTransactionResult::emv_tags() const {
  // @@protoc_insertion_point(field_list:contact.transaction.ContactTransactionResult.emv_tags)
  return emv_tags_;
}

// optional string error_reason = 3;
inline bool ContactTransactionResult::_internal_has_error_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContactTransactionResult::has_error_reason() const {
  return _internal_has_error_reason();
}
inline void ContactTransactionResult::clear_error_reason() {
  error_reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContactTransactionResult::error_reason() const {
  // @@protoc_insertion_point(field_get:contact.transaction.ContactTransactionResult.error_reason)
  return _internal_error_reason();
}
inline void ContactTransactionResult::set_error_reason(const std::string& value) {
  _internal_set_error_reason(value);
  // @@protoc_insertion_point(field_set:contact.transaction.ContactTransactionResult.error_reason)
}
inline std::string* ContactTransactionResult::mutable_error_reason() {
  // @@protoc_insertion_point(field_mutable:contact.transaction.ContactTransactionResult.error_reason)
  return _internal_mutable_error_reason();
}
inline const std::string& ContactTransactionResult::_internal_error_reason() const {
  return error_reason_.GetNoArena();
}
inline void ContactTransactionResult::_internal_set_error_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContactTransactionResult::set_error_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  error_reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact.transaction.ContactTransactionResult.error_reason)
}
inline void ContactTransactionResult::set_error_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  error_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact.transaction.ContactTransactionResult.error_reason)
}
inline void ContactTransactionResult::set_error_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  error_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact.transaction.ContactTransactionResult.error_reason)
}
inline std::string* ContactTransactionResult::_internal_mutable_error_reason() {
  _has_bits_[0] |= 0x00000001u;
  return error_reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContactTransactionResult::release_error_reason() {
  // @@protoc_insertion_point(field_release:contact.transaction.ContactTransactionResult.error_reason)
  if (!_internal_has_error_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_reason_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContactTransactionResult::set_allocated_error_reason(std::string* error_reason) {
  if (error_reason != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_reason);
  // @@protoc_insertion_point(field_set_allocated:contact.transaction.ContactTransactionResult.error_reason)
}

// optional bytes online_pin_block = 4;
inline bool ContactTransactionResult::_internal_has_online_pin_block() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContactTransactionResult::has_online_pin_block() const {
  return _internal_has_online_pin_block();
}
inline void ContactTransactionResult::clear_online_pin_block() {
  online_pin_block_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContactTransactionResult::online_pin_block() const {
  // @@protoc_insertion_point(field_get:contact.transaction.ContactTransactionResult.online_pin_block)
  return _internal_online_pin_block();
}
inline void ContactTransactionResult::set_online_pin_block(const std::string& value) {
  _internal_set_online_pin_block(value);
  // @@protoc_insertion_point(field_set:contact.transaction.ContactTransactionResult.online_pin_block)
}
inline std::string* ContactTransactionResult::mutable_online_pin_block() {
  // @@protoc_insertion_point(field_mutable:contact.transaction.ContactTransactionResult.online_pin_block)
  return _internal_mutable_online_pin_block();
}
inline const std::string& ContactTransactionResult::_internal_online_pin_block() const {
  return online_pin_block_.GetNoArena();
}
inline void ContactTransactionResult::_internal_set_online_pin_block(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  online_pin_block_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContactTransactionResult::set_online_pin_block(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  online_pin_block_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contact.transaction.ContactTransactionResult.online_pin_block)
}
inline void ContactTransactionResult::set_online_pin_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  online_pin_block_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contact.transaction.ContactTransactionResult.online_pin_block)
}
inline void ContactTransactionResult::set_online_pin_block(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  online_pin_block_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contact.transaction.ContactTransactionResult.online_pin_block)
}
inline std::string* ContactTransactionResult::_internal_mutable_online_pin_block() {
  _has_bits_[0] |= 0x00000002u;
  return online_pin_block_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContactTransactionResult::release_online_pin_block() {
  // @@protoc_insertion_point(field_release:contact.transaction.ContactTransactionResult.online_pin_block)
  if (!_internal_has_online_pin_block()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return online_pin_block_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContactTransactionResult::set_allocated_online_pin_block(std::string* online_pin_block) {
  if (online_pin_block != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  online_pin_block_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), online_pin_block);
  // @@protoc_insertion_point(field_set_allocated:contact.transaction.ContactTransactionResult.online_pin_block)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transaction
}  // namespace contact

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::contact::transaction::TransactionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::contact::transaction::TransactionStatus>() {
  return ::contact::transaction::TransactionStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_contact_2ftransaction_2eproto
