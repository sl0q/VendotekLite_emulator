// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: touchscreen/poll_touchscreen.proto

#include "touchscreen/poll_touchscreen.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace touchscreen {
namespace poll {
class PollTouchscreenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PollTouchscreen> _instance;
} _PollTouchscreen_default_instance_;
}  // namespace poll
}  // namespace touchscreen
static void InitDefaultsscc_info_PollTouchscreen_touchscreen_2fpoll_5ftouchscreen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::touchscreen::poll::_PollTouchscreen_default_instance_;
    new (ptr) ::touchscreen::poll::PollTouchscreen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::touchscreen::poll::PollTouchscreen::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PollTouchscreen_touchscreen_2fpoll_5ftouchscreen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PollTouchscreen_touchscreen_2fpoll_5ftouchscreen_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_touchscreen_2fpoll_5ftouchscreen_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_touchscreen_2fpoll_5ftouchscreen_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_touchscreen_2fpoll_5ftouchscreen_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_touchscreen_2fpoll_5ftouchscreen_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::touchscreen::poll::PollTouchscreen, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::touchscreen::poll::PollTouchscreen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::touchscreen::poll::PollTouchscreen, event_type_),
  PROTOBUF_FIELD_OFFSET(::touchscreen::poll::PollTouchscreen, timeout_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::touchscreen::poll::PollTouchscreen)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::touchscreen::poll::_PollTouchscreen_default_instance_),
};

const char descriptor_table_protodef_touchscreen_2fpoll_5ftouchscreen_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"touchscreen/poll_touchscreen.proto\022\020to"
  "uchscreen.poll\"S\n\017PollTouchscreen\022/\n\neve"
  "nt_type\030\001 \002(\0162\033.touchscreen.poll.EventTy"
  "pe\022\017\n\007timeout\030\002 \001(\r*+\n\tEventType\022\r\n\tWIDG"
  "ET_ID\020\000\022\017\n\013COORDINATES\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_touchscreen_2fpoll_5ftouchscreen_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_touchscreen_2fpoll_5ftouchscreen_2eproto_sccs[1] = {
  &scc_info_PollTouchscreen_touchscreen_2fpoll_5ftouchscreen_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_touchscreen_2fpoll_5ftouchscreen_2eproto_once;
static bool descriptor_table_touchscreen_2fpoll_5ftouchscreen_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_touchscreen_2fpoll_5ftouchscreen_2eproto = {
  &descriptor_table_touchscreen_2fpoll_5ftouchscreen_2eproto_initialized, descriptor_table_protodef_touchscreen_2fpoll_5ftouchscreen_2eproto, "touchscreen/poll_touchscreen.proto", 184,
  &descriptor_table_touchscreen_2fpoll_5ftouchscreen_2eproto_once, descriptor_table_touchscreen_2fpoll_5ftouchscreen_2eproto_sccs, descriptor_table_touchscreen_2fpoll_5ftouchscreen_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_touchscreen_2fpoll_5ftouchscreen_2eproto::offsets,
  file_level_metadata_touchscreen_2fpoll_5ftouchscreen_2eproto, 1, file_level_enum_descriptors_touchscreen_2fpoll_5ftouchscreen_2eproto, file_level_service_descriptors_touchscreen_2fpoll_5ftouchscreen_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_touchscreen_2fpoll_5ftouchscreen_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_touchscreen_2fpoll_5ftouchscreen_2eproto), true);
namespace touchscreen {
namespace poll {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_touchscreen_2fpoll_5ftouchscreen_2eproto);
  return file_level_enum_descriptors_touchscreen_2fpoll_5ftouchscreen_2eproto[0];
}
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PollTouchscreen::InitAsDefaultInstance() {
}
class PollTouchscreen::_Internal {
 public:
  using HasBits = decltype(std::declval<PollTouchscreen>()._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PollTouchscreen::PollTouchscreen()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:touchscreen.poll.PollTouchscreen)
}
PollTouchscreen::PollTouchscreen(const PollTouchscreen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_type_, &from.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(timeout_));
  // @@protoc_insertion_point(copy_constructor:touchscreen.poll.PollTouchscreen)
}

void PollTouchscreen::SharedCtor() {
  ::memset(&event_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_) -
      reinterpret_cast<char*>(&event_type_)) + sizeof(timeout_));
}

PollTouchscreen::~PollTouchscreen() {
  // @@protoc_insertion_point(destructor:touchscreen.poll.PollTouchscreen)
  SharedDtor();
}

void PollTouchscreen::SharedDtor() {
}

void PollTouchscreen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PollTouchscreen& PollTouchscreen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PollTouchscreen_touchscreen_2fpoll_5ftouchscreen_2eproto.base);
  return *internal_default_instance();
}


void PollTouchscreen::Clear() {
// @@protoc_insertion_point(message_clear_start:touchscreen.poll.PollTouchscreen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&event_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeout_) -
        reinterpret_cast<char*>(&event_type_)) + sizeof(timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PollTouchscreen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .touchscreen.poll.EventType event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::touchscreen::poll::EventType_IsValid(val))) {
            _internal_set_event_type(static_cast<::touchscreen::poll::EventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PollTouchscreen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:touchscreen.poll.PollTouchscreen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .touchscreen.poll.EventType event_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_type(), target);
  }

  // optional uint32 timeout = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:touchscreen.poll.PollTouchscreen)
  return target;
}

size_t PollTouchscreen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:touchscreen.poll.PollTouchscreen)
  size_t total_size = 0;

  // required .touchscreen.poll.EventType event_type = 1;
  if (_internal_has_event_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 timeout = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PollTouchscreen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:touchscreen.poll.PollTouchscreen)
  GOOGLE_DCHECK_NE(&from, this);
  const PollTouchscreen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PollTouchscreen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:touchscreen.poll.PollTouchscreen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:touchscreen.poll.PollTouchscreen)
    MergeFrom(*source);
  }
}

void PollTouchscreen::MergeFrom(const PollTouchscreen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:touchscreen.poll.PollTouchscreen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PollTouchscreen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:touchscreen.poll.PollTouchscreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PollTouchscreen::CopyFrom(const PollTouchscreen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:touchscreen.poll.PollTouchscreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollTouchscreen::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PollTouchscreen::InternalSwap(PollTouchscreen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_type_, other->event_type_);
  swap(timeout_, other->timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PollTouchscreen::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace poll
}  // namespace touchscreen
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::touchscreen::poll::PollTouchscreen* Arena::CreateMaybeMessage< ::touchscreen::poll::PollTouchscreen >(Arena* arena) {
  return Arena::CreateInternal< ::touchscreen::poll::PollTouchscreen >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
