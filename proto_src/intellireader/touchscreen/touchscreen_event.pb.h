// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: touchscreen/touchscreen_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_touchscreen_2ftouchscreen_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_touchscreen_2ftouchscreen_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "touchscreen/coordinates.pb.h"
#include "touchscreen/widget.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_touchscreen_2ftouchscreen_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_touchscreen_2ftouchscreen_5fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_touchscreen_2ftouchscreen_5fevent_2eproto;
namespace touchscreen {
namespace event {
class TouchscreenEvent;
class TouchscreenEventDefaultTypeInternal;
extern TouchscreenEventDefaultTypeInternal _TouchscreenEvent_default_instance_;
}  // namespace event
}  // namespace touchscreen
PROTOBUF_NAMESPACE_OPEN
template<> ::touchscreen::event::TouchscreenEvent* Arena::CreateMaybeMessage<::touchscreen::event::TouchscreenEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace touchscreen {
namespace event {

// ===================================================================

class TouchscreenEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:touchscreen.event.TouchscreenEvent) */ {
 public:
  TouchscreenEvent();
  virtual ~TouchscreenEvent();

  TouchscreenEvent(const TouchscreenEvent& from);
  TouchscreenEvent(TouchscreenEvent&& from) noexcept
    : TouchscreenEvent() {
    *this = ::std::move(from);
  }

  inline TouchscreenEvent& operator=(const TouchscreenEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TouchscreenEvent& operator=(TouchscreenEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TouchscreenEvent& default_instance();

  enum EventCase {
    kWidgetId = 1,
    kCoordinates = 2,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TouchscreenEvent* internal_default_instance() {
    return reinterpret_cast<const TouchscreenEvent*>(
               &_TouchscreenEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TouchscreenEvent& a, TouchscreenEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TouchscreenEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TouchscreenEvent* New() const final {
    return CreateMaybeMessage<TouchscreenEvent>(nullptr);
  }

  TouchscreenEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TouchscreenEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TouchscreenEvent& from);
  void MergeFrom(const TouchscreenEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TouchscreenEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "touchscreen.event.TouchscreenEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_touchscreen_2ftouchscreen_5fevent_2eproto);
    return ::descriptor_table_touchscreen_2ftouchscreen_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidgetIdFieldNumber = 1,
    kCoordinatesFieldNumber = 2,
  };
  // optional .touchscreen.widget.WidgetId widget_id = 1;
  bool has_widget_id() const;
  private:
  bool _internal_has_widget_id() const;
  public:
  void clear_widget_id();
  const ::touchscreen::widget::WidgetId& widget_id() const;
  ::touchscreen::widget::WidgetId* release_widget_id();
  ::touchscreen::widget::WidgetId* mutable_widget_id();
  void set_allocated_widget_id(::touchscreen::widget::WidgetId* widget_id);
  private:
  const ::touchscreen::widget::WidgetId& _internal_widget_id() const;
  ::touchscreen::widget::WidgetId* _internal_mutable_widget_id();
  public:

  // optional .touchscreen.coordinates.Coordinates coordinates = 2;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const ::touchscreen::coordinates::Coordinates& coordinates() const;
  ::touchscreen::coordinates::Coordinates* release_coordinates();
  ::touchscreen::coordinates::Coordinates* mutable_coordinates();
  void set_allocated_coordinates(::touchscreen::coordinates::Coordinates* coordinates);
  private:
  const ::touchscreen::coordinates::Coordinates& _internal_coordinates() const;
  ::touchscreen::coordinates::Coordinates* _internal_mutable_coordinates();
  public:

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:touchscreen.event.TouchscreenEvent)
 private:
  class _Internal;
  void set_has_widget_id();
  void set_has_coordinates();

  inline bool has_event() const;
  inline void clear_has_event();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union EventUnion {
    EventUnion() {}
    ::touchscreen::widget::WidgetId* widget_id_;
    ::touchscreen::coordinates::Coordinates* coordinates_;
  } event_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_touchscreen_2ftouchscreen_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TouchscreenEvent

// optional .touchscreen.widget.WidgetId widget_id = 1;
inline bool TouchscreenEvent::_internal_has_widget_id() const {
  return event_case() == kWidgetId;
}
inline bool TouchscreenEvent::has_widget_id() const {
  return _internal_has_widget_id();
}
inline void TouchscreenEvent::set_has_widget_id() {
  _oneof_case_[0] = kWidgetId;
}
inline ::touchscreen::widget::WidgetId* TouchscreenEvent::release_widget_id() {
  // @@protoc_insertion_point(field_release:touchscreen.event.TouchscreenEvent.widget_id)
  if (_internal_has_widget_id()) {
    clear_has_event();
      ::touchscreen::widget::WidgetId* temp = event_.widget_id_;
    event_.widget_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::touchscreen::widget::WidgetId& TouchscreenEvent::_internal_widget_id() const {
  return _internal_has_widget_id()
      ? *event_.widget_id_
      : *reinterpret_cast< ::touchscreen::widget::WidgetId*>(&::touchscreen::widget::_WidgetId_default_instance_);
}
inline const ::touchscreen::widget::WidgetId& TouchscreenEvent::widget_id() const {
  // @@protoc_insertion_point(field_get:touchscreen.event.TouchscreenEvent.widget_id)
  return _internal_widget_id();
}
inline ::touchscreen::widget::WidgetId* TouchscreenEvent::_internal_mutable_widget_id() {
  if (!_internal_has_widget_id()) {
    clear_event();
    set_has_widget_id();
    event_.widget_id_ = CreateMaybeMessage< ::touchscreen::widget::WidgetId >(
        GetArenaNoVirtual());
  }
  return event_.widget_id_;
}
inline ::touchscreen::widget::WidgetId* TouchscreenEvent::mutable_widget_id() {
  // @@protoc_insertion_point(field_mutable:touchscreen.event.TouchscreenEvent.widget_id)
  return _internal_mutable_widget_id();
}

// optional .touchscreen.coordinates.Coordinates coordinates = 2;
inline bool TouchscreenEvent::_internal_has_coordinates() const {
  return event_case() == kCoordinates;
}
inline bool TouchscreenEvent::has_coordinates() const {
  return _internal_has_coordinates();
}
inline void TouchscreenEvent::set_has_coordinates() {
  _oneof_case_[0] = kCoordinates;
}
inline ::touchscreen::coordinates::Coordinates* TouchscreenEvent::release_coordinates() {
  // @@protoc_insertion_point(field_release:touchscreen.event.TouchscreenEvent.coordinates)
  if (_internal_has_coordinates()) {
    clear_has_event();
      ::touchscreen::coordinates::Coordinates* temp = event_.coordinates_;
    event_.coordinates_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::touchscreen::coordinates::Coordinates& TouchscreenEvent::_internal_coordinates() const {
  return _internal_has_coordinates()
      ? *event_.coordinates_
      : *reinterpret_cast< ::touchscreen::coordinates::Coordinates*>(&::touchscreen::coordinates::_Coordinates_default_instance_);
}
inline const ::touchscreen::coordinates::Coordinates& TouchscreenEvent::coordinates() const {
  // @@protoc_insertion_point(field_get:touchscreen.event.TouchscreenEvent.coordinates)
  return _internal_coordinates();
}
inline ::touchscreen::coordinates::Coordinates* TouchscreenEvent::_internal_mutable_coordinates() {
  if (!_internal_has_coordinates()) {
    clear_event();
    set_has_coordinates();
    event_.coordinates_ = CreateMaybeMessage< ::touchscreen::coordinates::Coordinates >(
        GetArenaNoVirtual());
  }
  return event_.coordinates_;
}
inline ::touchscreen::coordinates::Coordinates* TouchscreenEvent::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable:touchscreen.event.TouchscreenEvent.coordinates)
  return _internal_mutable_coordinates();
}

inline bool TouchscreenEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void TouchscreenEvent::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline TouchscreenEvent::EventCase TouchscreenEvent::event_case() const {
  return TouchscreenEvent::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace touchscreen

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_touchscreen_2ftouchscreen_5fevent_2eproto
