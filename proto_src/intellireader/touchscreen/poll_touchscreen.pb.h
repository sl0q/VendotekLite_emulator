// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: touchscreen/poll_touchscreen.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_touchscreen_2fpoll_5ftouchscreen_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_touchscreen_2fpoll_5ftouchscreen_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_touchscreen_2fpoll_5ftouchscreen_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_touchscreen_2fpoll_5ftouchscreen_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_touchscreen_2fpoll_5ftouchscreen_2eproto;
namespace touchscreen {
namespace poll {
class PollTouchscreen;
class PollTouchscreenDefaultTypeInternal;
extern PollTouchscreenDefaultTypeInternal _PollTouchscreen_default_instance_;
}  // namespace poll
}  // namespace touchscreen
PROTOBUF_NAMESPACE_OPEN
template<> ::touchscreen::poll::PollTouchscreen* Arena::CreateMaybeMessage<::touchscreen::poll::PollTouchscreen>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace touchscreen {
namespace poll {

enum EventType : int {
  WIDGET_ID = 0,
  COORDINATES = 1
};
bool EventType_IsValid(int value);
constexpr EventType EventType_MIN = WIDGET_ID;
constexpr EventType EventType_MAX = COORDINATES;
constexpr int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor();
template<typename T>
inline const std::string& EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventType_descriptor(), enum_t_value);
}
inline bool EventType_Parse(
    const std::string& name, EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
// ===================================================================

class PollTouchscreen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:touchscreen.poll.PollTouchscreen) */ {
 public:
  PollTouchscreen();
  virtual ~PollTouchscreen();

  PollTouchscreen(const PollTouchscreen& from);
  PollTouchscreen(PollTouchscreen&& from) noexcept
    : PollTouchscreen() {
    *this = ::std::move(from);
  }

  inline PollTouchscreen& operator=(const PollTouchscreen& from) {
    CopyFrom(from);
    return *this;
  }
  inline PollTouchscreen& operator=(PollTouchscreen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PollTouchscreen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PollTouchscreen* internal_default_instance() {
    return reinterpret_cast<const PollTouchscreen*>(
               &_PollTouchscreen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PollTouchscreen& a, PollTouchscreen& b) {
    a.Swap(&b);
  }
  inline void Swap(PollTouchscreen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PollTouchscreen* New() const final {
    return CreateMaybeMessage<PollTouchscreen>(nullptr);
  }

  PollTouchscreen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PollTouchscreen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PollTouchscreen& from);
  void MergeFrom(const PollTouchscreen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PollTouchscreen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "touchscreen.poll.PollTouchscreen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_touchscreen_2fpoll_5ftouchscreen_2eproto);
    return ::descriptor_table_touchscreen_2fpoll_5ftouchscreen_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventTypeFieldNumber = 1,
    kTimeoutFieldNumber = 2,
  };
  // required .touchscreen.poll.EventType event_type = 1;
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  ::touchscreen::poll::EventType event_type() const;
  void set_event_type(::touchscreen::poll::EventType value);
  private:
  ::touchscreen::poll::EventType _internal_event_type() const;
  void _internal_set_event_type(::touchscreen::poll::EventType value);
  public:

  // optional uint32 timeout = 2;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:touchscreen.poll.PollTouchscreen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int event_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  friend struct ::TableStruct_touchscreen_2fpoll_5ftouchscreen_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PollTouchscreen

// required .touchscreen.poll.EventType event_type = 1;
inline bool PollTouchscreen::_internal_has_event_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PollTouchscreen::has_event_type() const {
  return _internal_has_event_type();
}
inline void PollTouchscreen::clear_event_type() {
  event_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::touchscreen::poll::EventType PollTouchscreen::_internal_event_type() const {
  return static_cast< ::touchscreen::poll::EventType >(event_type_);
}
inline ::touchscreen::poll::EventType PollTouchscreen::event_type() const {
  // @@protoc_insertion_point(field_get:touchscreen.poll.PollTouchscreen.event_type)
  return _internal_event_type();
}
inline void PollTouchscreen::_internal_set_event_type(::touchscreen::poll::EventType value) {
  assert(::touchscreen::poll::EventType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  event_type_ = value;
}
inline void PollTouchscreen::set_event_type(::touchscreen::poll::EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:touchscreen.poll.PollTouchscreen.event_type)
}

// optional uint32 timeout = 2;
inline bool PollTouchscreen::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PollTouchscreen::has_timeout() const {
  return _internal_has_timeout();
}
inline void PollTouchscreen::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PollTouchscreen::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PollTouchscreen::timeout() const {
  // @@protoc_insertion_point(field_get:touchscreen.poll.PollTouchscreen.timeout)
  return _internal_timeout();
}
inline void PollTouchscreen::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  timeout_ = value;
}
inline void PollTouchscreen::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:touchscreen.poll.PollTouchscreen.timeout)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace poll
}  // namespace touchscreen

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::touchscreen::poll::EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::touchscreen::poll::EventType>() {
  return ::touchscreen::poll::EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_touchscreen_2fpoll_5ftouchscreen_2eproto
