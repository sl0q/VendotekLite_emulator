// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ntag/auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ntag_2fauth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ntag_2fauth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ntag_2fauth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ntag_2fauth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ntag_2fauth_2eproto;
namespace ntag {
namespace auth {
class ClearKey;
class ClearKeyDefaultTypeInternal;
extern ClearKeyDefaultTypeInternal _ClearKey_default_instance_;
}  // namespace auth
}  // namespace ntag
PROTOBUF_NAMESPACE_OPEN
template<> ::ntag::auth::ClearKey* Arena::CreateMaybeMessage<::ntag::auth::ClearKey>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ntag {
namespace auth {

// ===================================================================

class ClearKey :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ntag.auth.ClearKey) */ {
 public:
  ClearKey();
  virtual ~ClearKey();

  ClearKey(const ClearKey& from);
  ClearKey(ClearKey&& from) noexcept
    : ClearKey() {
    *this = ::std::move(from);
  }

  inline ClearKey& operator=(const ClearKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearKey& operator=(ClearKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearKey* internal_default_instance() {
    return reinterpret_cast<const ClearKey*>(
               &_ClearKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClearKey& a, ClearKey& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearKey* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearKey* New() const final {
    return CreateMaybeMessage<ClearKey>(nullptr);
  }

  ClearKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearKey& from);
  void MergeFrom(const ClearKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ntag.auth.ClearKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ntag_2fauth_2eproto);
    return ::descriptor_table_ntag_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClearKeyFieldNumber = 2,
    kKeyOnCardFieldNumber = 1,
  };
  // required bytes clear_key = 2;
  bool has_clear_key() const;
  private:
  bool _internal_has_clear_key() const;
  public:
  void clear_clear_key();
  const std::string& clear_key() const;
  void set_clear_key(const std::string& value);
  void set_clear_key(std::string&& value);
  void set_clear_key(const char* value);
  void set_clear_key(const void* value, size_t size);
  std::string* mutable_clear_key();
  std::string* release_clear_key();
  void set_allocated_clear_key(std::string* clear_key);
  private:
  const std::string& _internal_clear_key() const;
  void _internal_set_clear_key(const std::string& value);
  std::string* _internal_mutable_clear_key();
  public:

  // required uint32 key_on_card = 1;
  bool has_key_on_card() const;
  private:
  bool _internal_has_key_on_card() const;
  public:
  void clear_key_on_card();
  ::PROTOBUF_NAMESPACE_ID::uint32 key_on_card() const;
  void set_key_on_card(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key_on_card() const;
  void _internal_set_key_on_card(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ntag.auth.ClearKey)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clear_key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_on_card_;
  friend struct ::TableStruct_ntag_2fauth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClearKey

// required uint32 key_on_card = 1;
inline bool ClearKey::_internal_has_key_on_card() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClearKey::has_key_on_card() const {
  return _internal_has_key_on_card();
}
inline void ClearKey::clear_key_on_card() {
  key_on_card_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClearKey::_internal_key_on_card() const {
  return key_on_card_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClearKey::key_on_card() const {
  // @@protoc_insertion_point(field_get:ntag.auth.ClearKey.key_on_card)
  return _internal_key_on_card();
}
inline void ClearKey::_internal_set_key_on_card(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  key_on_card_ = value;
}
inline void ClearKey::set_key_on_card(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key_on_card(value);
  // @@protoc_insertion_point(field_set:ntag.auth.ClearKey.key_on_card)
}

// required bytes clear_key = 2;
inline bool ClearKey::_internal_has_clear_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClearKey::has_clear_key() const {
  return _internal_has_clear_key();
}
inline void ClearKey::clear_clear_key() {
  clear_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClearKey::clear_key() const {
  // @@protoc_insertion_point(field_get:ntag.auth.ClearKey.clear_key)
  return _internal_clear_key();
}
inline void ClearKey::set_clear_key(const std::string& value) {
  _internal_set_clear_key(value);
  // @@protoc_insertion_point(field_set:ntag.auth.ClearKey.clear_key)
}
inline std::string* ClearKey::mutable_clear_key() {
  // @@protoc_insertion_point(field_mutable:ntag.auth.ClearKey.clear_key)
  return _internal_mutable_clear_key();
}
inline const std::string& ClearKey::_internal_clear_key() const {
  return clear_key_.GetNoArena();
}
inline void ClearKey::_internal_set_clear_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clear_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClearKey::set_clear_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clear_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ntag.auth.ClearKey.clear_key)
}
inline void ClearKey::set_clear_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clear_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntag.auth.ClearKey.clear_key)
}
inline void ClearKey::set_clear_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clear_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntag.auth.ClearKey.clear_key)
}
inline std::string* ClearKey::_internal_mutable_clear_key() {
  _has_bits_[0] |= 0x00000001u;
  return clear_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClearKey::release_clear_key() {
  // @@protoc_insertion_point(field_release:ntag.auth.ClearKey.clear_key)
  if (!_internal_has_clear_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clear_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClearKey::set_allocated_clear_key(std::string* clear_key) {
  if (clear_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clear_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clear_key);
  // @@protoc_insertion_point(field_set_allocated:ntag.auth.ClearKey.clear_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace auth
}  // namespace ntag

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ntag_2fauth_2eproto
