// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ntag/read.proto

#include "ntag/read.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ntag {
namespace read {
class ReadFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadFile> _instance;
} _ReadFile_default_instance_;
class FileContentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileContent> _instance;
} _FileContent_default_instance_;
}  // namespace read
}  // namespace ntag
static void InitDefaultsscc_info_FileContent_ntag_2fread_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ntag::read::_FileContent_default_instance_;
    new (ptr) ::ntag::read::FileContent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ntag::read::FileContent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileContent_ntag_2fread_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FileContent_ntag_2fread_2eproto}, {}};

static void InitDefaultsscc_info_ReadFile_ntag_2fread_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ntag::read::_ReadFile_default_instance_;
    new (ptr) ::ntag::read::ReadFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ntag::read::ReadFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadFile_ntag_2fread_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadFile_ntag_2fread_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ntag_2fread_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ntag_2fread_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ntag_2fread_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ntag_2fread_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ntag::read::ReadFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ntag::read::ReadFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ntag::read::ReadFile, file_),
  PROTOBUF_FIELD_OFFSET(::ntag::read::ReadFile, protection_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ntag::read::FileContent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ntag::read::FileContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ntag::read::FileContent, data_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ntag::read::ReadFile)},
  { 9, 15, sizeof(::ntag::read::FileContent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ntag::read::_ReadFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ntag::read::_FileContent_default_instance_),
};

const char descriptor_table_protodef_ntag_2fread_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017ntag/read.proto\022\tntag.read\032\017ntag/file."
  "proto\032\017ntag/comm.proto\"h\n\010ReadFile\022\035\n\004fi"
  "le\030\001 \002(\0162\017.ntag.file.File\022=\n\nprotection\030"
  "\002 \001(\0162\025.ntag.comm.Protection:\022ENCRYPTED_"
  "WITH_MAC\"\033\n\013FileContent\022\014\n\004data\030\001 \002(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ntag_2fread_2eproto_deps[2] = {
  &::descriptor_table_ntag_2fcomm_2eproto,
  &::descriptor_table_ntag_2ffile_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ntag_2fread_2eproto_sccs[2] = {
  &scc_info_FileContent_ntag_2fread_2eproto.base,
  &scc_info_ReadFile_ntag_2fread_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ntag_2fread_2eproto_once;
static bool descriptor_table_ntag_2fread_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ntag_2fread_2eproto = {
  &descriptor_table_ntag_2fread_2eproto_initialized, descriptor_table_protodef_ntag_2fread_2eproto, "ntag/read.proto", 197,
  &descriptor_table_ntag_2fread_2eproto_once, descriptor_table_ntag_2fread_2eproto_sccs, descriptor_table_ntag_2fread_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_ntag_2fread_2eproto::offsets,
  file_level_metadata_ntag_2fread_2eproto, 2, file_level_enum_descriptors_ntag_2fread_2eproto, file_level_service_descriptors_ntag_2fread_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ntag_2fread_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ntag_2fread_2eproto), true);
namespace ntag {
namespace read {

// ===================================================================

void ReadFile::InitAsDefaultInstance() {
}
class ReadFile::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadFile>()._has_bits_);
  static void set_has_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ReadFile::ReadFile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntag.read.ReadFile)
}
ReadFile::ReadFile(const ReadFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&file_, &from.file_,
    static_cast<size_t>(reinterpret_cast<char*>(&protection_) -
    reinterpret_cast<char*>(&file_)) + sizeof(protection_));
  // @@protoc_insertion_point(copy_constructor:ntag.read.ReadFile)
}

void ReadFile::SharedCtor() {
  ::memset(&file_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protection_) -
      reinterpret_cast<char*>(&file_)) + sizeof(protection_));
}

ReadFile::~ReadFile() {
  // @@protoc_insertion_point(destructor:ntag.read.ReadFile)
  SharedDtor();
}

void ReadFile::SharedDtor() {
}

void ReadFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadFile& ReadFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadFile_ntag_2fread_2eproto.base);
  return *internal_default_instance();
}


void ReadFile::Clear() {
// @@protoc_insertion_point(message_clear_start:ntag.read.ReadFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&file_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&protection_) -
        reinterpret_cast<char*>(&file_)) + sizeof(protection_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReadFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .ntag.file.File file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ntag::file::File_IsValid(val))) {
            _internal_set_file(static_cast<::ntag::file::File>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ntag.comm.Protection protection = 2 [default = ENCRYPTED_WITH_MAC];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ntag::comm::Protection_IsValid(val))) {
            _internal_set_protection(static_cast<::ntag::comm::Protection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ntag.read.ReadFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ntag.file.File file = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_file(), target);
  }

  // optional .ntag.comm.Protection protection = 2 [default = ENCRYPTED_WITH_MAC];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_protection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ntag.read.ReadFile)
  return target;
}

size_t ReadFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntag.read.ReadFile)
  size_t total_size = 0;

  // required .ntag.file.File file = 1;
  if (_internal_has_file()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_file());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ntag.comm.Protection protection = 2 [default = ENCRYPTED_WITH_MAC];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protection());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntag.read.ReadFile)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntag.read.ReadFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntag.read.ReadFile)
    MergeFrom(*source);
  }
}

void ReadFile::MergeFrom(const ReadFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntag.read.ReadFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_ = from.file_;
    }
    if (cached_has_bits & 0x00000002u) {
      protection_ = from.protection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReadFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntag.read.ReadFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadFile::CopyFrom(const ReadFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntag.read.ReadFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReadFile::InternalSwap(ReadFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(file_, other->file_);
  swap(protection_, other->protection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileContent::InitAsDefaultInstance() {
}
class FileContent::_Internal {
 public:
  using HasBits = decltype(std::declval<FileContent>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FileContent::FileContent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ntag.read.FileContent)
}
FileContent::FileContent(const FileContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:ntag.read.FileContent)
}

void FileContent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileContent_ntag_2fread_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FileContent::~FileContent() {
  // @@protoc_insertion_point(destructor:ntag.read.FileContent)
  SharedDtor();
}

void FileContent::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileContent& FileContent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileContent_ntag_2fread_2eproto.base);
  return *internal_default_instance();
}


void FileContent::Clear() {
// @@protoc_insertion_point(message_clear_start:ntag.read.FileContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FileContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileContent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ntag.read.FileContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ntag.read.FileContent)
  return target;
}

size_t FileContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ntag.read.FileContent)
  size_t total_size = 0;

  // required bytes data = 1;
  if (_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileContent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ntag.read.FileContent)
  GOOGLE_DCHECK_NE(&from, this);
  const FileContent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileContent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ntag.read.FileContent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ntag.read.FileContent)
    MergeFrom(*source);
  }
}

void FileContent::MergeFrom(const FileContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ntag.read.FileContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _has_bits_[0] |= 0x00000001u;
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void FileContent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ntag.read.FileContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileContent::CopyFrom(const FileContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ntag.read.FileContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FileContent::InternalSwap(FileContent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FileContent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace read
}  // namespace ntag
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ntag::read::ReadFile* Arena::CreateMaybeMessage< ::ntag::read::ReadFile >(Arena* arena) {
  return Arena::CreateInternal< ::ntag::read::ReadFile >(arena);
}
template<> PROTOBUF_NOINLINE ::ntag::read::FileContent* Arena::CreateMaybeMessage< ::ntag::read::FileContent >(Arena* arena) {
  return Arena::CreateInternal< ::ntag::read::FileContent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
