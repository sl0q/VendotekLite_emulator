// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ntag/select.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ntag_2fselect_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ntag_2fselect_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ntag_2fselect_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ntag_2fselect_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ntag_2fselect_2eproto;
namespace ntag {
namespace select {
class SelectFile;
class SelectFileDefaultTypeInternal;
extern SelectFileDefaultTypeInternal _SelectFile_default_instance_;
}  // namespace select
}  // namespace ntag
PROTOBUF_NAMESPACE_OPEN
template<> ::ntag::select::SelectFile* Arena::CreateMaybeMessage<::ntag::select::SelectFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ntag {
namespace select {

enum IsoFile : int {
  APPLICATION = 0,
  PICC = 1
};
bool IsoFile_IsValid(int value);
constexpr IsoFile IsoFile_MIN = APPLICATION;
constexpr IsoFile IsoFile_MAX = PICC;
constexpr int IsoFile_ARRAYSIZE = IsoFile_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IsoFile_descriptor();
template<typename T>
inline const std::string& IsoFile_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IsoFile>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IsoFile_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IsoFile_descriptor(), enum_t_value);
}
inline bool IsoFile_Parse(
    const std::string& name, IsoFile* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IsoFile>(
    IsoFile_descriptor(), name, value);
}
// ===================================================================

class SelectFile :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ntag.select.SelectFile) */ {
 public:
  SelectFile();
  virtual ~SelectFile();

  SelectFile(const SelectFile& from);
  SelectFile(SelectFile&& from) noexcept
    : SelectFile() {
    *this = ::std::move(from);
  }

  inline SelectFile& operator=(const SelectFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectFile& operator=(SelectFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectFile* internal_default_instance() {
    return reinterpret_cast<const SelectFile*>(
               &_SelectFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SelectFile& a, SelectFile& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectFile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectFile* New() const final {
    return CreateMaybeMessage<SelectFile>(nullptr);
  }

  SelectFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectFile& from);
  void MergeFrom(const SelectFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ntag.select.SelectFile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ntag_2fselect_2eproto);
    return ::descriptor_table_ntag_2fselect_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
  };
  // optional .ntag.select.IsoFile file = 1 [default = APPLICATION];
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  ::ntag::select::IsoFile file() const;
  void set_file(::ntag::select::IsoFile value);
  private:
  ::ntag::select::IsoFile _internal_file() const;
  void _internal_set_file(::ntag::select::IsoFile value);
  public:

  // @@protoc_insertion_point(class_scope:ntag.select.SelectFile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int file_;
  friend struct ::TableStruct_ntag_2fselect_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SelectFile

// optional .ntag.select.IsoFile file = 1 [default = APPLICATION];
inline bool SelectFile::_internal_has_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SelectFile::has_file() const {
  return _internal_has_file();
}
inline void SelectFile::clear_file() {
  file_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ntag::select::IsoFile SelectFile::_internal_file() const {
  return static_cast< ::ntag::select::IsoFile >(file_);
}
inline ::ntag::select::IsoFile SelectFile::file() const {
  // @@protoc_insertion_point(field_get:ntag.select.SelectFile.file)
  return _internal_file();
}
inline void SelectFile::_internal_set_file(::ntag::select::IsoFile value) {
  assert(::ntag::select::IsoFile_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  file_ = value;
}
inline void SelectFile::set_file(::ntag::select::IsoFile value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:ntag.select.SelectFile.file)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace select
}  // namespace ntag

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ntag::select::IsoFile> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ntag::select::IsoFile>() {
  return ::ntag::select::IsoFile_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ntag_2fselect_2eproto
