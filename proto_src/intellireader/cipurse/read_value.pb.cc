// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cipurse/read_value.proto

#include "cipurse/read_value.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace cipurse {
namespace read_value {
class ReadValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadValue> _instance;
} _ReadValue_default_instance_;
class ValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Values> _instance;
} _Values_default_instance_;
}  // namespace read_value
}  // namespace cipurse
static void InitDefaultsscc_info_ReadValue_cipurse_2fread_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cipurse::read_value::_ReadValue_default_instance_;
    new (ptr) ::cipurse::read_value::ReadValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cipurse::read_value::ReadValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadValue_cipurse_2fread_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadValue_cipurse_2fread_5fvalue_2eproto}, {}};

static void InitDefaultsscc_info_Values_cipurse_2fread_5fvalue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cipurse::read_value::_Values_default_instance_;
    new (ptr) ::cipurse::read_value::Values();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cipurse::read_value::Values::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Values_cipurse_2fread_5fvalue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Values_cipurse_2fread_5fvalue_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cipurse_2fread_5fvalue_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cipurse_2fread_5fvalue_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cipurse_2fread_5fvalue_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cipurse_2fread_5fvalue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::cipurse::read_value::ReadValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cipurse::read_value::ReadValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cipurse::read_value::ReadValue, short_file_id_),
  PROTOBUF_FIELD_OFFSET(::cipurse::read_value::ReadValue, count_),
  PROTOBUF_FIELD_OFFSET(::cipurse::read_value::ReadValue, first_record_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::cipurse::read_value::Values, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cipurse::read_value::Values, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cipurse::read_value::Values, values_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::cipurse::read_value::ReadValue)},
  { 11, 17, sizeof(::cipurse::read_value::Values)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cipurse::read_value::_ReadValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cipurse::read_value::_Values_default_instance_),
};

const char descriptor_table_protodef_cipurse_2fread_5fvalue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030cipurse/read_value.proto\022\022cipurse.read"
  "_value\"J\n\tReadValue\022\025\n\rshort_file_id\030\001 \002"
  "(\r\022\r\n\005count\030\002 \002(\r\022\027\n\014first_record\030\003 \001(\r:"
  "\0011\"\034\n\006Values\022\022\n\006values\030\001 \003(\021B\002\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cipurse_2fread_5fvalue_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cipurse_2fread_5fvalue_2eproto_sccs[2] = {
  &scc_info_ReadValue_cipurse_2fread_5fvalue_2eproto.base,
  &scc_info_Values_cipurse_2fread_5fvalue_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cipurse_2fread_5fvalue_2eproto_once;
static bool descriptor_table_cipurse_2fread_5fvalue_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cipurse_2fread_5fvalue_2eproto = {
  &descriptor_table_cipurse_2fread_5fvalue_2eproto_initialized, descriptor_table_protodef_cipurse_2fread_5fvalue_2eproto, "cipurse/read_value.proto", 152,
  &descriptor_table_cipurse_2fread_5fvalue_2eproto_once, descriptor_table_cipurse_2fread_5fvalue_2eproto_sccs, descriptor_table_cipurse_2fread_5fvalue_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_cipurse_2fread_5fvalue_2eproto::offsets,
  file_level_metadata_cipurse_2fread_5fvalue_2eproto, 2, file_level_enum_descriptors_cipurse_2fread_5fvalue_2eproto, file_level_service_descriptors_cipurse_2fread_5fvalue_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cipurse_2fread_5fvalue_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cipurse_2fread_5fvalue_2eproto), true);
namespace cipurse {
namespace read_value {

// ===================================================================

void ReadValue::InitAsDefaultInstance() {
}
class ReadValue::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadValue>()._has_bits_);
  static void set_has_short_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_first_record(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ReadValue::ReadValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cipurse.read_value.ReadValue)
}
ReadValue::ReadValue(const ReadValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&short_file_id_, &from.short_file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_record_) -
    reinterpret_cast<char*>(&short_file_id_)) + sizeof(first_record_));
  // @@protoc_insertion_point(copy_constructor:cipurse.read_value.ReadValue)
}

void ReadValue::SharedCtor() {
  ::memset(&short_file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&short_file_id_)) + sizeof(count_));
  first_record_ = 1u;
}

ReadValue::~ReadValue() {
  // @@protoc_insertion_point(destructor:cipurse.read_value.ReadValue)
  SharedDtor();
}

void ReadValue::SharedDtor() {
}

void ReadValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadValue& ReadValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadValue_cipurse_2fread_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void ReadValue::Clear() {
// @@protoc_insertion_point(message_clear_start:cipurse.read_value.ReadValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&short_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&short_file_id_)) + sizeof(count_));
    first_record_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReadValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 short_file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_short_file_id(&has_bits);
          short_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 first_record = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_first_record(&has_bits);
          first_record_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cipurse.read_value.ReadValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 short_file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_short_file_id(), target);
  }

  // required uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // optional uint32 first_record = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_first_record(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cipurse.read_value.ReadValue)
  return target;
}

size_t ReadValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cipurse.read_value.ReadValue)
  size_t total_size = 0;

  if (_internal_has_short_file_id()) {
    // required uint32 short_file_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_short_file_id());
  }

  if (_internal_has_count()) {
    // required uint32 count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  return total_size;
}
size_t ReadValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cipurse.read_value.ReadValue)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 short_file_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_short_file_id());

    // required uint32 count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 first_record = 3 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_first_record());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cipurse.read_value.ReadValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cipurse.read_value.ReadValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cipurse.read_value.ReadValue)
    MergeFrom(*source);
  }
}

void ReadValue::MergeFrom(const ReadValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cipurse.read_value.ReadValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      short_file_id_ = from.short_file_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      first_record_ = from.first_record_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReadValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cipurse.read_value.ReadValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadValue::CopyFrom(const ReadValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cipurse.read_value.ReadValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ReadValue::InternalSwap(ReadValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(short_file_id_, other->short_file_id_);
  swap(count_, other->count_);
  swap(first_record_, other->first_record_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Values::InitAsDefaultInstance() {
}
class Values::_Internal {
 public:
  using HasBits = decltype(std::declval<Values>()._has_bits_);
};

Values::Values()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cipurse.read_value.Values)
}
Values::Values(const Values& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cipurse.read_value.Values)
}

void Values::SharedCtor() {
}

Values::~Values() {
  // @@protoc_insertion_point(destructor:cipurse.read_value.Values)
  SharedDtor();
}

void Values::SharedDtor() {
}

void Values::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Values& Values::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Values_cipurse_2fread_5fvalue_2eproto.base);
  return *internal_default_instance();
}


void Values::Clear() {
// @@protoc_insertion_point(message_clear_start:cipurse.read_value.Values)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Values::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated sint32 values = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Values::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cipurse.read_value.Values)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 values = 1 [packed = true];
  {
    int byte_size = _values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          1, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cipurse.read_value.Values)
  return target;
}

size_t Values::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cipurse.read_value.Values)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 values = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Values::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cipurse.read_value.Values)
  GOOGLE_DCHECK_NE(&from, this);
  const Values* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Values>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cipurse.read_value.Values)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cipurse.read_value.Values)
    MergeFrom(*source);
  }
}

void Values::MergeFrom(const Values& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cipurse.read_value.Values)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void Values::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cipurse.read_value.Values)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Values::CopyFrom(const Values& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cipurse.read_value.Values)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Values::IsInitialized() const {
  return true;
}

void Values::InternalSwap(Values* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Values::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace read_value
}  // namespace cipurse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cipurse::read_value::ReadValue* Arena::CreateMaybeMessage< ::cipurse::read_value::ReadValue >(Arena* arena) {
  return Arena::CreateInternal< ::cipurse::read_value::ReadValue >(arena);
}
template<> PROTOBUF_NOINLINE ::cipurse::read_value::Values* Arena::CreateMaybeMessage< ::cipurse::read_value::Values >(Arena* arena) {
  return Arena::CreateInternal< ::cipurse::read_value::Values >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
