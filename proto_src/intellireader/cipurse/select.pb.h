// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cipurse/select.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cipurse_2fselect_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cipurse_2fselect_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cipurse_2fselect_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cipurse_2fselect_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cipurse_2fselect_2eproto;
namespace cipurse {
namespace select {
class SelectFile;
class SelectFileDefaultTypeInternal;
extern SelectFileDefaultTypeInternal _SelectFile_default_instance_;
}  // namespace select
}  // namespace cipurse
PROTOBUF_NAMESPACE_OPEN
template<> ::cipurse::select::SelectFile* Arena::CreateMaybeMessage<::cipurse::select::SelectFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cipurse {
namespace select {

// ===================================================================

class SelectFile :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cipurse.select.SelectFile) */ {
 public:
  SelectFile();
  virtual ~SelectFile();

  SelectFile(const SelectFile& from);
  SelectFile(SelectFile&& from) noexcept
    : SelectFile() {
    *this = ::std::move(from);
  }

  inline SelectFile& operator=(const SelectFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectFile& operator=(SelectFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectFile& default_instance();

  enum SelectByCase {
    kAid = 1,
    kFileId = 2,
    SELECT_BY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelectFile* internal_default_instance() {
    return reinterpret_cast<const SelectFile*>(
               &_SelectFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SelectFile& a, SelectFile& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectFile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectFile* New() const final {
    return CreateMaybeMessage<SelectFile>(nullptr);
  }

  SelectFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectFile& from);
  void MergeFrom(const SelectFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cipurse.select.SelectFile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cipurse_2fselect_2eproto);
    return ::descriptor_table_cipurse_2fselect_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAidFieldNumber = 1,
    kFileIdFieldNumber = 2,
  };
  // optional bytes aid = 1;
  bool has_aid() const;
  private:
  bool _internal_has_aid() const;
  public:
  void clear_aid();
  const std::string& aid() const;
  void set_aid(const std::string& value);
  void set_aid(std::string&& value);
  void set_aid(const char* value);
  void set_aid(const void* value, size_t size);
  std::string* mutable_aid();
  std::string* release_aid();
  void set_allocated_aid(std::string* aid);
  private:
  const std::string& _internal_aid() const;
  void _internal_set_aid(const std::string& value);
  std::string* _internal_mutable_aid();
  public:

  // optional uint32 file_id = 2;
  bool has_file_id() const;
  private:
  bool _internal_has_file_id() const;
  public:
  void clear_file_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_id() const;
  void set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_id() const;
  void _internal_set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  void clear_select_by();
  SelectByCase select_by_case() const;
  // @@protoc_insertion_point(class_scope:cipurse.select.SelectFile)
 private:
  class _Internal;
  void set_has_aid();
  void set_has_file_id();

  inline bool has_select_by() const;
  inline void clear_has_select_by();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union SelectByUnion {
    SelectByUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aid_;
    ::PROTOBUF_NAMESPACE_ID::uint32 file_id_;
  } select_by_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_cipurse_2fselect_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SelectFile

// optional bytes aid = 1;
inline bool SelectFile::_internal_has_aid() const {
  return select_by_case() == kAid;
}
inline bool SelectFile::has_aid() const {
  return _internal_has_aid();
}
inline void SelectFile::set_has_aid() {
  _oneof_case_[0] = kAid;
}
inline void SelectFile::clear_aid() {
  if (_internal_has_aid()) {
    select_by_.aid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_select_by();
  }
}
inline const std::string& SelectFile::aid() const {
  // @@protoc_insertion_point(field_get:cipurse.select.SelectFile.aid)
  return _internal_aid();
}
inline void SelectFile::set_aid(const std::string& value) {
  _internal_set_aid(value);
  // @@protoc_insertion_point(field_set:cipurse.select.SelectFile.aid)
}
inline std::string* SelectFile::mutable_aid() {
  // @@protoc_insertion_point(field_mutable:cipurse.select.SelectFile.aid)
  return _internal_mutable_aid();
}
inline const std::string& SelectFile::_internal_aid() const {
  if (_internal_has_aid()) {
    return select_by_.aid_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SelectFile::_internal_set_aid(const std::string& value) {
  if (!_internal_has_aid()) {
    clear_select_by();
    set_has_aid();
    select_by_.aid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  select_by_.aid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SelectFile::set_aid(std::string&& value) {
  // @@protoc_insertion_point(field_set:cipurse.select.SelectFile.aid)
  if (!_internal_has_aid()) {
    clear_select_by();
    set_has_aid();
    select_by_.aid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  select_by_.aid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cipurse.select.SelectFile.aid)
}
inline void SelectFile::set_aid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_aid()) {
    clear_select_by();
    set_has_aid();
    select_by_.aid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  select_by_.aid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cipurse.select.SelectFile.aid)
}
inline void SelectFile::set_aid(const void* value, size_t size) {
  if (!_internal_has_aid()) {
    clear_select_by();
    set_has_aid();
    select_by_.aid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  select_by_.aid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cipurse.select.SelectFile.aid)
}
inline std::string* SelectFile::_internal_mutable_aid() {
  if (!_internal_has_aid()) {
    clear_select_by();
    set_has_aid();
    select_by_.aid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return select_by_.aid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SelectFile::release_aid() {
  // @@protoc_insertion_point(field_release:cipurse.select.SelectFile.aid)
  if (_internal_has_aid()) {
    clear_has_select_by();
    return select_by_.aid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void SelectFile::set_allocated_aid(std::string* aid) {
  if (has_select_by()) {
    clear_select_by();
  }
  if (aid != nullptr) {
    set_has_aid();
    select_by_.aid_.UnsafeSetDefault(aid);
  }
  // @@protoc_insertion_point(field_set_allocated:cipurse.select.SelectFile.aid)
}

// optional uint32 file_id = 2;
inline bool SelectFile::_internal_has_file_id() const {
  return select_by_case() == kFileId;
}
inline bool SelectFile::has_file_id() const {
  return _internal_has_file_id();
}
inline void SelectFile::set_has_file_id() {
  _oneof_case_[0] = kFileId;
}
inline void SelectFile::clear_file_id() {
  if (_internal_has_file_id()) {
    select_by_.file_id_ = 0u;
    clear_has_select_by();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SelectFile::_internal_file_id() const {
  if (_internal_has_file_id()) {
    return select_by_.file_id_;
  }
  return 0u;
}
inline void SelectFile::_internal_set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_file_id()) {
    clear_select_by();
    set_has_file_id();
  }
  select_by_.file_id_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SelectFile::file_id() const {
  // @@protoc_insertion_point(field_get:cipurse.select.SelectFile.file_id)
  return _internal_file_id();
}
inline void SelectFile::set_file_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_id(value);
  // @@protoc_insertion_point(field_set:cipurse.select.SelectFile.file_id)
}

inline bool SelectFile::has_select_by() const {
  return select_by_case() != SELECT_BY_NOT_SET;
}
inline void SelectFile::clear_has_select_by() {
  _oneof_case_[0] = SELECT_BY_NOT_SET;
}
inline SelectFile::SelectByCase SelectFile::select_by_case() const {
  return SelectFile::SelectByCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace select
}  // namespace cipurse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cipurse_2fselect_2eproto
