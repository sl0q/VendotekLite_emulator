// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cipurse/update_binary.proto

#include "cipurse/update_binary.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace cipurse {
namespace update_binary {
class UpdateBinaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateBinary> _instance;
} _UpdateBinary_default_instance_;
}  // namespace update_binary
}  // namespace cipurse
static void InitDefaultsscc_info_UpdateBinary_cipurse_2fupdate_5fbinary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cipurse::update_binary::_UpdateBinary_default_instance_;
    new (ptr) ::cipurse::update_binary::UpdateBinary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cipurse::update_binary::UpdateBinary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateBinary_cipurse_2fupdate_5fbinary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateBinary_cipurse_2fupdate_5fbinary_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cipurse_2fupdate_5fbinary_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cipurse_2fupdate_5fbinary_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cipurse_2fupdate_5fbinary_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cipurse_2fupdate_5fbinary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::cipurse::update_binary::UpdateBinary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cipurse::update_binary::UpdateBinary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cipurse::update_binary::UpdateBinary, short_file_id_),
  PROTOBUF_FIELD_OFFSET(::cipurse::update_binary::UpdateBinary, data_),
  PROTOBUF_FIELD_OFFSET(::cipurse::update_binary::UpdateBinary, offset_),
  1,
  0,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::cipurse::update_binary::UpdateBinary)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cipurse::update_binary::_UpdateBinary_default_instance_),
};

const char descriptor_table_protodef_cipurse_2fupdate_5fbinary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033cipurse/update_binary.proto\022\025cipurse.u"
  "pdate_binary\"F\n\014UpdateBinary\022\025\n\rshort_fi"
  "le_id\030\001 \002(\r\022\014\n\004data\030\002 \002(\014\022\021\n\006offset\030\003 \001("
  "\r:\0010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cipurse_2fupdate_5fbinary_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cipurse_2fupdate_5fbinary_2eproto_sccs[1] = {
  &scc_info_UpdateBinary_cipurse_2fupdate_5fbinary_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cipurse_2fupdate_5fbinary_2eproto_once;
static bool descriptor_table_cipurse_2fupdate_5fbinary_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cipurse_2fupdate_5fbinary_2eproto = {
  &descriptor_table_cipurse_2fupdate_5fbinary_2eproto_initialized, descriptor_table_protodef_cipurse_2fupdate_5fbinary_2eproto, "cipurse/update_binary.proto", 124,
  &descriptor_table_cipurse_2fupdate_5fbinary_2eproto_once, descriptor_table_cipurse_2fupdate_5fbinary_2eproto_sccs, descriptor_table_cipurse_2fupdate_5fbinary_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_cipurse_2fupdate_5fbinary_2eproto::offsets,
  file_level_metadata_cipurse_2fupdate_5fbinary_2eproto, 1, file_level_enum_descriptors_cipurse_2fupdate_5fbinary_2eproto, file_level_service_descriptors_cipurse_2fupdate_5fbinary_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cipurse_2fupdate_5fbinary_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cipurse_2fupdate_5fbinary_2eproto), true);
namespace cipurse {
namespace update_binary {

// ===================================================================

void UpdateBinary::InitAsDefaultInstance() {
}
class UpdateBinary::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateBinary>()._has_bits_);
  static void set_has_short_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UpdateBinary::UpdateBinary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cipurse.update_binary.UpdateBinary)
}
UpdateBinary::UpdateBinary(const UpdateBinary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&short_file_id_, &from.short_file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&short_file_id_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:cipurse.update_binary.UpdateBinary)
}

void UpdateBinary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateBinary_cipurse_2fupdate_5fbinary_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&short_file_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&short_file_id_)) + sizeof(offset_));
}

UpdateBinary::~UpdateBinary() {
  // @@protoc_insertion_point(destructor:cipurse.update_binary.UpdateBinary)
  SharedDtor();
}

void UpdateBinary::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateBinary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateBinary& UpdateBinary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateBinary_cipurse_2fupdate_5fbinary_2eproto.base);
  return *internal_default_instance();
}


void UpdateBinary::Clear() {
// @@protoc_insertion_point(message_clear_start:cipurse.update_binary.UpdateBinary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&short_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&short_file_id_)) + sizeof(offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UpdateBinary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 short_file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_short_file_id(&has_bits);
          short_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 offset = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateBinary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cipurse.update_binary.UpdateBinary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 short_file_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_short_file_id(), target);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // optional uint32 offset = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cipurse.update_binary.UpdateBinary)
  return target;
}

size_t UpdateBinary::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:cipurse.update_binary.UpdateBinary)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (_internal_has_short_file_id()) {
    // required uint32 short_file_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_short_file_id());
  }

  return total_size;
}
size_t UpdateBinary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cipurse.update_binary.UpdateBinary)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());

    // required uint32 short_file_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_short_file_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 offset = 3 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateBinary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cipurse.update_binary.UpdateBinary)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateBinary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateBinary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cipurse.update_binary.UpdateBinary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cipurse.update_binary.UpdateBinary)
    MergeFrom(*source);
  }
}

void UpdateBinary::MergeFrom(const UpdateBinary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cipurse.update_binary.UpdateBinary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      short_file_id_ = from.short_file_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdateBinary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cipurse.update_binary.UpdateBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBinary::CopyFrom(const UpdateBinary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cipurse.update_binary.UpdateBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBinary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void UpdateBinary::InternalSwap(UpdateBinary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(short_file_id_, other->short_file_id_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateBinary::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace update_binary
}  // namespace cipurse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cipurse::update_binary::UpdateBinary* Arena::CreateMaybeMessage< ::cipurse::update_binary::UpdateBinary >(Arena* arena) {
  return Arena::CreateInternal< ::cipurse::update_binary::UpdateBinary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
