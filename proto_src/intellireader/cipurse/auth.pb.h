// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cipurse/auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cipurse_2fauth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cipurse_2fauth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "contact/card_slot.pb.h"
#include "cipurse/security_level.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cipurse_2fauth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cipurse_2fauth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cipurse_2fauth_2eproto;
namespace cipurse {
namespace auth {
class EstablishSecureChannel;
class EstablishSecureChannelDefaultTypeInternal;
extern EstablishSecureChannelDefaultTypeInternal _EstablishSecureChannel_default_instance_;
}  // namespace auth
}  // namespace cipurse
PROTOBUF_NAMESPACE_OPEN
template<> ::cipurse::auth::EstablishSecureChannel* Arena::CreateMaybeMessage<::cipurse::auth::EstablishSecureChannel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cipurse {
namespace auth {

// ===================================================================

class EstablishSecureChannel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cipurse.auth.EstablishSecureChannel) */ {
 public:
  EstablishSecureChannel();
  virtual ~EstablishSecureChannel();

  EstablishSecureChannel(const EstablishSecureChannel& from);
  EstablishSecureChannel(EstablishSecureChannel&& from) noexcept
    : EstablishSecureChannel() {
    *this = ::std::move(from);
  }

  inline EstablishSecureChannel& operator=(const EstablishSecureChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstablishSecureChannel& operator=(EstablishSecureChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstablishSecureChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EstablishSecureChannel* internal_default_instance() {
    return reinterpret_cast<const EstablishSecureChannel*>(
               &_EstablishSecureChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EstablishSecureChannel& a, EstablishSecureChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(EstablishSecureChannel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstablishSecureChannel* New() const final {
    return CreateMaybeMessage<EstablishSecureChannel>(nullptr);
  }

  EstablishSecureChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstablishSecureChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstablishSecureChannel& from);
  void MergeFrom(const EstablishSecureChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstablishSecureChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cipurse.auth.EstablishSecureChannel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cipurse_2fauth_2eproto);
    return ::descriptor_table_cipurse_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiversificationDataFieldNumber = 3,
    kKeyNumberFieldNumber = 1,
    kSamKeyIdFieldNumber = 2,
    kSlotFieldNumber = 4,
    kSecurityLevelFieldNumber = 5,
  };
  // optional bytes diversification_data = 3;
  bool has_diversification_data() const;
  private:
  bool _internal_has_diversification_data() const;
  public:
  void clear_diversification_data();
  const std::string& diversification_data() const;
  void set_diversification_data(const std::string& value);
  void set_diversification_data(std::string&& value);
  void set_diversification_data(const char* value);
  void set_diversification_data(const void* value, size_t size);
  std::string* mutable_diversification_data();
  std::string* release_diversification_data();
  void set_allocated_diversification_data(std::string* diversification_data);
  private:
  const std::string& _internal_diversification_data() const;
  void _internal_set_diversification_data(const std::string& value);
  std::string* _internal_mutable_diversification_data();
  public:

  // required uint32 key_number = 1;
  bool has_key_number() const;
  private:
  bool _internal_has_key_number() const;
  public:
  void clear_key_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 key_number() const;
  void set_key_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key_number() const;
  void _internal_set_key_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 sam_key_id = 2;
  bool has_sam_key_id() const;
  private:
  bool _internal_has_sam_key_id() const;
  public:
  void clear_sam_key_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 sam_key_id() const;
  void set_sam_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sam_key_id() const;
  void _internal_set_sam_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .contact.card_slot.CardSlot slot = 4;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  ::contact::card_slot::CardSlot slot() const;
  void set_slot(::contact::card_slot::CardSlot value);
  private:
  ::contact::card_slot::CardSlot _internal_slot() const;
  void _internal_set_slot(::contact::card_slot::CardSlot value);
  public:

  // optional .cipurse.security_level.SecurityLevel security_level = 5 [default = ENCRYPTED];
  bool has_security_level() const;
  private:
  bool _internal_has_security_level() const;
  public:
  void clear_security_level();
  ::cipurse::security_level::SecurityLevel security_level() const;
  void set_security_level(::cipurse::security_level::SecurityLevel value);
  private:
  ::cipurse::security_level::SecurityLevel _internal_security_level() const;
  void _internal_set_security_level(::cipurse::security_level::SecurityLevel value);
  public:

  // @@protoc_insertion_point(class_scope:cipurse.auth.EstablishSecureChannel)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diversification_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sam_key_id_;
  int slot_;
  int security_level_;
  friend struct ::TableStruct_cipurse_2fauth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EstablishSecureChannel

// required uint32 key_number = 1;
inline bool EstablishSecureChannel::_internal_has_key_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EstablishSecureChannel::has_key_number() const {
  return _internal_has_key_number();
}
inline void EstablishSecureChannel::clear_key_number() {
  key_number_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EstablishSecureChannel::_internal_key_number() const {
  return key_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EstablishSecureChannel::key_number() const {
  // @@protoc_insertion_point(field_get:cipurse.auth.EstablishSecureChannel.key_number)
  return _internal_key_number();
}
inline void EstablishSecureChannel::_internal_set_key_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  key_number_ = value;
}
inline void EstablishSecureChannel::set_key_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key_number(value);
  // @@protoc_insertion_point(field_set:cipurse.auth.EstablishSecureChannel.key_number)
}

// required uint32 sam_key_id = 2;
inline bool EstablishSecureChannel::_internal_has_sam_key_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EstablishSecureChannel::has_sam_key_id() const {
  return _internal_has_sam_key_id();
}
inline void EstablishSecureChannel::clear_sam_key_id() {
  sam_key_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EstablishSecureChannel::_internal_sam_key_id() const {
  return sam_key_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EstablishSecureChannel::sam_key_id() const {
  // @@protoc_insertion_point(field_get:cipurse.auth.EstablishSecureChannel.sam_key_id)
  return _internal_sam_key_id();
}
inline void EstablishSecureChannel::_internal_set_sam_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  sam_key_id_ = value;
}
inline void EstablishSecureChannel::set_sam_key_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sam_key_id(value);
  // @@protoc_insertion_point(field_set:cipurse.auth.EstablishSecureChannel.sam_key_id)
}

// optional bytes diversification_data = 3;
inline bool EstablishSecureChannel::_internal_has_diversification_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EstablishSecureChannel::has_diversification_data() const {
  return _internal_has_diversification_data();
}
inline void EstablishSecureChannel::clear_diversification_data() {
  diversification_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EstablishSecureChannel::diversification_data() const {
  // @@protoc_insertion_point(field_get:cipurse.auth.EstablishSecureChannel.diversification_data)
  return _internal_diversification_data();
}
inline void EstablishSecureChannel::set_diversification_data(const std::string& value) {
  _internal_set_diversification_data(value);
  // @@protoc_insertion_point(field_set:cipurse.auth.EstablishSecureChannel.diversification_data)
}
inline std::string* EstablishSecureChannel::mutable_diversification_data() {
  // @@protoc_insertion_point(field_mutable:cipurse.auth.EstablishSecureChannel.diversification_data)
  return _internal_mutable_diversification_data();
}
inline const std::string& EstablishSecureChannel::_internal_diversification_data() const {
  return diversification_data_.GetNoArena();
}
inline void EstablishSecureChannel::_internal_set_diversification_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  diversification_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EstablishSecureChannel::set_diversification_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  diversification_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cipurse.auth.EstablishSecureChannel.diversification_data)
}
inline void EstablishSecureChannel::set_diversification_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  diversification_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cipurse.auth.EstablishSecureChannel.diversification_data)
}
inline void EstablishSecureChannel::set_diversification_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  diversification_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cipurse.auth.EstablishSecureChannel.diversification_data)
}
inline std::string* EstablishSecureChannel::_internal_mutable_diversification_data() {
  _has_bits_[0] |= 0x00000001u;
  return diversification_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EstablishSecureChannel::release_diversification_data() {
  // @@protoc_insertion_point(field_release:cipurse.auth.EstablishSecureChannel.diversification_data)
  if (!_internal_has_diversification_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return diversification_data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EstablishSecureChannel::set_allocated_diversification_data(std::string* diversification_data) {
  if (diversification_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  diversification_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diversification_data);
  // @@protoc_insertion_point(field_set_allocated:cipurse.auth.EstablishSecureChannel.diversification_data)
}

// optional .contact.card_slot.CardSlot slot = 4;
inline bool EstablishSecureChannel::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EstablishSecureChannel::has_slot() const {
  return _internal_has_slot();
}
inline void EstablishSecureChannel::clear_slot() {
  slot_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::contact::card_slot::CardSlot EstablishSecureChannel::_internal_slot() const {
  return static_cast< ::contact::card_slot::CardSlot >(slot_);
}
inline ::contact::card_slot::CardSlot EstablishSecureChannel::slot() const {
  // @@protoc_insertion_point(field_get:cipurse.auth.EstablishSecureChannel.slot)
  return _internal_slot();
}
inline void EstablishSecureChannel::_internal_set_slot(::contact::card_slot::CardSlot value) {
  assert(::contact::card_slot::CardSlot_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  slot_ = value;
}
inline void EstablishSecureChannel::set_slot(::contact::card_slot::CardSlot value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:cipurse.auth.EstablishSecureChannel.slot)
}

// optional .cipurse.security_level.SecurityLevel security_level = 5 [default = ENCRYPTED];
inline bool EstablishSecureChannel::_internal_has_security_level() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EstablishSecureChannel::has_security_level() const {
  return _internal_has_security_level();
}
inline void EstablishSecureChannel::clear_security_level() {
  security_level_ = 2;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::cipurse::security_level::SecurityLevel EstablishSecureChannel::_internal_security_level() const {
  return static_cast< ::cipurse::security_level::SecurityLevel >(security_level_);
}
inline ::cipurse::security_level::SecurityLevel EstablishSecureChannel::security_level() const {
  // @@protoc_insertion_point(field_get:cipurse.auth.EstablishSecureChannel.security_level)
  return _internal_security_level();
}
inline void EstablishSecureChannel::_internal_set_security_level(::cipurse::security_level::SecurityLevel value) {
  assert(::cipurse::security_level::SecurityLevel_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  security_level_ = value;
}
inline void EstablishSecureChannel::set_security_level(::cipurse::security_level::SecurityLevel value) {
  _internal_set_security_level(value);
  // @@protoc_insertion_point(field_set:cipurse.auth.EstablishSecureChannel.security_level)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace auth
}  // namespace cipurse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cipurse_2fauth_2eproto
