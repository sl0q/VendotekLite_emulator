// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cipurse/select.proto

#include "cipurse/select.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace cipurse {
namespace select {
class SelectFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectFile> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_id_;
} _SelectFile_default_instance_;
}  // namespace select
}  // namespace cipurse
static void InitDefaultsscc_info_SelectFile_cipurse_2fselect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cipurse::select::_SelectFile_default_instance_;
    new (ptr) ::cipurse::select::SelectFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cipurse::select::SelectFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectFile_cipurse_2fselect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelectFile_cipurse_2fselect_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_cipurse_2fselect_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_cipurse_2fselect_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_cipurse_2fselect_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_cipurse_2fselect_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::cipurse::select::SelectFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cipurse::select::SelectFile, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::cipurse::select::SelectFile, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::cipurse::select::SelectFileDefaultTypeInternal, aid_),
  offsetof(::cipurse::select::SelectFileDefaultTypeInternal, file_id_),
  PROTOBUF_FIELD_OFFSET(::cipurse::select::SelectFile, select_by_),
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::cipurse::select::SelectFile)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cipurse::select::_SelectFile_default_instance_),
};

const char descriptor_table_protodef_cipurse_2fselect_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024cipurse/select.proto\022\016cipurse.select\";"
  "\n\nSelectFile\022\r\n\003aid\030\001 \001(\014H\000\022\021\n\007file_id\030\002"
  " \001(\rH\000B\013\n\tselect_by"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_cipurse_2fselect_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_cipurse_2fselect_2eproto_sccs[1] = {
  &scc_info_SelectFile_cipurse_2fselect_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_cipurse_2fselect_2eproto_once;
static bool descriptor_table_cipurse_2fselect_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cipurse_2fselect_2eproto = {
  &descriptor_table_cipurse_2fselect_2eproto_initialized, descriptor_table_protodef_cipurse_2fselect_2eproto, "cipurse/select.proto", 99,
  &descriptor_table_cipurse_2fselect_2eproto_once, descriptor_table_cipurse_2fselect_2eproto_sccs, descriptor_table_cipurse_2fselect_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_cipurse_2fselect_2eproto::offsets,
  file_level_metadata_cipurse_2fselect_2eproto, 1, file_level_enum_descriptors_cipurse_2fselect_2eproto, file_level_service_descriptors_cipurse_2fselect_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cipurse_2fselect_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_cipurse_2fselect_2eproto), true);
namespace cipurse {
namespace select {

// ===================================================================

void SelectFile::InitAsDefaultInstance() {
  ::cipurse::select::_SelectFile_default_instance_.aid_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::cipurse::select::_SelectFile_default_instance_.file_id_ = 0u;
}
class SelectFile::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectFile>()._has_bits_);
};

SelectFile::SelectFile()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cipurse.select.SelectFile)
}
SelectFile::SelectFile(const SelectFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_select_by();
  switch (from.select_by_case()) {
    case kAid: {
      _internal_set_aid(from._internal_aid());
      break;
    }
    case kFileId: {
      _internal_set_file_id(from._internal_file_id());
      break;
    }
    case SELECT_BY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cipurse.select.SelectFile)
}

void SelectFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelectFile_cipurse_2fselect_2eproto.base);
  clear_has_select_by();
}

SelectFile::~SelectFile() {
  // @@protoc_insertion_point(destructor:cipurse.select.SelectFile)
  SharedDtor();
}

void SelectFile::SharedDtor() {
  if (has_select_by()) {
    clear_select_by();
  }
}

void SelectFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectFile& SelectFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectFile_cipurse_2fselect_2eproto.base);
  return *internal_default_instance();
}


void SelectFile::clear_select_by() {
// @@protoc_insertion_point(one_of_clear_start:cipurse.select.SelectFile)
  switch (select_by_case()) {
    case kAid: {
      select_by_.aid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kFileId: {
      // No need to clear
      break;
    }
    case SELECT_BY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SELECT_BY_NOT_SET;
}


void SelectFile::Clear() {
// @@protoc_insertion_point(message_clear_start:cipurse.select.SelectFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_select_by();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SelectFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes aid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_aid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 file_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_file_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cipurse.select.SelectFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (select_by_case()) {
    case kAid: {
      target = stream->WriteBytesMaybeAliased(
          1, this->_internal_aid(), target);
      break;
    }
    case kFileId: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_file_id(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cipurse.select.SelectFile)
  return target;
}

size_t SelectFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cipurse.select.SelectFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (select_by_case()) {
    // optional bytes aid = 1;
    case kAid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_aid());
      break;
    }
    // optional uint32 file_id = 2;
    case kFileId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_file_id());
      break;
    }
    case SELECT_BY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cipurse.select.SelectFile)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cipurse.select.SelectFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cipurse.select.SelectFile)
    MergeFrom(*source);
  }
}

void SelectFile::MergeFrom(const SelectFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cipurse.select.SelectFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.select_by_case()) {
    case kAid: {
      _internal_set_aid(from._internal_aid());
      break;
    }
    case kFileId: {
      _internal_set_file_id(from._internal_file_id());
      break;
    }
    case SELECT_BY_NOT_SET: {
      break;
    }
  }
}

void SelectFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cipurse.select.SelectFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectFile::CopyFrom(const SelectFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cipurse.select.SelectFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectFile::IsInitialized() const {
  return true;
}

void SelectFile::InternalSwap(SelectFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(select_by_, other->select_by_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectFile::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace select
}  // namespace cipurse
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cipurse::select::SelectFile* Arena::CreateMaybeMessage< ::cipurse::select::SelectFile >(Arena* arena) {
  return Arena::CreateInternal< ::cipurse::select::SelectFile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
