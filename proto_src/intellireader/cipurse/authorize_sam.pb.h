// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cipurse/authorize_sam.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cipurse_2fauthorize_5fsam_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cipurse_2fauthorize_5fsam_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "contact/card_slot.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cipurse_2fauthorize_5fsam_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cipurse_2fauthorize_5fsam_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cipurse_2fauthorize_5fsam_2eproto;
namespace cipurse {
namespace sam {
class AuthorizeHwSam;
class AuthorizeHwSamDefaultTypeInternal;
extern AuthorizeHwSamDefaultTypeInternal _AuthorizeHwSam_default_instance_;
}  // namespace sam
}  // namespace cipurse
PROTOBUF_NAMESPACE_OPEN
template<> ::cipurse::sam::AuthorizeHwSam* Arena::CreateMaybeMessage<::cipurse::sam::AuthorizeHwSam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cipurse {
namespace sam {

// ===================================================================

class AuthorizeHwSam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cipurse.sam.AuthorizeHwSam) */ {
 public:
  AuthorizeHwSam();
  virtual ~AuthorizeHwSam();

  AuthorizeHwSam(const AuthorizeHwSam& from);
  AuthorizeHwSam(AuthorizeHwSam&& from) noexcept
    : AuthorizeHwSam() {
    *this = ::std::move(from);
  }

  inline AuthorizeHwSam& operator=(const AuthorizeHwSam& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorizeHwSam& operator=(AuthorizeHwSam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthorizeHwSam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorizeHwSam* internal_default_instance() {
    return reinterpret_cast<const AuthorizeHwSam*>(
               &_AuthorizeHwSam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthorizeHwSam& a, AuthorizeHwSam& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthorizeHwSam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthorizeHwSam* New() const final {
    return CreateMaybeMessage<AuthorizeHwSam>(nullptr);
  }

  AuthorizeHwSam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthorizeHwSam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthorizeHwSam& from);
  void MergeFrom(const AuthorizeHwSam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorizeHwSam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cipurse.sam.AuthorizeHwSam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_cipurse_2fauthorize_5fsam_2eproto);
    return ::descriptor_table_cipurse_2fauthorize_5fsam_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAidFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kSlotFieldNumber = 1,
  };
  // required bytes aid = 2;
  bool has_aid() const;
  private:
  bool _internal_has_aid() const;
  public:
  void clear_aid();
  const std::string& aid() const;
  void set_aid(const std::string& value);
  void set_aid(std::string&& value);
  void set_aid(const char* value);
  void set_aid(const void* value, size_t size);
  std::string* mutable_aid();
  std::string* release_aid();
  void set_allocated_aid(std::string* aid);
  private:
  const std::string& _internal_aid() const;
  void _internal_set_aid(const std::string& value);
  std::string* _internal_mutable_aid();
  public:

  // optional bytes password = 3;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // required .contact.card_slot.CardSlot slot = 1;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  ::contact::card_slot::CardSlot slot() const;
  void set_slot(::contact::card_slot::CardSlot value);
  private:
  ::contact::card_slot::CardSlot _internal_slot() const;
  void _internal_set_slot(::contact::card_slot::CardSlot value);
  public:

  // @@protoc_insertion_point(class_scope:cipurse.sam.AuthorizeHwSam)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  int slot_;
  friend struct ::TableStruct_cipurse_2fauthorize_5fsam_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthorizeHwSam

// required .contact.card_slot.CardSlot slot = 1;
inline bool AuthorizeHwSam::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthorizeHwSam::has_slot() const {
  return _internal_has_slot();
}
inline void AuthorizeHwSam::clear_slot() {
  slot_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::contact::card_slot::CardSlot AuthorizeHwSam::_internal_slot() const {
  return static_cast< ::contact::card_slot::CardSlot >(slot_);
}
inline ::contact::card_slot::CardSlot AuthorizeHwSam::slot() const {
  // @@protoc_insertion_point(field_get:cipurse.sam.AuthorizeHwSam.slot)
  return _internal_slot();
}
inline void AuthorizeHwSam::_internal_set_slot(::contact::card_slot::CardSlot value) {
  assert(::contact::card_slot::CardSlot_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  slot_ = value;
}
inline void AuthorizeHwSam::set_slot(::contact::card_slot::CardSlot value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:cipurse.sam.AuthorizeHwSam.slot)
}

// required bytes aid = 2;
inline bool AuthorizeHwSam::_internal_has_aid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthorizeHwSam::has_aid() const {
  return _internal_has_aid();
}
inline void AuthorizeHwSam::clear_aid() {
  aid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthorizeHwSam::aid() const {
  // @@protoc_insertion_point(field_get:cipurse.sam.AuthorizeHwSam.aid)
  return _internal_aid();
}
inline void AuthorizeHwSam::set_aid(const std::string& value) {
  _internal_set_aid(value);
  // @@protoc_insertion_point(field_set:cipurse.sam.AuthorizeHwSam.aid)
}
inline std::string* AuthorizeHwSam::mutable_aid() {
  // @@protoc_insertion_point(field_mutable:cipurse.sam.AuthorizeHwSam.aid)
  return _internal_mutable_aid();
}
inline const std::string& AuthorizeHwSam::_internal_aid() const {
  return aid_.GetNoArena();
}
inline void AuthorizeHwSam::_internal_set_aid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  aid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthorizeHwSam::set_aid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  aid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cipurse.sam.AuthorizeHwSam.aid)
}
inline void AuthorizeHwSam::set_aid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  aid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cipurse.sam.AuthorizeHwSam.aid)
}
inline void AuthorizeHwSam::set_aid(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  aid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cipurse.sam.AuthorizeHwSam.aid)
}
inline std::string* AuthorizeHwSam::_internal_mutable_aid() {
  _has_bits_[0] |= 0x00000001u;
  return aid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthorizeHwSam::release_aid() {
  // @@protoc_insertion_point(field_release:cipurse.sam.AuthorizeHwSam.aid)
  if (!_internal_has_aid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return aid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthorizeHwSam::set_allocated_aid(std::string* aid) {
  if (aid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  aid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aid);
  // @@protoc_insertion_point(field_set_allocated:cipurse.sam.AuthorizeHwSam.aid)
}

// optional bytes password = 3;
inline bool AuthorizeHwSam::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthorizeHwSam::has_password() const {
  return _internal_has_password();
}
inline void AuthorizeHwSam::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthorizeHwSam::password() const {
  // @@protoc_insertion_point(field_get:cipurse.sam.AuthorizeHwSam.password)
  return _internal_password();
}
inline void AuthorizeHwSam::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:cipurse.sam.AuthorizeHwSam.password)
}
inline std::string* AuthorizeHwSam::mutable_password() {
  // @@protoc_insertion_point(field_mutable:cipurse.sam.AuthorizeHwSam.password)
  return _internal_mutable_password();
}
inline const std::string& AuthorizeHwSam::_internal_password() const {
  return password_.GetNoArena();
}
inline void AuthorizeHwSam::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthorizeHwSam::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cipurse.sam.AuthorizeHwSam.password)
}
inline void AuthorizeHwSam::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cipurse.sam.AuthorizeHwSam.password)
}
inline void AuthorizeHwSam::set_password(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cipurse.sam.AuthorizeHwSam.password)
}
inline std::string* AuthorizeHwSam::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthorizeHwSam::release_password() {
  // @@protoc_insertion_point(field_release:cipurse.sam.AuthorizeHwSam.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthorizeHwSam::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:cipurse.sam.AuthorizeHwSam.password)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sam
}  // namespace cipurse

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cipurse_2fauthorize_5fsam_2eproto
