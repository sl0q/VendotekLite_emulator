// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: troika/av3/write_ticket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_troika_2fav3_2fwrite_5fticket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_troika_2fav3_2fwrite_5fticket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mifare/classic/auth.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_troika_2fav3_2fwrite_5fticket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_troika_2fav3_2fwrite_5fticket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_troika_2fav3_2fwrite_5fticket_2eproto;
namespace troika {
namespace av3 {
namespace write_ticket {
class WriteResult;
class WriteResultDefaultTypeInternal;
extern WriteResultDefaultTypeInternal _WriteResult_default_instance_;
class WriteTicket;
class WriteTicketDefaultTypeInternal;
extern WriteTicketDefaultTypeInternal _WriteTicket_default_instance_;
}  // namespace write_ticket
}  // namespace av3
}  // namespace troika
PROTOBUF_NAMESPACE_OPEN
template<> ::troika::av3::write_ticket::WriteResult* Arena::CreateMaybeMessage<::troika::av3::write_ticket::WriteResult>(Arena*);
template<> ::troika::av3::write_ticket::WriteTicket* Arena::CreateMaybeMessage<::troika::av3::write_ticket::WriteTicket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace troika {
namespace av3 {
namespace write_ticket {

// ===================================================================

class WriteTicket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:troika.av3.write_ticket.WriteTicket) */ {
 public:
  WriteTicket();
  virtual ~WriteTicket();

  WriteTicket(const WriteTicket& from);
  WriteTicket(WriteTicket&& from) noexcept
    : WriteTicket() {
    *this = ::std::move(from);
  }

  inline WriteTicket& operator=(const WriteTicket& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteTicket& operator=(WriteTicket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteTicket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteTicket* internal_default_instance() {
    return reinterpret_cast<const WriteTicket*>(
               &_WriteTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WriteTicket& a, WriteTicket& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteTicket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteTicket* New() const final {
    return CreateMaybeMessage<WriteTicket>(nullptr);
  }

  WriteTicket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteTicket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteTicket& from);
  void MergeFrom(const WriteTicket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteTicket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "troika.av3.write_ticket.WriteTicket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_troika_2fav3_2fwrite_5fticket_2eproto);
    return ::descriptor_table_troika_2fav3_2fwrite_5fticket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketParamsFieldNumber = 2,
    kValidateParamsFieldNumber = 3,
    kSectorFieldNumber = 1,
  };
  // required bytes ticket_params = 2;
  bool has_ticket_params() const;
  private:
  bool _internal_has_ticket_params() const;
  public:
  void clear_ticket_params();
  const std::string& ticket_params() const;
  void set_ticket_params(const std::string& value);
  void set_ticket_params(std::string&& value);
  void set_ticket_params(const char* value);
  void set_ticket_params(const void* value, size_t size);
  std::string* mutable_ticket_params();
  std::string* release_ticket_params();
  void set_allocated_ticket_params(std::string* ticket_params);
  private:
  const std::string& _internal_ticket_params() const;
  void _internal_set_ticket_params(const std::string& value);
  std::string* _internal_mutable_ticket_params();
  public:

  // required bytes validate_params = 3;
  bool has_validate_params() const;
  private:
  bool _internal_has_validate_params() const;
  public:
  void clear_validate_params();
  const std::string& validate_params() const;
  void set_validate_params(const std::string& value);
  void set_validate_params(std::string&& value);
  void set_validate_params(const char* value);
  void set_validate_params(const void* value, size_t size);
  std::string* mutable_validate_params();
  std::string* release_validate_params();
  void set_allocated_validate_params(std::string* validate_params);
  private:
  const std::string& _internal_validate_params() const;
  void _internal_set_validate_params(const std::string& value);
  std::string* _internal_mutable_validate_params();
  public:

  // required .mifare.classic.auth.SamKey sector = 1;
  bool has_sector() const;
  private:
  bool _internal_has_sector() const;
  public:
  void clear_sector();
  const ::mifare::classic::auth::SamKey& sector() const;
  ::mifare::classic::auth::SamKey* release_sector();
  ::mifare::classic::auth::SamKey* mutable_sector();
  void set_allocated_sector(::mifare::classic::auth::SamKey* sector);
  private:
  const ::mifare::classic::auth::SamKey& _internal_sector() const;
  ::mifare::classic::auth::SamKey* _internal_mutable_sector();
  public:

  // @@protoc_insertion_point(class_scope:troika.av3.write_ticket.WriteTicket)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validate_params_;
  ::mifare::classic::auth::SamKey* sector_;
  friend struct ::TableStruct_troika_2fav3_2fwrite_5fticket_2eproto;
};
// -------------------------------------------------------------------

class WriteResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:troika.av3.write_ticket.WriteResult) */ {
 public:
  WriteResult();
  virtual ~WriteResult();

  WriteResult(const WriteResult& from);
  WriteResult(WriteResult&& from) noexcept
    : WriteResult() {
    *this = ::std::move(from);
  }

  inline WriteResult& operator=(const WriteResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteResult& operator=(WriteResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteResult* internal_default_instance() {
    return reinterpret_cast<const WriteResult*>(
               &_WriteResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WriteResult& a, WriteResult& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteResult* New() const final {
    return CreateMaybeMessage<WriteResult>(nullptr);
  }

  WriteResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteResult& from);
  void MergeFrom(const WriteResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "troika.av3.write_ticket.WriteResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_troika_2fav3_2fwrite_5fticket_2eproto);
    return ::descriptor_table_troika_2fav3_2fwrite_5fticket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectorBitmapFieldNumber = 1,
    kWriteOkFieldNumber = 2,
  };
  // required bytes sector_bitmap = 1;
  bool has_sector_bitmap() const;
  private:
  bool _internal_has_sector_bitmap() const;
  public:
  void clear_sector_bitmap();
  const std::string& sector_bitmap() const;
  void set_sector_bitmap(const std::string& value);
  void set_sector_bitmap(std::string&& value);
  void set_sector_bitmap(const char* value);
  void set_sector_bitmap(const void* value, size_t size);
  std::string* mutable_sector_bitmap();
  std::string* release_sector_bitmap();
  void set_allocated_sector_bitmap(std::string* sector_bitmap);
  private:
  const std::string& _internal_sector_bitmap() const;
  void _internal_set_sector_bitmap(const std::string& value);
  std::string* _internal_mutable_sector_bitmap();
  public:

  // required bool write_ok = 2;
  bool has_write_ok() const;
  private:
  bool _internal_has_write_ok() const;
  public:
  void clear_write_ok();
  bool write_ok() const;
  void set_write_ok(bool value);
  private:
  bool _internal_write_ok() const;
  void _internal_set_write_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:troika.av3.write_ticket.WriteResult)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sector_bitmap_;
  bool write_ok_;
  friend struct ::TableStruct_troika_2fav3_2fwrite_5fticket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WriteTicket

// required .mifare.classic.auth.SamKey sector = 1;
inline bool WriteTicket::_internal_has_sector() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || sector_ != nullptr);
  return value;
}
inline bool WriteTicket::has_sector() const {
  return _internal_has_sector();
}
inline const ::mifare::classic::auth::SamKey& WriteTicket::_internal_sector() const {
  const ::mifare::classic::auth::SamKey* p = sector_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mifare::classic::auth::SamKey*>(
      &::mifare::classic::auth::_SamKey_default_instance_);
}
inline const ::mifare::classic::auth::SamKey& WriteTicket::sector() const {
  // @@protoc_insertion_point(field_get:troika.av3.write_ticket.WriteTicket.sector)
  return _internal_sector();
}
inline ::mifare::classic::auth::SamKey* WriteTicket::release_sector() {
  // @@protoc_insertion_point(field_release:troika.av3.write_ticket.WriteTicket.sector)
  _has_bits_[0] &= ~0x00000004u;
  ::mifare::classic::auth::SamKey* temp = sector_;
  sector_ = nullptr;
  return temp;
}
inline ::mifare::classic::auth::SamKey* WriteTicket::_internal_mutable_sector() {
  _has_bits_[0] |= 0x00000004u;
  if (sector_ == nullptr) {
    auto* p = CreateMaybeMessage<::mifare::classic::auth::SamKey>(GetArenaNoVirtual());
    sector_ = p;
  }
  return sector_;
}
inline ::mifare::classic::auth::SamKey* WriteTicket::mutable_sector() {
  // @@protoc_insertion_point(field_mutable:troika.av3.write_ticket.WriteTicket.sector)
  return _internal_mutable_sector();
}
inline void WriteTicket::set_allocated_sector(::mifare::classic::auth::SamKey* sector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sector_);
  }
  if (sector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sector, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sector_ = sector;
  // @@protoc_insertion_point(field_set_allocated:troika.av3.write_ticket.WriteTicket.sector)
}

// required bytes ticket_params = 2;
inline bool WriteTicket::_internal_has_ticket_params() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WriteTicket::has_ticket_params() const {
  return _internal_has_ticket_params();
}
inline void WriteTicket::clear_ticket_params() {
  ticket_params_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WriteTicket::ticket_params() const {
  // @@protoc_insertion_point(field_get:troika.av3.write_ticket.WriteTicket.ticket_params)
  return _internal_ticket_params();
}
inline void WriteTicket::set_ticket_params(const std::string& value) {
  _internal_set_ticket_params(value);
  // @@protoc_insertion_point(field_set:troika.av3.write_ticket.WriteTicket.ticket_params)
}
inline std::string* WriteTicket::mutable_ticket_params() {
  // @@protoc_insertion_point(field_mutable:troika.av3.write_ticket.WriteTicket.ticket_params)
  return _internal_mutable_ticket_params();
}
inline const std::string& WriteTicket::_internal_ticket_params() const {
  return ticket_params_.GetNoArena();
}
inline void WriteTicket::_internal_set_ticket_params(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WriteTicket::set_ticket_params(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_params_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:troika.av3.write_ticket.WriteTicket.ticket_params)
}
inline void WriteTicket::set_ticket_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ticket_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:troika.av3.write_ticket.WriteTicket.ticket_params)
}
inline void WriteTicket::set_ticket_params(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ticket_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:troika.av3.write_ticket.WriteTicket.ticket_params)
}
inline std::string* WriteTicket::_internal_mutable_ticket_params() {
  _has_bits_[0] |= 0x00000001u;
  return ticket_params_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WriteTicket::release_ticket_params() {
  // @@protoc_insertion_point(field_release:troika.av3.write_ticket.WriteTicket.ticket_params)
  if (!_internal_has_ticket_params()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ticket_params_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WriteTicket::set_allocated_ticket_params(std::string* ticket_params) {
  if (ticket_params != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ticket_params_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket_params);
  // @@protoc_insertion_point(field_set_allocated:troika.av3.write_ticket.WriteTicket.ticket_params)
}

// required bytes validate_params = 3;
inline bool WriteTicket::_internal_has_validate_params() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WriteTicket::has_validate_params() const {
  return _internal_has_validate_params();
}
inline void WriteTicket::clear_validate_params() {
  validate_params_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WriteTicket::validate_params() const {
  // @@protoc_insertion_point(field_get:troika.av3.write_ticket.WriteTicket.validate_params)
  return _internal_validate_params();
}
inline void WriteTicket::set_validate_params(const std::string& value) {
  _internal_set_validate_params(value);
  // @@protoc_insertion_point(field_set:troika.av3.write_ticket.WriteTicket.validate_params)
}
inline std::string* WriteTicket::mutable_validate_params() {
  // @@protoc_insertion_point(field_mutable:troika.av3.write_ticket.WriteTicket.validate_params)
  return _internal_mutable_validate_params();
}
inline const std::string& WriteTicket::_internal_validate_params() const {
  return validate_params_.GetNoArena();
}
inline void WriteTicket::_internal_set_validate_params(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  validate_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WriteTicket::set_validate_params(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  validate_params_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:troika.av3.write_ticket.WriteTicket.validate_params)
}
inline void WriteTicket::set_validate_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  validate_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:troika.av3.write_ticket.WriteTicket.validate_params)
}
inline void WriteTicket::set_validate_params(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  validate_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:troika.av3.write_ticket.WriteTicket.validate_params)
}
inline std::string* WriteTicket::_internal_mutable_validate_params() {
  _has_bits_[0] |= 0x00000002u;
  return validate_params_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WriteTicket::release_validate_params() {
  // @@protoc_insertion_point(field_release:troika.av3.write_ticket.WriteTicket.validate_params)
  if (!_internal_has_validate_params()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return validate_params_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WriteTicket::set_allocated_validate_params(std::string* validate_params) {
  if (validate_params != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  validate_params_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validate_params);
  // @@protoc_insertion_point(field_set_allocated:troika.av3.write_ticket.WriteTicket.validate_params)
}

// -------------------------------------------------------------------

// WriteResult

// required bytes sector_bitmap = 1;
inline bool WriteResult::_internal_has_sector_bitmap() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WriteResult::has_sector_bitmap() const {
  return _internal_has_sector_bitmap();
}
inline void WriteResult::clear_sector_bitmap() {
  sector_bitmap_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WriteResult::sector_bitmap() const {
  // @@protoc_insertion_point(field_get:troika.av3.write_ticket.WriteResult.sector_bitmap)
  return _internal_sector_bitmap();
}
inline void WriteResult::set_sector_bitmap(const std::string& value) {
  _internal_set_sector_bitmap(value);
  // @@protoc_insertion_point(field_set:troika.av3.write_ticket.WriteResult.sector_bitmap)
}
inline std::string* WriteResult::mutable_sector_bitmap() {
  // @@protoc_insertion_point(field_mutable:troika.av3.write_ticket.WriteResult.sector_bitmap)
  return _internal_mutable_sector_bitmap();
}
inline const std::string& WriteResult::_internal_sector_bitmap() const {
  return sector_bitmap_.GetNoArena();
}
inline void WriteResult::_internal_set_sector_bitmap(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sector_bitmap_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WriteResult::set_sector_bitmap(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sector_bitmap_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:troika.av3.write_ticket.WriteResult.sector_bitmap)
}
inline void WriteResult::set_sector_bitmap(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sector_bitmap_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:troika.av3.write_ticket.WriteResult.sector_bitmap)
}
inline void WriteResult::set_sector_bitmap(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sector_bitmap_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:troika.av3.write_ticket.WriteResult.sector_bitmap)
}
inline std::string* WriteResult::_internal_mutable_sector_bitmap() {
  _has_bits_[0] |= 0x00000001u;
  return sector_bitmap_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WriteResult::release_sector_bitmap() {
  // @@protoc_insertion_point(field_release:troika.av3.write_ticket.WriteResult.sector_bitmap)
  if (!_internal_has_sector_bitmap()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sector_bitmap_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WriteResult::set_allocated_sector_bitmap(std::string* sector_bitmap) {
  if (sector_bitmap != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sector_bitmap_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sector_bitmap);
  // @@protoc_insertion_point(field_set_allocated:troika.av3.write_ticket.WriteResult.sector_bitmap)
}

// required bool write_ok = 2;
inline bool WriteResult::_internal_has_write_ok() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WriteResult::has_write_ok() const {
  return _internal_has_write_ok();
}
inline void WriteResult::clear_write_ok() {
  write_ok_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool WriteResult::_internal_write_ok() const {
  return write_ok_;
}
inline bool WriteResult::write_ok() const {
  // @@protoc_insertion_point(field_get:troika.av3.write_ticket.WriteResult.write_ok)
  return _internal_write_ok();
}
inline void WriteResult::_internal_set_write_ok(bool value) {
  _has_bits_[0] |= 0x00000002u;
  write_ok_ = value;
}
inline void WriteResult::set_write_ok(bool value) {
  _internal_set_write_ok(value);
  // @@protoc_insertion_point(field_set:troika.av3.write_ticket.WriteResult.write_ok)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace write_ticket
}  // namespace av3
}  // namespace troika

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_troika_2fav3_2fwrite_5fticket_2eproto
