// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: troika/av3/write_ticket.proto

#include "troika/av3/write_ticket.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SamKey_mifare_2fclassic_2fauth_2eproto;
namespace troika {
namespace av3 {
namespace write_ticket {
class WriteTicketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteTicket> _instance;
} _WriteTicket_default_instance_;
class WriteResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteResult> _instance;
} _WriteResult_default_instance_;
}  // namespace write_ticket
}  // namespace av3
}  // namespace troika
static void InitDefaultsscc_info_WriteResult_troika_2fav3_2fwrite_5fticket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::troika::av3::write_ticket::_WriteResult_default_instance_;
    new (ptr) ::troika::av3::write_ticket::WriteResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::troika::av3::write_ticket::WriteResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteResult_troika_2fav3_2fwrite_5fticket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteResult_troika_2fav3_2fwrite_5fticket_2eproto}, {}};

static void InitDefaultsscc_info_WriteTicket_troika_2fav3_2fwrite_5fticket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::troika::av3::write_ticket::_WriteTicket_default_instance_;
    new (ptr) ::troika::av3::write_ticket::WriteTicket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::troika::av3::write_ticket::WriteTicket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WriteTicket_troika_2fav3_2fwrite_5fticket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WriteTicket_troika_2fav3_2fwrite_5fticket_2eproto}, {
      &scc_info_SamKey_mifare_2fclassic_2fauth_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_troika_2fav3_2fwrite_5fticket_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_troika_2fav3_2fwrite_5fticket_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_troika_2fav3_2fwrite_5fticket_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_troika_2fav3_2fwrite_5fticket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::troika::av3::write_ticket::WriteTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::troika::av3::write_ticket::WriteTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::troika::av3::write_ticket::WriteTicket, sector_),
  PROTOBUF_FIELD_OFFSET(::troika::av3::write_ticket::WriteTicket, ticket_params_),
  PROTOBUF_FIELD_OFFSET(::troika::av3::write_ticket::WriteTicket, validate_params_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::troika::av3::write_ticket::WriteResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::troika::av3::write_ticket::WriteResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::troika::av3::write_ticket::WriteResult, sector_bitmap_),
  PROTOBUF_FIELD_OFFSET(::troika::av3::write_ticket::WriteResult, write_ok_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::troika::av3::write_ticket::WriteTicket)},
  { 11, 18, sizeof(::troika::av3::write_ticket::WriteResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::troika::av3::write_ticket::_WriteTicket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::troika::av3::write_ticket::_WriteResult_default_instance_),
};

const char descriptor_table_protodef_troika_2fav3_2fwrite_5fticket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035troika/av3/write_ticket.proto\022\027troika."
  "av3.write_ticket\032\031mifare/classic/auth.pr"
  "oto\"j\n\013WriteTicket\022+\n\006sector\030\001 \002(\0132\033.mif"
  "are.classic.auth.SamKey\022\025\n\rticket_params"
  "\030\002 \002(\014\022\027\n\017validate_params\030\003 \002(\014\"6\n\013Write"
  "Result\022\025\n\rsector_bitmap\030\001 \002(\014\022\020\n\010write_o"
  "k\030\002 \002(\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_troika_2fav3_2fwrite_5fticket_2eproto_deps[1] = {
  &::descriptor_table_mifare_2fclassic_2fauth_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_troika_2fav3_2fwrite_5fticket_2eproto_sccs[2] = {
  &scc_info_WriteResult_troika_2fav3_2fwrite_5fticket_2eproto.base,
  &scc_info_WriteTicket_troika_2fav3_2fwrite_5fticket_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_troika_2fav3_2fwrite_5fticket_2eproto_once;
static bool descriptor_table_troika_2fav3_2fwrite_5fticket_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_troika_2fav3_2fwrite_5fticket_2eproto = {
  &descriptor_table_troika_2fav3_2fwrite_5fticket_2eproto_initialized, descriptor_table_protodef_troika_2fav3_2fwrite_5fticket_2eproto, "troika/av3/write_ticket.proto", 247,
  &descriptor_table_troika_2fav3_2fwrite_5fticket_2eproto_once, descriptor_table_troika_2fav3_2fwrite_5fticket_2eproto_sccs, descriptor_table_troika_2fav3_2fwrite_5fticket_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_troika_2fav3_2fwrite_5fticket_2eproto::offsets,
  file_level_metadata_troika_2fav3_2fwrite_5fticket_2eproto, 2, file_level_enum_descriptors_troika_2fav3_2fwrite_5fticket_2eproto, file_level_service_descriptors_troika_2fav3_2fwrite_5fticket_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_troika_2fav3_2fwrite_5fticket_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_troika_2fav3_2fwrite_5fticket_2eproto), true);
namespace troika {
namespace av3 {
namespace write_ticket {

// ===================================================================

void WriteTicket::InitAsDefaultInstance() {
  ::troika::av3::write_ticket::_WriteTicket_default_instance_._instance.get_mutable()->sector_ = const_cast< ::mifare::classic::auth::SamKey*>(
      ::mifare::classic::auth::SamKey::internal_default_instance());
}
class WriteTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<WriteTicket>()._has_bits_);
  static const ::mifare::classic::auth::SamKey& sector(const WriteTicket* msg);
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ticket_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_validate_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mifare::classic::auth::SamKey&
WriteTicket::_Internal::sector(const WriteTicket* msg) {
  return *msg->sector_;
}
void WriteTicket::clear_sector() {
  if (sector_ != nullptr) sector_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
WriteTicket::WriteTicket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:troika.av3.write_ticket.WriteTicket)
}
WriteTicket::WriteTicket(const WriteTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ticket_params()) {
    ticket_params_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ticket_params_);
  }
  validate_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_validate_params()) {
    validate_params_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.validate_params_);
  }
  if (from._internal_has_sector()) {
    sector_ = new ::mifare::classic::auth::SamKey(*from.sector_);
  } else {
    sector_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:troika.av3.write_ticket.WriteTicket)
}

void WriteTicket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteTicket_troika_2fav3_2fwrite_5fticket_2eproto.base);
  ticket_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validate_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sector_ = nullptr;
}

WriteTicket::~WriteTicket() {
  // @@protoc_insertion_point(destructor:troika.av3.write_ticket.WriteTicket)
  SharedDtor();
}

void WriteTicket::SharedDtor() {
  ticket_params_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validate_params_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sector_;
}

void WriteTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteTicket& WriteTicket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteTicket_troika_2fav3_2fwrite_5fticket_2eproto.base);
  return *internal_default_instance();
}


void WriteTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:troika.av3.write_ticket.WriteTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ticket_params_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      validate_params_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sector_ != nullptr);
      sector_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* WriteTicket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mifare.classic.auth.SamKey sector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes ticket_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ticket_params();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes validate_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_validate_params();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteTicket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:troika.av3.write_ticket.WriteTicket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mifare.classic.auth.SamKey sector = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sector(this), target, stream);
  }

  // required bytes ticket_params = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ticket_params(), target);
  }

  // required bytes validate_params = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_validate_params(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:troika.av3.write_ticket.WriteTicket)
  return target;
}

size_t WriteTicket::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:troika.av3.write_ticket.WriteTicket)
  size_t total_size = 0;

  if (_internal_has_ticket_params()) {
    // required bytes ticket_params = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ticket_params());
  }

  if (_internal_has_validate_params()) {
    // required bytes validate_params = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_validate_params());
  }

  if (_internal_has_sector()) {
    // required .mifare.classic.auth.SamKey sector = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sector_);
  }

  return total_size;
}
size_t WriteTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:troika.av3.write_ticket.WriteTicket)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes ticket_params = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ticket_params());

    // required bytes validate_params = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_validate_params());

    // required .mifare.classic.auth.SamKey sector = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sector_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteTicket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:troika.av3.write_ticket.WriteTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteTicket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:troika.av3.write_ticket.WriteTicket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:troika.av3.write_ticket.WriteTicket)
    MergeFrom(*source);
  }
}

void WriteTicket::MergeFrom(const WriteTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:troika.av3.write_ticket.WriteTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ticket_params_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ticket_params_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      validate_params_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.validate_params_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_sector()->::mifare::classic::auth::SamKey::MergeFrom(from._internal_sector());
    }
  }
}

void WriteTicket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:troika.av3.write_ticket.WriteTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteTicket::CopyFrom(const WriteTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:troika.av3.write_ticket.WriteTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteTicket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (_internal_has_sector()) {
    if (!sector_->IsInitialized()) return false;
  }
  return true;
}

void WriteTicket::InternalSwap(WriteTicket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ticket_params_.Swap(&other->ticket_params_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  validate_params_.Swap(&other->validate_params_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sector_, other->sector_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteTicket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteResult::InitAsDefaultInstance() {
}
class WriteResult::_Internal {
 public:
  using HasBits = decltype(std::declval<WriteResult>()._has_bits_);
  static void set_has_sector_bitmap(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_write_ok(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WriteResult::WriteResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:troika.av3.write_ticket.WriteResult)
}
WriteResult::WriteResult(const WriteResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sector_bitmap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sector_bitmap()) {
    sector_bitmap_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sector_bitmap_);
  }
  write_ok_ = from.write_ok_;
  // @@protoc_insertion_point(copy_constructor:troika.av3.write_ticket.WriteResult)
}

void WriteResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteResult_troika_2fav3_2fwrite_5fticket_2eproto.base);
  sector_bitmap_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_ok_ = false;
}

WriteResult::~WriteResult() {
  // @@protoc_insertion_point(destructor:troika.av3.write_ticket.WriteResult)
  SharedDtor();
}

void WriteResult::SharedDtor() {
  sector_bitmap_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteResult& WriteResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteResult_troika_2fav3_2fwrite_5fticket_2eproto.base);
  return *internal_default_instance();
}


void WriteResult::Clear() {
// @@protoc_insertion_point(message_clear_start:troika.av3.write_ticket.WriteResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sector_bitmap_.ClearNonDefaultToEmptyNoArena();
  }
  write_ok_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* WriteResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes sector_bitmap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sector_bitmap();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool write_ok = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_write_ok(&has_bits);
          write_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:troika.av3.write_ticket.WriteResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes sector_bitmap = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sector_bitmap(), target);
  }

  // required bool write_ok = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_write_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:troika.av3.write_ticket.WriteResult)
  return target;
}

size_t WriteResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:troika.av3.write_ticket.WriteResult)
  size_t total_size = 0;

  if (_internal_has_sector_bitmap()) {
    // required bytes sector_bitmap = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sector_bitmap());
  }

  if (_internal_has_write_ok()) {
    // required bool write_ok = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t WriteResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:troika.av3.write_ticket.WriteResult)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes sector_bitmap = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sector_bitmap());

    // required bool write_ok = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:troika.av3.write_ticket.WriteResult)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:troika.av3.write_ticket.WriteResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:troika.av3.write_ticket.WriteResult)
    MergeFrom(*source);
  }
}

void WriteResult::MergeFrom(const WriteResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:troika.av3.write_ticket.WriteResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sector_bitmap_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sector_bitmap_);
    }
    if (cached_has_bits & 0x00000002u) {
      write_ok_ = from.write_ok_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WriteResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:troika.av3.write_ticket.WriteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteResult::CopyFrom(const WriteResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:troika.av3.write_ticket.WriteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void WriteResult::InternalSwap(WriteResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sector_bitmap_.Swap(&other->sector_bitmap_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(write_ok_, other->write_ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace write_ticket
}  // namespace av3
}  // namespace troika
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::troika::av3::write_ticket::WriteTicket* Arena::CreateMaybeMessage< ::troika::av3::write_ticket::WriteTicket >(Arena* arena) {
  return Arena::CreateInternal< ::troika::av3::write_ticket::WriteTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::troika::av3::write_ticket::WriteResult* Arena::CreateMaybeMessage< ::troika::av3::write_ticket::WriteResult >(Arena* arena) {
  return Arena::CreateInternal< ::troika::av3::write_ticket::WriteResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
