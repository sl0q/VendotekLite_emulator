// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands4.proto

#include "commands4.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_contact_2fiso7816_5f4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransmitApdu_contact_2fiso7816_5f4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contact_2fpower_5foff_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerOffCard_contact_2fpower_5foff_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contact_2fpower_5fon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerOnCard_contact_2fpower_5fon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2femv_5fremoval_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmvRemoval_contactless_2femv_5fremoval_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2fiso14443_5f4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Command_contactless_2fiso14443_5f4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2fiso14443_5f4a_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestForAnswerToSelect_contactless_2fiso14443_5f4a_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2fpoll_5ffor_5ftoken_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PollForToken_contactless_2fpoll_5ffor_5ftoken_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2frf_5ffield_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerOffField_contactless_2frf_5ffield_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerformTransaction_contactless_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2ftransceive_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransceiveBitArray_contactless_2ftransceive_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2fbaudrate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeBaudrate_misc_2fbaudrate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2fbuzzer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MakeSound_misc_2fbuzzer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDeviceStatus_misc_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadDeviceInfo_misc_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2fecho_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEcho_misc_2fecho_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2flan_5fsettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChangeLanSettings_misc_2flan_5fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2fleds_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Leds_misc_2fleds_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2freboot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Reboot_misc_2freboot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDeviceStatistic_misc_2fstats_2eproto;
class MiscellaneousDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Miscellaneous> _instance;
  const ::misc::leds::Leds* set_leds_state_;
  const ::misc::device::ReadDeviceInfo* read_device_info_;
  const ::misc::reboot::Reboot* reboot_device_;
  const ::misc::device::GetDeviceStatus* get_device_status_;
  const ::misc::buzzer::MakeSound* make_sound_;
  const ::misc::stats::GetDeviceStatistic* get_device_statistic_;
  const ::misc::echo::GetEcho* get_echo_;
  const ::misc::baudrate::ChangeBaudrate* change_baudrate_;
  const ::misc::lan_settings::ChangeLanSettings* change_lan_settings_;
} _Miscellaneous_default_instance_;
class ContactlessLevel1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContactlessLevel1> _instance;
  const ::contactless::poll::PollForToken* poll_for_token_;
  const ::contactless::emv_removal::EmvRemoval* emv_removal_;
  const ::contactless::transceive::TransceiveBitArray* tsv_bit_array_;
  const ::contactless::iso14443_4::Command* iso14443_4_command_;
  const ::contactless::rf_field::PowerOffField* power_off_field_;
  const ::contactless::iso14443_4a::RequestForAnswerToSelect* request_for_ats_;
} _ContactlessLevel1_default_instance_;
class ContactlessLevel2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContactlessLevel2> _instance;
  const ::contactless::transaction::PerformTransaction* perform_transaction_;
} _ContactlessLevel2_default_instance_;
class ContactLevel1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContactLevel1> _instance;
  const ::contact::power_on::PowerOnCard* power_on_card_;
  const ::contact::power_off::PowerOffCard* power_off_card_;
  const ::contact::iso7816_4::TransmitApdu* transmit_apdu_;
} _ContactLevel1_default_instance_;
static void InitDefaultsscc_info_ContactLevel1_commands4_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContactLevel1_default_instance_;
    new (ptr) ::ContactLevel1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContactLevel1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ContactLevel1_commands4_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ContactLevel1_commands4_2eproto}, {
      &scc_info_PowerOnCard_contact_2fpower_5fon_2eproto.base,
      &scc_info_PowerOffCard_contact_2fpower_5foff_2eproto.base,
      &scc_info_TransmitApdu_contact_2fiso7816_5f4_2eproto.base,}};

static void InitDefaultsscc_info_ContactlessLevel1_commands4_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContactlessLevel1_default_instance_;
    new (ptr) ::ContactlessLevel1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContactlessLevel1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ContactlessLevel1_commands4_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ContactlessLevel1_commands4_2eproto}, {
      &scc_info_PollForToken_contactless_2fpoll_5ffor_5ftoken_2eproto.base,
      &scc_info_EmvRemoval_contactless_2femv_5fremoval_2eproto.base,
      &scc_info_TransceiveBitArray_contactless_2ftransceive_2eproto.base,
      &scc_info_Command_contactless_2fiso14443_5f4_2eproto.base,
      &scc_info_PowerOffField_contactless_2frf_5ffield_2eproto.base,
      &scc_info_RequestForAnswerToSelect_contactless_2fiso14443_5f4a_2eproto.base,}};

static void InitDefaultsscc_info_ContactlessLevel2_commands4_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContactlessLevel2_default_instance_;
    new (ptr) ::ContactlessLevel2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContactlessLevel2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContactlessLevel2_commands4_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContactlessLevel2_commands4_2eproto}, {
      &scc_info_PerformTransaction_contactless_2ftransaction_2eproto.base,}};

static void InitDefaultsscc_info_Miscellaneous_commands4_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Miscellaneous_default_instance_;
    new (ptr) ::Miscellaneous();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Miscellaneous::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Miscellaneous_commands4_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_Miscellaneous_commands4_2eproto}, {
      &scc_info_Leds_misc_2fleds_2eproto.base,
      &scc_info_ReadDeviceInfo_misc_2fdevice_2eproto.base,
      &scc_info_Reboot_misc_2freboot_2eproto.base,
      &scc_info_GetDeviceStatus_misc_2fdevice_2eproto.base,
      &scc_info_MakeSound_misc_2fbuzzer_2eproto.base,
      &scc_info_GetDeviceStatistic_misc_2fstats_2eproto.base,
      &scc_info_GetEcho_misc_2fecho_2eproto.base,
      &scc_info_ChangeBaudrate_misc_2fbaudrate_2eproto.base,
      &scc_info_ChangeLanSettings_misc_2flan_5fsettings_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_commands4_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_commands4_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_commands4_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_commands4_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Miscellaneous, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Miscellaneous, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Miscellaneous, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::MiscellaneousDefaultTypeInternal, set_leds_state_),
  offsetof(::MiscellaneousDefaultTypeInternal, read_device_info_),
  offsetof(::MiscellaneousDefaultTypeInternal, reboot_device_),
  offsetof(::MiscellaneousDefaultTypeInternal, get_device_status_),
  offsetof(::MiscellaneousDefaultTypeInternal, make_sound_),
  offsetof(::MiscellaneousDefaultTypeInternal, get_device_statistic_),
  offsetof(::MiscellaneousDefaultTypeInternal, get_echo_),
  offsetof(::MiscellaneousDefaultTypeInternal, change_baudrate_),
  offsetof(::MiscellaneousDefaultTypeInternal, change_lan_settings_),
  PROTOBUF_FIELD_OFFSET(::Miscellaneous, misc_cmd_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ContactlessLevel1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContactlessLevel1, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ContactlessLevel1, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ContactlessLevel1DefaultTypeInternal, poll_for_token_),
  offsetof(::ContactlessLevel1DefaultTypeInternal, emv_removal_),
  offsetof(::ContactlessLevel1DefaultTypeInternal, tsv_bit_array_),
  offsetof(::ContactlessLevel1DefaultTypeInternal, iso14443_4_command_),
  offsetof(::ContactlessLevel1DefaultTypeInternal, power_off_field_),
  offsetof(::ContactlessLevel1DefaultTypeInternal, request_for_ats_),
  PROTOBUF_FIELD_OFFSET(::ContactlessLevel1, contactless_level1_cmd_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ContactlessLevel2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContactlessLevel2, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ContactlessLevel2, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ContactlessLevel2DefaultTypeInternal, perform_transaction_),
  PROTOBUF_FIELD_OFFSET(::ContactlessLevel2, contactless_level2_cmd_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ContactLevel1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContactLevel1, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ContactLevel1, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ContactLevel1DefaultTypeInternal, power_on_card_),
  offsetof(::ContactLevel1DefaultTypeInternal, power_off_card_),
  offsetof(::ContactLevel1DefaultTypeInternal, transmit_apdu_),
  PROTOBUF_FIELD_OFFSET(::ContactLevel1, contact_level1_cmd_),
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::Miscellaneous)},
  { 24, 36, sizeof(::ContactlessLevel1)},
  { 42, 49, sizeof(::ContactlessLevel2)},
  { 50, 59, sizeof(::ContactLevel1)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Miscellaneous_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ContactlessLevel1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ContactlessLevel2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ContactLevel1_default_instance_),
};

const char descriptor_table_protodef_commands4_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017commands4.proto\032\017misc/leds.proto\032\021misc"
  "/device.proto\032\021misc/reboot.proto\032\021misc/b"
  "uzzer.proto\032\020misc/stats.proto\032\017misc/echo"
  ".proto\032\023misc/baudrate.proto\032\027misc/lan_se"
  "ttings.proto\032 contactless/poll_for_token"
  ".proto\032\035contactless/transaction.proto\032\035c"
  "ontactless/emv_removal.proto\032\034contactles"
  "s/transceive.proto\032\034contactless/iso14443"
  "_4.proto\032\035contactless/iso14443_4a.proto\032"
  "\032contactless/rf_field.proto\032\026contact/pow"
  "er_on.proto\032\027contact/power_off.proto\032\027co"
  "ntact/iso7816_4.proto\"\375\003\n\rMiscellaneous\022"
  ")\n\016set_leds_state\030\001 \001(\0132\017.misc.leds.Leds"
  "H\000\0227\n\020read_device_info\030\002 \001(\0132\033.misc.devi"
  "ce.ReadDeviceInfoH\000\022,\n\rreboot_device\030\003 \001"
  "(\0132\023.misc.reboot.RebootH\000\0229\n\021get_device_"
  "status\030\004 \001(\0132\034.misc.device.GetDeviceStat"
  "usH\000\022,\n\nmake_sound\030\006 \001(\0132\026.misc.buzzer.M"
  "akeSoundH\000\022>\n\024get_device_statistic\030\007 \001(\013"
  "2\036.misc.stats.GetDeviceStatisticH\000\022&\n\010ge"
  "t_echo\030\010 \001(\0132\022.misc.echo.GetEchoH\000\0228\n\017ch"
  "ange_baudrate\030\t \001(\0132\035.misc.baudrate.Chan"
  "geBaudrateH\000\022C\n\023change_lan_settings\030\n \001("
  "\0132$.misc.lan_settings.ChangeLanSettingsH"
  "\000B\n\n\010misc_cmd\"\265\003\n\021ContactlessLevel1\0228\n\016p"
  "oll_for_token\030\001 \001(\0132\036.contactless.poll.P"
  "ollForTokenH\000\022:\n\013emv_removal\030\002 \001(\0132#.con"
  "tactless.emv_removal.EmvRemovalH\000\022C\n\rtsv"
  "_bit_array\030\003 \001(\0132*.contactless.transceiv"
  "e.TransceiveBitArrayH\000\022=\n\022iso14443_4_com"
  "mand\030\004 \001(\0132\037.contactless.iso14443_4.Comm"
  "andH\000\022>\n\017power_off_field\030\005 \001(\0132#.contact"
  "less.rf_field.PowerOffFieldH\000\022L\n\017request"
  "_for_ats\030\006 \001(\01321.contactless.iso14443_4a"
  ".RequestForAnswerToSelectH\000B\030\n\026contactle"
  "ss_level1_cmd\"y\n\021ContactlessLevel2\022J\n\023pe"
  "rform_transaction\030\001 \001(\0132+.contactless.tr"
  "ansaction.PerformTransactionH\000B\030\n\026contac"
  "tless_level2_cmd\"\322\001\n\rContactLevel1\0226\n\rpo"
  "wer_on_card\030\001 \001(\0132\035.contact.power_on.Pow"
  "erOnCardH\000\0229\n\016power_off_card\030\002 \001(\0132\037.con"
  "tact.power_off.PowerOffCardH\000\0228\n\rtransmi"
  "t_apdu\030\003 \001(\0132\037.contact.iso7816_4.Transmi"
  "tApduH\000B\024\n\022contact_level1_cmd"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_commands4_2eproto_deps[18] = {
  &::descriptor_table_contact_2fiso7816_5f4_2eproto,
  &::descriptor_table_contact_2fpower_5foff_2eproto,
  &::descriptor_table_contact_2fpower_5fon_2eproto,
  &::descriptor_table_contactless_2femv_5fremoval_2eproto,
  &::descriptor_table_contactless_2fiso14443_5f4_2eproto,
  &::descriptor_table_contactless_2fiso14443_5f4a_2eproto,
  &::descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto,
  &::descriptor_table_contactless_2frf_5ffield_2eproto,
  &::descriptor_table_contactless_2ftransaction_2eproto,
  &::descriptor_table_contactless_2ftransceive_2eproto,
  &::descriptor_table_misc_2fbaudrate_2eproto,
  &::descriptor_table_misc_2fbuzzer_2eproto,
  &::descriptor_table_misc_2fdevice_2eproto,
  &::descriptor_table_misc_2fecho_2eproto,
  &::descriptor_table_misc_2flan_5fsettings_2eproto,
  &::descriptor_table_misc_2fleds_2eproto,
  &::descriptor_table_misc_2freboot_2eproto,
  &::descriptor_table_misc_2fstats_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_commands4_2eproto_sccs[4] = {
  &scc_info_ContactLevel1_commands4_2eproto.base,
  &scc_info_ContactlessLevel1_commands4_2eproto.base,
  &scc_info_ContactlessLevel2_commands4_2eproto.base,
  &scc_info_Miscellaneous_commands4_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_commands4_2eproto_once;
static bool descriptor_table_commands4_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commands4_2eproto = {
  &descriptor_table_commands4_2eproto_initialized, descriptor_table_protodef_commands4_2eproto, "commands4.proto", 1749,
  &descriptor_table_commands4_2eproto_once, descriptor_table_commands4_2eproto_sccs, descriptor_table_commands4_2eproto_deps, 4, 18,
  schemas, file_default_instances, TableStruct_commands4_2eproto::offsets,
  file_level_metadata_commands4_2eproto, 4, file_level_enum_descriptors_commands4_2eproto, file_level_service_descriptors_commands4_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_commands4_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_commands4_2eproto), true);

// ===================================================================

void Miscellaneous::InitAsDefaultInstance() {
  ::_Miscellaneous_default_instance_.set_leds_state_ = const_cast< ::misc::leds::Leds*>(
      ::misc::leds::Leds::internal_default_instance());
  ::_Miscellaneous_default_instance_.read_device_info_ = const_cast< ::misc::device::ReadDeviceInfo*>(
      ::misc::device::ReadDeviceInfo::internal_default_instance());
  ::_Miscellaneous_default_instance_.reboot_device_ = const_cast< ::misc::reboot::Reboot*>(
      ::misc::reboot::Reboot::internal_default_instance());
  ::_Miscellaneous_default_instance_.get_device_status_ = const_cast< ::misc::device::GetDeviceStatus*>(
      ::misc::device::GetDeviceStatus::internal_default_instance());
  ::_Miscellaneous_default_instance_.make_sound_ = const_cast< ::misc::buzzer::MakeSound*>(
      ::misc::buzzer::MakeSound::internal_default_instance());
  ::_Miscellaneous_default_instance_.get_device_statistic_ = const_cast< ::misc::stats::GetDeviceStatistic*>(
      ::misc::stats::GetDeviceStatistic::internal_default_instance());
  ::_Miscellaneous_default_instance_.get_echo_ = const_cast< ::misc::echo::GetEcho*>(
      ::misc::echo::GetEcho::internal_default_instance());
  ::_Miscellaneous_default_instance_.change_baudrate_ = const_cast< ::misc::baudrate::ChangeBaudrate*>(
      ::misc::baudrate::ChangeBaudrate::internal_default_instance());
  ::_Miscellaneous_default_instance_.change_lan_settings_ = const_cast< ::misc::lan_settings::ChangeLanSettings*>(
      ::misc::lan_settings::ChangeLanSettings::internal_default_instance());
}
class Miscellaneous::_Internal {
 public:
  using HasBits = decltype(std::declval<Miscellaneous>()._has_bits_);
  static const ::misc::leds::Leds& set_leds_state(const Miscellaneous* msg);
  static const ::misc::device::ReadDeviceInfo& read_device_info(const Miscellaneous* msg);
  static const ::misc::reboot::Reboot& reboot_device(const Miscellaneous* msg);
  static const ::misc::device::GetDeviceStatus& get_device_status(const Miscellaneous* msg);
  static const ::misc::buzzer::MakeSound& make_sound(const Miscellaneous* msg);
  static const ::misc::stats::GetDeviceStatistic& get_device_statistic(const Miscellaneous* msg);
  static const ::misc::echo::GetEcho& get_echo(const Miscellaneous* msg);
  static const ::misc::baudrate::ChangeBaudrate& change_baudrate(const Miscellaneous* msg);
  static const ::misc::lan_settings::ChangeLanSettings& change_lan_settings(const Miscellaneous* msg);
};

const ::misc::leds::Leds&
Miscellaneous::_Internal::set_leds_state(const Miscellaneous* msg) {
  return *msg->misc_cmd_.set_leds_state_;
}
const ::misc::device::ReadDeviceInfo&
Miscellaneous::_Internal::read_device_info(const Miscellaneous* msg) {
  return *msg->misc_cmd_.read_device_info_;
}
const ::misc::reboot::Reboot&
Miscellaneous::_Internal::reboot_device(const Miscellaneous* msg) {
  return *msg->misc_cmd_.reboot_device_;
}
const ::misc::device::GetDeviceStatus&
Miscellaneous::_Internal::get_device_status(const Miscellaneous* msg) {
  return *msg->misc_cmd_.get_device_status_;
}
const ::misc::buzzer::MakeSound&
Miscellaneous::_Internal::make_sound(const Miscellaneous* msg) {
  return *msg->misc_cmd_.make_sound_;
}
const ::misc::stats::GetDeviceStatistic&
Miscellaneous::_Internal::get_device_statistic(const Miscellaneous* msg) {
  return *msg->misc_cmd_.get_device_statistic_;
}
const ::misc::echo::GetEcho&
Miscellaneous::_Internal::get_echo(const Miscellaneous* msg) {
  return *msg->misc_cmd_.get_echo_;
}
const ::misc::baudrate::ChangeBaudrate&
Miscellaneous::_Internal::change_baudrate(const Miscellaneous* msg) {
  return *msg->misc_cmd_.change_baudrate_;
}
const ::misc::lan_settings::ChangeLanSettings&
Miscellaneous::_Internal::change_lan_settings(const Miscellaneous* msg) {
  return *msg->misc_cmd_.change_lan_settings_;
}
void Miscellaneous::set_allocated_set_leds_state(::misc::leds::Leds* set_leds_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (set_leds_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      set_leds_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_leds_state, submessage_arena);
    }
    set_has_set_leds_state();
    misc_cmd_.set_leds_state_ = set_leds_state;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.set_leds_state)
}
void Miscellaneous::clear_set_leds_state() {
  if (_internal_has_set_leds_state()) {
    delete misc_cmd_.set_leds_state_;
    clear_has_misc_cmd();
  }
}
void Miscellaneous::set_allocated_read_device_info(::misc::device::ReadDeviceInfo* read_device_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (read_device_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      read_device_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_device_info, submessage_arena);
    }
    set_has_read_device_info();
    misc_cmd_.read_device_info_ = read_device_info;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.read_device_info)
}
void Miscellaneous::clear_read_device_info() {
  if (_internal_has_read_device_info()) {
    delete misc_cmd_.read_device_info_;
    clear_has_misc_cmd();
  }
}
void Miscellaneous::set_allocated_reboot_device(::misc::reboot::Reboot* reboot_device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (reboot_device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reboot_device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reboot_device, submessage_arena);
    }
    set_has_reboot_device();
    misc_cmd_.reboot_device_ = reboot_device;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.reboot_device)
}
void Miscellaneous::clear_reboot_device() {
  if (_internal_has_reboot_device()) {
    delete misc_cmd_.reboot_device_;
    clear_has_misc_cmd();
  }
}
void Miscellaneous::set_allocated_get_device_status(::misc::device::GetDeviceStatus* get_device_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (get_device_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_device_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_device_status, submessage_arena);
    }
    set_has_get_device_status();
    misc_cmd_.get_device_status_ = get_device_status;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.get_device_status)
}
void Miscellaneous::clear_get_device_status() {
  if (_internal_has_get_device_status()) {
    delete misc_cmd_.get_device_status_;
    clear_has_misc_cmd();
  }
}
void Miscellaneous::set_allocated_make_sound(::misc::buzzer::MakeSound* make_sound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (make_sound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      make_sound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, make_sound, submessage_arena);
    }
    set_has_make_sound();
    misc_cmd_.make_sound_ = make_sound;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.make_sound)
}
void Miscellaneous::clear_make_sound() {
  if (_internal_has_make_sound()) {
    delete misc_cmd_.make_sound_;
    clear_has_misc_cmd();
  }
}
void Miscellaneous::set_allocated_get_device_statistic(::misc::stats::GetDeviceStatistic* get_device_statistic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (get_device_statistic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_device_statistic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_device_statistic, submessage_arena);
    }
    set_has_get_device_statistic();
    misc_cmd_.get_device_statistic_ = get_device_statistic;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.get_device_statistic)
}
void Miscellaneous::clear_get_device_statistic() {
  if (_internal_has_get_device_statistic()) {
    delete misc_cmd_.get_device_statistic_;
    clear_has_misc_cmd();
  }
}
void Miscellaneous::set_allocated_get_echo(::misc::echo::GetEcho* get_echo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (get_echo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_echo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_echo, submessage_arena);
    }
    set_has_get_echo();
    misc_cmd_.get_echo_ = get_echo;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.get_echo)
}
void Miscellaneous::clear_get_echo() {
  if (_internal_has_get_echo()) {
    delete misc_cmd_.get_echo_;
    clear_has_misc_cmd();
  }
}
void Miscellaneous::set_allocated_change_baudrate(::misc::baudrate::ChangeBaudrate* change_baudrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (change_baudrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      change_baudrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_baudrate, submessage_arena);
    }
    set_has_change_baudrate();
    misc_cmd_.change_baudrate_ = change_baudrate;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.change_baudrate)
}
void Miscellaneous::clear_change_baudrate() {
  if (_internal_has_change_baudrate()) {
    delete misc_cmd_.change_baudrate_;
    clear_has_misc_cmd();
  }
}
void Miscellaneous::set_allocated_change_lan_settings(::misc::lan_settings::ChangeLanSettings* change_lan_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (change_lan_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      change_lan_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_lan_settings, submessage_arena);
    }
    set_has_change_lan_settings();
    misc_cmd_.change_lan_settings_ = change_lan_settings;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.change_lan_settings)
}
void Miscellaneous::clear_change_lan_settings() {
  if (_internal_has_change_lan_settings()) {
    delete misc_cmd_.change_lan_settings_;
    clear_has_misc_cmd();
  }
}
Miscellaneous::Miscellaneous()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Miscellaneous)
}
Miscellaneous::Miscellaneous(const Miscellaneous& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_misc_cmd();
  switch (from.misc_cmd_case()) {
    case kSetLedsState: {
      _internal_mutable_set_leds_state()->::misc::leds::Leds::MergeFrom(from._internal_set_leds_state());
      break;
    }
    case kReadDeviceInfo: {
      _internal_mutable_read_device_info()->::misc::device::ReadDeviceInfo::MergeFrom(from._internal_read_device_info());
      break;
    }
    case kRebootDevice: {
      _internal_mutable_reboot_device()->::misc::reboot::Reboot::MergeFrom(from._internal_reboot_device());
      break;
    }
    case kGetDeviceStatus: {
      _internal_mutable_get_device_status()->::misc::device::GetDeviceStatus::MergeFrom(from._internal_get_device_status());
      break;
    }
    case kMakeSound: {
      _internal_mutable_make_sound()->::misc::buzzer::MakeSound::MergeFrom(from._internal_make_sound());
      break;
    }
    case kGetDeviceStatistic: {
      _internal_mutable_get_device_statistic()->::misc::stats::GetDeviceStatistic::MergeFrom(from._internal_get_device_statistic());
      break;
    }
    case kGetEcho: {
      _internal_mutable_get_echo()->::misc::echo::GetEcho::MergeFrom(from._internal_get_echo());
      break;
    }
    case kChangeBaudrate: {
      _internal_mutable_change_baudrate()->::misc::baudrate::ChangeBaudrate::MergeFrom(from._internal_change_baudrate());
      break;
    }
    case kChangeLanSettings: {
      _internal_mutable_change_lan_settings()->::misc::lan_settings::ChangeLanSettings::MergeFrom(from._internal_change_lan_settings());
      break;
    }
    case MISC_CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Miscellaneous)
}

void Miscellaneous::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Miscellaneous_commands4_2eproto.base);
  clear_has_misc_cmd();
}

Miscellaneous::~Miscellaneous() {
  // @@protoc_insertion_point(destructor:Miscellaneous)
  SharedDtor();
}

void Miscellaneous::SharedDtor() {
  if (has_misc_cmd()) {
    clear_misc_cmd();
  }
}

void Miscellaneous::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Miscellaneous& Miscellaneous::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Miscellaneous_commands4_2eproto.base);
  return *internal_default_instance();
}


void Miscellaneous::clear_misc_cmd() {
// @@protoc_insertion_point(one_of_clear_start:Miscellaneous)
  switch (misc_cmd_case()) {
    case kSetLedsState: {
      delete misc_cmd_.set_leds_state_;
      break;
    }
    case kReadDeviceInfo: {
      delete misc_cmd_.read_device_info_;
      break;
    }
    case kRebootDevice: {
      delete misc_cmd_.reboot_device_;
      break;
    }
    case kGetDeviceStatus: {
      delete misc_cmd_.get_device_status_;
      break;
    }
    case kMakeSound: {
      delete misc_cmd_.make_sound_;
      break;
    }
    case kGetDeviceStatistic: {
      delete misc_cmd_.get_device_statistic_;
      break;
    }
    case kGetEcho: {
      delete misc_cmd_.get_echo_;
      break;
    }
    case kChangeBaudrate: {
      delete misc_cmd_.change_baudrate_;
      break;
    }
    case kChangeLanSettings: {
      delete misc_cmd_.change_lan_settings_;
      break;
    }
    case MISC_CMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MISC_CMD_NOT_SET;
}


void Miscellaneous::Clear() {
// @@protoc_insertion_point(message_clear_start:Miscellaneous)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_misc_cmd();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Miscellaneous::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .misc.leds.Leds set_leds_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_leds_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.device.ReadDeviceInfo read_device_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_device_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.reboot.Reboot reboot_device = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reboot_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.device.GetDeviceStatus get_device_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_device_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.buzzer.MakeSound make_sound = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_make_sound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.stats.GetDeviceStatistic get_device_statistic = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_device_statistic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.echo.GetEcho get_echo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_echo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.baudrate.ChangeBaudrate change_baudrate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_baudrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.lan_settings.ChangeLanSettings change_lan_settings = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_lan_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Miscellaneous::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Miscellaneous)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (misc_cmd_case()) {
    case kSetLedsState: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::set_leds_state(this), target, stream);
      break;
    }
    case kReadDeviceInfo: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::read_device_info(this), target, stream);
      break;
    }
    case kRebootDevice: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::reboot_device(this), target, stream);
      break;
    }
    case kGetDeviceStatus: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::get_device_status(this), target, stream);
      break;
    }
    case kMakeSound: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::make_sound(this), target, stream);
      break;
    }
    case kGetDeviceStatistic: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::get_device_statistic(this), target, stream);
      break;
    }
    case kGetEcho: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::get_echo(this), target, stream);
      break;
    }
    case kChangeBaudrate: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::change_baudrate(this), target, stream);
      break;
    }
    case kChangeLanSettings: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::change_lan_settings(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Miscellaneous)
  return target;
}

size_t Miscellaneous::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Miscellaneous)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (misc_cmd_case()) {
    // optional .misc.leds.Leds set_leds_state = 1;
    case kSetLedsState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.set_leds_state_);
      break;
    }
    // optional .misc.device.ReadDeviceInfo read_device_info = 2;
    case kReadDeviceInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.read_device_info_);
      break;
    }
    // optional .misc.reboot.Reboot reboot_device = 3;
    case kRebootDevice: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.reboot_device_);
      break;
    }
    // optional .misc.device.GetDeviceStatus get_device_status = 4;
    case kGetDeviceStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.get_device_status_);
      break;
    }
    // optional .misc.buzzer.MakeSound make_sound = 6;
    case kMakeSound: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.make_sound_);
      break;
    }
    // optional .misc.stats.GetDeviceStatistic get_device_statistic = 7;
    case kGetDeviceStatistic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.get_device_statistic_);
      break;
    }
    // optional .misc.echo.GetEcho get_echo = 8;
    case kGetEcho: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.get_echo_);
      break;
    }
    // optional .misc.baudrate.ChangeBaudrate change_baudrate = 9;
    case kChangeBaudrate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.change_baudrate_);
      break;
    }
    // optional .misc.lan_settings.ChangeLanSettings change_lan_settings = 10;
    case kChangeLanSettings: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.change_lan_settings_);
      break;
    }
    case MISC_CMD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Miscellaneous::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Miscellaneous)
  GOOGLE_DCHECK_NE(&from, this);
  const Miscellaneous* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Miscellaneous>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Miscellaneous)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Miscellaneous)
    MergeFrom(*source);
  }
}

void Miscellaneous::MergeFrom(const Miscellaneous& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Miscellaneous)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.misc_cmd_case()) {
    case kSetLedsState: {
      _internal_mutable_set_leds_state()->::misc::leds::Leds::MergeFrom(from._internal_set_leds_state());
      break;
    }
    case kReadDeviceInfo: {
      _internal_mutable_read_device_info()->::misc::device::ReadDeviceInfo::MergeFrom(from._internal_read_device_info());
      break;
    }
    case kRebootDevice: {
      _internal_mutable_reboot_device()->::misc::reboot::Reboot::MergeFrom(from._internal_reboot_device());
      break;
    }
    case kGetDeviceStatus: {
      _internal_mutable_get_device_status()->::misc::device::GetDeviceStatus::MergeFrom(from._internal_get_device_status());
      break;
    }
    case kMakeSound: {
      _internal_mutable_make_sound()->::misc::buzzer::MakeSound::MergeFrom(from._internal_make_sound());
      break;
    }
    case kGetDeviceStatistic: {
      _internal_mutable_get_device_statistic()->::misc::stats::GetDeviceStatistic::MergeFrom(from._internal_get_device_statistic());
      break;
    }
    case kGetEcho: {
      _internal_mutable_get_echo()->::misc::echo::GetEcho::MergeFrom(from._internal_get_echo());
      break;
    }
    case kChangeBaudrate: {
      _internal_mutable_change_baudrate()->::misc::baudrate::ChangeBaudrate::MergeFrom(from._internal_change_baudrate());
      break;
    }
    case kChangeLanSettings: {
      _internal_mutable_change_lan_settings()->::misc::lan_settings::ChangeLanSettings::MergeFrom(from._internal_change_lan_settings());
      break;
    }
    case MISC_CMD_NOT_SET: {
      break;
    }
  }
}

void Miscellaneous::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Miscellaneous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Miscellaneous::CopyFrom(const Miscellaneous& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Miscellaneous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Miscellaneous::IsInitialized() const {
  switch (misc_cmd_case()) {
    case kSetLedsState: {
      break;
    }
    case kReadDeviceInfo: {
      break;
    }
    case kRebootDevice: {
      break;
    }
    case kGetDeviceStatus: {
      break;
    }
    case kMakeSound: {
      if (has_make_sound()) {
        if (!this->make_sound().IsInitialized()) return false;
      }
      break;
    }
    case kGetDeviceStatistic: {
      break;
    }
    case kGetEcho: {
      break;
    }
    case kChangeBaudrate: {
      if (has_change_baudrate()) {
        if (!this->change_baudrate().IsInitialized()) return false;
      }
      break;
    }
    case kChangeLanSettings: {
      if (has_change_lan_settings()) {
        if (!this->change_lan_settings().IsInitialized()) return false;
      }
      break;
    }
    case MISC_CMD_NOT_SET: {
      break;
    }
  }
  return true;
}

void Miscellaneous::InternalSwap(Miscellaneous* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(misc_cmd_, other->misc_cmd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Miscellaneous::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContactlessLevel1::InitAsDefaultInstance() {
  ::_ContactlessLevel1_default_instance_.poll_for_token_ = const_cast< ::contactless::poll::PollForToken*>(
      ::contactless::poll::PollForToken::internal_default_instance());
  ::_ContactlessLevel1_default_instance_.emv_removal_ = const_cast< ::contactless::emv_removal::EmvRemoval*>(
      ::contactless::emv_removal::EmvRemoval::internal_default_instance());
  ::_ContactlessLevel1_default_instance_.tsv_bit_array_ = const_cast< ::contactless::transceive::TransceiveBitArray*>(
      ::contactless::transceive::TransceiveBitArray::internal_default_instance());
  ::_ContactlessLevel1_default_instance_.iso14443_4_command_ = const_cast< ::contactless::iso14443_4::Command*>(
      ::contactless::iso14443_4::Command::internal_default_instance());
  ::_ContactlessLevel1_default_instance_.power_off_field_ = const_cast< ::contactless::rf_field::PowerOffField*>(
      ::contactless::rf_field::PowerOffField::internal_default_instance());
  ::_ContactlessLevel1_default_instance_.request_for_ats_ = const_cast< ::contactless::iso14443_4a::RequestForAnswerToSelect*>(
      ::contactless::iso14443_4a::RequestForAnswerToSelect::internal_default_instance());
}
class ContactlessLevel1::_Internal {
 public:
  using HasBits = decltype(std::declval<ContactlessLevel1>()._has_bits_);
  static const ::contactless::poll::PollForToken& poll_for_token(const ContactlessLevel1* msg);
  static const ::contactless::emv_removal::EmvRemoval& emv_removal(const ContactlessLevel1* msg);
  static const ::contactless::transceive::TransceiveBitArray& tsv_bit_array(const ContactlessLevel1* msg);
  static const ::contactless::iso14443_4::Command& iso14443_4_command(const ContactlessLevel1* msg);
  static const ::contactless::rf_field::PowerOffField& power_off_field(const ContactlessLevel1* msg);
  static const ::contactless::iso14443_4a::RequestForAnswerToSelect& request_for_ats(const ContactlessLevel1* msg);
};

const ::contactless::poll::PollForToken&
ContactlessLevel1::_Internal::poll_for_token(const ContactlessLevel1* msg) {
  return *msg->contactless_level1_cmd_.poll_for_token_;
}
const ::contactless::emv_removal::EmvRemoval&
ContactlessLevel1::_Internal::emv_removal(const ContactlessLevel1* msg) {
  return *msg->contactless_level1_cmd_.emv_removal_;
}
const ::contactless::transceive::TransceiveBitArray&
ContactlessLevel1::_Internal::tsv_bit_array(const ContactlessLevel1* msg) {
  return *msg->contactless_level1_cmd_.tsv_bit_array_;
}
const ::contactless::iso14443_4::Command&
ContactlessLevel1::_Internal::iso14443_4_command(const ContactlessLevel1* msg) {
  return *msg->contactless_level1_cmd_.iso14443_4_command_;
}
const ::contactless::rf_field::PowerOffField&
ContactlessLevel1::_Internal::power_off_field(const ContactlessLevel1* msg) {
  return *msg->contactless_level1_cmd_.power_off_field_;
}
const ::contactless::iso14443_4a::RequestForAnswerToSelect&
ContactlessLevel1::_Internal::request_for_ats(const ContactlessLevel1* msg) {
  return *msg->contactless_level1_cmd_.request_for_ats_;
}
void ContactlessLevel1::set_allocated_poll_for_token(::contactless::poll::PollForToken* poll_for_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contactless_level1_cmd();
  if (poll_for_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      poll_for_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poll_for_token, submessage_arena);
    }
    set_has_poll_for_token();
    contactless_level1_cmd_.poll_for_token_ = poll_for_token;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactlessLevel1.poll_for_token)
}
void ContactlessLevel1::clear_poll_for_token() {
  if (_internal_has_poll_for_token()) {
    delete contactless_level1_cmd_.poll_for_token_;
    clear_has_contactless_level1_cmd();
  }
}
void ContactlessLevel1::set_allocated_emv_removal(::contactless::emv_removal::EmvRemoval* emv_removal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contactless_level1_cmd();
  if (emv_removal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      emv_removal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emv_removal, submessage_arena);
    }
    set_has_emv_removal();
    contactless_level1_cmd_.emv_removal_ = emv_removal;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactlessLevel1.emv_removal)
}
void ContactlessLevel1::clear_emv_removal() {
  if (_internal_has_emv_removal()) {
    delete contactless_level1_cmd_.emv_removal_;
    clear_has_contactless_level1_cmd();
  }
}
void ContactlessLevel1::set_allocated_tsv_bit_array(::contactless::transceive::TransceiveBitArray* tsv_bit_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contactless_level1_cmd();
  if (tsv_bit_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tsv_bit_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tsv_bit_array, submessage_arena);
    }
    set_has_tsv_bit_array();
    contactless_level1_cmd_.tsv_bit_array_ = tsv_bit_array;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactlessLevel1.tsv_bit_array)
}
void ContactlessLevel1::clear_tsv_bit_array() {
  if (_internal_has_tsv_bit_array()) {
    delete contactless_level1_cmd_.tsv_bit_array_;
    clear_has_contactless_level1_cmd();
  }
}
void ContactlessLevel1::set_allocated_iso14443_4_command(::contactless::iso14443_4::Command* iso14443_4_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contactless_level1_cmd();
  if (iso14443_4_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      iso14443_4_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iso14443_4_command, submessage_arena);
    }
    set_has_iso14443_4_command();
    contactless_level1_cmd_.iso14443_4_command_ = iso14443_4_command;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactlessLevel1.iso14443_4_command)
}
void ContactlessLevel1::clear_iso14443_4_command() {
  if (_internal_has_iso14443_4_command()) {
    delete contactless_level1_cmd_.iso14443_4_command_;
    clear_has_contactless_level1_cmd();
  }
}
void ContactlessLevel1::set_allocated_power_off_field(::contactless::rf_field::PowerOffField* power_off_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contactless_level1_cmd();
  if (power_off_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      power_off_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_off_field, submessage_arena);
    }
    set_has_power_off_field();
    contactless_level1_cmd_.power_off_field_ = power_off_field;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactlessLevel1.power_off_field)
}
void ContactlessLevel1::clear_power_off_field() {
  if (_internal_has_power_off_field()) {
    delete contactless_level1_cmd_.power_off_field_;
    clear_has_contactless_level1_cmd();
  }
}
void ContactlessLevel1::set_allocated_request_for_ats(::contactless::iso14443_4a::RequestForAnswerToSelect* request_for_ats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contactless_level1_cmd();
  if (request_for_ats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request_for_ats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_for_ats, submessage_arena);
    }
    set_has_request_for_ats();
    contactless_level1_cmd_.request_for_ats_ = request_for_ats;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactlessLevel1.request_for_ats)
}
void ContactlessLevel1::clear_request_for_ats() {
  if (_internal_has_request_for_ats()) {
    delete contactless_level1_cmd_.request_for_ats_;
    clear_has_contactless_level1_cmd();
  }
}
ContactlessLevel1::ContactlessLevel1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContactlessLevel1)
}
ContactlessLevel1::ContactlessLevel1(const ContactlessLevel1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_contactless_level1_cmd();
  switch (from.contactless_level1_cmd_case()) {
    case kPollForToken: {
      _internal_mutable_poll_for_token()->::contactless::poll::PollForToken::MergeFrom(from._internal_poll_for_token());
      break;
    }
    case kEmvRemoval: {
      _internal_mutable_emv_removal()->::contactless::emv_removal::EmvRemoval::MergeFrom(from._internal_emv_removal());
      break;
    }
    case kTsvBitArray: {
      _internal_mutable_tsv_bit_array()->::contactless::transceive::TransceiveBitArray::MergeFrom(from._internal_tsv_bit_array());
      break;
    }
    case kIso144434Command: {
      _internal_mutable_iso14443_4_command()->::contactless::iso14443_4::Command::MergeFrom(from._internal_iso14443_4_command());
      break;
    }
    case kPowerOffField: {
      _internal_mutable_power_off_field()->::contactless::rf_field::PowerOffField::MergeFrom(from._internal_power_off_field());
      break;
    }
    case kRequestForAts: {
      _internal_mutable_request_for_ats()->::contactless::iso14443_4a::RequestForAnswerToSelect::MergeFrom(from._internal_request_for_ats());
      break;
    }
    case CONTACTLESS_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ContactlessLevel1)
}

void ContactlessLevel1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContactlessLevel1_commands4_2eproto.base);
  clear_has_contactless_level1_cmd();
}

ContactlessLevel1::~ContactlessLevel1() {
  // @@protoc_insertion_point(destructor:ContactlessLevel1)
  SharedDtor();
}

void ContactlessLevel1::SharedDtor() {
  if (has_contactless_level1_cmd()) {
    clear_contactless_level1_cmd();
  }
}

void ContactlessLevel1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContactlessLevel1& ContactlessLevel1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContactlessLevel1_commands4_2eproto.base);
  return *internal_default_instance();
}


void ContactlessLevel1::clear_contactless_level1_cmd() {
// @@protoc_insertion_point(one_of_clear_start:ContactlessLevel1)
  switch (contactless_level1_cmd_case()) {
    case kPollForToken: {
      delete contactless_level1_cmd_.poll_for_token_;
      break;
    }
    case kEmvRemoval: {
      delete contactless_level1_cmd_.emv_removal_;
      break;
    }
    case kTsvBitArray: {
      delete contactless_level1_cmd_.tsv_bit_array_;
      break;
    }
    case kIso144434Command: {
      delete contactless_level1_cmd_.iso14443_4_command_;
      break;
    }
    case kPowerOffField: {
      delete contactless_level1_cmd_.power_off_field_;
      break;
    }
    case kRequestForAts: {
      delete contactless_level1_cmd_.request_for_ats_;
      break;
    }
    case CONTACTLESS_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTACTLESS_LEVEL1_CMD_NOT_SET;
}


void ContactlessLevel1::Clear() {
// @@protoc_insertion_point(message_clear_start:ContactlessLevel1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_contactless_level1_cmd();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContactlessLevel1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .contactless.poll.PollForToken poll_for_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_poll_for_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contactless.emv_removal.EmvRemoval emv_removal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_emv_removal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contactless.transceive.TransceiveBitArray tsv_bit_array = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tsv_bit_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contactless.iso14443_4.Command iso14443_4_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_iso14443_4_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contactless.rf_field.PowerOffField power_off_field = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_power_off_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contactless.iso14443_4a.RequestForAnswerToSelect request_for_ats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_for_ats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContactlessLevel1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContactlessLevel1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (contactless_level1_cmd_case()) {
    case kPollForToken: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::poll_for_token(this), target, stream);
      break;
    }
    case kEmvRemoval: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::emv_removal(this), target, stream);
      break;
    }
    case kTsvBitArray: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::tsv_bit_array(this), target, stream);
      break;
    }
    case kIso144434Command: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::iso14443_4_command(this), target, stream);
      break;
    }
    case kPowerOffField: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::power_off_field(this), target, stream);
      break;
    }
    case kRequestForAts: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::request_for_ats(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContactlessLevel1)
  return target;
}

size_t ContactlessLevel1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContactlessLevel1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (contactless_level1_cmd_case()) {
    // optional .contactless.poll.PollForToken poll_for_token = 1;
    case kPollForToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contactless_level1_cmd_.poll_for_token_);
      break;
    }
    // optional .contactless.emv_removal.EmvRemoval emv_removal = 2;
    case kEmvRemoval: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contactless_level1_cmd_.emv_removal_);
      break;
    }
    // optional .contactless.transceive.TransceiveBitArray tsv_bit_array = 3;
    case kTsvBitArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contactless_level1_cmd_.tsv_bit_array_);
      break;
    }
    // optional .contactless.iso14443_4.Command iso14443_4_command = 4;
    case kIso144434Command: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contactless_level1_cmd_.iso14443_4_command_);
      break;
    }
    // optional .contactless.rf_field.PowerOffField power_off_field = 5;
    case kPowerOffField: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contactless_level1_cmd_.power_off_field_);
      break;
    }
    // optional .contactless.iso14443_4a.RequestForAnswerToSelect request_for_ats = 6;
    case kRequestForAts: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contactless_level1_cmd_.request_for_ats_);
      break;
    }
    case CONTACTLESS_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContactlessLevel1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContactlessLevel1)
  GOOGLE_DCHECK_NE(&from, this);
  const ContactlessLevel1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContactlessLevel1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContactlessLevel1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContactlessLevel1)
    MergeFrom(*source);
  }
}

void ContactlessLevel1::MergeFrom(const ContactlessLevel1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContactlessLevel1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.contactless_level1_cmd_case()) {
    case kPollForToken: {
      _internal_mutable_poll_for_token()->::contactless::poll::PollForToken::MergeFrom(from._internal_poll_for_token());
      break;
    }
    case kEmvRemoval: {
      _internal_mutable_emv_removal()->::contactless::emv_removal::EmvRemoval::MergeFrom(from._internal_emv_removal());
      break;
    }
    case kTsvBitArray: {
      _internal_mutable_tsv_bit_array()->::contactless::transceive::TransceiveBitArray::MergeFrom(from._internal_tsv_bit_array());
      break;
    }
    case kIso144434Command: {
      _internal_mutable_iso14443_4_command()->::contactless::iso14443_4::Command::MergeFrom(from._internal_iso14443_4_command());
      break;
    }
    case kPowerOffField: {
      _internal_mutable_power_off_field()->::contactless::rf_field::PowerOffField::MergeFrom(from._internal_power_off_field());
      break;
    }
    case kRequestForAts: {
      _internal_mutable_request_for_ats()->::contactless::iso14443_4a::RequestForAnswerToSelect::MergeFrom(from._internal_request_for_ats());
      break;
    }
    case CONTACTLESS_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
}

void ContactlessLevel1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContactlessLevel1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactlessLevel1::CopyFrom(const ContactlessLevel1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContactlessLevel1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactlessLevel1::IsInitialized() const {
  switch (contactless_level1_cmd_case()) {
    case kPollForToken: {
      break;
    }
    case kEmvRemoval: {
      break;
    }
    case kTsvBitArray: {
      if (has_tsv_bit_array()) {
        if (!this->tsv_bit_array().IsInitialized()) return false;
      }
      break;
    }
    case kIso144434Command: {
      if (has_iso14443_4_command()) {
        if (!this->iso14443_4_command().IsInitialized()) return false;
      }
      break;
    }
    case kPowerOffField: {
      break;
    }
    case kRequestForAts: {
      break;
    }
    case CONTACTLESS_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
  return true;
}

void ContactlessLevel1::InternalSwap(ContactlessLevel1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(contactless_level1_cmd_, other->contactless_level1_cmd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContactlessLevel1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContactlessLevel2::InitAsDefaultInstance() {
  ::_ContactlessLevel2_default_instance_.perform_transaction_ = const_cast< ::contactless::transaction::PerformTransaction*>(
      ::contactless::transaction::PerformTransaction::internal_default_instance());
}
class ContactlessLevel2::_Internal {
 public:
  using HasBits = decltype(std::declval<ContactlessLevel2>()._has_bits_);
  static const ::contactless::transaction::PerformTransaction& perform_transaction(const ContactlessLevel2* msg);
};

const ::contactless::transaction::PerformTransaction&
ContactlessLevel2::_Internal::perform_transaction(const ContactlessLevel2* msg) {
  return *msg->contactless_level2_cmd_.perform_transaction_;
}
void ContactlessLevel2::set_allocated_perform_transaction(::contactless::transaction::PerformTransaction* perform_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contactless_level2_cmd();
  if (perform_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      perform_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perform_transaction, submessage_arena);
    }
    set_has_perform_transaction();
    contactless_level2_cmd_.perform_transaction_ = perform_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactlessLevel2.perform_transaction)
}
void ContactlessLevel2::clear_perform_transaction() {
  if (_internal_has_perform_transaction()) {
    delete contactless_level2_cmd_.perform_transaction_;
    clear_has_contactless_level2_cmd();
  }
}
ContactlessLevel2::ContactlessLevel2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContactlessLevel2)
}
ContactlessLevel2::ContactlessLevel2(const ContactlessLevel2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_contactless_level2_cmd();
  switch (from.contactless_level2_cmd_case()) {
    case kPerformTransaction: {
      _internal_mutable_perform_transaction()->::contactless::transaction::PerformTransaction::MergeFrom(from._internal_perform_transaction());
      break;
    }
    case CONTACTLESS_LEVEL2_CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ContactlessLevel2)
}

void ContactlessLevel2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContactlessLevel2_commands4_2eproto.base);
  clear_has_contactless_level2_cmd();
}

ContactlessLevel2::~ContactlessLevel2() {
  // @@protoc_insertion_point(destructor:ContactlessLevel2)
  SharedDtor();
}

void ContactlessLevel2::SharedDtor() {
  if (has_contactless_level2_cmd()) {
    clear_contactless_level2_cmd();
  }
}

void ContactlessLevel2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContactlessLevel2& ContactlessLevel2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContactlessLevel2_commands4_2eproto.base);
  return *internal_default_instance();
}


void ContactlessLevel2::clear_contactless_level2_cmd() {
// @@protoc_insertion_point(one_of_clear_start:ContactlessLevel2)
  switch (contactless_level2_cmd_case()) {
    case kPerformTransaction: {
      delete contactless_level2_cmd_.perform_transaction_;
      break;
    }
    case CONTACTLESS_LEVEL2_CMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTACTLESS_LEVEL2_CMD_NOT_SET;
}


void ContactlessLevel2::Clear() {
// @@protoc_insertion_point(message_clear_start:ContactlessLevel2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_contactless_level2_cmd();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContactlessLevel2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .contactless.transaction.PerformTransaction perform_transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_perform_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContactlessLevel2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContactlessLevel2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .contactless.transaction.PerformTransaction perform_transaction = 1;
  if (_internal_has_perform_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::perform_transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContactlessLevel2)
  return target;
}

size_t ContactlessLevel2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContactlessLevel2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (contactless_level2_cmd_case()) {
    // optional .contactless.transaction.PerformTransaction perform_transaction = 1;
    case kPerformTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contactless_level2_cmd_.perform_transaction_);
      break;
    }
    case CONTACTLESS_LEVEL2_CMD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContactlessLevel2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContactlessLevel2)
  GOOGLE_DCHECK_NE(&from, this);
  const ContactlessLevel2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContactlessLevel2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContactlessLevel2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContactlessLevel2)
    MergeFrom(*source);
  }
}

void ContactlessLevel2::MergeFrom(const ContactlessLevel2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContactlessLevel2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.contactless_level2_cmd_case()) {
    case kPerformTransaction: {
      _internal_mutable_perform_transaction()->::contactless::transaction::PerformTransaction::MergeFrom(from._internal_perform_transaction());
      break;
    }
    case CONTACTLESS_LEVEL2_CMD_NOT_SET: {
      break;
    }
  }
}

void ContactlessLevel2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContactlessLevel2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactlessLevel2::CopyFrom(const ContactlessLevel2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContactlessLevel2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactlessLevel2::IsInitialized() const {
  switch (contactless_level2_cmd_case()) {
    case kPerformTransaction: {
      if (has_perform_transaction()) {
        if (!this->perform_transaction().IsInitialized()) return false;
      }
      break;
    }
    case CONTACTLESS_LEVEL2_CMD_NOT_SET: {
      break;
    }
  }
  return true;
}

void ContactlessLevel2::InternalSwap(ContactlessLevel2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(contactless_level2_cmd_, other->contactless_level2_cmd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContactlessLevel2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContactLevel1::InitAsDefaultInstance() {
  ::_ContactLevel1_default_instance_.power_on_card_ = const_cast< ::contact::power_on::PowerOnCard*>(
      ::contact::power_on::PowerOnCard::internal_default_instance());
  ::_ContactLevel1_default_instance_.power_off_card_ = const_cast< ::contact::power_off::PowerOffCard*>(
      ::contact::power_off::PowerOffCard::internal_default_instance());
  ::_ContactLevel1_default_instance_.transmit_apdu_ = const_cast< ::contact::iso7816_4::TransmitApdu*>(
      ::contact::iso7816_4::TransmitApdu::internal_default_instance());
}
class ContactLevel1::_Internal {
 public:
  using HasBits = decltype(std::declval<ContactLevel1>()._has_bits_);
  static const ::contact::power_on::PowerOnCard& power_on_card(const ContactLevel1* msg);
  static const ::contact::power_off::PowerOffCard& power_off_card(const ContactLevel1* msg);
  static const ::contact::iso7816_4::TransmitApdu& transmit_apdu(const ContactLevel1* msg);
};

const ::contact::power_on::PowerOnCard&
ContactLevel1::_Internal::power_on_card(const ContactLevel1* msg) {
  return *msg->contact_level1_cmd_.power_on_card_;
}
const ::contact::power_off::PowerOffCard&
ContactLevel1::_Internal::power_off_card(const ContactLevel1* msg) {
  return *msg->contact_level1_cmd_.power_off_card_;
}
const ::contact::iso7816_4::TransmitApdu&
ContactLevel1::_Internal::transmit_apdu(const ContactLevel1* msg) {
  return *msg->contact_level1_cmd_.transmit_apdu_;
}
void ContactLevel1::set_allocated_power_on_card(::contact::power_on::PowerOnCard* power_on_card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contact_level1_cmd();
  if (power_on_card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      power_on_card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_on_card, submessage_arena);
    }
    set_has_power_on_card();
    contact_level1_cmd_.power_on_card_ = power_on_card;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactLevel1.power_on_card)
}
void ContactLevel1::clear_power_on_card() {
  if (_internal_has_power_on_card()) {
    delete contact_level1_cmd_.power_on_card_;
    clear_has_contact_level1_cmd();
  }
}
void ContactLevel1::set_allocated_power_off_card(::contact::power_off::PowerOffCard* power_off_card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contact_level1_cmd();
  if (power_off_card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      power_off_card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_off_card, submessage_arena);
    }
    set_has_power_off_card();
    contact_level1_cmd_.power_off_card_ = power_off_card;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactLevel1.power_off_card)
}
void ContactLevel1::clear_power_off_card() {
  if (_internal_has_power_off_card()) {
    delete contact_level1_cmd_.power_off_card_;
    clear_has_contact_level1_cmd();
  }
}
void ContactLevel1::set_allocated_transmit_apdu(::contact::iso7816_4::TransmitApdu* transmit_apdu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contact_level1_cmd();
  if (transmit_apdu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transmit_apdu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transmit_apdu, submessage_arena);
    }
    set_has_transmit_apdu();
    contact_level1_cmd_.transmit_apdu_ = transmit_apdu;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactLevel1.transmit_apdu)
}
void ContactLevel1::clear_transmit_apdu() {
  if (_internal_has_transmit_apdu()) {
    delete contact_level1_cmd_.transmit_apdu_;
    clear_has_contact_level1_cmd();
  }
}
ContactLevel1::ContactLevel1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContactLevel1)
}
ContactLevel1::ContactLevel1(const ContactLevel1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_contact_level1_cmd();
  switch (from.contact_level1_cmd_case()) {
    case kPowerOnCard: {
      _internal_mutable_power_on_card()->::contact::power_on::PowerOnCard::MergeFrom(from._internal_power_on_card());
      break;
    }
    case kPowerOffCard: {
      _internal_mutable_power_off_card()->::contact::power_off::PowerOffCard::MergeFrom(from._internal_power_off_card());
      break;
    }
    case kTransmitApdu: {
      _internal_mutable_transmit_apdu()->::contact::iso7816_4::TransmitApdu::MergeFrom(from._internal_transmit_apdu());
      break;
    }
    case CONTACT_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ContactLevel1)
}

void ContactLevel1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContactLevel1_commands4_2eproto.base);
  clear_has_contact_level1_cmd();
}

ContactLevel1::~ContactLevel1() {
  // @@protoc_insertion_point(destructor:ContactLevel1)
  SharedDtor();
}

void ContactLevel1::SharedDtor() {
  if (has_contact_level1_cmd()) {
    clear_contact_level1_cmd();
  }
}

void ContactLevel1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContactLevel1& ContactLevel1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContactLevel1_commands4_2eproto.base);
  return *internal_default_instance();
}


void ContactLevel1::clear_contact_level1_cmd() {
// @@protoc_insertion_point(one_of_clear_start:ContactLevel1)
  switch (contact_level1_cmd_case()) {
    case kPowerOnCard: {
      delete contact_level1_cmd_.power_on_card_;
      break;
    }
    case kPowerOffCard: {
      delete contact_level1_cmd_.power_off_card_;
      break;
    }
    case kTransmitApdu: {
      delete contact_level1_cmd_.transmit_apdu_;
      break;
    }
    case CONTACT_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTACT_LEVEL1_CMD_NOT_SET;
}


void ContactLevel1::Clear() {
// @@protoc_insertion_point(message_clear_start:ContactLevel1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_contact_level1_cmd();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContactLevel1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .contact.power_on.PowerOnCard power_on_card = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_power_on_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contact.power_off.PowerOffCard power_off_card = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_power_off_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contact.iso7816_4.TransmitApdu transmit_apdu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transmit_apdu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContactLevel1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContactLevel1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (contact_level1_cmd_case()) {
    case kPowerOnCard: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::power_on_card(this), target, stream);
      break;
    }
    case kPowerOffCard: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::power_off_card(this), target, stream);
      break;
    }
    case kTransmitApdu: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::transmit_apdu(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContactLevel1)
  return target;
}

size_t ContactLevel1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContactLevel1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (contact_level1_cmd_case()) {
    // optional .contact.power_on.PowerOnCard power_on_card = 1;
    case kPowerOnCard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contact_level1_cmd_.power_on_card_);
      break;
    }
    // optional .contact.power_off.PowerOffCard power_off_card = 2;
    case kPowerOffCard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contact_level1_cmd_.power_off_card_);
      break;
    }
    // optional .contact.iso7816_4.TransmitApdu transmit_apdu = 3;
    case kTransmitApdu: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contact_level1_cmd_.transmit_apdu_);
      break;
    }
    case CONTACT_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContactLevel1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContactLevel1)
  GOOGLE_DCHECK_NE(&from, this);
  const ContactLevel1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContactLevel1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContactLevel1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContactLevel1)
    MergeFrom(*source);
  }
}

void ContactLevel1::MergeFrom(const ContactLevel1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContactLevel1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.contact_level1_cmd_case()) {
    case kPowerOnCard: {
      _internal_mutable_power_on_card()->::contact::power_on::PowerOnCard::MergeFrom(from._internal_power_on_card());
      break;
    }
    case kPowerOffCard: {
      _internal_mutable_power_off_card()->::contact::power_off::PowerOffCard::MergeFrom(from._internal_power_off_card());
      break;
    }
    case kTransmitApdu: {
      _internal_mutable_transmit_apdu()->::contact::iso7816_4::TransmitApdu::MergeFrom(from._internal_transmit_apdu());
      break;
    }
    case CONTACT_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
}

void ContactLevel1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContactLevel1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactLevel1::CopyFrom(const ContactLevel1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContactLevel1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactLevel1::IsInitialized() const {
  switch (contact_level1_cmd_case()) {
    case kPowerOnCard: {
      if (has_power_on_card()) {
        if (!this->power_on_card().IsInitialized()) return false;
      }
      break;
    }
    case kPowerOffCard: {
      if (has_power_off_card()) {
        if (!this->power_off_card().IsInitialized()) return false;
      }
      break;
    }
    case kTransmitApdu: {
      if (has_transmit_apdu()) {
        if (!this->transmit_apdu().IsInitialized()) return false;
      }
      break;
    }
    case CONTACT_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
  return true;
}

void ContactLevel1::InternalSwap(ContactLevel1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(contact_level1_cmd_, other->contact_level1_cmd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContactLevel1::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Miscellaneous* Arena::CreateMaybeMessage< ::Miscellaneous >(Arena* arena) {
  return Arena::CreateInternal< ::Miscellaneous >(arena);
}
template<> PROTOBUF_NOINLINE ::ContactlessLevel1* Arena::CreateMaybeMessage< ::ContactlessLevel1 >(Arena* arena) {
  return Arena::CreateInternal< ::ContactlessLevel1 >(arena);
}
template<> PROTOBUF_NOINLINE ::ContactlessLevel2* Arena::CreateMaybeMessage< ::ContactlessLevel2 >(Arena* arena) {
  return Arena::CreateInternal< ::ContactlessLevel2 >(arena);
}
template<> PROTOBUF_NOINLINE ::ContactLevel1* Arena::CreateMaybeMessage< ::ContactLevel1 >(Arena* arena) {
  return Arena::CreateInternal< ::ContactLevel1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
