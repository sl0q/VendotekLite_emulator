// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands7.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_commands7_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_commands7_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "misc/leds.pb.h"
#include "misc/device.pb.h"
#include "misc/reboot.pb.h"
#include "misc/buzzer.pb.h"
#include "misc/stats.pb.h"
#include "misc/echo.pb.h"
#include "misc/baudrate.pb.h"
#include "misc/lan_settings.pb.h"
#include "srv/challenge.pb.h"
#include "srv/protection.pb.h"
#include "srv/firmware_update.pb.h"
#include "srv/diagnostic.pb.h"
#include "srv/upload_config.pb.h"
#include "contactless/poll_for_token.pb.h"
#include "contactless/transaction.pb.h"
#include "contactless/emv_removal.pb.h"
#include "contactless/transceive.pb.h"
#include "contactless/iso14443_4.pb.h"
#include "contactless/iso14443_4a.pb.h"
#include "contactless/rf_field.pb.h"
#include "mifare/classic/auth.pb.h"
#include "mifare/classic/read.pb.h"
#include "mifare/classic/write.pb.h"
#include "mifare/classic/bulk.pb.h"
#include "mifare/classic/counter/commit.pb.h"
#include "mifare/classic/counter/copy.pb.h"
#include "mifare/classic/counter/get.pb.h"
#include "mifare/classic/counter/modify.pb.h"
#include "mifare/classic/counter/set.pb.h"
#include "mifare/classic/sector/read_sector.pb.h"
#include "mifare/classic/sector/write_sector.pb.h"
#include "mifare/plus/auth.pb.h"
#include "mifare/plus/read.pb.h"
#include "mifare/plus/write.pb.h"
#include "mifare/plus/bulk.pb.h"
#include "mifare/plus/counter/commit.pb.h"
#include "mifare/plus/counter/copy.pb.h"
#include "mifare/plus/counter/get.pb.h"
#include "mifare/plus/counter/modify.pb.h"
#include "mifare/plus/counter/set.pb.h"
#include "mifare/av2/host_auth.pb.h"
#include "mifare/av2/change_keyentry.pb.h"
#include "mifare/av2/unlock.pb.h"
#include "mifare/ultralight/read.pb.h"
#include "mifare/ultralight/write.pb.h"
#include "mifare/ultralight/version.pb.h"
#include "mifare/ultralight/bulk.pb.h"
#include "mifare/ultralight/auth.pb.h"
#include "mifare/ultralight/password.pb.h"
#include "mifare/ultralight/counter/get.pb.h"
#include "mifare/ultralight/counter/increment.pb.h"
#include "mifare/generic/get_version.pb.h"
#include "contact/power_on.pb.h"
#include "contact/power_off.pb.h"
#include "contact/iso7816_4.pb.h"
#include "gui/screen.pb.h"
#include "gui/input_dialog.pb.h"
#include "gui/menu_dialog.pb.h"
#include "gui/draw_bitmap.pb.h"
#include "gui/slideshow.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_commands7_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_commands7_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commands7_2eproto;
class ContactLevel1;
class ContactLevel1DefaultTypeInternal;
extern ContactLevel1DefaultTypeInternal _ContactLevel1_default_instance_;
class ContactlessLevel1;
class ContactlessLevel1DefaultTypeInternal;
extern ContactlessLevel1DefaultTypeInternal _ContactlessLevel1_default_instance_;
class ContactlessLevel2;
class ContactlessLevel2DefaultTypeInternal;
extern ContactlessLevel2DefaultTypeInternal _ContactlessLevel2_default_instance_;
class Gui;
class GuiDefaultTypeInternal;
extern GuiDefaultTypeInternal _Gui_default_instance_;
class Mifare;
class MifareDefaultTypeInternal;
extern MifareDefaultTypeInternal _Mifare_default_instance_;
class MifareExtended;
class MifareExtendedDefaultTypeInternal;
extern MifareExtendedDefaultTypeInternal _MifareExtended_default_instance_;
class Miscellaneous;
class MiscellaneousDefaultTypeInternal;
extern MiscellaneousDefaultTypeInternal _Miscellaneous_default_instance_;
class Service;
class ServiceDefaultTypeInternal;
extern ServiceDefaultTypeInternal _Service_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ContactLevel1* Arena::CreateMaybeMessage<::ContactLevel1>(Arena*);
template<> ::ContactlessLevel1* Arena::CreateMaybeMessage<::ContactlessLevel1>(Arena*);
template<> ::ContactlessLevel2* Arena::CreateMaybeMessage<::ContactlessLevel2>(Arena*);
template<> ::Gui* Arena::CreateMaybeMessage<::Gui>(Arena*);
template<> ::Mifare* Arena::CreateMaybeMessage<::Mifare>(Arena*);
template<> ::MifareExtended* Arena::CreateMaybeMessage<::MifareExtended>(Arena*);
template<> ::Miscellaneous* Arena::CreateMaybeMessage<::Miscellaneous>(Arena*);
template<> ::Service* Arena::CreateMaybeMessage<::Service>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Miscellaneous :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Miscellaneous) */ {
 public:
  Miscellaneous();
  virtual ~Miscellaneous();

  Miscellaneous(const Miscellaneous& from);
  Miscellaneous(Miscellaneous&& from) noexcept
    : Miscellaneous() {
    *this = ::std::move(from);
  }

  inline Miscellaneous& operator=(const Miscellaneous& from) {
    CopyFrom(from);
    return *this;
  }
  inline Miscellaneous& operator=(Miscellaneous&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Miscellaneous& default_instance();

  enum MiscCmdCase {
    kSetLedsState = 1,
    kReadDeviceInfo = 2,
    kRebootDevice = 3,
    kGetDeviceStatus = 4,
    kMakeSound = 6,
    kGetDeviceStatistic = 7,
    kGetEcho = 8,
    kChangeBaudrate = 9,
    kChangeLanSettings = 10,
    MISC_CMD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Miscellaneous* internal_default_instance() {
    return reinterpret_cast<const Miscellaneous*>(
               &_Miscellaneous_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Miscellaneous& a, Miscellaneous& b) {
    a.Swap(&b);
  }
  inline void Swap(Miscellaneous* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Miscellaneous* New() const final {
    return CreateMaybeMessage<Miscellaneous>(nullptr);
  }

  Miscellaneous* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Miscellaneous>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Miscellaneous& from);
  void MergeFrom(const Miscellaneous& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Miscellaneous* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Miscellaneous";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands7_2eproto);
    return ::descriptor_table_commands7_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetLedsStateFieldNumber = 1,
    kReadDeviceInfoFieldNumber = 2,
    kRebootDeviceFieldNumber = 3,
    kGetDeviceStatusFieldNumber = 4,
    kMakeSoundFieldNumber = 6,
    kGetDeviceStatisticFieldNumber = 7,
    kGetEchoFieldNumber = 8,
    kChangeBaudrateFieldNumber = 9,
    kChangeLanSettingsFieldNumber = 10,
  };
  // optional .misc.leds.Leds set_leds_state = 1;
  bool has_set_leds_state() const;
  private:
  bool _internal_has_set_leds_state() const;
  public:
  void clear_set_leds_state();
  const ::misc::leds::Leds& set_leds_state() const;
  ::misc::leds::Leds* release_set_leds_state();
  ::misc::leds::Leds* mutable_set_leds_state();
  void set_allocated_set_leds_state(::misc::leds::Leds* set_leds_state);
  private:
  const ::misc::leds::Leds& _internal_set_leds_state() const;
  ::misc::leds::Leds* _internal_mutable_set_leds_state();
  public:

  // optional .misc.device.ReadDeviceInfo read_device_info = 2;
  bool has_read_device_info() const;
  private:
  bool _internal_has_read_device_info() const;
  public:
  void clear_read_device_info();
  const ::misc::device::ReadDeviceInfo& read_device_info() const;
  ::misc::device::ReadDeviceInfo* release_read_device_info();
  ::misc::device::ReadDeviceInfo* mutable_read_device_info();
  void set_allocated_read_device_info(::misc::device::ReadDeviceInfo* read_device_info);
  private:
  const ::misc::device::ReadDeviceInfo& _internal_read_device_info() const;
  ::misc::device::ReadDeviceInfo* _internal_mutable_read_device_info();
  public:

  // optional .misc.reboot.Reboot reboot_device = 3;
  bool has_reboot_device() const;
  private:
  bool _internal_has_reboot_device() const;
  public:
  void clear_reboot_device();
  const ::misc::reboot::Reboot& reboot_device() const;
  ::misc::reboot::Reboot* release_reboot_device();
  ::misc::reboot::Reboot* mutable_reboot_device();
  void set_allocated_reboot_device(::misc::reboot::Reboot* reboot_device);
  private:
  const ::misc::reboot::Reboot& _internal_reboot_device() const;
  ::misc::reboot::Reboot* _internal_mutable_reboot_device();
  public:

  // optional .misc.device.GetDeviceStatus get_device_status = 4;
  bool has_get_device_status() const;
  private:
  bool _internal_has_get_device_status() const;
  public:
  void clear_get_device_status();
  const ::misc::device::GetDeviceStatus& get_device_status() const;
  ::misc::device::GetDeviceStatus* release_get_device_status();
  ::misc::device::GetDeviceStatus* mutable_get_device_status();
  void set_allocated_get_device_status(::misc::device::GetDeviceStatus* get_device_status);
  private:
  const ::misc::device::GetDeviceStatus& _internal_get_device_status() const;
  ::misc::device::GetDeviceStatus* _internal_mutable_get_device_status();
  public:

  // optional .misc.buzzer.MakeSound make_sound = 6;
  bool has_make_sound() const;
  private:
  bool _internal_has_make_sound() const;
  public:
  void clear_make_sound();
  const ::misc::buzzer::MakeSound& make_sound() const;
  ::misc::buzzer::MakeSound* release_make_sound();
  ::misc::buzzer::MakeSound* mutable_make_sound();
  void set_allocated_make_sound(::misc::buzzer::MakeSound* make_sound);
  private:
  const ::misc::buzzer::MakeSound& _internal_make_sound() const;
  ::misc::buzzer::MakeSound* _internal_mutable_make_sound();
  public:

  // optional .misc.stats.GetDeviceStatistic get_device_statistic = 7;
  bool has_get_device_statistic() const;
  private:
  bool _internal_has_get_device_statistic() const;
  public:
  void clear_get_device_statistic();
  const ::misc::stats::GetDeviceStatistic& get_device_statistic() const;
  ::misc::stats::GetDeviceStatistic* release_get_device_statistic();
  ::misc::stats::GetDeviceStatistic* mutable_get_device_statistic();
  void set_allocated_get_device_statistic(::misc::stats::GetDeviceStatistic* get_device_statistic);
  private:
  const ::misc::stats::GetDeviceStatistic& _internal_get_device_statistic() const;
  ::misc::stats::GetDeviceStatistic* _internal_mutable_get_device_statistic();
  public:

  // optional .misc.echo.GetEcho get_echo = 8;
  bool has_get_echo() const;
  private:
  bool _internal_has_get_echo() const;
  public:
  void clear_get_echo();
  const ::misc::echo::GetEcho& get_echo() const;
  ::misc::echo::GetEcho* release_get_echo();
  ::misc::echo::GetEcho* mutable_get_echo();
  void set_allocated_get_echo(::misc::echo::GetEcho* get_echo);
  private:
  const ::misc::echo::GetEcho& _internal_get_echo() const;
  ::misc::echo::GetEcho* _internal_mutable_get_echo();
  public:

  // optional .misc.baudrate.ChangeBaudrate change_baudrate = 9;
  bool has_change_baudrate() const;
  private:
  bool _internal_has_change_baudrate() const;
  public:
  void clear_change_baudrate();
  const ::misc::baudrate::ChangeBaudrate& change_baudrate() const;
  ::misc::baudrate::ChangeBaudrate* release_change_baudrate();
  ::misc::baudrate::ChangeBaudrate* mutable_change_baudrate();
  void set_allocated_change_baudrate(::misc::baudrate::ChangeBaudrate* change_baudrate);
  private:
  const ::misc::baudrate::ChangeBaudrate& _internal_change_baudrate() const;
  ::misc::baudrate::ChangeBaudrate* _internal_mutable_change_baudrate();
  public:

  // optional .misc.lan_settings.ChangeLanSettings change_lan_settings = 10;
  bool has_change_lan_settings() const;
  private:
  bool _internal_has_change_lan_settings() const;
  public:
  void clear_change_lan_settings();
  const ::misc::lan_settings::ChangeLanSettings& change_lan_settings() const;
  ::misc::lan_settings::ChangeLanSettings* release_change_lan_settings();
  ::misc::lan_settings::ChangeLanSettings* mutable_change_lan_settings();
  void set_allocated_change_lan_settings(::misc::lan_settings::ChangeLanSettings* change_lan_settings);
  private:
  const ::misc::lan_settings::ChangeLanSettings& _internal_change_lan_settings() const;
  ::misc::lan_settings::ChangeLanSettings* _internal_mutable_change_lan_settings();
  public:

  void clear_misc_cmd();
  MiscCmdCase misc_cmd_case() const;
  // @@protoc_insertion_point(class_scope:Miscellaneous)
 private:
  class _Internal;
  void set_has_set_leds_state();
  void set_has_read_device_info();
  void set_has_reboot_device();
  void set_has_get_device_status();
  void set_has_make_sound();
  void set_has_get_device_statistic();
  void set_has_get_echo();
  void set_has_change_baudrate();
  void set_has_change_lan_settings();

  inline bool has_misc_cmd() const;
  inline void clear_has_misc_cmd();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union MiscCmdUnion {
    MiscCmdUnion() {}
    ::misc::leds::Leds* set_leds_state_;
    ::misc::device::ReadDeviceInfo* read_device_info_;
    ::misc::reboot::Reboot* reboot_device_;
    ::misc::device::GetDeviceStatus* get_device_status_;
    ::misc::buzzer::MakeSound* make_sound_;
    ::misc::stats::GetDeviceStatistic* get_device_statistic_;
    ::misc::echo::GetEcho* get_echo_;
    ::misc::baudrate::ChangeBaudrate* change_baudrate_;
    ::misc::lan_settings::ChangeLanSettings* change_lan_settings_;
  } misc_cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_commands7_2eproto;
};
// -------------------------------------------------------------------

class ContactlessLevel1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ContactlessLevel1) */ {
 public:
  ContactlessLevel1();
  virtual ~ContactlessLevel1();

  ContactlessLevel1(const ContactlessLevel1& from);
  ContactlessLevel1(ContactlessLevel1&& from) noexcept
    : ContactlessLevel1() {
    *this = ::std::move(from);
  }

  inline ContactlessLevel1& operator=(const ContactlessLevel1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContactlessLevel1& operator=(ContactlessLevel1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContactlessLevel1& default_instance();

  enum ContactlessLevel1CmdCase {
    kPollForToken = 1,
    kEmvRemoval = 2,
    kTsvBitArray = 3,
    kIso144434Command = 4,
    kPowerOffField = 5,
    kRequestForAts = 6,
    CONTACTLESS_LEVEL1_CMD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactlessLevel1* internal_default_instance() {
    return reinterpret_cast<const ContactlessLevel1*>(
               &_ContactlessLevel1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContactlessLevel1& a, ContactlessLevel1& b) {
    a.Swap(&b);
  }
  inline void Swap(ContactlessLevel1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContactlessLevel1* New() const final {
    return CreateMaybeMessage<ContactlessLevel1>(nullptr);
  }

  ContactlessLevel1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContactlessLevel1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContactlessLevel1& from);
  void MergeFrom(const ContactlessLevel1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContactlessLevel1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContactlessLevel1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands7_2eproto);
    return ::descriptor_table_commands7_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPollForTokenFieldNumber = 1,
    kEmvRemovalFieldNumber = 2,
    kTsvBitArrayFieldNumber = 3,
    kIso144434CommandFieldNumber = 4,
    kPowerOffFieldFieldNumber = 5,
    kRequestForAtsFieldNumber = 6,
  };
  // optional .contactless.poll.PollForToken poll_for_token = 1;
  bool has_poll_for_token() const;
  private:
  bool _internal_has_poll_for_token() const;
  public:
  void clear_poll_for_token();
  const ::contactless::poll::PollForToken& poll_for_token() const;
  ::contactless::poll::PollForToken* release_poll_for_token();
  ::contactless::poll::PollForToken* mutable_poll_for_token();
  void set_allocated_poll_for_token(::contactless::poll::PollForToken* poll_for_token);
  private:
  const ::contactless::poll::PollForToken& _internal_poll_for_token() const;
  ::contactless::poll::PollForToken* _internal_mutable_poll_for_token();
  public:

  // optional .contactless.emv_removal.EmvRemoval emv_removal = 2;
  bool has_emv_removal() const;
  private:
  bool _internal_has_emv_removal() const;
  public:
  void clear_emv_removal();
  const ::contactless::emv_removal::EmvRemoval& emv_removal() const;
  ::contactless::emv_removal::EmvRemoval* release_emv_removal();
  ::contactless::emv_removal::EmvRemoval* mutable_emv_removal();
  void set_allocated_emv_removal(::contactless::emv_removal::EmvRemoval* emv_removal);
  private:
  const ::contactless::emv_removal::EmvRemoval& _internal_emv_removal() const;
  ::contactless::emv_removal::EmvRemoval* _internal_mutable_emv_removal();
  public:

  // optional .contactless.transceive.TransceiveBitArray tsv_bit_array = 3;
  bool has_tsv_bit_array() const;
  private:
  bool _internal_has_tsv_bit_array() const;
  public:
  void clear_tsv_bit_array();
  const ::contactless::transceive::TransceiveBitArray& tsv_bit_array() const;
  ::contactless::transceive::TransceiveBitArray* release_tsv_bit_array();
  ::contactless::transceive::TransceiveBitArray* mutable_tsv_bit_array();
  void set_allocated_tsv_bit_array(::contactless::transceive::TransceiveBitArray* tsv_bit_array);
  private:
  const ::contactless::transceive::TransceiveBitArray& _internal_tsv_bit_array() const;
  ::contactless::transceive::TransceiveBitArray* _internal_mutable_tsv_bit_array();
  public:

  // optional .contactless.iso14443_4.Command iso14443_4_command = 4;
  bool has_iso14443_4_command() const;
  private:
  bool _internal_has_iso14443_4_command() const;
  public:
  void clear_iso14443_4_command();
  const ::contactless::iso14443_4::Command& iso14443_4_command() const;
  ::contactless::iso14443_4::Command* release_iso14443_4_command();
  ::contactless::iso14443_4::Command* mutable_iso14443_4_command();
  void set_allocated_iso14443_4_command(::contactless::iso14443_4::Command* iso14443_4_command);
  private:
  const ::contactless::iso14443_4::Command& _internal_iso14443_4_command() const;
  ::contactless::iso14443_4::Command* _internal_mutable_iso14443_4_command();
  public:

  // optional .contactless.rf_field.PowerOffField power_off_field = 5;
  bool has_power_off_field() const;
  private:
  bool _internal_has_power_off_field() const;
  public:
  void clear_power_off_field();
  const ::contactless::rf_field::PowerOffField& power_off_field() const;
  ::contactless::rf_field::PowerOffField* release_power_off_field();
  ::contactless::rf_field::PowerOffField* mutable_power_off_field();
  void set_allocated_power_off_field(::contactless::rf_field::PowerOffField* power_off_field);
  private:
  const ::contactless::rf_field::PowerOffField& _internal_power_off_field() const;
  ::contactless::rf_field::PowerOffField* _internal_mutable_power_off_field();
  public:

  // optional .contactless.iso14443_4a.RequestForAnswerToSelect request_for_ats = 6;
  bool has_request_for_ats() const;
  private:
  bool _internal_has_request_for_ats() const;
  public:
  void clear_request_for_ats();
  const ::contactless::iso14443_4a::RequestForAnswerToSelect& request_for_ats() const;
  ::contactless::iso14443_4a::RequestForAnswerToSelect* release_request_for_ats();
  ::contactless::iso14443_4a::RequestForAnswerToSelect* mutable_request_for_ats();
  void set_allocated_request_for_ats(::contactless::iso14443_4a::RequestForAnswerToSelect* request_for_ats);
  private:
  const ::contactless::iso14443_4a::RequestForAnswerToSelect& _internal_request_for_ats() const;
  ::contactless::iso14443_4a::RequestForAnswerToSelect* _internal_mutable_request_for_ats();
  public:

  void clear_contactless_level1_cmd();
  ContactlessLevel1CmdCase contactless_level1_cmd_case() const;
  // @@protoc_insertion_point(class_scope:ContactlessLevel1)
 private:
  class _Internal;
  void set_has_poll_for_token();
  void set_has_emv_removal();
  void set_has_tsv_bit_array();
  void set_has_iso14443_4_command();
  void set_has_power_off_field();
  void set_has_request_for_ats();

  inline bool has_contactless_level1_cmd() const;
  inline void clear_has_contactless_level1_cmd();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union ContactlessLevel1CmdUnion {
    ContactlessLevel1CmdUnion() {}
    ::contactless::poll::PollForToken* poll_for_token_;
    ::contactless::emv_removal::EmvRemoval* emv_removal_;
    ::contactless::transceive::TransceiveBitArray* tsv_bit_array_;
    ::contactless::iso14443_4::Command* iso14443_4_command_;
    ::contactless::rf_field::PowerOffField* power_off_field_;
    ::contactless::iso14443_4a::RequestForAnswerToSelect* request_for_ats_;
  } contactless_level1_cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_commands7_2eproto;
};
// -------------------------------------------------------------------

class ContactlessLevel2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ContactlessLevel2) */ {
 public:
  ContactlessLevel2();
  virtual ~ContactlessLevel2();

  ContactlessLevel2(const ContactlessLevel2& from);
  ContactlessLevel2(ContactlessLevel2&& from) noexcept
    : ContactlessLevel2() {
    *this = ::std::move(from);
  }

  inline ContactlessLevel2& operator=(const ContactlessLevel2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContactlessLevel2& operator=(ContactlessLevel2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContactlessLevel2& default_instance();

  enum ContactlessLevel2CmdCase {
    kPerformTransaction = 1,
    CONTACTLESS_LEVEL2_CMD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactlessLevel2* internal_default_instance() {
    return reinterpret_cast<const ContactlessLevel2*>(
               &_ContactlessLevel2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ContactlessLevel2& a, ContactlessLevel2& b) {
    a.Swap(&b);
  }
  inline void Swap(ContactlessLevel2* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContactlessLevel2* New() const final {
    return CreateMaybeMessage<ContactlessLevel2>(nullptr);
  }

  ContactlessLevel2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContactlessLevel2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContactlessLevel2& from);
  void MergeFrom(const ContactlessLevel2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContactlessLevel2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContactlessLevel2";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands7_2eproto);
    return ::descriptor_table_commands7_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerformTransactionFieldNumber = 1,
  };
  // optional .contactless.transaction.PerformTransaction perform_transaction = 1;
  bool has_perform_transaction() const;
  private:
  bool _internal_has_perform_transaction() const;
  public:
  void clear_perform_transaction();
  const ::contactless::transaction::PerformTransaction& perform_transaction() const;
  ::contactless::transaction::PerformTransaction* release_perform_transaction();
  ::contactless::transaction::PerformTransaction* mutable_perform_transaction();
  void set_allocated_perform_transaction(::contactless::transaction::PerformTransaction* perform_transaction);
  private:
  const ::contactless::transaction::PerformTransaction& _internal_perform_transaction() const;
  ::contactless::transaction::PerformTransaction* _internal_mutable_perform_transaction();
  public:

  void clear_contactless_level2_cmd();
  ContactlessLevel2CmdCase contactless_level2_cmd_case() const;
  // @@protoc_insertion_point(class_scope:ContactlessLevel2)
 private:
  class _Internal;
  void set_has_perform_transaction();

  inline bool has_contactless_level2_cmd() const;
  inline void clear_has_contactless_level2_cmd();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union ContactlessLevel2CmdUnion {
    ContactlessLevel2CmdUnion() {}
    ::contactless::transaction::PerformTransaction* perform_transaction_;
  } contactless_level2_cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_commands7_2eproto;
};
// -------------------------------------------------------------------

class Mifare :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mifare) */ {
 public:
  Mifare();
  virtual ~Mifare();

  Mifare(const Mifare& from);
  Mifare(Mifare&& from) noexcept
    : Mifare() {
    *this = ::std::move(from);
  }

  inline Mifare& operator=(const Mifare& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mifare& operator=(Mifare&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mifare& default_instance();

  enum MifareCmdCase {
    kMfrClassicAuthOnClearKey = 1,
    kMfrClassicAuthOnSamKey = 2,
    kMfrClassicReadBlocks = 3,
    kMfrClassicWriteBlocks = 4,
    kMfrClassicBulkOperation = 5,
    kMfrClassicGetCounter = 6,
    kMfrClassicSetCounter = 7,
    kMfrClassicModifyCounter = 8,
    kMfrClassicCopyCounter = 9,
    kMfrClassicCommitCounter = 10,
    kMfrPlusAuthOnClearKey = 16,
    kMfrPlusReadBlocks = 17,
    kMfrPlusWriteBlocks = 18,
    kMfrPlusBulkOperation = 19,
    kMfrPlusGetCounter = 20,
    kMfrPlusSetCounter = 21,
    kMfrPlusModifyCounter = 22,
    kMfrPlusCopyCounter = 23,
    kMfrPlusCommitCounter = 24,
    kMfrPlusAuthOnSamKey = 25,
    kAv2AuthenticateHost = 30,
    kAv2ChangeKeyentry = 31,
    kAv2Unlock = 32,
    kMfrUlReadPages = 36,
    kMfrUlWritePages = 37,
    kMfrUlGetVersion = 38,
    kMfrUlGetCounter = 39,
    kMfrUlIncrementCounter = 40,
    kMfrUlBulkOperation = 41,
    kMfrUlAuthOnClearKey = 42,
    kMfrUlAuthOnSamKey = 43,
    kMfrUlAuthClearPassword = 44,
    kMfrUlAuthSamPassword = 45,
    MIFARE_CMD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mifare* internal_default_instance() {
    return reinterpret_cast<const Mifare*>(
               &_Mifare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Mifare& a, Mifare& b) {
    a.Swap(&b);
  }
  inline void Swap(Mifare* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mifare* New() const final {
    return CreateMaybeMessage<Mifare>(nullptr);
  }

  Mifare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mifare>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mifare& from);
  void MergeFrom(const Mifare& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mifare* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mifare";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands7_2eproto);
    return ::descriptor_table_commands7_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMfrClassicAuthOnClearKeyFieldNumber = 1,
    kMfrClassicAuthOnSamKeyFieldNumber = 2,
    kMfrClassicReadBlocksFieldNumber = 3,
    kMfrClassicWriteBlocksFieldNumber = 4,
    kMfrClassicBulkOperationFieldNumber = 5,
    kMfrClassicGetCounterFieldNumber = 6,
    kMfrClassicSetCounterFieldNumber = 7,
    kMfrClassicModifyCounterFieldNumber = 8,
    kMfrClassicCopyCounterFieldNumber = 9,
    kMfrClassicCommitCounterFieldNumber = 10,
    kMfrPlusAuthOnClearKeyFieldNumber = 16,
    kMfrPlusReadBlocksFieldNumber = 17,
    kMfrPlusWriteBlocksFieldNumber = 18,
    kMfrPlusBulkOperationFieldNumber = 19,
    kMfrPlusGetCounterFieldNumber = 20,
    kMfrPlusSetCounterFieldNumber = 21,
    kMfrPlusModifyCounterFieldNumber = 22,
    kMfrPlusCopyCounterFieldNumber = 23,
    kMfrPlusCommitCounterFieldNumber = 24,
    kMfrPlusAuthOnSamKeyFieldNumber = 25,
    kAv2AuthenticateHostFieldNumber = 30,
    kAv2ChangeKeyentryFieldNumber = 31,
    kAv2UnlockFieldNumber = 32,
    kMfrUlReadPagesFieldNumber = 36,
    kMfrUlWritePagesFieldNumber = 37,
    kMfrUlGetVersionFieldNumber = 38,
    kMfrUlGetCounterFieldNumber = 39,
    kMfrUlIncrementCounterFieldNumber = 40,
    kMfrUlBulkOperationFieldNumber = 41,
    kMfrUlAuthOnClearKeyFieldNumber = 42,
    kMfrUlAuthOnSamKeyFieldNumber = 43,
    kMfrUlAuthClearPasswordFieldNumber = 44,
    kMfrUlAuthSamPasswordFieldNumber = 45,
  };
  // optional .mifare.classic.auth.ClearKey mfr_classic_auth_on_clear_key = 1;
  bool has_mfr_classic_auth_on_clear_key() const;
  private:
  bool _internal_has_mfr_classic_auth_on_clear_key() const;
  public:
  void clear_mfr_classic_auth_on_clear_key();
  const ::mifare::classic::auth::ClearKey& mfr_classic_auth_on_clear_key() const;
  ::mifare::classic::auth::ClearKey* release_mfr_classic_auth_on_clear_key();
  ::mifare::classic::auth::ClearKey* mutable_mfr_classic_auth_on_clear_key();
  void set_allocated_mfr_classic_auth_on_clear_key(::mifare::classic::auth::ClearKey* mfr_classic_auth_on_clear_key);
  private:
  const ::mifare::classic::auth::ClearKey& _internal_mfr_classic_auth_on_clear_key() const;
  ::mifare::classic::auth::ClearKey* _internal_mutable_mfr_classic_auth_on_clear_key();
  public:

  // optional .mifare.classic.auth.SamKey mfr_classic_auth_on_sam_key = 2;
  bool has_mfr_classic_auth_on_sam_key() const;
  private:
  bool _internal_has_mfr_classic_auth_on_sam_key() const;
  public:
  void clear_mfr_classic_auth_on_sam_key();
  const ::mifare::classic::auth::SamKey& mfr_classic_auth_on_sam_key() const;
  ::mifare::classic::auth::SamKey* release_mfr_classic_auth_on_sam_key();
  ::mifare::classic::auth::SamKey* mutable_mfr_classic_auth_on_sam_key();
  void set_allocated_mfr_classic_auth_on_sam_key(::mifare::classic::auth::SamKey* mfr_classic_auth_on_sam_key);
  private:
  const ::mifare::classic::auth::SamKey& _internal_mfr_classic_auth_on_sam_key() const;
  ::mifare::classic::auth::SamKey* _internal_mutable_mfr_classic_auth_on_sam_key();
  public:

  // optional .mifare.classic.read.ReadBlocks mfr_classic_read_blocks = 3;
  bool has_mfr_classic_read_blocks() const;
  private:
  bool _internal_has_mfr_classic_read_blocks() const;
  public:
  void clear_mfr_classic_read_blocks();
  const ::mifare::classic::read::ReadBlocks& mfr_classic_read_blocks() const;
  ::mifare::classic::read::ReadBlocks* release_mfr_classic_read_blocks();
  ::mifare::classic::read::ReadBlocks* mutable_mfr_classic_read_blocks();
  void set_allocated_mfr_classic_read_blocks(::mifare::classic::read::ReadBlocks* mfr_classic_read_blocks);
  private:
  const ::mifare::classic::read::ReadBlocks& _internal_mfr_classic_read_blocks() const;
  ::mifare::classic::read::ReadBlocks* _internal_mutable_mfr_classic_read_blocks();
  public:

  // optional .mifare.classic.write.WriteBlocks mfr_classic_write_blocks = 4;
  bool has_mfr_classic_write_blocks() const;
  private:
  bool _internal_has_mfr_classic_write_blocks() const;
  public:
  void clear_mfr_classic_write_blocks();
  const ::mifare::classic::write::WriteBlocks& mfr_classic_write_blocks() const;
  ::mifare::classic::write::WriteBlocks* release_mfr_classic_write_blocks();
  ::mifare::classic::write::WriteBlocks* mutable_mfr_classic_write_blocks();
  void set_allocated_mfr_classic_write_blocks(::mifare::classic::write::WriteBlocks* mfr_classic_write_blocks);
  private:
  const ::mifare::classic::write::WriteBlocks& _internal_mfr_classic_write_blocks() const;
  ::mifare::classic::write::WriteBlocks* _internal_mutable_mfr_classic_write_blocks();
  public:

  // optional .mifare.classic.bulk.BulkOperation mfr_classic_bulk_operation = 5;
  bool has_mfr_classic_bulk_operation() const;
  private:
  bool _internal_has_mfr_classic_bulk_operation() const;
  public:
  void clear_mfr_classic_bulk_operation();
  const ::mifare::classic::bulk::BulkOperation& mfr_classic_bulk_operation() const;
  ::mifare::classic::bulk::BulkOperation* release_mfr_classic_bulk_operation();
  ::mifare::classic::bulk::BulkOperation* mutable_mfr_classic_bulk_operation();
  void set_allocated_mfr_classic_bulk_operation(::mifare::classic::bulk::BulkOperation* mfr_classic_bulk_operation);
  private:
  const ::mifare::classic::bulk::BulkOperation& _internal_mfr_classic_bulk_operation() const;
  ::mifare::classic::bulk::BulkOperation* _internal_mutable_mfr_classic_bulk_operation();
  public:

  // optional .mifare.classic.counter.get.GetCounter mfr_classic_get_counter = 6;
  bool has_mfr_classic_get_counter() const;
  private:
  bool _internal_has_mfr_classic_get_counter() const;
  public:
  void clear_mfr_classic_get_counter();
  const ::mifare::classic::counter::get::GetCounter& mfr_classic_get_counter() const;
  ::mifare::classic::counter::get::GetCounter* release_mfr_classic_get_counter();
  ::mifare::classic::counter::get::GetCounter* mutable_mfr_classic_get_counter();
  void set_allocated_mfr_classic_get_counter(::mifare::classic::counter::get::GetCounter* mfr_classic_get_counter);
  private:
  const ::mifare::classic::counter::get::GetCounter& _internal_mfr_classic_get_counter() const;
  ::mifare::classic::counter::get::GetCounter* _internal_mutable_mfr_classic_get_counter();
  public:

  // optional .mifare.classic.counter.set.SetCounter mfr_classic_set_counter = 7;
  bool has_mfr_classic_set_counter() const;
  private:
  bool _internal_has_mfr_classic_set_counter() const;
  public:
  void clear_mfr_classic_set_counter();
  const ::mifare::classic::counter::set::SetCounter& mfr_classic_set_counter() const;
  ::mifare::classic::counter::set::SetCounter* release_mfr_classic_set_counter();
  ::mifare::classic::counter::set::SetCounter* mutable_mfr_classic_set_counter();
  void set_allocated_mfr_classic_set_counter(::mifare::classic::counter::set::SetCounter* mfr_classic_set_counter);
  private:
  const ::mifare::classic::counter::set::SetCounter& _internal_mfr_classic_set_counter() const;
  ::mifare::classic::counter::set::SetCounter* _internal_mutable_mfr_classic_set_counter();
  public:

  // optional .mifare.classic.counter.modify.ModifyCounter mfr_classic_modify_counter = 8;
  bool has_mfr_classic_modify_counter() const;
  private:
  bool _internal_has_mfr_classic_modify_counter() const;
  public:
  void clear_mfr_classic_modify_counter();
  const ::mifare::classic::counter::modify::ModifyCounter& mfr_classic_modify_counter() const;
  ::mifare::classic::counter::modify::ModifyCounter* release_mfr_classic_modify_counter();
  ::mifare::classic::counter::modify::ModifyCounter* mutable_mfr_classic_modify_counter();
  void set_allocated_mfr_classic_modify_counter(::mifare::classic::counter::modify::ModifyCounter* mfr_classic_modify_counter);
  private:
  const ::mifare::classic::counter::modify::ModifyCounter& _internal_mfr_classic_modify_counter() const;
  ::mifare::classic::counter::modify::ModifyCounter* _internal_mutable_mfr_classic_modify_counter();
  public:

  // optional .mifare.classic.counter.copy.CopyCounter mfr_classic_copy_counter = 9;
  bool has_mfr_classic_copy_counter() const;
  private:
  bool _internal_has_mfr_classic_copy_counter() const;
  public:
  void clear_mfr_classic_copy_counter();
  const ::mifare::classic::counter::copy::CopyCounter& mfr_classic_copy_counter() const;
  ::mifare::classic::counter::copy::CopyCounter* release_mfr_classic_copy_counter();
  ::mifare::classic::counter::copy::CopyCounter* mutable_mfr_classic_copy_counter();
  void set_allocated_mfr_classic_copy_counter(::mifare::classic::counter::copy::CopyCounter* mfr_classic_copy_counter);
  private:
  const ::mifare::classic::counter::copy::CopyCounter& _internal_mfr_classic_copy_counter() const;
  ::mifare::classic::counter::copy::CopyCounter* _internal_mutable_mfr_classic_copy_counter();
  public:

  // optional .mifare.classic.counter.commit.CommitCounter mfr_classic_commit_counter = 10;
  bool has_mfr_classic_commit_counter() const;
  private:
  bool _internal_has_mfr_classic_commit_counter() const;
  public:
  void clear_mfr_classic_commit_counter();
  const ::mifare::classic::counter::commit::CommitCounter& mfr_classic_commit_counter() const;
  ::mifare::classic::counter::commit::CommitCounter* release_mfr_classic_commit_counter();
  ::mifare::classic::counter::commit::CommitCounter* mutable_mfr_classic_commit_counter();
  void set_allocated_mfr_classic_commit_counter(::mifare::classic::counter::commit::CommitCounter* mfr_classic_commit_counter);
  private:
  const ::mifare::classic::counter::commit::CommitCounter& _internal_mfr_classic_commit_counter() const;
  ::mifare::classic::counter::commit::CommitCounter* _internal_mutable_mfr_classic_commit_counter();
  public:

  // optional .mifare.plus.auth.ClearKey mfr_plus_auth_on_clear_key = 16;
  bool has_mfr_plus_auth_on_clear_key() const;
  private:
  bool _internal_has_mfr_plus_auth_on_clear_key() const;
  public:
  void clear_mfr_plus_auth_on_clear_key();
  const ::mifare::plus::auth::ClearKey& mfr_plus_auth_on_clear_key() const;
  ::mifare::plus::auth::ClearKey* release_mfr_plus_auth_on_clear_key();
  ::mifare::plus::auth::ClearKey* mutable_mfr_plus_auth_on_clear_key();
  void set_allocated_mfr_plus_auth_on_clear_key(::mifare::plus::auth::ClearKey* mfr_plus_auth_on_clear_key);
  private:
  const ::mifare::plus::auth::ClearKey& _internal_mfr_plus_auth_on_clear_key() const;
  ::mifare::plus::auth::ClearKey* _internal_mutable_mfr_plus_auth_on_clear_key();
  public:

  // optional .mifare.plus.read.ReadBlocks mfr_plus_read_blocks = 17;
  bool has_mfr_plus_read_blocks() const;
  private:
  bool _internal_has_mfr_plus_read_blocks() const;
  public:
  void clear_mfr_plus_read_blocks();
  const ::mifare::plus::read::ReadBlocks& mfr_plus_read_blocks() const;
  ::mifare::plus::read::ReadBlocks* release_mfr_plus_read_blocks();
  ::mifare::plus::read::ReadBlocks* mutable_mfr_plus_read_blocks();
  void set_allocated_mfr_plus_read_blocks(::mifare::plus::read::ReadBlocks* mfr_plus_read_blocks);
  private:
  const ::mifare::plus::read::ReadBlocks& _internal_mfr_plus_read_blocks() const;
  ::mifare::plus::read::ReadBlocks* _internal_mutable_mfr_plus_read_blocks();
  public:

  // optional .mifare.plus.write.WriteBlocks mfr_plus_write_blocks = 18;
  bool has_mfr_plus_write_blocks() const;
  private:
  bool _internal_has_mfr_plus_write_blocks() const;
  public:
  void clear_mfr_plus_write_blocks();
  const ::mifare::plus::write::WriteBlocks& mfr_plus_write_blocks() const;
  ::mifare::plus::write::WriteBlocks* release_mfr_plus_write_blocks();
  ::mifare::plus::write::WriteBlocks* mutable_mfr_plus_write_blocks();
  void set_allocated_mfr_plus_write_blocks(::mifare::plus::write::WriteBlocks* mfr_plus_write_blocks);
  private:
  const ::mifare::plus::write::WriteBlocks& _internal_mfr_plus_write_blocks() const;
  ::mifare::plus::write::WriteBlocks* _internal_mutable_mfr_plus_write_blocks();
  public:

  // optional .mifare.plus.bulk.BulkOperation mfr_plus_bulk_operation = 19;
  bool has_mfr_plus_bulk_operation() const;
  private:
  bool _internal_has_mfr_plus_bulk_operation() const;
  public:
  void clear_mfr_plus_bulk_operation();
  const ::mifare::plus::bulk::BulkOperation& mfr_plus_bulk_operation() const;
  ::mifare::plus::bulk::BulkOperation* release_mfr_plus_bulk_operation();
  ::mifare::plus::bulk::BulkOperation* mutable_mfr_plus_bulk_operation();
  void set_allocated_mfr_plus_bulk_operation(::mifare::plus::bulk::BulkOperation* mfr_plus_bulk_operation);
  private:
  const ::mifare::plus::bulk::BulkOperation& _internal_mfr_plus_bulk_operation() const;
  ::mifare::plus::bulk::BulkOperation* _internal_mutable_mfr_plus_bulk_operation();
  public:

  // optional .mifare.plus.counter.get.GetCounter mfr_plus_get_counter = 20;
  bool has_mfr_plus_get_counter() const;
  private:
  bool _internal_has_mfr_plus_get_counter() const;
  public:
  void clear_mfr_plus_get_counter();
  const ::mifare::plus::counter::get::GetCounter& mfr_plus_get_counter() const;
  ::mifare::plus::counter::get::GetCounter* release_mfr_plus_get_counter();
  ::mifare::plus::counter::get::GetCounter* mutable_mfr_plus_get_counter();
  void set_allocated_mfr_plus_get_counter(::mifare::plus::counter::get::GetCounter* mfr_plus_get_counter);
  private:
  const ::mifare::plus::counter::get::GetCounter& _internal_mfr_plus_get_counter() const;
  ::mifare::plus::counter::get::GetCounter* _internal_mutable_mfr_plus_get_counter();
  public:

  // optional .mifare.plus.counter.set.SetCounter mfr_plus_set_counter = 21;
  bool has_mfr_plus_set_counter() const;
  private:
  bool _internal_has_mfr_plus_set_counter() const;
  public:
  void clear_mfr_plus_set_counter();
  const ::mifare::plus::counter::set::SetCounter& mfr_plus_set_counter() const;
  ::mifare::plus::counter::set::SetCounter* release_mfr_plus_set_counter();
  ::mifare::plus::counter::set::SetCounter* mutable_mfr_plus_set_counter();
  void set_allocated_mfr_plus_set_counter(::mifare::plus::counter::set::SetCounter* mfr_plus_set_counter);
  private:
  const ::mifare::plus::counter::set::SetCounter& _internal_mfr_plus_set_counter() const;
  ::mifare::plus::counter::set::SetCounter* _internal_mutable_mfr_plus_set_counter();
  public:

  // optional .mifare.plus.counter.modify.ModifyCounter mfr_plus_modify_counter = 22;
  bool has_mfr_plus_modify_counter() const;
  private:
  bool _internal_has_mfr_plus_modify_counter() const;
  public:
  void clear_mfr_plus_modify_counter();
  const ::mifare::plus::counter::modify::ModifyCounter& mfr_plus_modify_counter() const;
  ::mifare::plus::counter::modify::ModifyCounter* release_mfr_plus_modify_counter();
  ::mifare::plus::counter::modify::ModifyCounter* mutable_mfr_plus_modify_counter();
  void set_allocated_mfr_plus_modify_counter(::mifare::plus::counter::modify::ModifyCounter* mfr_plus_modify_counter);
  private:
  const ::mifare::plus::counter::modify::ModifyCounter& _internal_mfr_plus_modify_counter() const;
  ::mifare::plus::counter::modify::ModifyCounter* _internal_mutable_mfr_plus_modify_counter();
  public:

  // optional .mifare.plus.counter.copy.CopyCounter mfr_plus_copy_counter = 23;
  bool has_mfr_plus_copy_counter() const;
  private:
  bool _internal_has_mfr_plus_copy_counter() const;
  public:
  void clear_mfr_plus_copy_counter();
  const ::mifare::plus::counter::copy::CopyCounter& mfr_plus_copy_counter() const;
  ::mifare::plus::counter::copy::CopyCounter* release_mfr_plus_copy_counter();
  ::mifare::plus::counter::copy::CopyCounter* mutable_mfr_plus_copy_counter();
  void set_allocated_mfr_plus_copy_counter(::mifare::plus::counter::copy::CopyCounter* mfr_plus_copy_counter);
  private:
  const ::mifare::plus::counter::copy::CopyCounter& _internal_mfr_plus_copy_counter() const;
  ::mifare::plus::counter::copy::CopyCounter* _internal_mutable_mfr_plus_copy_counter();
  public:

  // optional .mifare.plus.counter.commit.CommitCounter mfr_plus_commit_counter = 24;
  bool has_mfr_plus_commit_counter() const;
  private:
  bool _internal_has_mfr_plus_commit_counter() const;
  public:
  void clear_mfr_plus_commit_counter();
  const ::mifare::plus::counter::commit::CommitCounter& mfr_plus_commit_counter() const;
  ::mifare::plus::counter::commit::CommitCounter* release_mfr_plus_commit_counter();
  ::mifare::plus::counter::commit::CommitCounter* mutable_mfr_plus_commit_counter();
  void set_allocated_mfr_plus_commit_counter(::mifare::plus::counter::commit::CommitCounter* mfr_plus_commit_counter);
  private:
  const ::mifare::plus::counter::commit::CommitCounter& _internal_mfr_plus_commit_counter() const;
  ::mifare::plus::counter::commit::CommitCounter* _internal_mutable_mfr_plus_commit_counter();
  public:

  // optional .mifare.plus.auth.SamKey mfr_plus_auth_on_sam_key = 25;
  bool has_mfr_plus_auth_on_sam_key() const;
  private:
  bool _internal_has_mfr_plus_auth_on_sam_key() const;
  public:
  void clear_mfr_plus_auth_on_sam_key();
  const ::mifare::plus::auth::SamKey& mfr_plus_auth_on_sam_key() const;
  ::mifare::plus::auth::SamKey* release_mfr_plus_auth_on_sam_key();
  ::mifare::plus::auth::SamKey* mutable_mfr_plus_auth_on_sam_key();
  void set_allocated_mfr_plus_auth_on_sam_key(::mifare::plus::auth::SamKey* mfr_plus_auth_on_sam_key);
  private:
  const ::mifare::plus::auth::SamKey& _internal_mfr_plus_auth_on_sam_key() const;
  ::mifare::plus::auth::SamKey* _internal_mutable_mfr_plus_auth_on_sam_key();
  public:

  // optional .mifare.av2.host_auth.AuthenticateHost av2_authenticate_host = 30;
  bool has_av2_authenticate_host() const;
  private:
  bool _internal_has_av2_authenticate_host() const;
  public:
  void clear_av2_authenticate_host();
  const ::mifare::av2::host_auth::AuthenticateHost& av2_authenticate_host() const;
  ::mifare::av2::host_auth::AuthenticateHost* release_av2_authenticate_host();
  ::mifare::av2::host_auth::AuthenticateHost* mutable_av2_authenticate_host();
  void set_allocated_av2_authenticate_host(::mifare::av2::host_auth::AuthenticateHost* av2_authenticate_host);
  private:
  const ::mifare::av2::host_auth::AuthenticateHost& _internal_av2_authenticate_host() const;
  ::mifare::av2::host_auth::AuthenticateHost* _internal_mutable_av2_authenticate_host();
  public:

  // optional .mifare.av2.change_keyentry.ChangeKeyEntry av2_change_keyentry = 31;
  bool has_av2_change_keyentry() const;
  private:
  bool _internal_has_av2_change_keyentry() const;
  public:
  void clear_av2_change_keyentry();
  const ::mifare::av2::change_keyentry::ChangeKeyEntry& av2_change_keyentry() const;
  ::mifare::av2::change_keyentry::ChangeKeyEntry* release_av2_change_keyentry();
  ::mifare::av2::change_keyentry::ChangeKeyEntry* mutable_av2_change_keyentry();
  void set_allocated_av2_change_keyentry(::mifare::av2::change_keyentry::ChangeKeyEntry* av2_change_keyentry);
  private:
  const ::mifare::av2::change_keyentry::ChangeKeyEntry& _internal_av2_change_keyentry() const;
  ::mifare::av2::change_keyentry::ChangeKeyEntry* _internal_mutable_av2_change_keyentry();
  public:

  // optional .mifare.av2.unlock.Unlock av2_unlock = 32;
  bool has_av2_unlock() const;
  private:
  bool _internal_has_av2_unlock() const;
  public:
  void clear_av2_unlock();
  const ::mifare::av2::unlock::Unlock& av2_unlock() const;
  ::mifare::av2::unlock::Unlock* release_av2_unlock();
  ::mifare::av2::unlock::Unlock* mutable_av2_unlock();
  void set_allocated_av2_unlock(::mifare::av2::unlock::Unlock* av2_unlock);
  private:
  const ::mifare::av2::unlock::Unlock& _internal_av2_unlock() const;
  ::mifare::av2::unlock::Unlock* _internal_mutable_av2_unlock();
  public:

  // optional .mifare.ultralight.read.ReadPages mfr_ul_read_pages = 36;
  bool has_mfr_ul_read_pages() const;
  private:
  bool _internal_has_mfr_ul_read_pages() const;
  public:
  void clear_mfr_ul_read_pages();
  const ::mifare::ultralight::read::ReadPages& mfr_ul_read_pages() const;
  ::mifare::ultralight::read::ReadPages* release_mfr_ul_read_pages();
  ::mifare::ultralight::read::ReadPages* mutable_mfr_ul_read_pages();
  void set_allocated_mfr_ul_read_pages(::mifare::ultralight::read::ReadPages* mfr_ul_read_pages);
  private:
  const ::mifare::ultralight::read::ReadPages& _internal_mfr_ul_read_pages() const;
  ::mifare::ultralight::read::ReadPages* _internal_mutable_mfr_ul_read_pages();
  public:

  // optional .mifare.ultralight.write.WritePages mfr_ul_write_pages = 37;
  bool has_mfr_ul_write_pages() const;
  private:
  bool _internal_has_mfr_ul_write_pages() const;
  public:
  void clear_mfr_ul_write_pages();
  const ::mifare::ultralight::write::WritePages& mfr_ul_write_pages() const;
  ::mifare::ultralight::write::WritePages* release_mfr_ul_write_pages();
  ::mifare::ultralight::write::WritePages* mutable_mfr_ul_write_pages();
  void set_allocated_mfr_ul_write_pages(::mifare::ultralight::write::WritePages* mfr_ul_write_pages);
  private:
  const ::mifare::ultralight::write::WritePages& _internal_mfr_ul_write_pages() const;
  ::mifare::ultralight::write::WritePages* _internal_mutable_mfr_ul_write_pages();
  public:

  // optional .mifare.ultralight.version.GetVersion mfr_ul_get_version = 38;
  bool has_mfr_ul_get_version() const;
  private:
  bool _internal_has_mfr_ul_get_version() const;
  public:
  void clear_mfr_ul_get_version();
  const ::mifare::ultralight::version::GetVersion& mfr_ul_get_version() const;
  ::mifare::ultralight::version::GetVersion* release_mfr_ul_get_version();
  ::mifare::ultralight::version::GetVersion* mutable_mfr_ul_get_version();
  void set_allocated_mfr_ul_get_version(::mifare::ultralight::version::GetVersion* mfr_ul_get_version);
  private:
  const ::mifare::ultralight::version::GetVersion& _internal_mfr_ul_get_version() const;
  ::mifare::ultralight::version::GetVersion* _internal_mutable_mfr_ul_get_version();
  public:

  // optional .mifare.ultralight.counter.get.GetCounter mfr_ul_get_counter = 39;
  bool has_mfr_ul_get_counter() const;
  private:
  bool _internal_has_mfr_ul_get_counter() const;
  public:
  void clear_mfr_ul_get_counter();
  const ::mifare::ultralight::counter::get::GetCounter& mfr_ul_get_counter() const;
  ::mifare::ultralight::counter::get::GetCounter* release_mfr_ul_get_counter();
  ::mifare::ultralight::counter::get::GetCounter* mutable_mfr_ul_get_counter();
  void set_allocated_mfr_ul_get_counter(::mifare::ultralight::counter::get::GetCounter* mfr_ul_get_counter);
  private:
  const ::mifare::ultralight::counter::get::GetCounter& _internal_mfr_ul_get_counter() const;
  ::mifare::ultralight::counter::get::GetCounter* _internal_mutable_mfr_ul_get_counter();
  public:

  // optional .mifare.ultralight.counter.increment.IncrementCounter mfr_ul_increment_counter = 40;
  bool has_mfr_ul_increment_counter() const;
  private:
  bool _internal_has_mfr_ul_increment_counter() const;
  public:
  void clear_mfr_ul_increment_counter();
  const ::mifare::ultralight::counter::increment::IncrementCounter& mfr_ul_increment_counter() const;
  ::mifare::ultralight::counter::increment::IncrementCounter* release_mfr_ul_increment_counter();
  ::mifare::ultralight::counter::increment::IncrementCounter* mutable_mfr_ul_increment_counter();
  void set_allocated_mfr_ul_increment_counter(::mifare::ultralight::counter::increment::IncrementCounter* mfr_ul_increment_counter);
  private:
  const ::mifare::ultralight::counter::increment::IncrementCounter& _internal_mfr_ul_increment_counter() const;
  ::mifare::ultralight::counter::increment::IncrementCounter* _internal_mutable_mfr_ul_increment_counter();
  public:

  // optional .mifare.ultralight.bulk.BulkOperation mfr_ul_bulk_operation = 41;
  bool has_mfr_ul_bulk_operation() const;
  private:
  bool _internal_has_mfr_ul_bulk_operation() const;
  public:
  void clear_mfr_ul_bulk_operation();
  const ::mifare::ultralight::bulk::BulkOperation& mfr_ul_bulk_operation() const;
  ::mifare::ultralight::bulk::BulkOperation* release_mfr_ul_bulk_operation();
  ::mifare::ultralight::bulk::BulkOperation* mutable_mfr_ul_bulk_operation();
  void set_allocated_mfr_ul_bulk_operation(::mifare::ultralight::bulk::BulkOperation* mfr_ul_bulk_operation);
  private:
  const ::mifare::ultralight::bulk::BulkOperation& _internal_mfr_ul_bulk_operation() const;
  ::mifare::ultralight::bulk::BulkOperation* _internal_mutable_mfr_ul_bulk_operation();
  public:

  // optional .mifare.ultralight.auth.ClearKey mfr_ul_auth_on_clear_key = 42;
  bool has_mfr_ul_auth_on_clear_key() const;
  private:
  bool _internal_has_mfr_ul_auth_on_clear_key() const;
  public:
  void clear_mfr_ul_auth_on_clear_key();
  const ::mifare::ultralight::auth::ClearKey& mfr_ul_auth_on_clear_key() const;
  ::mifare::ultralight::auth::ClearKey* release_mfr_ul_auth_on_clear_key();
  ::mifare::ultralight::auth::ClearKey* mutable_mfr_ul_auth_on_clear_key();
  void set_allocated_mfr_ul_auth_on_clear_key(::mifare::ultralight::auth::ClearKey* mfr_ul_auth_on_clear_key);
  private:
  const ::mifare::ultralight::auth::ClearKey& _internal_mfr_ul_auth_on_clear_key() const;
  ::mifare::ultralight::auth::ClearKey* _internal_mutable_mfr_ul_auth_on_clear_key();
  public:

  // optional .mifare.ultralight.auth.SamKey mfr_ul_auth_on_sam_key = 43;
  bool has_mfr_ul_auth_on_sam_key() const;
  private:
  bool _internal_has_mfr_ul_auth_on_sam_key() const;
  public:
  void clear_mfr_ul_auth_on_sam_key();
  const ::mifare::ultralight::auth::SamKey& mfr_ul_auth_on_sam_key() const;
  ::mifare::ultralight::auth::SamKey* release_mfr_ul_auth_on_sam_key();
  ::mifare::ultralight::auth::SamKey* mutable_mfr_ul_auth_on_sam_key();
  void set_allocated_mfr_ul_auth_on_sam_key(::mifare::ultralight::auth::SamKey* mfr_ul_auth_on_sam_key);
  private:
  const ::mifare::ultralight::auth::SamKey& _internal_mfr_ul_auth_on_sam_key() const;
  ::mifare::ultralight::auth::SamKey* _internal_mutable_mfr_ul_auth_on_sam_key();
  public:

  // optional .mifare.ultralight.password.ClearPassword mfr_ul_auth_clear_password = 44;
  bool has_mfr_ul_auth_clear_password() const;
  private:
  bool _internal_has_mfr_ul_auth_clear_password() const;
  public:
  void clear_mfr_ul_auth_clear_password();
  const ::mifare::ultralight::password::ClearPassword& mfr_ul_auth_clear_password() const;
  ::mifare::ultralight::password::ClearPassword* release_mfr_ul_auth_clear_password();
  ::mifare::ultralight::password::ClearPassword* mutable_mfr_ul_auth_clear_password();
  void set_allocated_mfr_ul_auth_clear_password(::mifare::ultralight::password::ClearPassword* mfr_ul_auth_clear_password);
  private:
  const ::mifare::ultralight::password::ClearPassword& _internal_mfr_ul_auth_clear_password() const;
  ::mifare::ultralight::password::ClearPassword* _internal_mutable_mfr_ul_auth_clear_password();
  public:

  // optional .mifare.ultralight.password.SamPassword mfr_ul_auth_sam_password = 45;
  bool has_mfr_ul_auth_sam_password() const;
  private:
  bool _internal_has_mfr_ul_auth_sam_password() const;
  public:
  void clear_mfr_ul_auth_sam_password();
  const ::mifare::ultralight::password::SamPassword& mfr_ul_auth_sam_password() const;
  ::mifare::ultralight::password::SamPassword* release_mfr_ul_auth_sam_password();
  ::mifare::ultralight::password::SamPassword* mutable_mfr_ul_auth_sam_password();
  void set_allocated_mfr_ul_auth_sam_password(::mifare::ultralight::password::SamPassword* mfr_ul_auth_sam_password);
  private:
  const ::mifare::ultralight::password::SamPassword& _internal_mfr_ul_auth_sam_password() const;
  ::mifare::ultralight::password::SamPassword* _internal_mutable_mfr_ul_auth_sam_password();
  public:

  void clear_mifare_cmd();
  MifareCmdCase mifare_cmd_case() const;
  // @@protoc_insertion_point(class_scope:Mifare)
 private:
  class _Internal;
  void set_has_mfr_classic_auth_on_clear_key();
  void set_has_mfr_classic_auth_on_sam_key();
  void set_has_mfr_classic_read_blocks();
  void set_has_mfr_classic_write_blocks();
  void set_has_mfr_classic_bulk_operation();
  void set_has_mfr_classic_get_counter();
  void set_has_mfr_classic_set_counter();
  void set_has_mfr_classic_modify_counter();
  void set_has_mfr_classic_copy_counter();
  void set_has_mfr_classic_commit_counter();
  void set_has_mfr_plus_auth_on_clear_key();
  void set_has_mfr_plus_read_blocks();
  void set_has_mfr_plus_write_blocks();
  void set_has_mfr_plus_bulk_operation();
  void set_has_mfr_plus_get_counter();
  void set_has_mfr_plus_set_counter();
  void set_has_mfr_plus_modify_counter();
  void set_has_mfr_plus_copy_counter();
  void set_has_mfr_plus_commit_counter();
  void set_has_mfr_plus_auth_on_sam_key();
  void set_has_av2_authenticate_host();
  void set_has_av2_change_keyentry();
  void set_has_av2_unlock();
  void set_has_mfr_ul_read_pages();
  void set_has_mfr_ul_write_pages();
  void set_has_mfr_ul_get_version();
  void set_has_mfr_ul_get_counter();
  void set_has_mfr_ul_increment_counter();
  void set_has_mfr_ul_bulk_operation();
  void set_has_mfr_ul_auth_on_clear_key();
  void set_has_mfr_ul_auth_on_sam_key();
  void set_has_mfr_ul_auth_clear_password();
  void set_has_mfr_ul_auth_sam_password();

  inline bool has_mifare_cmd() const;
  inline void clear_has_mifare_cmd();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union MifareCmdUnion {
    MifareCmdUnion() {}
    ::mifare::classic::auth::ClearKey* mfr_classic_auth_on_clear_key_;
    ::mifare::classic::auth::SamKey* mfr_classic_auth_on_sam_key_;
    ::mifare::classic::read::ReadBlocks* mfr_classic_read_blocks_;
    ::mifare::classic::write::WriteBlocks* mfr_classic_write_blocks_;
    ::mifare::classic::bulk::BulkOperation* mfr_classic_bulk_operation_;
    ::mifare::classic::counter::get::GetCounter* mfr_classic_get_counter_;
    ::mifare::classic::counter::set::SetCounter* mfr_classic_set_counter_;
    ::mifare::classic::counter::modify::ModifyCounter* mfr_classic_modify_counter_;
    ::mifare::classic::counter::copy::CopyCounter* mfr_classic_copy_counter_;
    ::mifare::classic::counter::commit::CommitCounter* mfr_classic_commit_counter_;
    ::mifare::plus::auth::ClearKey* mfr_plus_auth_on_clear_key_;
    ::mifare::plus::read::ReadBlocks* mfr_plus_read_blocks_;
    ::mifare::plus::write::WriteBlocks* mfr_plus_write_blocks_;
    ::mifare::plus::bulk::BulkOperation* mfr_plus_bulk_operation_;
    ::mifare::plus::counter::get::GetCounter* mfr_plus_get_counter_;
    ::mifare::plus::counter::set::SetCounter* mfr_plus_set_counter_;
    ::mifare::plus::counter::modify::ModifyCounter* mfr_plus_modify_counter_;
    ::mifare::plus::counter::copy::CopyCounter* mfr_plus_copy_counter_;
    ::mifare::plus::counter::commit::CommitCounter* mfr_plus_commit_counter_;
    ::mifare::plus::auth::SamKey* mfr_plus_auth_on_sam_key_;
    ::mifare::av2::host_auth::AuthenticateHost* av2_authenticate_host_;
    ::mifare::av2::change_keyentry::ChangeKeyEntry* av2_change_keyentry_;
    ::mifare::av2::unlock::Unlock* av2_unlock_;
    ::mifare::ultralight::read::ReadPages* mfr_ul_read_pages_;
    ::mifare::ultralight::write::WritePages* mfr_ul_write_pages_;
    ::mifare::ultralight::version::GetVersion* mfr_ul_get_version_;
    ::mifare::ultralight::counter::get::GetCounter* mfr_ul_get_counter_;
    ::mifare::ultralight::counter::increment::IncrementCounter* mfr_ul_increment_counter_;
    ::mifare::ultralight::bulk::BulkOperation* mfr_ul_bulk_operation_;
    ::mifare::ultralight::auth::ClearKey* mfr_ul_auth_on_clear_key_;
    ::mifare::ultralight::auth::SamKey* mfr_ul_auth_on_sam_key_;
    ::mifare::ultralight::password::ClearPassword* mfr_ul_auth_clear_password_;
    ::mifare::ultralight::password::SamPassword* mfr_ul_auth_sam_password_;
  } mifare_cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_commands7_2eproto;
};
// -------------------------------------------------------------------

class ContactLevel1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ContactLevel1) */ {
 public:
  ContactLevel1();
  virtual ~ContactLevel1();

  ContactLevel1(const ContactLevel1& from);
  ContactLevel1(ContactLevel1&& from) noexcept
    : ContactLevel1() {
    *this = ::std::move(from);
  }

  inline ContactLevel1& operator=(const ContactLevel1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContactLevel1& operator=(ContactLevel1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContactLevel1& default_instance();

  enum ContactLevel1CmdCase {
    kPowerOnCard = 1,
    kPowerOffCard = 2,
    kTransmitApdu = 3,
    CONTACT_LEVEL1_CMD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactLevel1* internal_default_instance() {
    return reinterpret_cast<const ContactLevel1*>(
               &_ContactLevel1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ContactLevel1& a, ContactLevel1& b) {
    a.Swap(&b);
  }
  inline void Swap(ContactLevel1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContactLevel1* New() const final {
    return CreateMaybeMessage<ContactLevel1>(nullptr);
  }

  ContactLevel1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContactLevel1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContactLevel1& from);
  void MergeFrom(const ContactLevel1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContactLevel1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContactLevel1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands7_2eproto);
    return ::descriptor_table_commands7_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPowerOnCardFieldNumber = 1,
    kPowerOffCardFieldNumber = 2,
    kTransmitApduFieldNumber = 3,
  };
  // optional .contact.power_on.PowerOnCard power_on_card = 1;
  bool has_power_on_card() const;
  private:
  bool _internal_has_power_on_card() const;
  public:
  void clear_power_on_card();
  const ::contact::power_on::PowerOnCard& power_on_card() const;
  ::contact::power_on::PowerOnCard* release_power_on_card();
  ::contact::power_on::PowerOnCard* mutable_power_on_card();
  void set_allocated_power_on_card(::contact::power_on::PowerOnCard* power_on_card);
  private:
  const ::contact::power_on::PowerOnCard& _internal_power_on_card() const;
  ::contact::power_on::PowerOnCard* _internal_mutable_power_on_card();
  public:

  // optional .contact.power_off.PowerOffCard power_off_card = 2;
  bool has_power_off_card() const;
  private:
  bool _internal_has_power_off_card() const;
  public:
  void clear_power_off_card();
  const ::contact::power_off::PowerOffCard& power_off_card() const;
  ::contact::power_off::PowerOffCard* release_power_off_card();
  ::contact::power_off::PowerOffCard* mutable_power_off_card();
  void set_allocated_power_off_card(::contact::power_off::PowerOffCard* power_off_card);
  private:
  const ::contact::power_off::PowerOffCard& _internal_power_off_card() const;
  ::contact::power_off::PowerOffCard* _internal_mutable_power_off_card();
  public:

  // optional .contact.iso7816_4.TransmitApdu transmit_apdu = 3;
  bool has_transmit_apdu() const;
  private:
  bool _internal_has_transmit_apdu() const;
  public:
  void clear_transmit_apdu();
  const ::contact::iso7816_4::TransmitApdu& transmit_apdu() const;
  ::contact::iso7816_4::TransmitApdu* release_transmit_apdu();
  ::contact::iso7816_4::TransmitApdu* mutable_transmit_apdu();
  void set_allocated_transmit_apdu(::contact::iso7816_4::TransmitApdu* transmit_apdu);
  private:
  const ::contact::iso7816_4::TransmitApdu& _internal_transmit_apdu() const;
  ::contact::iso7816_4::TransmitApdu* _internal_mutable_transmit_apdu();
  public:

  void clear_contact_level1_cmd();
  ContactLevel1CmdCase contact_level1_cmd_case() const;
  // @@protoc_insertion_point(class_scope:ContactLevel1)
 private:
  class _Internal;
  void set_has_power_on_card();
  void set_has_power_off_card();
  void set_has_transmit_apdu();

  inline bool has_contact_level1_cmd() const;
  inline void clear_has_contact_level1_cmd();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union ContactLevel1CmdUnion {
    ContactLevel1CmdUnion() {}
    ::contact::power_on::PowerOnCard* power_on_card_;
    ::contact::power_off::PowerOffCard* power_off_card_;
    ::contact::iso7816_4::TransmitApdu* transmit_apdu_;
  } contact_level1_cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_commands7_2eproto;
};
// -------------------------------------------------------------------

class Service :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Service) */ {
 public:
  Service();
  virtual ~Service();

  Service(const Service& from);
  Service(Service&& from) noexcept
    : Service() {
    *this = ::std::move(from);
  }

  inline Service& operator=(const Service& from) {
    CopyFrom(from);
    return *this;
  }
  inline Service& operator=(Service&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Service& default_instance();

  enum SrvCmdCase {
    kGetChallenge = 1,
    kActivateProtection = 2,
    kDeactivateProtection = 3,
    kPrepareUpdate = 4,
    kUpdateBlock = 5,
    kApplyUpdate = 6,
    kRollbackUpdate = 7,
    kGetDiagnostic = 8,
    kPrepareForConfig = 9,
    kUploadBlockOfConfig = 10,
    kCheckConfiguration = 11,
    SRV_CMD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Service* internal_default_instance() {
    return reinterpret_cast<const Service*>(
               &_Service_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Service& a, Service& b) {
    a.Swap(&b);
  }
  inline void Swap(Service* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Service* New() const final {
    return CreateMaybeMessage<Service>(nullptr);
  }

  Service* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Service>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Service& from);
  void MergeFrom(const Service& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Service* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Service";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands7_2eproto);
    return ::descriptor_table_commands7_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGetChallengeFieldNumber = 1,
    kActivateProtectionFieldNumber = 2,
    kDeactivateProtectionFieldNumber = 3,
    kPrepareUpdateFieldNumber = 4,
    kUpdateBlockFieldNumber = 5,
    kApplyUpdateFieldNumber = 6,
    kRollbackUpdateFieldNumber = 7,
    kGetDiagnosticFieldNumber = 8,
    kPrepareForConfigFieldNumber = 9,
    kUploadBlockOfConfigFieldNumber = 10,
    kCheckConfigurationFieldNumber = 11,
  };
  // optional .srv.challenge.GetChallenge get_challenge = 1;
  bool has_get_challenge() const;
  private:
  bool _internal_has_get_challenge() const;
  public:
  void clear_get_challenge();
  const ::srv::challenge::GetChallenge& get_challenge() const;
  ::srv::challenge::GetChallenge* release_get_challenge();
  ::srv::challenge::GetChallenge* mutable_get_challenge();
  void set_allocated_get_challenge(::srv::challenge::GetChallenge* get_challenge);
  private:
  const ::srv::challenge::GetChallenge& _internal_get_challenge() const;
  ::srv::challenge::GetChallenge* _internal_mutable_get_challenge();
  public:

  // optional .srv.protection.Activate activate_protection = 2;
  bool has_activate_protection() const;
  private:
  bool _internal_has_activate_protection() const;
  public:
  void clear_activate_protection();
  const ::srv::protection::Activate& activate_protection() const;
  ::srv::protection::Activate* release_activate_protection();
  ::srv::protection::Activate* mutable_activate_protection();
  void set_allocated_activate_protection(::srv::protection::Activate* activate_protection);
  private:
  const ::srv::protection::Activate& _internal_activate_protection() const;
  ::srv::protection::Activate* _internal_mutable_activate_protection();
  public:

  // optional .srv.protection.Deactivate deactivate_protection = 3;
  bool has_deactivate_protection() const;
  private:
  bool _internal_has_deactivate_protection() const;
  public:
  void clear_deactivate_protection();
  const ::srv::protection::Deactivate& deactivate_protection() const;
  ::srv::protection::Deactivate* release_deactivate_protection();
  ::srv::protection::Deactivate* mutable_deactivate_protection();
  void set_allocated_deactivate_protection(::srv::protection::Deactivate* deactivate_protection);
  private:
  const ::srv::protection::Deactivate& _internal_deactivate_protection() const;
  ::srv::protection::Deactivate* _internal_mutable_deactivate_protection();
  public:

  // optional .srv.firmware_update.Prepare prepare_update = 4;
  bool has_prepare_update() const;
  private:
  bool _internal_has_prepare_update() const;
  public:
  void clear_prepare_update();
  const ::srv::firmware_update::Prepare& prepare_update() const;
  ::srv::firmware_update::Prepare* release_prepare_update();
  ::srv::firmware_update::Prepare* mutable_prepare_update();
  void set_allocated_prepare_update(::srv::firmware_update::Prepare* prepare_update);
  private:
  const ::srv::firmware_update::Prepare& _internal_prepare_update() const;
  ::srv::firmware_update::Prepare* _internal_mutable_prepare_update();
  public:

  // optional .srv.firmware_update.UpdateBlock update_block = 5;
  bool has_update_block() const;
  private:
  bool _internal_has_update_block() const;
  public:
  void clear_update_block();
  const ::srv::firmware_update::UpdateBlock& update_block() const;
  ::srv::firmware_update::UpdateBlock* release_update_block();
  ::srv::firmware_update::UpdateBlock* mutable_update_block();
  void set_allocated_update_block(::srv::firmware_update::UpdateBlock* update_block);
  private:
  const ::srv::firmware_update::UpdateBlock& _internal_update_block() const;
  ::srv::firmware_update::UpdateBlock* _internal_mutable_update_block();
  public:

  // optional .srv.firmware_update.Apply apply_update = 6;
  bool has_apply_update() const;
  private:
  bool _internal_has_apply_update() const;
  public:
  void clear_apply_update();
  const ::srv::firmware_update::Apply& apply_update() const;
  ::srv::firmware_update::Apply* release_apply_update();
  ::srv::firmware_update::Apply* mutable_apply_update();
  void set_allocated_apply_update(::srv::firmware_update::Apply* apply_update);
  private:
  const ::srv::firmware_update::Apply& _internal_apply_update() const;
  ::srv::firmware_update::Apply* _internal_mutable_apply_update();
  public:

  // optional .srv.firmware_update.Rollback rollback_update = 7;
  bool has_rollback_update() const;
  private:
  bool _internal_has_rollback_update() const;
  public:
  void clear_rollback_update();
  const ::srv::firmware_update::Rollback& rollback_update() const;
  ::srv::firmware_update::Rollback* release_rollback_update();
  ::srv::firmware_update::Rollback* mutable_rollback_update();
  void set_allocated_rollback_update(::srv::firmware_update::Rollback* rollback_update);
  private:
  const ::srv::firmware_update::Rollback& _internal_rollback_update() const;
  ::srv::firmware_update::Rollback* _internal_mutable_rollback_update();
  public:

  // optional .srv.diagnostic.GetDiagnostic get_diagnostic = 8;
  bool has_get_diagnostic() const;
  private:
  bool _internal_has_get_diagnostic() const;
  public:
  void clear_get_diagnostic();
  const ::srv::diagnostic::GetDiagnostic& get_diagnostic() const;
  ::srv::diagnostic::GetDiagnostic* release_get_diagnostic();
  ::srv::diagnostic::GetDiagnostic* mutable_get_diagnostic();
  void set_allocated_get_diagnostic(::srv::diagnostic::GetDiagnostic* get_diagnostic);
  private:
  const ::srv::diagnostic::GetDiagnostic& _internal_get_diagnostic() const;
  ::srv::diagnostic::GetDiagnostic* _internal_mutable_get_diagnostic();
  public:

  // optional .srv.upload_config.Prepare prepare_for_config = 9;
  bool has_prepare_for_config() const;
  private:
  bool _internal_has_prepare_for_config() const;
  public:
  void clear_prepare_for_config();
  const ::srv::upload_config::Prepare& prepare_for_config() const;
  ::srv::upload_config::Prepare* release_prepare_for_config();
  ::srv::upload_config::Prepare* mutable_prepare_for_config();
  void set_allocated_prepare_for_config(::srv::upload_config::Prepare* prepare_for_config);
  private:
  const ::srv::upload_config::Prepare& _internal_prepare_for_config() const;
  ::srv::upload_config::Prepare* _internal_mutable_prepare_for_config();
  public:

  // optional .srv.upload_config.UploadBlock upload_block_of_config = 10;
  bool has_upload_block_of_config() const;
  private:
  bool _internal_has_upload_block_of_config() const;
  public:
  void clear_upload_block_of_config();
  const ::srv::upload_config::UploadBlock& upload_block_of_config() const;
  ::srv::upload_config::UploadBlock* release_upload_block_of_config();
  ::srv::upload_config::UploadBlock* mutable_upload_block_of_config();
  void set_allocated_upload_block_of_config(::srv::upload_config::UploadBlock* upload_block_of_config);
  private:
  const ::srv::upload_config::UploadBlock& _internal_upload_block_of_config() const;
  ::srv::upload_config::UploadBlock* _internal_mutable_upload_block_of_config();
  public:

  // optional .srv.upload_config.CheckConfiguration check_configuration = 11;
  bool has_check_configuration() const;
  private:
  bool _internal_has_check_configuration() const;
  public:
  void clear_check_configuration();
  const ::srv::upload_config::CheckConfiguration& check_configuration() const;
  ::srv::upload_config::CheckConfiguration* release_check_configuration();
  ::srv::upload_config::CheckConfiguration* mutable_check_configuration();
  void set_allocated_check_configuration(::srv::upload_config::CheckConfiguration* check_configuration);
  private:
  const ::srv::upload_config::CheckConfiguration& _internal_check_configuration() const;
  ::srv::upload_config::CheckConfiguration* _internal_mutable_check_configuration();
  public:

  void clear_srv_cmd();
  SrvCmdCase srv_cmd_case() const;
  // @@protoc_insertion_point(class_scope:Service)
 private:
  class _Internal;
  void set_has_get_challenge();
  void set_has_activate_protection();
  void set_has_deactivate_protection();
  void set_has_prepare_update();
  void set_has_update_block();
  void set_has_apply_update();
  void set_has_rollback_update();
  void set_has_get_diagnostic();
  void set_has_prepare_for_config();
  void set_has_upload_block_of_config();
  void set_has_check_configuration();

  inline bool has_srv_cmd() const;
  inline void clear_has_srv_cmd();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union SrvCmdUnion {
    SrvCmdUnion() {}
    ::srv::challenge::GetChallenge* get_challenge_;
    ::srv::protection::Activate* activate_protection_;
    ::srv::protection::Deactivate* deactivate_protection_;
    ::srv::firmware_update::Prepare* prepare_update_;
    ::srv::firmware_update::UpdateBlock* update_block_;
    ::srv::firmware_update::Apply* apply_update_;
    ::srv::firmware_update::Rollback* rollback_update_;
    ::srv::diagnostic::GetDiagnostic* get_diagnostic_;
    ::srv::upload_config::Prepare* prepare_for_config_;
    ::srv::upload_config::UploadBlock* upload_block_of_config_;
    ::srv::upload_config::CheckConfiguration* check_configuration_;
  } srv_cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_commands7_2eproto;
};
// -------------------------------------------------------------------

class Gui :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Gui) */ {
 public:
  Gui();
  virtual ~Gui();

  Gui(const Gui& from);
  Gui(Gui&& from) noexcept
    : Gui() {
    *this = ::std::move(from);
  }

  inline Gui& operator=(const Gui& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gui& operator=(Gui&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Gui& default_instance();

  enum GuiCmdCase {
    kShowScreen = 1,
    kInputDialog = 2,
    kMenuDialog = 3,
    kDrawBitmap = 4,
    kSlideshow = 5,
    GUI_CMD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gui* internal_default_instance() {
    return reinterpret_cast<const Gui*>(
               &_Gui_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Gui& a, Gui& b) {
    a.Swap(&b);
  }
  inline void Swap(Gui* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Gui* New() const final {
    return CreateMaybeMessage<Gui>(nullptr);
  }

  Gui* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Gui>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Gui& from);
  void MergeFrom(const Gui& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gui* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Gui";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands7_2eproto);
    return ::descriptor_table_commands7_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowScreenFieldNumber = 1,
    kInputDialogFieldNumber = 2,
    kMenuDialogFieldNumber = 3,
    kDrawBitmapFieldNumber = 4,
    kSlideshowFieldNumber = 5,
  };
  // optional .gui.screen.ShowScreen show_screen = 1;
  bool has_show_screen() const;
  private:
  bool _internal_has_show_screen() const;
  public:
  void clear_show_screen();
  const ::gui::screen::ShowScreen& show_screen() const;
  ::gui::screen::ShowScreen* release_show_screen();
  ::gui::screen::ShowScreen* mutable_show_screen();
  void set_allocated_show_screen(::gui::screen::ShowScreen* show_screen);
  private:
  const ::gui::screen::ShowScreen& _internal_show_screen() const;
  ::gui::screen::ShowScreen* _internal_mutable_show_screen();
  public:

  // optional .gui.input_dialog.InputDialog input_dialog = 2;
  bool has_input_dialog() const;
  private:
  bool _internal_has_input_dialog() const;
  public:
  void clear_input_dialog();
  const ::gui::input_dialog::InputDialog& input_dialog() const;
  ::gui::input_dialog::InputDialog* release_input_dialog();
  ::gui::input_dialog::InputDialog* mutable_input_dialog();
  void set_allocated_input_dialog(::gui::input_dialog::InputDialog* input_dialog);
  private:
  const ::gui::input_dialog::InputDialog& _internal_input_dialog() const;
  ::gui::input_dialog::InputDialog* _internal_mutable_input_dialog();
  public:

  // optional .gui.menu_dialog.MenuDialog menu_dialog = 3;
  bool has_menu_dialog() const;
  private:
  bool _internal_has_menu_dialog() const;
  public:
  void clear_menu_dialog();
  const ::gui::menu_dialog::MenuDialog& menu_dialog() const;
  ::gui::menu_dialog::MenuDialog* release_menu_dialog();
  ::gui::menu_dialog::MenuDialog* mutable_menu_dialog();
  void set_allocated_menu_dialog(::gui::menu_dialog::MenuDialog* menu_dialog);
  private:
  const ::gui::menu_dialog::MenuDialog& _internal_menu_dialog() const;
  ::gui::menu_dialog::MenuDialog* _internal_mutable_menu_dialog();
  public:

  // optional .gui.draw_bitmap.DrawBitmap draw_bitmap = 4;
  bool has_draw_bitmap() const;
  private:
  bool _internal_has_draw_bitmap() const;
  public:
  void clear_draw_bitmap();
  const ::gui::draw_bitmap::DrawBitmap& draw_bitmap() const;
  ::gui::draw_bitmap::DrawBitmap* release_draw_bitmap();
  ::gui::draw_bitmap::DrawBitmap* mutable_draw_bitmap();
  void set_allocated_draw_bitmap(::gui::draw_bitmap::DrawBitmap* draw_bitmap);
  private:
  const ::gui::draw_bitmap::DrawBitmap& _internal_draw_bitmap() const;
  ::gui::draw_bitmap::DrawBitmap* _internal_mutable_draw_bitmap();
  public:

  // optional .gui.slideshow.Slideshow slideshow = 5;
  bool has_slideshow() const;
  private:
  bool _internal_has_slideshow() const;
  public:
  void clear_slideshow();
  const ::gui::slideshow::Slideshow& slideshow() const;
  ::gui::slideshow::Slideshow* release_slideshow();
  ::gui::slideshow::Slideshow* mutable_slideshow();
  void set_allocated_slideshow(::gui::slideshow::Slideshow* slideshow);
  private:
  const ::gui::slideshow::Slideshow& _internal_slideshow() const;
  ::gui::slideshow::Slideshow* _internal_mutable_slideshow();
  public:

  void clear_gui_cmd();
  GuiCmdCase gui_cmd_case() const;
  // @@protoc_insertion_point(class_scope:Gui)
 private:
  class _Internal;
  void set_has_show_screen();
  void set_has_input_dialog();
  void set_has_menu_dialog();
  void set_has_draw_bitmap();
  void set_has_slideshow();

  inline bool has_gui_cmd() const;
  inline void clear_has_gui_cmd();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union GuiCmdUnion {
    GuiCmdUnion() {}
    ::gui::screen::ShowScreen* show_screen_;
    ::gui::input_dialog::InputDialog* input_dialog_;
    ::gui::menu_dialog::MenuDialog* menu_dialog_;
    ::gui::draw_bitmap::DrawBitmap* draw_bitmap_;
    ::gui::slideshow::Slideshow* slideshow_;
  } gui_cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_commands7_2eproto;
};
// -------------------------------------------------------------------

class MifareExtended :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MifareExtended) */ {
 public:
  MifareExtended();
  virtual ~MifareExtended();

  MifareExtended(const MifareExtended& from);
  MifareExtended(MifareExtended&& from) noexcept
    : MifareExtended() {
    *this = ::std::move(from);
  }

  inline MifareExtended& operator=(const MifareExtended& from) {
    CopyFrom(from);
    return *this;
  }
  inline MifareExtended& operator=(MifareExtended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MifareExtended& default_instance();

  enum MifareCmdCase {
    kMfrClassicReadSectors = 1,
    kMfrClassicWriteSectors = 2,
    kMfrGetVersion = 3,
    MIFARE_CMD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MifareExtended* internal_default_instance() {
    return reinterpret_cast<const MifareExtended*>(
               &_MifareExtended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MifareExtended& a, MifareExtended& b) {
    a.Swap(&b);
  }
  inline void Swap(MifareExtended* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MifareExtended* New() const final {
    return CreateMaybeMessage<MifareExtended>(nullptr);
  }

  MifareExtended* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MifareExtended>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MifareExtended& from);
  void MergeFrom(const MifareExtended& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MifareExtended* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MifareExtended";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands7_2eproto);
    return ::descriptor_table_commands7_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMfrClassicReadSectorsFieldNumber = 1,
    kMfrClassicWriteSectorsFieldNumber = 2,
    kMfrGetVersionFieldNumber = 3,
  };
  // optional .mifare.classic.sector.read.ReadSectors mfr_classic_read_sectors = 1;
  bool has_mfr_classic_read_sectors() const;
  private:
  bool _internal_has_mfr_classic_read_sectors() const;
  public:
  void clear_mfr_classic_read_sectors();
  const ::mifare::classic::sector::read::ReadSectors& mfr_classic_read_sectors() const;
  ::mifare::classic::sector::read::ReadSectors* release_mfr_classic_read_sectors();
  ::mifare::classic::sector::read::ReadSectors* mutable_mfr_classic_read_sectors();
  void set_allocated_mfr_classic_read_sectors(::mifare::classic::sector::read::ReadSectors* mfr_classic_read_sectors);
  private:
  const ::mifare::classic::sector::read::ReadSectors& _internal_mfr_classic_read_sectors() const;
  ::mifare::classic::sector::read::ReadSectors* _internal_mutable_mfr_classic_read_sectors();
  public:

  // optional .mifare.classic.sector.write.WriteSectors mfr_classic_write_sectors = 2;
  bool has_mfr_classic_write_sectors() const;
  private:
  bool _internal_has_mfr_classic_write_sectors() const;
  public:
  void clear_mfr_classic_write_sectors();
  const ::mifare::classic::sector::write::WriteSectors& mfr_classic_write_sectors() const;
  ::mifare::classic::sector::write::WriteSectors* release_mfr_classic_write_sectors();
  ::mifare::classic::sector::write::WriteSectors* mutable_mfr_classic_write_sectors();
  void set_allocated_mfr_classic_write_sectors(::mifare::classic::sector::write::WriteSectors* mfr_classic_write_sectors);
  private:
  const ::mifare::classic::sector::write::WriteSectors& _internal_mfr_classic_write_sectors() const;
  ::mifare::classic::sector::write::WriteSectors* _internal_mutable_mfr_classic_write_sectors();
  public:

  // optional .mifare.generic.get_version.GetVersion mfr_get_version = 3;
  bool has_mfr_get_version() const;
  private:
  bool _internal_has_mfr_get_version() const;
  public:
  void clear_mfr_get_version();
  const ::mifare::generic::get_version::GetVersion& mfr_get_version() const;
  ::mifare::generic::get_version::GetVersion* release_mfr_get_version();
  ::mifare::generic::get_version::GetVersion* mutable_mfr_get_version();
  void set_allocated_mfr_get_version(::mifare::generic::get_version::GetVersion* mfr_get_version);
  private:
  const ::mifare::generic::get_version::GetVersion& _internal_mfr_get_version() const;
  ::mifare::generic::get_version::GetVersion* _internal_mutable_mfr_get_version();
  public:

  void clear_mifare_cmd();
  MifareCmdCase mifare_cmd_case() const;
  // @@protoc_insertion_point(class_scope:MifareExtended)
 private:
  class _Internal;
  void set_has_mfr_classic_read_sectors();
  void set_has_mfr_classic_write_sectors();
  void set_has_mfr_get_version();

  inline bool has_mifare_cmd() const;
  inline void clear_has_mifare_cmd();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union MifareCmdUnion {
    MifareCmdUnion() {}
    ::mifare::classic::sector::read::ReadSectors* mfr_classic_read_sectors_;
    ::mifare::classic::sector::write::WriteSectors* mfr_classic_write_sectors_;
    ::mifare::generic::get_version::GetVersion* mfr_get_version_;
  } mifare_cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_commands7_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Miscellaneous

// optional .misc.leds.Leds set_leds_state = 1;
inline bool Miscellaneous::_internal_has_set_leds_state() const {
  return misc_cmd_case() == kSetLedsState;
}
inline bool Miscellaneous::has_set_leds_state() const {
  return _internal_has_set_leds_state();
}
inline void Miscellaneous::set_has_set_leds_state() {
  _oneof_case_[0] = kSetLedsState;
}
inline ::misc::leds::Leds* Miscellaneous::release_set_leds_state() {
  // @@protoc_insertion_point(field_release:Miscellaneous.set_leds_state)
  if (_internal_has_set_leds_state()) {
    clear_has_misc_cmd();
      ::misc::leds::Leds* temp = misc_cmd_.set_leds_state_;
    misc_cmd_.set_leds_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::leds::Leds& Miscellaneous::_internal_set_leds_state() const {
  return _internal_has_set_leds_state()
      ? *misc_cmd_.set_leds_state_
      : *reinterpret_cast< ::misc::leds::Leds*>(&::misc::leds::_Leds_default_instance_);
}
inline const ::misc::leds::Leds& Miscellaneous::set_leds_state() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.set_leds_state)
  return _internal_set_leds_state();
}
inline ::misc::leds::Leds* Miscellaneous::_internal_mutable_set_leds_state() {
  if (!_internal_has_set_leds_state()) {
    clear_misc_cmd();
    set_has_set_leds_state();
    misc_cmd_.set_leds_state_ = CreateMaybeMessage< ::misc::leds::Leds >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.set_leds_state_;
}
inline ::misc::leds::Leds* Miscellaneous::mutable_set_leds_state() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.set_leds_state)
  return _internal_mutable_set_leds_state();
}

// optional .misc.device.ReadDeviceInfo read_device_info = 2;
inline bool Miscellaneous::_internal_has_read_device_info() const {
  return misc_cmd_case() == kReadDeviceInfo;
}
inline bool Miscellaneous::has_read_device_info() const {
  return _internal_has_read_device_info();
}
inline void Miscellaneous::set_has_read_device_info() {
  _oneof_case_[0] = kReadDeviceInfo;
}
inline ::misc::device::ReadDeviceInfo* Miscellaneous::release_read_device_info() {
  // @@protoc_insertion_point(field_release:Miscellaneous.read_device_info)
  if (_internal_has_read_device_info()) {
    clear_has_misc_cmd();
      ::misc::device::ReadDeviceInfo* temp = misc_cmd_.read_device_info_;
    misc_cmd_.read_device_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::device::ReadDeviceInfo& Miscellaneous::_internal_read_device_info() const {
  return _internal_has_read_device_info()
      ? *misc_cmd_.read_device_info_
      : *reinterpret_cast< ::misc::device::ReadDeviceInfo*>(&::misc::device::_ReadDeviceInfo_default_instance_);
}
inline const ::misc::device::ReadDeviceInfo& Miscellaneous::read_device_info() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.read_device_info)
  return _internal_read_device_info();
}
inline ::misc::device::ReadDeviceInfo* Miscellaneous::_internal_mutable_read_device_info() {
  if (!_internal_has_read_device_info()) {
    clear_misc_cmd();
    set_has_read_device_info();
    misc_cmd_.read_device_info_ = CreateMaybeMessage< ::misc::device::ReadDeviceInfo >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.read_device_info_;
}
inline ::misc::device::ReadDeviceInfo* Miscellaneous::mutable_read_device_info() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.read_device_info)
  return _internal_mutable_read_device_info();
}

// optional .misc.reboot.Reboot reboot_device = 3;
inline bool Miscellaneous::_internal_has_reboot_device() const {
  return misc_cmd_case() == kRebootDevice;
}
inline bool Miscellaneous::has_reboot_device() const {
  return _internal_has_reboot_device();
}
inline void Miscellaneous::set_has_reboot_device() {
  _oneof_case_[0] = kRebootDevice;
}
inline ::misc::reboot::Reboot* Miscellaneous::release_reboot_device() {
  // @@protoc_insertion_point(field_release:Miscellaneous.reboot_device)
  if (_internal_has_reboot_device()) {
    clear_has_misc_cmd();
      ::misc::reboot::Reboot* temp = misc_cmd_.reboot_device_;
    misc_cmd_.reboot_device_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::reboot::Reboot& Miscellaneous::_internal_reboot_device() const {
  return _internal_has_reboot_device()
      ? *misc_cmd_.reboot_device_
      : *reinterpret_cast< ::misc::reboot::Reboot*>(&::misc::reboot::_Reboot_default_instance_);
}
inline const ::misc::reboot::Reboot& Miscellaneous::reboot_device() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.reboot_device)
  return _internal_reboot_device();
}
inline ::misc::reboot::Reboot* Miscellaneous::_internal_mutable_reboot_device() {
  if (!_internal_has_reboot_device()) {
    clear_misc_cmd();
    set_has_reboot_device();
    misc_cmd_.reboot_device_ = CreateMaybeMessage< ::misc::reboot::Reboot >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.reboot_device_;
}
inline ::misc::reboot::Reboot* Miscellaneous::mutable_reboot_device() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.reboot_device)
  return _internal_mutable_reboot_device();
}

// optional .misc.device.GetDeviceStatus get_device_status = 4;
inline bool Miscellaneous::_internal_has_get_device_status() const {
  return misc_cmd_case() == kGetDeviceStatus;
}
inline bool Miscellaneous::has_get_device_status() const {
  return _internal_has_get_device_status();
}
inline void Miscellaneous::set_has_get_device_status() {
  _oneof_case_[0] = kGetDeviceStatus;
}
inline ::misc::device::GetDeviceStatus* Miscellaneous::release_get_device_status() {
  // @@protoc_insertion_point(field_release:Miscellaneous.get_device_status)
  if (_internal_has_get_device_status()) {
    clear_has_misc_cmd();
      ::misc::device::GetDeviceStatus* temp = misc_cmd_.get_device_status_;
    misc_cmd_.get_device_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::device::GetDeviceStatus& Miscellaneous::_internal_get_device_status() const {
  return _internal_has_get_device_status()
      ? *misc_cmd_.get_device_status_
      : *reinterpret_cast< ::misc::device::GetDeviceStatus*>(&::misc::device::_GetDeviceStatus_default_instance_);
}
inline const ::misc::device::GetDeviceStatus& Miscellaneous::get_device_status() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.get_device_status)
  return _internal_get_device_status();
}
inline ::misc::device::GetDeviceStatus* Miscellaneous::_internal_mutable_get_device_status() {
  if (!_internal_has_get_device_status()) {
    clear_misc_cmd();
    set_has_get_device_status();
    misc_cmd_.get_device_status_ = CreateMaybeMessage< ::misc::device::GetDeviceStatus >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.get_device_status_;
}
inline ::misc::device::GetDeviceStatus* Miscellaneous::mutable_get_device_status() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.get_device_status)
  return _internal_mutable_get_device_status();
}

// optional .misc.buzzer.MakeSound make_sound = 6;
inline bool Miscellaneous::_internal_has_make_sound() const {
  return misc_cmd_case() == kMakeSound;
}
inline bool Miscellaneous::has_make_sound() const {
  return _internal_has_make_sound();
}
inline void Miscellaneous::set_has_make_sound() {
  _oneof_case_[0] = kMakeSound;
}
inline ::misc::buzzer::MakeSound* Miscellaneous::release_make_sound() {
  // @@protoc_insertion_point(field_release:Miscellaneous.make_sound)
  if (_internal_has_make_sound()) {
    clear_has_misc_cmd();
      ::misc::buzzer::MakeSound* temp = misc_cmd_.make_sound_;
    misc_cmd_.make_sound_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::buzzer::MakeSound& Miscellaneous::_internal_make_sound() const {
  return _internal_has_make_sound()
      ? *misc_cmd_.make_sound_
      : *reinterpret_cast< ::misc::buzzer::MakeSound*>(&::misc::buzzer::_MakeSound_default_instance_);
}
inline const ::misc::buzzer::MakeSound& Miscellaneous::make_sound() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.make_sound)
  return _internal_make_sound();
}
inline ::misc::buzzer::MakeSound* Miscellaneous::_internal_mutable_make_sound() {
  if (!_internal_has_make_sound()) {
    clear_misc_cmd();
    set_has_make_sound();
    misc_cmd_.make_sound_ = CreateMaybeMessage< ::misc::buzzer::MakeSound >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.make_sound_;
}
inline ::misc::buzzer::MakeSound* Miscellaneous::mutable_make_sound() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.make_sound)
  return _internal_mutable_make_sound();
}

// optional .misc.stats.GetDeviceStatistic get_device_statistic = 7;
inline bool Miscellaneous::_internal_has_get_device_statistic() const {
  return misc_cmd_case() == kGetDeviceStatistic;
}
inline bool Miscellaneous::has_get_device_statistic() const {
  return _internal_has_get_device_statistic();
}
inline void Miscellaneous::set_has_get_device_statistic() {
  _oneof_case_[0] = kGetDeviceStatistic;
}
inline ::misc::stats::GetDeviceStatistic* Miscellaneous::release_get_device_statistic() {
  // @@protoc_insertion_point(field_release:Miscellaneous.get_device_statistic)
  if (_internal_has_get_device_statistic()) {
    clear_has_misc_cmd();
      ::misc::stats::GetDeviceStatistic* temp = misc_cmd_.get_device_statistic_;
    misc_cmd_.get_device_statistic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::stats::GetDeviceStatistic& Miscellaneous::_internal_get_device_statistic() const {
  return _internal_has_get_device_statistic()
      ? *misc_cmd_.get_device_statistic_
      : *reinterpret_cast< ::misc::stats::GetDeviceStatistic*>(&::misc::stats::_GetDeviceStatistic_default_instance_);
}
inline const ::misc::stats::GetDeviceStatistic& Miscellaneous::get_device_statistic() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.get_device_statistic)
  return _internal_get_device_statistic();
}
inline ::misc::stats::GetDeviceStatistic* Miscellaneous::_internal_mutable_get_device_statistic() {
  if (!_internal_has_get_device_statistic()) {
    clear_misc_cmd();
    set_has_get_device_statistic();
    misc_cmd_.get_device_statistic_ = CreateMaybeMessage< ::misc::stats::GetDeviceStatistic >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.get_device_statistic_;
}
inline ::misc::stats::GetDeviceStatistic* Miscellaneous::mutable_get_device_statistic() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.get_device_statistic)
  return _internal_mutable_get_device_statistic();
}

// optional .misc.echo.GetEcho get_echo = 8;
inline bool Miscellaneous::_internal_has_get_echo() const {
  return misc_cmd_case() == kGetEcho;
}
inline bool Miscellaneous::has_get_echo() const {
  return _internal_has_get_echo();
}
inline void Miscellaneous::set_has_get_echo() {
  _oneof_case_[0] = kGetEcho;
}
inline ::misc::echo::GetEcho* Miscellaneous::release_get_echo() {
  // @@protoc_insertion_point(field_release:Miscellaneous.get_echo)
  if (_internal_has_get_echo()) {
    clear_has_misc_cmd();
      ::misc::echo::GetEcho* temp = misc_cmd_.get_echo_;
    misc_cmd_.get_echo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::echo::GetEcho& Miscellaneous::_internal_get_echo() const {
  return _internal_has_get_echo()
      ? *misc_cmd_.get_echo_
      : *reinterpret_cast< ::misc::echo::GetEcho*>(&::misc::echo::_GetEcho_default_instance_);
}
inline const ::misc::echo::GetEcho& Miscellaneous::get_echo() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.get_echo)
  return _internal_get_echo();
}
inline ::misc::echo::GetEcho* Miscellaneous::_internal_mutable_get_echo() {
  if (!_internal_has_get_echo()) {
    clear_misc_cmd();
    set_has_get_echo();
    misc_cmd_.get_echo_ = CreateMaybeMessage< ::misc::echo::GetEcho >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.get_echo_;
}
inline ::misc::echo::GetEcho* Miscellaneous::mutable_get_echo() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.get_echo)
  return _internal_mutable_get_echo();
}

// optional .misc.baudrate.ChangeBaudrate change_baudrate = 9;
inline bool Miscellaneous::_internal_has_change_baudrate() const {
  return misc_cmd_case() == kChangeBaudrate;
}
inline bool Miscellaneous::has_change_baudrate() const {
  return _internal_has_change_baudrate();
}
inline void Miscellaneous::set_has_change_baudrate() {
  _oneof_case_[0] = kChangeBaudrate;
}
inline ::misc::baudrate::ChangeBaudrate* Miscellaneous::release_change_baudrate() {
  // @@protoc_insertion_point(field_release:Miscellaneous.change_baudrate)
  if (_internal_has_change_baudrate()) {
    clear_has_misc_cmd();
      ::misc::baudrate::ChangeBaudrate* temp = misc_cmd_.change_baudrate_;
    misc_cmd_.change_baudrate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::baudrate::ChangeBaudrate& Miscellaneous::_internal_change_baudrate() const {
  return _internal_has_change_baudrate()
      ? *misc_cmd_.change_baudrate_
      : *reinterpret_cast< ::misc::baudrate::ChangeBaudrate*>(&::misc::baudrate::_ChangeBaudrate_default_instance_);
}
inline const ::misc::baudrate::ChangeBaudrate& Miscellaneous::change_baudrate() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.change_baudrate)
  return _internal_change_baudrate();
}
inline ::misc::baudrate::ChangeBaudrate* Miscellaneous::_internal_mutable_change_baudrate() {
  if (!_internal_has_change_baudrate()) {
    clear_misc_cmd();
    set_has_change_baudrate();
    misc_cmd_.change_baudrate_ = CreateMaybeMessage< ::misc::baudrate::ChangeBaudrate >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.change_baudrate_;
}
inline ::misc::baudrate::ChangeBaudrate* Miscellaneous::mutable_change_baudrate() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.change_baudrate)
  return _internal_mutable_change_baudrate();
}

// optional .misc.lan_settings.ChangeLanSettings change_lan_settings = 10;
inline bool Miscellaneous::_internal_has_change_lan_settings() const {
  return misc_cmd_case() == kChangeLanSettings;
}
inline bool Miscellaneous::has_change_lan_settings() const {
  return _internal_has_change_lan_settings();
}
inline void Miscellaneous::set_has_change_lan_settings() {
  _oneof_case_[0] = kChangeLanSettings;
}
inline ::misc::lan_settings::ChangeLanSettings* Miscellaneous::release_change_lan_settings() {
  // @@protoc_insertion_point(field_release:Miscellaneous.change_lan_settings)
  if (_internal_has_change_lan_settings()) {
    clear_has_misc_cmd();
      ::misc::lan_settings::ChangeLanSettings* temp = misc_cmd_.change_lan_settings_;
    misc_cmd_.change_lan_settings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::lan_settings::ChangeLanSettings& Miscellaneous::_internal_change_lan_settings() const {
  return _internal_has_change_lan_settings()
      ? *misc_cmd_.change_lan_settings_
      : *reinterpret_cast< ::misc::lan_settings::ChangeLanSettings*>(&::misc::lan_settings::_ChangeLanSettings_default_instance_);
}
inline const ::misc::lan_settings::ChangeLanSettings& Miscellaneous::change_lan_settings() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.change_lan_settings)
  return _internal_change_lan_settings();
}
inline ::misc::lan_settings::ChangeLanSettings* Miscellaneous::_internal_mutable_change_lan_settings() {
  if (!_internal_has_change_lan_settings()) {
    clear_misc_cmd();
    set_has_change_lan_settings();
    misc_cmd_.change_lan_settings_ = CreateMaybeMessage< ::misc::lan_settings::ChangeLanSettings >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.change_lan_settings_;
}
inline ::misc::lan_settings::ChangeLanSettings* Miscellaneous::mutable_change_lan_settings() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.change_lan_settings)
  return _internal_mutable_change_lan_settings();
}

inline bool Miscellaneous::has_misc_cmd() const {
  return misc_cmd_case() != MISC_CMD_NOT_SET;
}
inline void Miscellaneous::clear_has_misc_cmd() {
  _oneof_case_[0] = MISC_CMD_NOT_SET;
}
inline Miscellaneous::MiscCmdCase Miscellaneous::misc_cmd_case() const {
  return Miscellaneous::MiscCmdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ContactlessLevel1

// optional .contactless.poll.PollForToken poll_for_token = 1;
inline bool ContactlessLevel1::_internal_has_poll_for_token() const {
  return contactless_level1_cmd_case() == kPollForToken;
}
inline bool ContactlessLevel1::has_poll_for_token() const {
  return _internal_has_poll_for_token();
}
inline void ContactlessLevel1::set_has_poll_for_token() {
  _oneof_case_[0] = kPollForToken;
}
inline ::contactless::poll::PollForToken* ContactlessLevel1::release_poll_for_token() {
  // @@protoc_insertion_point(field_release:ContactlessLevel1.poll_for_token)
  if (_internal_has_poll_for_token()) {
    clear_has_contactless_level1_cmd();
      ::contactless::poll::PollForToken* temp = contactless_level1_cmd_.poll_for_token_;
    contactless_level1_cmd_.poll_for_token_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::contactless::poll::PollForToken& ContactlessLevel1::_internal_poll_for_token() const {
  return _internal_has_poll_for_token()
      ? *contactless_level1_cmd_.poll_for_token_
      : *reinterpret_cast< ::contactless::poll::PollForToken*>(&::contactless::poll::_PollForToken_default_instance_);
}
inline const ::contactless::poll::PollForToken& ContactlessLevel1::poll_for_token() const {
  // @@protoc_insertion_point(field_get:ContactlessLevel1.poll_for_token)
  return _internal_poll_for_token();
}
inline ::contactless::poll::PollForToken* ContactlessLevel1::_internal_mutable_poll_for_token() {
  if (!_internal_has_poll_for_token()) {
    clear_contactless_level1_cmd();
    set_has_poll_for_token();
    contactless_level1_cmd_.poll_for_token_ = CreateMaybeMessage< ::contactless::poll::PollForToken >(
        GetArenaNoVirtual());
  }
  return contactless_level1_cmd_.poll_for_token_;
}
inline ::contactless::poll::PollForToken* ContactlessLevel1::mutable_poll_for_token() {
  // @@protoc_insertion_point(field_mutable:ContactlessLevel1.poll_for_token)
  return _internal_mutable_poll_for_token();
}

// optional .contactless.emv_removal.EmvRemoval emv_removal = 2;
inline bool ContactlessLevel1::_internal_has_emv_removal() const {
  return contactless_level1_cmd_case() == kEmvRemoval;
}
inline bool ContactlessLevel1::has_emv_removal() const {
  return _internal_has_emv_removal();
}
inline void ContactlessLevel1::set_has_emv_removal() {
  _oneof_case_[0] = kEmvRemoval;
}
inline ::contactless::emv_removal::EmvRemoval* ContactlessLevel1::release_emv_removal() {
  // @@protoc_insertion_point(field_release:ContactlessLevel1.emv_removal)
  if (_internal_has_emv_removal()) {
    clear_has_contactless_level1_cmd();
      ::contactless::emv_removal::EmvRemoval* temp = contactless_level1_cmd_.emv_removal_;
    contactless_level1_cmd_.emv_removal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::contactless::emv_removal::EmvRemoval& ContactlessLevel1::_internal_emv_removal() const {
  return _internal_has_emv_removal()
      ? *contactless_level1_cmd_.emv_removal_
      : *reinterpret_cast< ::contactless::emv_removal::EmvRemoval*>(&::contactless::emv_removal::_EmvRemoval_default_instance_);
}
inline const ::contactless::emv_removal::EmvRemoval& ContactlessLevel1::emv_removal() const {
  // @@protoc_insertion_point(field_get:ContactlessLevel1.emv_removal)
  return _internal_emv_removal();
}
inline ::contactless::emv_removal::EmvRemoval* ContactlessLevel1::_internal_mutable_emv_removal() {
  if (!_internal_has_emv_removal()) {
    clear_contactless_level1_cmd();
    set_has_emv_removal();
    contactless_level1_cmd_.emv_removal_ = CreateMaybeMessage< ::contactless::emv_removal::EmvRemoval >(
        GetArenaNoVirtual());
  }
  return contactless_level1_cmd_.emv_removal_;
}
inline ::contactless::emv_removal::EmvRemoval* ContactlessLevel1::mutable_emv_removal() {
  // @@protoc_insertion_point(field_mutable:ContactlessLevel1.emv_removal)
  return _internal_mutable_emv_removal();
}

// optional .contactless.transceive.TransceiveBitArray tsv_bit_array = 3;
inline bool ContactlessLevel1::_internal_has_tsv_bit_array() const {
  return contactless_level1_cmd_case() == kTsvBitArray;
}
inline bool ContactlessLevel1::has_tsv_bit_array() const {
  return _internal_has_tsv_bit_array();
}
inline void ContactlessLevel1::set_has_tsv_bit_array() {
  _oneof_case_[0] = kTsvBitArray;
}
inline ::contactless::transceive::TransceiveBitArray* ContactlessLevel1::release_tsv_bit_array() {
  // @@protoc_insertion_point(field_release:ContactlessLevel1.tsv_bit_array)
  if (_internal_has_tsv_bit_array()) {
    clear_has_contactless_level1_cmd();
      ::contactless::transceive::TransceiveBitArray* temp = contactless_level1_cmd_.tsv_bit_array_;
    contactless_level1_cmd_.tsv_bit_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::contactless::transceive::TransceiveBitArray& ContactlessLevel1::_internal_tsv_bit_array() const {
  return _internal_has_tsv_bit_array()
      ? *contactless_level1_cmd_.tsv_bit_array_
      : *reinterpret_cast< ::contactless::transceive::TransceiveBitArray*>(&::contactless::transceive::_TransceiveBitArray_default_instance_);
}
inline const ::contactless::transceive::TransceiveBitArray& ContactlessLevel1::tsv_bit_array() const {
  // @@protoc_insertion_point(field_get:ContactlessLevel1.tsv_bit_array)
  return _internal_tsv_bit_array();
}
inline ::contactless::transceive::TransceiveBitArray* ContactlessLevel1::_internal_mutable_tsv_bit_array() {
  if (!_internal_has_tsv_bit_array()) {
    clear_contactless_level1_cmd();
    set_has_tsv_bit_array();
    contactless_level1_cmd_.tsv_bit_array_ = CreateMaybeMessage< ::contactless::transceive::TransceiveBitArray >(
        GetArenaNoVirtual());
  }
  return contactless_level1_cmd_.tsv_bit_array_;
}
inline ::contactless::transceive::TransceiveBitArray* ContactlessLevel1::mutable_tsv_bit_array() {
  // @@protoc_insertion_point(field_mutable:ContactlessLevel1.tsv_bit_array)
  return _internal_mutable_tsv_bit_array();
}

// optional .contactless.iso14443_4.Command iso14443_4_command = 4;
inline bool ContactlessLevel1::_internal_has_iso14443_4_command() const {
  return contactless_level1_cmd_case() == kIso144434Command;
}
inline bool ContactlessLevel1::has_iso14443_4_command() const {
  return _internal_has_iso14443_4_command();
}
inline void ContactlessLevel1::set_has_iso14443_4_command() {
  _oneof_case_[0] = kIso144434Command;
}
inline ::contactless::iso14443_4::Command* ContactlessLevel1::release_iso14443_4_command() {
  // @@protoc_insertion_point(field_release:ContactlessLevel1.iso14443_4_command)
  if (_internal_has_iso14443_4_command()) {
    clear_has_contactless_level1_cmd();
      ::contactless::iso14443_4::Command* temp = contactless_level1_cmd_.iso14443_4_command_;
    contactless_level1_cmd_.iso14443_4_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::contactless::iso14443_4::Command& ContactlessLevel1::_internal_iso14443_4_command() const {
  return _internal_has_iso14443_4_command()
      ? *contactless_level1_cmd_.iso14443_4_command_
      : *reinterpret_cast< ::contactless::iso14443_4::Command*>(&::contactless::iso14443_4::_Command_default_instance_);
}
inline const ::contactless::iso14443_4::Command& ContactlessLevel1::iso14443_4_command() const {
  // @@protoc_insertion_point(field_get:ContactlessLevel1.iso14443_4_command)
  return _internal_iso14443_4_command();
}
inline ::contactless::iso14443_4::Command* ContactlessLevel1::_internal_mutable_iso14443_4_command() {
  if (!_internal_has_iso14443_4_command()) {
    clear_contactless_level1_cmd();
    set_has_iso14443_4_command();
    contactless_level1_cmd_.iso14443_4_command_ = CreateMaybeMessage< ::contactless::iso14443_4::Command >(
        GetArenaNoVirtual());
  }
  return contactless_level1_cmd_.iso14443_4_command_;
}
inline ::contactless::iso14443_4::Command* ContactlessLevel1::mutable_iso14443_4_command() {
  // @@protoc_insertion_point(field_mutable:ContactlessLevel1.iso14443_4_command)
  return _internal_mutable_iso14443_4_command();
}

// optional .contactless.rf_field.PowerOffField power_off_field = 5;
inline bool ContactlessLevel1::_internal_has_power_off_field() const {
  return contactless_level1_cmd_case() == kPowerOffField;
}
inline bool ContactlessLevel1::has_power_off_field() const {
  return _internal_has_power_off_field();
}
inline void ContactlessLevel1::set_has_power_off_field() {
  _oneof_case_[0] = kPowerOffField;
}
inline ::contactless::rf_field::PowerOffField* ContactlessLevel1::release_power_off_field() {
  // @@protoc_insertion_point(field_release:ContactlessLevel1.power_off_field)
  if (_internal_has_power_off_field()) {
    clear_has_contactless_level1_cmd();
      ::contactless::rf_field::PowerOffField* temp = contactless_level1_cmd_.power_off_field_;
    contactless_level1_cmd_.power_off_field_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::contactless::rf_field::PowerOffField& ContactlessLevel1::_internal_power_off_field() const {
  return _internal_has_power_off_field()
      ? *contactless_level1_cmd_.power_off_field_
      : *reinterpret_cast< ::contactless::rf_field::PowerOffField*>(&::contactless::rf_field::_PowerOffField_default_instance_);
}
inline const ::contactless::rf_field::PowerOffField& ContactlessLevel1::power_off_field() const {
  // @@protoc_insertion_point(field_get:ContactlessLevel1.power_off_field)
  return _internal_power_off_field();
}
inline ::contactless::rf_field::PowerOffField* ContactlessLevel1::_internal_mutable_power_off_field() {
  if (!_internal_has_power_off_field()) {
    clear_contactless_level1_cmd();
    set_has_power_off_field();
    contactless_level1_cmd_.power_off_field_ = CreateMaybeMessage< ::contactless::rf_field::PowerOffField >(
        GetArenaNoVirtual());
  }
  return contactless_level1_cmd_.power_off_field_;
}
inline ::contactless::rf_field::PowerOffField* ContactlessLevel1::mutable_power_off_field() {
  // @@protoc_insertion_point(field_mutable:ContactlessLevel1.power_off_field)
  return _internal_mutable_power_off_field();
}

// optional .contactless.iso14443_4a.RequestForAnswerToSelect request_for_ats = 6;
inline bool ContactlessLevel1::_internal_has_request_for_ats() const {
  return contactless_level1_cmd_case() == kRequestForAts;
}
inline bool ContactlessLevel1::has_request_for_ats() const {
  return _internal_has_request_for_ats();
}
inline void ContactlessLevel1::set_has_request_for_ats() {
  _oneof_case_[0] = kRequestForAts;
}
inline ::contactless::iso14443_4a::RequestForAnswerToSelect* ContactlessLevel1::release_request_for_ats() {
  // @@protoc_insertion_point(field_release:ContactlessLevel1.request_for_ats)
  if (_internal_has_request_for_ats()) {
    clear_has_contactless_level1_cmd();
      ::contactless::iso14443_4a::RequestForAnswerToSelect* temp = contactless_level1_cmd_.request_for_ats_;
    contactless_level1_cmd_.request_for_ats_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::contactless::iso14443_4a::RequestForAnswerToSelect& ContactlessLevel1::_internal_request_for_ats() const {
  return _internal_has_request_for_ats()
      ? *contactless_level1_cmd_.request_for_ats_
      : *reinterpret_cast< ::contactless::iso14443_4a::RequestForAnswerToSelect*>(&::contactless::iso14443_4a::_RequestForAnswerToSelect_default_instance_);
}
inline const ::contactless::iso14443_4a::RequestForAnswerToSelect& ContactlessLevel1::request_for_ats() const {
  // @@protoc_insertion_point(field_get:ContactlessLevel1.request_for_ats)
  return _internal_request_for_ats();
}
inline ::contactless::iso14443_4a::RequestForAnswerToSelect* ContactlessLevel1::_internal_mutable_request_for_ats() {
  if (!_internal_has_request_for_ats()) {
    clear_contactless_level1_cmd();
    set_has_request_for_ats();
    contactless_level1_cmd_.request_for_ats_ = CreateMaybeMessage< ::contactless::iso14443_4a::RequestForAnswerToSelect >(
        GetArenaNoVirtual());
  }
  return contactless_level1_cmd_.request_for_ats_;
}
inline ::contactless::iso14443_4a::RequestForAnswerToSelect* ContactlessLevel1::mutable_request_for_ats() {
  // @@protoc_insertion_point(field_mutable:ContactlessLevel1.request_for_ats)
  return _internal_mutable_request_for_ats();
}

inline bool ContactlessLevel1::has_contactless_level1_cmd() const {
  return contactless_level1_cmd_case() != CONTACTLESS_LEVEL1_CMD_NOT_SET;
}
inline void ContactlessLevel1::clear_has_contactless_level1_cmd() {
  _oneof_case_[0] = CONTACTLESS_LEVEL1_CMD_NOT_SET;
}
inline ContactlessLevel1::ContactlessLevel1CmdCase ContactlessLevel1::contactless_level1_cmd_case() const {
  return ContactlessLevel1::ContactlessLevel1CmdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ContactlessLevel2

// optional .contactless.transaction.PerformTransaction perform_transaction = 1;
inline bool ContactlessLevel2::_internal_has_perform_transaction() const {
  return contactless_level2_cmd_case() == kPerformTransaction;
}
inline bool ContactlessLevel2::has_perform_transaction() const {
  return _internal_has_perform_transaction();
}
inline void ContactlessLevel2::set_has_perform_transaction() {
  _oneof_case_[0] = kPerformTransaction;
}
inline ::contactless::transaction::PerformTransaction* ContactlessLevel2::release_perform_transaction() {
  // @@protoc_insertion_point(field_release:ContactlessLevel2.perform_transaction)
  if (_internal_has_perform_transaction()) {
    clear_has_contactless_level2_cmd();
      ::contactless::transaction::PerformTransaction* temp = contactless_level2_cmd_.perform_transaction_;
    contactless_level2_cmd_.perform_transaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::contactless::transaction::PerformTransaction& ContactlessLevel2::_internal_perform_transaction() const {
  return _internal_has_perform_transaction()
      ? *contactless_level2_cmd_.perform_transaction_
      : *reinterpret_cast< ::contactless::transaction::PerformTransaction*>(&::contactless::transaction::_PerformTransaction_default_instance_);
}
inline const ::contactless::transaction::PerformTransaction& ContactlessLevel2::perform_transaction() const {
  // @@protoc_insertion_point(field_get:ContactlessLevel2.perform_transaction)
  return _internal_perform_transaction();
}
inline ::contactless::transaction::PerformTransaction* ContactlessLevel2::_internal_mutable_perform_transaction() {
  if (!_internal_has_perform_transaction()) {
    clear_contactless_level2_cmd();
    set_has_perform_transaction();
    contactless_level2_cmd_.perform_transaction_ = CreateMaybeMessage< ::contactless::transaction::PerformTransaction >(
        GetArenaNoVirtual());
  }
  return contactless_level2_cmd_.perform_transaction_;
}
inline ::contactless::transaction::PerformTransaction* ContactlessLevel2::mutable_perform_transaction() {
  // @@protoc_insertion_point(field_mutable:ContactlessLevel2.perform_transaction)
  return _internal_mutable_perform_transaction();
}

inline bool ContactlessLevel2::has_contactless_level2_cmd() const {
  return contactless_level2_cmd_case() != CONTACTLESS_LEVEL2_CMD_NOT_SET;
}
inline void ContactlessLevel2::clear_has_contactless_level2_cmd() {
  _oneof_case_[0] = CONTACTLESS_LEVEL2_CMD_NOT_SET;
}
inline ContactlessLevel2::ContactlessLevel2CmdCase ContactlessLevel2::contactless_level2_cmd_case() const {
  return ContactlessLevel2::ContactlessLevel2CmdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Mifare

// optional .mifare.classic.auth.ClearKey mfr_classic_auth_on_clear_key = 1;
inline bool Mifare::_internal_has_mfr_classic_auth_on_clear_key() const {
  return mifare_cmd_case() == kMfrClassicAuthOnClearKey;
}
inline bool Mifare::has_mfr_classic_auth_on_clear_key() const {
  return _internal_has_mfr_classic_auth_on_clear_key();
}
inline void Mifare::set_has_mfr_classic_auth_on_clear_key() {
  _oneof_case_[0] = kMfrClassicAuthOnClearKey;
}
inline ::mifare::classic::auth::ClearKey* Mifare::release_mfr_classic_auth_on_clear_key() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_classic_auth_on_clear_key)
  if (_internal_has_mfr_classic_auth_on_clear_key()) {
    clear_has_mifare_cmd();
      ::mifare::classic::auth::ClearKey* temp = mifare_cmd_.mfr_classic_auth_on_clear_key_;
    mifare_cmd_.mfr_classic_auth_on_clear_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::classic::auth::ClearKey& Mifare::_internal_mfr_classic_auth_on_clear_key() const {
  return _internal_has_mfr_classic_auth_on_clear_key()
      ? *mifare_cmd_.mfr_classic_auth_on_clear_key_
      : *reinterpret_cast< ::mifare::classic::auth::ClearKey*>(&::mifare::classic::auth::_ClearKey_default_instance_);
}
inline const ::mifare::classic::auth::ClearKey& Mifare::mfr_classic_auth_on_clear_key() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_classic_auth_on_clear_key)
  return _internal_mfr_classic_auth_on_clear_key();
}
inline ::mifare::classic::auth::ClearKey* Mifare::_internal_mutable_mfr_classic_auth_on_clear_key() {
  if (!_internal_has_mfr_classic_auth_on_clear_key()) {
    clear_mifare_cmd();
    set_has_mfr_classic_auth_on_clear_key();
    mifare_cmd_.mfr_classic_auth_on_clear_key_ = CreateMaybeMessage< ::mifare::classic::auth::ClearKey >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_classic_auth_on_clear_key_;
}
inline ::mifare::classic::auth::ClearKey* Mifare::mutable_mfr_classic_auth_on_clear_key() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_classic_auth_on_clear_key)
  return _internal_mutable_mfr_classic_auth_on_clear_key();
}

// optional .mifare.classic.auth.SamKey mfr_classic_auth_on_sam_key = 2;
inline bool Mifare::_internal_has_mfr_classic_auth_on_sam_key() const {
  return mifare_cmd_case() == kMfrClassicAuthOnSamKey;
}
inline bool Mifare::has_mfr_classic_auth_on_sam_key() const {
  return _internal_has_mfr_classic_auth_on_sam_key();
}
inline void Mifare::set_has_mfr_classic_auth_on_sam_key() {
  _oneof_case_[0] = kMfrClassicAuthOnSamKey;
}
inline ::mifare::classic::auth::SamKey* Mifare::release_mfr_classic_auth_on_sam_key() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_classic_auth_on_sam_key)
  if (_internal_has_mfr_classic_auth_on_sam_key()) {
    clear_has_mifare_cmd();
      ::mifare::classic::auth::SamKey* temp = mifare_cmd_.mfr_classic_auth_on_sam_key_;
    mifare_cmd_.mfr_classic_auth_on_sam_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::classic::auth::SamKey& Mifare::_internal_mfr_classic_auth_on_sam_key() const {
  return _internal_has_mfr_classic_auth_on_sam_key()
      ? *mifare_cmd_.mfr_classic_auth_on_sam_key_
      : *reinterpret_cast< ::mifare::classic::auth::SamKey*>(&::mifare::classic::auth::_SamKey_default_instance_);
}
inline const ::mifare::classic::auth::SamKey& Mifare::mfr_classic_auth_on_sam_key() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_classic_auth_on_sam_key)
  return _internal_mfr_classic_auth_on_sam_key();
}
inline ::mifare::classic::auth::SamKey* Mifare::_internal_mutable_mfr_classic_auth_on_sam_key() {
  if (!_internal_has_mfr_classic_auth_on_sam_key()) {
    clear_mifare_cmd();
    set_has_mfr_classic_auth_on_sam_key();
    mifare_cmd_.mfr_classic_auth_on_sam_key_ = CreateMaybeMessage< ::mifare::classic::auth::SamKey >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_classic_auth_on_sam_key_;
}
inline ::mifare::classic::auth::SamKey* Mifare::mutable_mfr_classic_auth_on_sam_key() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_classic_auth_on_sam_key)
  return _internal_mutable_mfr_classic_auth_on_sam_key();
}

// optional .mifare.classic.read.ReadBlocks mfr_classic_read_blocks = 3;
inline bool Mifare::_internal_has_mfr_classic_read_blocks() const {
  return mifare_cmd_case() == kMfrClassicReadBlocks;
}
inline bool Mifare::has_mfr_classic_read_blocks() const {
  return _internal_has_mfr_classic_read_blocks();
}
inline void Mifare::set_has_mfr_classic_read_blocks() {
  _oneof_case_[0] = kMfrClassicReadBlocks;
}
inline ::mifare::classic::read::ReadBlocks* Mifare::release_mfr_classic_read_blocks() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_classic_read_blocks)
  if (_internal_has_mfr_classic_read_blocks()) {
    clear_has_mifare_cmd();
      ::mifare::classic::read::ReadBlocks* temp = mifare_cmd_.mfr_classic_read_blocks_;
    mifare_cmd_.mfr_classic_read_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::classic::read::ReadBlocks& Mifare::_internal_mfr_classic_read_blocks() const {
  return _internal_has_mfr_classic_read_blocks()
      ? *mifare_cmd_.mfr_classic_read_blocks_
      : *reinterpret_cast< ::mifare::classic::read::ReadBlocks*>(&::mifare::classic::read::_ReadBlocks_default_instance_);
}
inline const ::mifare::classic::read::ReadBlocks& Mifare::mfr_classic_read_blocks() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_classic_read_blocks)
  return _internal_mfr_classic_read_blocks();
}
inline ::mifare::classic::read::ReadBlocks* Mifare::_internal_mutable_mfr_classic_read_blocks() {
  if (!_internal_has_mfr_classic_read_blocks()) {
    clear_mifare_cmd();
    set_has_mfr_classic_read_blocks();
    mifare_cmd_.mfr_classic_read_blocks_ = CreateMaybeMessage< ::mifare::classic::read::ReadBlocks >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_classic_read_blocks_;
}
inline ::mifare::classic::read::ReadBlocks* Mifare::mutable_mfr_classic_read_blocks() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_classic_read_blocks)
  return _internal_mutable_mfr_classic_read_blocks();
}

// optional .mifare.classic.write.WriteBlocks mfr_classic_write_blocks = 4;
inline bool Mifare::_internal_has_mfr_classic_write_blocks() const {
  return mifare_cmd_case() == kMfrClassicWriteBlocks;
}
inline bool Mifare::has_mfr_classic_write_blocks() const {
  return _internal_has_mfr_classic_write_blocks();
}
inline void Mifare::set_has_mfr_classic_write_blocks() {
  _oneof_case_[0] = kMfrClassicWriteBlocks;
}
inline ::mifare::classic::write::WriteBlocks* Mifare::release_mfr_classic_write_blocks() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_classic_write_blocks)
  if (_internal_has_mfr_classic_write_blocks()) {
    clear_has_mifare_cmd();
      ::mifare::classic::write::WriteBlocks* temp = mifare_cmd_.mfr_classic_write_blocks_;
    mifare_cmd_.mfr_classic_write_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::classic::write::WriteBlocks& Mifare::_internal_mfr_classic_write_blocks() const {
  return _internal_has_mfr_classic_write_blocks()
      ? *mifare_cmd_.mfr_classic_write_blocks_
      : *reinterpret_cast< ::mifare::classic::write::WriteBlocks*>(&::mifare::classic::write::_WriteBlocks_default_instance_);
}
inline const ::mifare::classic::write::WriteBlocks& Mifare::mfr_classic_write_blocks() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_classic_write_blocks)
  return _internal_mfr_classic_write_blocks();
}
inline ::mifare::classic::write::WriteBlocks* Mifare::_internal_mutable_mfr_classic_write_blocks() {
  if (!_internal_has_mfr_classic_write_blocks()) {
    clear_mifare_cmd();
    set_has_mfr_classic_write_blocks();
    mifare_cmd_.mfr_classic_write_blocks_ = CreateMaybeMessage< ::mifare::classic::write::WriteBlocks >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_classic_write_blocks_;
}
inline ::mifare::classic::write::WriteBlocks* Mifare::mutable_mfr_classic_write_blocks() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_classic_write_blocks)
  return _internal_mutable_mfr_classic_write_blocks();
}

// optional .mifare.classic.bulk.BulkOperation mfr_classic_bulk_operation = 5;
inline bool Mifare::_internal_has_mfr_classic_bulk_operation() const {
  return mifare_cmd_case() == kMfrClassicBulkOperation;
}
inline bool Mifare::has_mfr_classic_bulk_operation() const {
  return _internal_has_mfr_classic_bulk_operation();
}
inline void Mifare::set_has_mfr_classic_bulk_operation() {
  _oneof_case_[0] = kMfrClassicBulkOperation;
}
inline ::mifare::classic::bulk::BulkOperation* Mifare::release_mfr_classic_bulk_operation() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_classic_bulk_operation)
  if (_internal_has_mfr_classic_bulk_operation()) {
    clear_has_mifare_cmd();
      ::mifare::classic::bulk::BulkOperation* temp = mifare_cmd_.mfr_classic_bulk_operation_;
    mifare_cmd_.mfr_classic_bulk_operation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::classic::bulk::BulkOperation& Mifare::_internal_mfr_classic_bulk_operation() const {
  return _internal_has_mfr_classic_bulk_operation()
      ? *mifare_cmd_.mfr_classic_bulk_operation_
      : *reinterpret_cast< ::mifare::classic::bulk::BulkOperation*>(&::mifare::classic::bulk::_BulkOperation_default_instance_);
}
inline const ::mifare::classic::bulk::BulkOperation& Mifare::mfr_classic_bulk_operation() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_classic_bulk_operation)
  return _internal_mfr_classic_bulk_operation();
}
inline ::mifare::classic::bulk::BulkOperation* Mifare::_internal_mutable_mfr_classic_bulk_operation() {
  if (!_internal_has_mfr_classic_bulk_operation()) {
    clear_mifare_cmd();
    set_has_mfr_classic_bulk_operation();
    mifare_cmd_.mfr_classic_bulk_operation_ = CreateMaybeMessage< ::mifare::classic::bulk::BulkOperation >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_classic_bulk_operation_;
}
inline ::mifare::classic::bulk::BulkOperation* Mifare::mutable_mfr_classic_bulk_operation() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_classic_bulk_operation)
  return _internal_mutable_mfr_classic_bulk_operation();
}

// optional .mifare.classic.counter.get.GetCounter mfr_classic_get_counter = 6;
inline bool Mifare::_internal_has_mfr_classic_get_counter() const {
  return mifare_cmd_case() == kMfrClassicGetCounter;
}
inline bool Mifare::has_mfr_classic_get_counter() const {
  return _internal_has_mfr_classic_get_counter();
}
inline void Mifare::set_has_mfr_classic_get_counter() {
  _oneof_case_[0] = kMfrClassicGetCounter;
}
inline ::mifare::classic::counter::get::GetCounter* Mifare::release_mfr_classic_get_counter() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_classic_get_counter)
  if (_internal_has_mfr_classic_get_counter()) {
    clear_has_mifare_cmd();
      ::mifare::classic::counter::get::GetCounter* temp = mifare_cmd_.mfr_classic_get_counter_;
    mifare_cmd_.mfr_classic_get_counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::classic::counter::get::GetCounter& Mifare::_internal_mfr_classic_get_counter() const {
  return _internal_has_mfr_classic_get_counter()
      ? *mifare_cmd_.mfr_classic_get_counter_
      : *reinterpret_cast< ::mifare::classic::counter::get::GetCounter*>(&::mifare::classic::counter::get::_GetCounter_default_instance_);
}
inline const ::mifare::classic::counter::get::GetCounter& Mifare::mfr_classic_get_counter() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_classic_get_counter)
  return _internal_mfr_classic_get_counter();
}
inline ::mifare::classic::counter::get::GetCounter* Mifare::_internal_mutable_mfr_classic_get_counter() {
  if (!_internal_has_mfr_classic_get_counter()) {
    clear_mifare_cmd();
    set_has_mfr_classic_get_counter();
    mifare_cmd_.mfr_classic_get_counter_ = CreateMaybeMessage< ::mifare::classic::counter::get::GetCounter >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_classic_get_counter_;
}
inline ::mifare::classic::counter::get::GetCounter* Mifare::mutable_mfr_classic_get_counter() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_classic_get_counter)
  return _internal_mutable_mfr_classic_get_counter();
}

// optional .mifare.classic.counter.set.SetCounter mfr_classic_set_counter = 7;
inline bool Mifare::_internal_has_mfr_classic_set_counter() const {
  return mifare_cmd_case() == kMfrClassicSetCounter;
}
inline bool Mifare::has_mfr_classic_set_counter() const {
  return _internal_has_mfr_classic_set_counter();
}
inline void Mifare::set_has_mfr_classic_set_counter() {
  _oneof_case_[0] = kMfrClassicSetCounter;
}
inline ::mifare::classic::counter::set::SetCounter* Mifare::release_mfr_classic_set_counter() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_classic_set_counter)
  if (_internal_has_mfr_classic_set_counter()) {
    clear_has_mifare_cmd();
      ::mifare::classic::counter::set::SetCounter* temp = mifare_cmd_.mfr_classic_set_counter_;
    mifare_cmd_.mfr_classic_set_counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::classic::counter::set::SetCounter& Mifare::_internal_mfr_classic_set_counter() const {
  return _internal_has_mfr_classic_set_counter()
      ? *mifare_cmd_.mfr_classic_set_counter_
      : *reinterpret_cast< ::mifare::classic::counter::set::SetCounter*>(&::mifare::classic::counter::set::_SetCounter_default_instance_);
}
inline const ::mifare::classic::counter::set::SetCounter& Mifare::mfr_classic_set_counter() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_classic_set_counter)
  return _internal_mfr_classic_set_counter();
}
inline ::mifare::classic::counter::set::SetCounter* Mifare::_internal_mutable_mfr_classic_set_counter() {
  if (!_internal_has_mfr_classic_set_counter()) {
    clear_mifare_cmd();
    set_has_mfr_classic_set_counter();
    mifare_cmd_.mfr_classic_set_counter_ = CreateMaybeMessage< ::mifare::classic::counter::set::SetCounter >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_classic_set_counter_;
}
inline ::mifare::classic::counter::set::SetCounter* Mifare::mutable_mfr_classic_set_counter() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_classic_set_counter)
  return _internal_mutable_mfr_classic_set_counter();
}

// optional .mifare.classic.counter.modify.ModifyCounter mfr_classic_modify_counter = 8;
inline bool Mifare::_internal_has_mfr_classic_modify_counter() const {
  return mifare_cmd_case() == kMfrClassicModifyCounter;
}
inline bool Mifare::has_mfr_classic_modify_counter() const {
  return _internal_has_mfr_classic_modify_counter();
}
inline void Mifare::set_has_mfr_classic_modify_counter() {
  _oneof_case_[0] = kMfrClassicModifyCounter;
}
inline ::mifare::classic::counter::modify::ModifyCounter* Mifare::release_mfr_classic_modify_counter() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_classic_modify_counter)
  if (_internal_has_mfr_classic_modify_counter()) {
    clear_has_mifare_cmd();
      ::mifare::classic::counter::modify::ModifyCounter* temp = mifare_cmd_.mfr_classic_modify_counter_;
    mifare_cmd_.mfr_classic_modify_counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::classic::counter::modify::ModifyCounter& Mifare::_internal_mfr_classic_modify_counter() const {
  return _internal_has_mfr_classic_modify_counter()
      ? *mifare_cmd_.mfr_classic_modify_counter_
      : *reinterpret_cast< ::mifare::classic::counter::modify::ModifyCounter*>(&::mifare::classic::counter::modify::_ModifyCounter_default_instance_);
}
inline const ::mifare::classic::counter::modify::ModifyCounter& Mifare::mfr_classic_modify_counter() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_classic_modify_counter)
  return _internal_mfr_classic_modify_counter();
}
inline ::mifare::classic::counter::modify::ModifyCounter* Mifare::_internal_mutable_mfr_classic_modify_counter() {
  if (!_internal_has_mfr_classic_modify_counter()) {
    clear_mifare_cmd();
    set_has_mfr_classic_modify_counter();
    mifare_cmd_.mfr_classic_modify_counter_ = CreateMaybeMessage< ::mifare::classic::counter::modify::ModifyCounter >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_classic_modify_counter_;
}
inline ::mifare::classic::counter::modify::ModifyCounter* Mifare::mutable_mfr_classic_modify_counter() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_classic_modify_counter)
  return _internal_mutable_mfr_classic_modify_counter();
}

// optional .mifare.classic.counter.copy.CopyCounter mfr_classic_copy_counter = 9;
inline bool Mifare::_internal_has_mfr_classic_copy_counter() const {
  return mifare_cmd_case() == kMfrClassicCopyCounter;
}
inline bool Mifare::has_mfr_classic_copy_counter() const {
  return _internal_has_mfr_classic_copy_counter();
}
inline void Mifare::set_has_mfr_classic_copy_counter() {
  _oneof_case_[0] = kMfrClassicCopyCounter;
}
inline ::mifare::classic::counter::copy::CopyCounter* Mifare::release_mfr_classic_copy_counter() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_classic_copy_counter)
  if (_internal_has_mfr_classic_copy_counter()) {
    clear_has_mifare_cmd();
      ::mifare::classic::counter::copy::CopyCounter* temp = mifare_cmd_.mfr_classic_copy_counter_;
    mifare_cmd_.mfr_classic_copy_counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::classic::counter::copy::CopyCounter& Mifare::_internal_mfr_classic_copy_counter() const {
  return _internal_has_mfr_classic_copy_counter()
      ? *mifare_cmd_.mfr_classic_copy_counter_
      : *reinterpret_cast< ::mifare::classic::counter::copy::CopyCounter*>(&::mifare::classic::counter::copy::_CopyCounter_default_instance_);
}
inline const ::mifare::classic::counter::copy::CopyCounter& Mifare::mfr_classic_copy_counter() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_classic_copy_counter)
  return _internal_mfr_classic_copy_counter();
}
inline ::mifare::classic::counter::copy::CopyCounter* Mifare::_internal_mutable_mfr_classic_copy_counter() {
  if (!_internal_has_mfr_classic_copy_counter()) {
    clear_mifare_cmd();
    set_has_mfr_classic_copy_counter();
    mifare_cmd_.mfr_classic_copy_counter_ = CreateMaybeMessage< ::mifare::classic::counter::copy::CopyCounter >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_classic_copy_counter_;
}
inline ::mifare::classic::counter::copy::CopyCounter* Mifare::mutable_mfr_classic_copy_counter() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_classic_copy_counter)
  return _internal_mutable_mfr_classic_copy_counter();
}

// optional .mifare.classic.counter.commit.CommitCounter mfr_classic_commit_counter = 10;
inline bool Mifare::_internal_has_mfr_classic_commit_counter() const {
  return mifare_cmd_case() == kMfrClassicCommitCounter;
}
inline bool Mifare::has_mfr_classic_commit_counter() const {
  return _internal_has_mfr_classic_commit_counter();
}
inline void Mifare::set_has_mfr_classic_commit_counter() {
  _oneof_case_[0] = kMfrClassicCommitCounter;
}
inline ::mifare::classic::counter::commit::CommitCounter* Mifare::release_mfr_classic_commit_counter() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_classic_commit_counter)
  if (_internal_has_mfr_classic_commit_counter()) {
    clear_has_mifare_cmd();
      ::mifare::classic::counter::commit::CommitCounter* temp = mifare_cmd_.mfr_classic_commit_counter_;
    mifare_cmd_.mfr_classic_commit_counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::classic::counter::commit::CommitCounter& Mifare::_internal_mfr_classic_commit_counter() const {
  return _internal_has_mfr_classic_commit_counter()
      ? *mifare_cmd_.mfr_classic_commit_counter_
      : *reinterpret_cast< ::mifare::classic::counter::commit::CommitCounter*>(&::mifare::classic::counter::commit::_CommitCounter_default_instance_);
}
inline const ::mifare::classic::counter::commit::CommitCounter& Mifare::mfr_classic_commit_counter() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_classic_commit_counter)
  return _internal_mfr_classic_commit_counter();
}
inline ::mifare::classic::counter::commit::CommitCounter* Mifare::_internal_mutable_mfr_classic_commit_counter() {
  if (!_internal_has_mfr_classic_commit_counter()) {
    clear_mifare_cmd();
    set_has_mfr_classic_commit_counter();
    mifare_cmd_.mfr_classic_commit_counter_ = CreateMaybeMessage< ::mifare::classic::counter::commit::CommitCounter >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_classic_commit_counter_;
}
inline ::mifare::classic::counter::commit::CommitCounter* Mifare::mutable_mfr_classic_commit_counter() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_classic_commit_counter)
  return _internal_mutable_mfr_classic_commit_counter();
}

// optional .mifare.plus.auth.ClearKey mfr_plus_auth_on_clear_key = 16;
inline bool Mifare::_internal_has_mfr_plus_auth_on_clear_key() const {
  return mifare_cmd_case() == kMfrPlusAuthOnClearKey;
}
inline bool Mifare::has_mfr_plus_auth_on_clear_key() const {
  return _internal_has_mfr_plus_auth_on_clear_key();
}
inline void Mifare::set_has_mfr_plus_auth_on_clear_key() {
  _oneof_case_[0] = kMfrPlusAuthOnClearKey;
}
inline ::mifare::plus::auth::ClearKey* Mifare::release_mfr_plus_auth_on_clear_key() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_plus_auth_on_clear_key)
  if (_internal_has_mfr_plus_auth_on_clear_key()) {
    clear_has_mifare_cmd();
      ::mifare::plus::auth::ClearKey* temp = mifare_cmd_.mfr_plus_auth_on_clear_key_;
    mifare_cmd_.mfr_plus_auth_on_clear_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::plus::auth::ClearKey& Mifare::_internal_mfr_plus_auth_on_clear_key() const {
  return _internal_has_mfr_plus_auth_on_clear_key()
      ? *mifare_cmd_.mfr_plus_auth_on_clear_key_
      : *reinterpret_cast< ::mifare::plus::auth::ClearKey*>(&::mifare::plus::auth::_ClearKey_default_instance_);
}
inline const ::mifare::plus::auth::ClearKey& Mifare::mfr_plus_auth_on_clear_key() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_plus_auth_on_clear_key)
  return _internal_mfr_plus_auth_on_clear_key();
}
inline ::mifare::plus::auth::ClearKey* Mifare::_internal_mutable_mfr_plus_auth_on_clear_key() {
  if (!_internal_has_mfr_plus_auth_on_clear_key()) {
    clear_mifare_cmd();
    set_has_mfr_plus_auth_on_clear_key();
    mifare_cmd_.mfr_plus_auth_on_clear_key_ = CreateMaybeMessage< ::mifare::plus::auth::ClearKey >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_plus_auth_on_clear_key_;
}
inline ::mifare::plus::auth::ClearKey* Mifare::mutable_mfr_plus_auth_on_clear_key() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_plus_auth_on_clear_key)
  return _internal_mutable_mfr_plus_auth_on_clear_key();
}

// optional .mifare.plus.read.ReadBlocks mfr_plus_read_blocks = 17;
inline bool Mifare::_internal_has_mfr_plus_read_blocks() const {
  return mifare_cmd_case() == kMfrPlusReadBlocks;
}
inline bool Mifare::has_mfr_plus_read_blocks() const {
  return _internal_has_mfr_plus_read_blocks();
}
inline void Mifare::set_has_mfr_plus_read_blocks() {
  _oneof_case_[0] = kMfrPlusReadBlocks;
}
inline ::mifare::plus::read::ReadBlocks* Mifare::release_mfr_plus_read_blocks() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_plus_read_blocks)
  if (_internal_has_mfr_plus_read_blocks()) {
    clear_has_mifare_cmd();
      ::mifare::plus::read::ReadBlocks* temp = mifare_cmd_.mfr_plus_read_blocks_;
    mifare_cmd_.mfr_plus_read_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::plus::read::ReadBlocks& Mifare::_internal_mfr_plus_read_blocks() const {
  return _internal_has_mfr_plus_read_blocks()
      ? *mifare_cmd_.mfr_plus_read_blocks_
      : *reinterpret_cast< ::mifare::plus::read::ReadBlocks*>(&::mifare::plus::read::_ReadBlocks_default_instance_);
}
inline const ::mifare::plus::read::ReadBlocks& Mifare::mfr_plus_read_blocks() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_plus_read_blocks)
  return _internal_mfr_plus_read_blocks();
}
inline ::mifare::plus::read::ReadBlocks* Mifare::_internal_mutable_mfr_plus_read_blocks() {
  if (!_internal_has_mfr_plus_read_blocks()) {
    clear_mifare_cmd();
    set_has_mfr_plus_read_blocks();
    mifare_cmd_.mfr_plus_read_blocks_ = CreateMaybeMessage< ::mifare::plus::read::ReadBlocks >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_plus_read_blocks_;
}
inline ::mifare::plus::read::ReadBlocks* Mifare::mutable_mfr_plus_read_blocks() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_plus_read_blocks)
  return _internal_mutable_mfr_plus_read_blocks();
}

// optional .mifare.plus.write.WriteBlocks mfr_plus_write_blocks = 18;
inline bool Mifare::_internal_has_mfr_plus_write_blocks() const {
  return mifare_cmd_case() == kMfrPlusWriteBlocks;
}
inline bool Mifare::has_mfr_plus_write_blocks() const {
  return _internal_has_mfr_plus_write_blocks();
}
inline void Mifare::set_has_mfr_plus_write_blocks() {
  _oneof_case_[0] = kMfrPlusWriteBlocks;
}
inline ::mifare::plus::write::WriteBlocks* Mifare::release_mfr_plus_write_blocks() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_plus_write_blocks)
  if (_internal_has_mfr_plus_write_blocks()) {
    clear_has_mifare_cmd();
      ::mifare::plus::write::WriteBlocks* temp = mifare_cmd_.mfr_plus_write_blocks_;
    mifare_cmd_.mfr_plus_write_blocks_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::plus::write::WriteBlocks& Mifare::_internal_mfr_plus_write_blocks() const {
  return _internal_has_mfr_plus_write_blocks()
      ? *mifare_cmd_.mfr_plus_write_blocks_
      : *reinterpret_cast< ::mifare::plus::write::WriteBlocks*>(&::mifare::plus::write::_WriteBlocks_default_instance_);
}
inline const ::mifare::plus::write::WriteBlocks& Mifare::mfr_plus_write_blocks() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_plus_write_blocks)
  return _internal_mfr_plus_write_blocks();
}
inline ::mifare::plus::write::WriteBlocks* Mifare::_internal_mutable_mfr_plus_write_blocks() {
  if (!_internal_has_mfr_plus_write_blocks()) {
    clear_mifare_cmd();
    set_has_mfr_plus_write_blocks();
    mifare_cmd_.mfr_plus_write_blocks_ = CreateMaybeMessage< ::mifare::plus::write::WriteBlocks >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_plus_write_blocks_;
}
inline ::mifare::plus::write::WriteBlocks* Mifare::mutable_mfr_plus_write_blocks() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_plus_write_blocks)
  return _internal_mutable_mfr_plus_write_blocks();
}

// optional .mifare.plus.bulk.BulkOperation mfr_plus_bulk_operation = 19;
inline bool Mifare::_internal_has_mfr_plus_bulk_operation() const {
  return mifare_cmd_case() == kMfrPlusBulkOperation;
}
inline bool Mifare::has_mfr_plus_bulk_operation() const {
  return _internal_has_mfr_plus_bulk_operation();
}
inline void Mifare::set_has_mfr_plus_bulk_operation() {
  _oneof_case_[0] = kMfrPlusBulkOperation;
}
inline ::mifare::plus::bulk::BulkOperation* Mifare::release_mfr_plus_bulk_operation() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_plus_bulk_operation)
  if (_internal_has_mfr_plus_bulk_operation()) {
    clear_has_mifare_cmd();
      ::mifare::plus::bulk::BulkOperation* temp = mifare_cmd_.mfr_plus_bulk_operation_;
    mifare_cmd_.mfr_plus_bulk_operation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::plus::bulk::BulkOperation& Mifare::_internal_mfr_plus_bulk_operation() const {
  return _internal_has_mfr_plus_bulk_operation()
      ? *mifare_cmd_.mfr_plus_bulk_operation_
      : *reinterpret_cast< ::mifare::plus::bulk::BulkOperation*>(&::mifare::plus::bulk::_BulkOperation_default_instance_);
}
inline const ::mifare::plus::bulk::BulkOperation& Mifare::mfr_plus_bulk_operation() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_plus_bulk_operation)
  return _internal_mfr_plus_bulk_operation();
}
inline ::mifare::plus::bulk::BulkOperation* Mifare::_internal_mutable_mfr_plus_bulk_operation() {
  if (!_internal_has_mfr_plus_bulk_operation()) {
    clear_mifare_cmd();
    set_has_mfr_plus_bulk_operation();
    mifare_cmd_.mfr_plus_bulk_operation_ = CreateMaybeMessage< ::mifare::plus::bulk::BulkOperation >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_plus_bulk_operation_;
}
inline ::mifare::plus::bulk::BulkOperation* Mifare::mutable_mfr_plus_bulk_operation() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_plus_bulk_operation)
  return _internal_mutable_mfr_plus_bulk_operation();
}

// optional .mifare.plus.counter.get.GetCounter mfr_plus_get_counter = 20;
inline bool Mifare::_internal_has_mfr_plus_get_counter() const {
  return mifare_cmd_case() == kMfrPlusGetCounter;
}
inline bool Mifare::has_mfr_plus_get_counter() const {
  return _internal_has_mfr_plus_get_counter();
}
inline void Mifare::set_has_mfr_plus_get_counter() {
  _oneof_case_[0] = kMfrPlusGetCounter;
}
inline ::mifare::plus::counter::get::GetCounter* Mifare::release_mfr_plus_get_counter() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_plus_get_counter)
  if (_internal_has_mfr_plus_get_counter()) {
    clear_has_mifare_cmd();
      ::mifare::plus::counter::get::GetCounter* temp = mifare_cmd_.mfr_plus_get_counter_;
    mifare_cmd_.mfr_plus_get_counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::plus::counter::get::GetCounter& Mifare::_internal_mfr_plus_get_counter() const {
  return _internal_has_mfr_plus_get_counter()
      ? *mifare_cmd_.mfr_plus_get_counter_
      : *reinterpret_cast< ::mifare::plus::counter::get::GetCounter*>(&::mifare::plus::counter::get::_GetCounter_default_instance_);
}
inline const ::mifare::plus::counter::get::GetCounter& Mifare::mfr_plus_get_counter() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_plus_get_counter)
  return _internal_mfr_plus_get_counter();
}
inline ::mifare::plus::counter::get::GetCounter* Mifare::_internal_mutable_mfr_plus_get_counter() {
  if (!_internal_has_mfr_plus_get_counter()) {
    clear_mifare_cmd();
    set_has_mfr_plus_get_counter();
    mifare_cmd_.mfr_plus_get_counter_ = CreateMaybeMessage< ::mifare::plus::counter::get::GetCounter >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_plus_get_counter_;
}
inline ::mifare::plus::counter::get::GetCounter* Mifare::mutable_mfr_plus_get_counter() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_plus_get_counter)
  return _internal_mutable_mfr_plus_get_counter();
}

// optional .mifare.plus.counter.set.SetCounter mfr_plus_set_counter = 21;
inline bool Mifare::_internal_has_mfr_plus_set_counter() const {
  return mifare_cmd_case() == kMfrPlusSetCounter;
}
inline bool Mifare::has_mfr_plus_set_counter() const {
  return _internal_has_mfr_plus_set_counter();
}
inline void Mifare::set_has_mfr_plus_set_counter() {
  _oneof_case_[0] = kMfrPlusSetCounter;
}
inline ::mifare::plus::counter::set::SetCounter* Mifare::release_mfr_plus_set_counter() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_plus_set_counter)
  if (_internal_has_mfr_plus_set_counter()) {
    clear_has_mifare_cmd();
      ::mifare::plus::counter::set::SetCounter* temp = mifare_cmd_.mfr_plus_set_counter_;
    mifare_cmd_.mfr_plus_set_counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::plus::counter::set::SetCounter& Mifare::_internal_mfr_plus_set_counter() const {
  return _internal_has_mfr_plus_set_counter()
      ? *mifare_cmd_.mfr_plus_set_counter_
      : *reinterpret_cast< ::mifare::plus::counter::set::SetCounter*>(&::mifare::plus::counter::set::_SetCounter_default_instance_);
}
inline const ::mifare::plus::counter::set::SetCounter& Mifare::mfr_plus_set_counter() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_plus_set_counter)
  return _internal_mfr_plus_set_counter();
}
inline ::mifare::plus::counter::set::SetCounter* Mifare::_internal_mutable_mfr_plus_set_counter() {
  if (!_internal_has_mfr_plus_set_counter()) {
    clear_mifare_cmd();
    set_has_mfr_plus_set_counter();
    mifare_cmd_.mfr_plus_set_counter_ = CreateMaybeMessage< ::mifare::plus::counter::set::SetCounter >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_plus_set_counter_;
}
inline ::mifare::plus::counter::set::SetCounter* Mifare::mutable_mfr_plus_set_counter() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_plus_set_counter)
  return _internal_mutable_mfr_plus_set_counter();
}

// optional .mifare.plus.counter.modify.ModifyCounter mfr_plus_modify_counter = 22;
inline bool Mifare::_internal_has_mfr_plus_modify_counter() const {
  return mifare_cmd_case() == kMfrPlusModifyCounter;
}
inline bool Mifare::has_mfr_plus_modify_counter() const {
  return _internal_has_mfr_plus_modify_counter();
}
inline void Mifare::set_has_mfr_plus_modify_counter() {
  _oneof_case_[0] = kMfrPlusModifyCounter;
}
inline ::mifare::plus::counter::modify::ModifyCounter* Mifare::release_mfr_plus_modify_counter() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_plus_modify_counter)
  if (_internal_has_mfr_plus_modify_counter()) {
    clear_has_mifare_cmd();
      ::mifare::plus::counter::modify::ModifyCounter* temp = mifare_cmd_.mfr_plus_modify_counter_;
    mifare_cmd_.mfr_plus_modify_counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::plus::counter::modify::ModifyCounter& Mifare::_internal_mfr_plus_modify_counter() const {
  return _internal_has_mfr_plus_modify_counter()
      ? *mifare_cmd_.mfr_plus_modify_counter_
      : *reinterpret_cast< ::mifare::plus::counter::modify::ModifyCounter*>(&::mifare::plus::counter::modify::_ModifyCounter_default_instance_);
}
inline const ::mifare::plus::counter::modify::ModifyCounter& Mifare::mfr_plus_modify_counter() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_plus_modify_counter)
  return _internal_mfr_plus_modify_counter();
}
inline ::mifare::plus::counter::modify::ModifyCounter* Mifare::_internal_mutable_mfr_plus_modify_counter() {
  if (!_internal_has_mfr_plus_modify_counter()) {
    clear_mifare_cmd();
    set_has_mfr_plus_modify_counter();
    mifare_cmd_.mfr_plus_modify_counter_ = CreateMaybeMessage< ::mifare::plus::counter::modify::ModifyCounter >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_plus_modify_counter_;
}
inline ::mifare::plus::counter::modify::ModifyCounter* Mifare::mutable_mfr_plus_modify_counter() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_plus_modify_counter)
  return _internal_mutable_mfr_plus_modify_counter();
}

// optional .mifare.plus.counter.copy.CopyCounter mfr_plus_copy_counter = 23;
inline bool Mifare::_internal_has_mfr_plus_copy_counter() const {
  return mifare_cmd_case() == kMfrPlusCopyCounter;
}
inline bool Mifare::has_mfr_plus_copy_counter() const {
  return _internal_has_mfr_plus_copy_counter();
}
inline void Mifare::set_has_mfr_plus_copy_counter() {
  _oneof_case_[0] = kMfrPlusCopyCounter;
}
inline ::mifare::plus::counter::copy::CopyCounter* Mifare::release_mfr_plus_copy_counter() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_plus_copy_counter)
  if (_internal_has_mfr_plus_copy_counter()) {
    clear_has_mifare_cmd();
      ::mifare::plus::counter::copy::CopyCounter* temp = mifare_cmd_.mfr_plus_copy_counter_;
    mifare_cmd_.mfr_plus_copy_counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::plus::counter::copy::CopyCounter& Mifare::_internal_mfr_plus_copy_counter() const {
  return _internal_has_mfr_plus_copy_counter()
      ? *mifare_cmd_.mfr_plus_copy_counter_
      : *reinterpret_cast< ::mifare::plus::counter::copy::CopyCounter*>(&::mifare::plus::counter::copy::_CopyCounter_default_instance_);
}
inline const ::mifare::plus::counter::copy::CopyCounter& Mifare::mfr_plus_copy_counter() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_plus_copy_counter)
  return _internal_mfr_plus_copy_counter();
}
inline ::mifare::plus::counter::copy::CopyCounter* Mifare::_internal_mutable_mfr_plus_copy_counter() {
  if (!_internal_has_mfr_plus_copy_counter()) {
    clear_mifare_cmd();
    set_has_mfr_plus_copy_counter();
    mifare_cmd_.mfr_plus_copy_counter_ = CreateMaybeMessage< ::mifare::plus::counter::copy::CopyCounter >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_plus_copy_counter_;
}
inline ::mifare::plus::counter::copy::CopyCounter* Mifare::mutable_mfr_plus_copy_counter() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_plus_copy_counter)
  return _internal_mutable_mfr_plus_copy_counter();
}

// optional .mifare.plus.counter.commit.CommitCounter mfr_plus_commit_counter = 24;
inline bool Mifare::_internal_has_mfr_plus_commit_counter() const {
  return mifare_cmd_case() == kMfrPlusCommitCounter;
}
inline bool Mifare::has_mfr_plus_commit_counter() const {
  return _internal_has_mfr_plus_commit_counter();
}
inline void Mifare::set_has_mfr_plus_commit_counter() {
  _oneof_case_[0] = kMfrPlusCommitCounter;
}
inline ::mifare::plus::counter::commit::CommitCounter* Mifare::release_mfr_plus_commit_counter() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_plus_commit_counter)
  if (_internal_has_mfr_plus_commit_counter()) {
    clear_has_mifare_cmd();
      ::mifare::plus::counter::commit::CommitCounter* temp = mifare_cmd_.mfr_plus_commit_counter_;
    mifare_cmd_.mfr_plus_commit_counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::plus::counter::commit::CommitCounter& Mifare::_internal_mfr_plus_commit_counter() const {
  return _internal_has_mfr_plus_commit_counter()
      ? *mifare_cmd_.mfr_plus_commit_counter_
      : *reinterpret_cast< ::mifare::plus::counter::commit::CommitCounter*>(&::mifare::plus::counter::commit::_CommitCounter_default_instance_);
}
inline const ::mifare::plus::counter::commit::CommitCounter& Mifare::mfr_plus_commit_counter() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_plus_commit_counter)
  return _internal_mfr_plus_commit_counter();
}
inline ::mifare::plus::counter::commit::CommitCounter* Mifare::_internal_mutable_mfr_plus_commit_counter() {
  if (!_internal_has_mfr_plus_commit_counter()) {
    clear_mifare_cmd();
    set_has_mfr_plus_commit_counter();
    mifare_cmd_.mfr_plus_commit_counter_ = CreateMaybeMessage< ::mifare::plus::counter::commit::CommitCounter >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_plus_commit_counter_;
}
inline ::mifare::plus::counter::commit::CommitCounter* Mifare::mutable_mfr_plus_commit_counter() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_plus_commit_counter)
  return _internal_mutable_mfr_plus_commit_counter();
}

// optional .mifare.plus.auth.SamKey mfr_plus_auth_on_sam_key = 25;
inline bool Mifare::_internal_has_mfr_plus_auth_on_sam_key() const {
  return mifare_cmd_case() == kMfrPlusAuthOnSamKey;
}
inline bool Mifare::has_mfr_plus_auth_on_sam_key() const {
  return _internal_has_mfr_plus_auth_on_sam_key();
}
inline void Mifare::set_has_mfr_plus_auth_on_sam_key() {
  _oneof_case_[0] = kMfrPlusAuthOnSamKey;
}
inline ::mifare::plus::auth::SamKey* Mifare::release_mfr_plus_auth_on_sam_key() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_plus_auth_on_sam_key)
  if (_internal_has_mfr_plus_auth_on_sam_key()) {
    clear_has_mifare_cmd();
      ::mifare::plus::auth::SamKey* temp = mifare_cmd_.mfr_plus_auth_on_sam_key_;
    mifare_cmd_.mfr_plus_auth_on_sam_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::plus::auth::SamKey& Mifare::_internal_mfr_plus_auth_on_sam_key() const {
  return _internal_has_mfr_plus_auth_on_sam_key()
      ? *mifare_cmd_.mfr_plus_auth_on_sam_key_
      : *reinterpret_cast< ::mifare::plus::auth::SamKey*>(&::mifare::plus::auth::_SamKey_default_instance_);
}
inline const ::mifare::plus::auth::SamKey& Mifare::mfr_plus_auth_on_sam_key() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_plus_auth_on_sam_key)
  return _internal_mfr_plus_auth_on_sam_key();
}
inline ::mifare::plus::auth::SamKey* Mifare::_internal_mutable_mfr_plus_auth_on_sam_key() {
  if (!_internal_has_mfr_plus_auth_on_sam_key()) {
    clear_mifare_cmd();
    set_has_mfr_plus_auth_on_sam_key();
    mifare_cmd_.mfr_plus_auth_on_sam_key_ = CreateMaybeMessage< ::mifare::plus::auth::SamKey >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_plus_auth_on_sam_key_;
}
inline ::mifare::plus::auth::SamKey* Mifare::mutable_mfr_plus_auth_on_sam_key() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_plus_auth_on_sam_key)
  return _internal_mutable_mfr_plus_auth_on_sam_key();
}

// optional .mifare.av2.host_auth.AuthenticateHost av2_authenticate_host = 30;
inline bool Mifare::_internal_has_av2_authenticate_host() const {
  return mifare_cmd_case() == kAv2AuthenticateHost;
}
inline bool Mifare::has_av2_authenticate_host() const {
  return _internal_has_av2_authenticate_host();
}
inline void Mifare::set_has_av2_authenticate_host() {
  _oneof_case_[0] = kAv2AuthenticateHost;
}
inline ::mifare::av2::host_auth::AuthenticateHost* Mifare::release_av2_authenticate_host() {
  // @@protoc_insertion_point(field_release:Mifare.av2_authenticate_host)
  if (_internal_has_av2_authenticate_host()) {
    clear_has_mifare_cmd();
      ::mifare::av2::host_auth::AuthenticateHost* temp = mifare_cmd_.av2_authenticate_host_;
    mifare_cmd_.av2_authenticate_host_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::av2::host_auth::AuthenticateHost& Mifare::_internal_av2_authenticate_host() const {
  return _internal_has_av2_authenticate_host()
      ? *mifare_cmd_.av2_authenticate_host_
      : *reinterpret_cast< ::mifare::av2::host_auth::AuthenticateHost*>(&::mifare::av2::host_auth::_AuthenticateHost_default_instance_);
}
inline const ::mifare::av2::host_auth::AuthenticateHost& Mifare::av2_authenticate_host() const {
  // @@protoc_insertion_point(field_get:Mifare.av2_authenticate_host)
  return _internal_av2_authenticate_host();
}
inline ::mifare::av2::host_auth::AuthenticateHost* Mifare::_internal_mutable_av2_authenticate_host() {
  if (!_internal_has_av2_authenticate_host()) {
    clear_mifare_cmd();
    set_has_av2_authenticate_host();
    mifare_cmd_.av2_authenticate_host_ = CreateMaybeMessage< ::mifare::av2::host_auth::AuthenticateHost >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.av2_authenticate_host_;
}
inline ::mifare::av2::host_auth::AuthenticateHost* Mifare::mutable_av2_authenticate_host() {
  // @@protoc_insertion_point(field_mutable:Mifare.av2_authenticate_host)
  return _internal_mutable_av2_authenticate_host();
}

// optional .mifare.av2.change_keyentry.ChangeKeyEntry av2_change_keyentry = 31;
inline bool Mifare::_internal_has_av2_change_keyentry() const {
  return mifare_cmd_case() == kAv2ChangeKeyentry;
}
inline bool Mifare::has_av2_change_keyentry() const {
  return _internal_has_av2_change_keyentry();
}
inline void Mifare::set_has_av2_change_keyentry() {
  _oneof_case_[0] = kAv2ChangeKeyentry;
}
inline ::mifare::av2::change_keyentry::ChangeKeyEntry* Mifare::release_av2_change_keyentry() {
  // @@protoc_insertion_point(field_release:Mifare.av2_change_keyentry)
  if (_internal_has_av2_change_keyentry()) {
    clear_has_mifare_cmd();
      ::mifare::av2::change_keyentry::ChangeKeyEntry* temp = mifare_cmd_.av2_change_keyentry_;
    mifare_cmd_.av2_change_keyentry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::av2::change_keyentry::ChangeKeyEntry& Mifare::_internal_av2_change_keyentry() const {
  return _internal_has_av2_change_keyentry()
      ? *mifare_cmd_.av2_change_keyentry_
      : *reinterpret_cast< ::mifare::av2::change_keyentry::ChangeKeyEntry*>(&::mifare::av2::change_keyentry::_ChangeKeyEntry_default_instance_);
}
inline const ::mifare::av2::change_keyentry::ChangeKeyEntry& Mifare::av2_change_keyentry() const {
  // @@protoc_insertion_point(field_get:Mifare.av2_change_keyentry)
  return _internal_av2_change_keyentry();
}
inline ::mifare::av2::change_keyentry::ChangeKeyEntry* Mifare::_internal_mutable_av2_change_keyentry() {
  if (!_internal_has_av2_change_keyentry()) {
    clear_mifare_cmd();
    set_has_av2_change_keyentry();
    mifare_cmd_.av2_change_keyentry_ = CreateMaybeMessage< ::mifare::av2::change_keyentry::ChangeKeyEntry >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.av2_change_keyentry_;
}
inline ::mifare::av2::change_keyentry::ChangeKeyEntry* Mifare::mutable_av2_change_keyentry() {
  // @@protoc_insertion_point(field_mutable:Mifare.av2_change_keyentry)
  return _internal_mutable_av2_change_keyentry();
}

// optional .mifare.av2.unlock.Unlock av2_unlock = 32;
inline bool Mifare::_internal_has_av2_unlock() const {
  return mifare_cmd_case() == kAv2Unlock;
}
inline bool Mifare::has_av2_unlock() const {
  return _internal_has_av2_unlock();
}
inline void Mifare::set_has_av2_unlock() {
  _oneof_case_[0] = kAv2Unlock;
}
inline ::mifare::av2::unlock::Unlock* Mifare::release_av2_unlock() {
  // @@protoc_insertion_point(field_release:Mifare.av2_unlock)
  if (_internal_has_av2_unlock()) {
    clear_has_mifare_cmd();
      ::mifare::av2::unlock::Unlock* temp = mifare_cmd_.av2_unlock_;
    mifare_cmd_.av2_unlock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::av2::unlock::Unlock& Mifare::_internal_av2_unlock() const {
  return _internal_has_av2_unlock()
      ? *mifare_cmd_.av2_unlock_
      : *reinterpret_cast< ::mifare::av2::unlock::Unlock*>(&::mifare::av2::unlock::_Unlock_default_instance_);
}
inline const ::mifare::av2::unlock::Unlock& Mifare::av2_unlock() const {
  // @@protoc_insertion_point(field_get:Mifare.av2_unlock)
  return _internal_av2_unlock();
}
inline ::mifare::av2::unlock::Unlock* Mifare::_internal_mutable_av2_unlock() {
  if (!_internal_has_av2_unlock()) {
    clear_mifare_cmd();
    set_has_av2_unlock();
    mifare_cmd_.av2_unlock_ = CreateMaybeMessage< ::mifare::av2::unlock::Unlock >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.av2_unlock_;
}
inline ::mifare::av2::unlock::Unlock* Mifare::mutable_av2_unlock() {
  // @@protoc_insertion_point(field_mutable:Mifare.av2_unlock)
  return _internal_mutable_av2_unlock();
}

// optional .mifare.ultralight.read.ReadPages mfr_ul_read_pages = 36;
inline bool Mifare::_internal_has_mfr_ul_read_pages() const {
  return mifare_cmd_case() == kMfrUlReadPages;
}
inline bool Mifare::has_mfr_ul_read_pages() const {
  return _internal_has_mfr_ul_read_pages();
}
inline void Mifare::set_has_mfr_ul_read_pages() {
  _oneof_case_[0] = kMfrUlReadPages;
}
inline ::mifare::ultralight::read::ReadPages* Mifare::release_mfr_ul_read_pages() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_ul_read_pages)
  if (_internal_has_mfr_ul_read_pages()) {
    clear_has_mifare_cmd();
      ::mifare::ultralight::read::ReadPages* temp = mifare_cmd_.mfr_ul_read_pages_;
    mifare_cmd_.mfr_ul_read_pages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::ultralight::read::ReadPages& Mifare::_internal_mfr_ul_read_pages() const {
  return _internal_has_mfr_ul_read_pages()
      ? *mifare_cmd_.mfr_ul_read_pages_
      : *reinterpret_cast< ::mifare::ultralight::read::ReadPages*>(&::mifare::ultralight::read::_ReadPages_default_instance_);
}
inline const ::mifare::ultralight::read::ReadPages& Mifare::mfr_ul_read_pages() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_ul_read_pages)
  return _internal_mfr_ul_read_pages();
}
inline ::mifare::ultralight::read::ReadPages* Mifare::_internal_mutable_mfr_ul_read_pages() {
  if (!_internal_has_mfr_ul_read_pages()) {
    clear_mifare_cmd();
    set_has_mfr_ul_read_pages();
    mifare_cmd_.mfr_ul_read_pages_ = CreateMaybeMessage< ::mifare::ultralight::read::ReadPages >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_ul_read_pages_;
}
inline ::mifare::ultralight::read::ReadPages* Mifare::mutable_mfr_ul_read_pages() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_ul_read_pages)
  return _internal_mutable_mfr_ul_read_pages();
}

// optional .mifare.ultralight.write.WritePages mfr_ul_write_pages = 37;
inline bool Mifare::_internal_has_mfr_ul_write_pages() const {
  return mifare_cmd_case() == kMfrUlWritePages;
}
inline bool Mifare::has_mfr_ul_write_pages() const {
  return _internal_has_mfr_ul_write_pages();
}
inline void Mifare::set_has_mfr_ul_write_pages() {
  _oneof_case_[0] = kMfrUlWritePages;
}
inline ::mifare::ultralight::write::WritePages* Mifare::release_mfr_ul_write_pages() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_ul_write_pages)
  if (_internal_has_mfr_ul_write_pages()) {
    clear_has_mifare_cmd();
      ::mifare::ultralight::write::WritePages* temp = mifare_cmd_.mfr_ul_write_pages_;
    mifare_cmd_.mfr_ul_write_pages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::ultralight::write::WritePages& Mifare::_internal_mfr_ul_write_pages() const {
  return _internal_has_mfr_ul_write_pages()
      ? *mifare_cmd_.mfr_ul_write_pages_
      : *reinterpret_cast< ::mifare::ultralight::write::WritePages*>(&::mifare::ultralight::write::_WritePages_default_instance_);
}
inline const ::mifare::ultralight::write::WritePages& Mifare::mfr_ul_write_pages() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_ul_write_pages)
  return _internal_mfr_ul_write_pages();
}
inline ::mifare::ultralight::write::WritePages* Mifare::_internal_mutable_mfr_ul_write_pages() {
  if (!_internal_has_mfr_ul_write_pages()) {
    clear_mifare_cmd();
    set_has_mfr_ul_write_pages();
    mifare_cmd_.mfr_ul_write_pages_ = CreateMaybeMessage< ::mifare::ultralight::write::WritePages >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_ul_write_pages_;
}
inline ::mifare::ultralight::write::WritePages* Mifare::mutable_mfr_ul_write_pages() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_ul_write_pages)
  return _internal_mutable_mfr_ul_write_pages();
}

// optional .mifare.ultralight.version.GetVersion mfr_ul_get_version = 38;
inline bool Mifare::_internal_has_mfr_ul_get_version() const {
  return mifare_cmd_case() == kMfrUlGetVersion;
}
inline bool Mifare::has_mfr_ul_get_version() const {
  return _internal_has_mfr_ul_get_version();
}
inline void Mifare::set_has_mfr_ul_get_version() {
  _oneof_case_[0] = kMfrUlGetVersion;
}
inline ::mifare::ultralight::version::GetVersion* Mifare::release_mfr_ul_get_version() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_ul_get_version)
  if (_internal_has_mfr_ul_get_version()) {
    clear_has_mifare_cmd();
      ::mifare::ultralight::version::GetVersion* temp = mifare_cmd_.mfr_ul_get_version_;
    mifare_cmd_.mfr_ul_get_version_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::ultralight::version::GetVersion& Mifare::_internal_mfr_ul_get_version() const {
  return _internal_has_mfr_ul_get_version()
      ? *mifare_cmd_.mfr_ul_get_version_
      : *reinterpret_cast< ::mifare::ultralight::version::GetVersion*>(&::mifare::ultralight::version::_GetVersion_default_instance_);
}
inline const ::mifare::ultralight::version::GetVersion& Mifare::mfr_ul_get_version() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_ul_get_version)
  return _internal_mfr_ul_get_version();
}
inline ::mifare::ultralight::version::GetVersion* Mifare::_internal_mutable_mfr_ul_get_version() {
  if (!_internal_has_mfr_ul_get_version()) {
    clear_mifare_cmd();
    set_has_mfr_ul_get_version();
    mifare_cmd_.mfr_ul_get_version_ = CreateMaybeMessage< ::mifare::ultralight::version::GetVersion >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_ul_get_version_;
}
inline ::mifare::ultralight::version::GetVersion* Mifare::mutable_mfr_ul_get_version() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_ul_get_version)
  return _internal_mutable_mfr_ul_get_version();
}

// optional .mifare.ultralight.counter.get.GetCounter mfr_ul_get_counter = 39;
inline bool Mifare::_internal_has_mfr_ul_get_counter() const {
  return mifare_cmd_case() == kMfrUlGetCounter;
}
inline bool Mifare::has_mfr_ul_get_counter() const {
  return _internal_has_mfr_ul_get_counter();
}
inline void Mifare::set_has_mfr_ul_get_counter() {
  _oneof_case_[0] = kMfrUlGetCounter;
}
inline ::mifare::ultralight::counter::get::GetCounter* Mifare::release_mfr_ul_get_counter() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_ul_get_counter)
  if (_internal_has_mfr_ul_get_counter()) {
    clear_has_mifare_cmd();
      ::mifare::ultralight::counter::get::GetCounter* temp = mifare_cmd_.mfr_ul_get_counter_;
    mifare_cmd_.mfr_ul_get_counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::ultralight::counter::get::GetCounter& Mifare::_internal_mfr_ul_get_counter() const {
  return _internal_has_mfr_ul_get_counter()
      ? *mifare_cmd_.mfr_ul_get_counter_
      : *reinterpret_cast< ::mifare::ultralight::counter::get::GetCounter*>(&::mifare::ultralight::counter::get::_GetCounter_default_instance_);
}
inline const ::mifare::ultralight::counter::get::GetCounter& Mifare::mfr_ul_get_counter() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_ul_get_counter)
  return _internal_mfr_ul_get_counter();
}
inline ::mifare::ultralight::counter::get::GetCounter* Mifare::_internal_mutable_mfr_ul_get_counter() {
  if (!_internal_has_mfr_ul_get_counter()) {
    clear_mifare_cmd();
    set_has_mfr_ul_get_counter();
    mifare_cmd_.mfr_ul_get_counter_ = CreateMaybeMessage< ::mifare::ultralight::counter::get::GetCounter >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_ul_get_counter_;
}
inline ::mifare::ultralight::counter::get::GetCounter* Mifare::mutable_mfr_ul_get_counter() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_ul_get_counter)
  return _internal_mutable_mfr_ul_get_counter();
}

// optional .mifare.ultralight.counter.increment.IncrementCounter mfr_ul_increment_counter = 40;
inline bool Mifare::_internal_has_mfr_ul_increment_counter() const {
  return mifare_cmd_case() == kMfrUlIncrementCounter;
}
inline bool Mifare::has_mfr_ul_increment_counter() const {
  return _internal_has_mfr_ul_increment_counter();
}
inline void Mifare::set_has_mfr_ul_increment_counter() {
  _oneof_case_[0] = kMfrUlIncrementCounter;
}
inline ::mifare::ultralight::counter::increment::IncrementCounter* Mifare::release_mfr_ul_increment_counter() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_ul_increment_counter)
  if (_internal_has_mfr_ul_increment_counter()) {
    clear_has_mifare_cmd();
      ::mifare::ultralight::counter::increment::IncrementCounter* temp = mifare_cmd_.mfr_ul_increment_counter_;
    mifare_cmd_.mfr_ul_increment_counter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::ultralight::counter::increment::IncrementCounter& Mifare::_internal_mfr_ul_increment_counter() const {
  return _internal_has_mfr_ul_increment_counter()
      ? *mifare_cmd_.mfr_ul_increment_counter_
      : *reinterpret_cast< ::mifare::ultralight::counter::increment::IncrementCounter*>(&::mifare::ultralight::counter::increment::_IncrementCounter_default_instance_);
}
inline const ::mifare::ultralight::counter::increment::IncrementCounter& Mifare::mfr_ul_increment_counter() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_ul_increment_counter)
  return _internal_mfr_ul_increment_counter();
}
inline ::mifare::ultralight::counter::increment::IncrementCounter* Mifare::_internal_mutable_mfr_ul_increment_counter() {
  if (!_internal_has_mfr_ul_increment_counter()) {
    clear_mifare_cmd();
    set_has_mfr_ul_increment_counter();
    mifare_cmd_.mfr_ul_increment_counter_ = CreateMaybeMessage< ::mifare::ultralight::counter::increment::IncrementCounter >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_ul_increment_counter_;
}
inline ::mifare::ultralight::counter::increment::IncrementCounter* Mifare::mutable_mfr_ul_increment_counter() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_ul_increment_counter)
  return _internal_mutable_mfr_ul_increment_counter();
}

// optional .mifare.ultralight.bulk.BulkOperation mfr_ul_bulk_operation = 41;
inline bool Mifare::_internal_has_mfr_ul_bulk_operation() const {
  return mifare_cmd_case() == kMfrUlBulkOperation;
}
inline bool Mifare::has_mfr_ul_bulk_operation() const {
  return _internal_has_mfr_ul_bulk_operation();
}
inline void Mifare::set_has_mfr_ul_bulk_operation() {
  _oneof_case_[0] = kMfrUlBulkOperation;
}
inline ::mifare::ultralight::bulk::BulkOperation* Mifare::release_mfr_ul_bulk_operation() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_ul_bulk_operation)
  if (_internal_has_mfr_ul_bulk_operation()) {
    clear_has_mifare_cmd();
      ::mifare::ultralight::bulk::BulkOperation* temp = mifare_cmd_.mfr_ul_bulk_operation_;
    mifare_cmd_.mfr_ul_bulk_operation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::ultralight::bulk::BulkOperation& Mifare::_internal_mfr_ul_bulk_operation() const {
  return _internal_has_mfr_ul_bulk_operation()
      ? *mifare_cmd_.mfr_ul_bulk_operation_
      : *reinterpret_cast< ::mifare::ultralight::bulk::BulkOperation*>(&::mifare::ultralight::bulk::_BulkOperation_default_instance_);
}
inline const ::mifare::ultralight::bulk::BulkOperation& Mifare::mfr_ul_bulk_operation() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_ul_bulk_operation)
  return _internal_mfr_ul_bulk_operation();
}
inline ::mifare::ultralight::bulk::BulkOperation* Mifare::_internal_mutable_mfr_ul_bulk_operation() {
  if (!_internal_has_mfr_ul_bulk_operation()) {
    clear_mifare_cmd();
    set_has_mfr_ul_bulk_operation();
    mifare_cmd_.mfr_ul_bulk_operation_ = CreateMaybeMessage< ::mifare::ultralight::bulk::BulkOperation >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_ul_bulk_operation_;
}
inline ::mifare::ultralight::bulk::BulkOperation* Mifare::mutable_mfr_ul_bulk_operation() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_ul_bulk_operation)
  return _internal_mutable_mfr_ul_bulk_operation();
}

// optional .mifare.ultralight.auth.ClearKey mfr_ul_auth_on_clear_key = 42;
inline bool Mifare::_internal_has_mfr_ul_auth_on_clear_key() const {
  return mifare_cmd_case() == kMfrUlAuthOnClearKey;
}
inline bool Mifare::has_mfr_ul_auth_on_clear_key() const {
  return _internal_has_mfr_ul_auth_on_clear_key();
}
inline void Mifare::set_has_mfr_ul_auth_on_clear_key() {
  _oneof_case_[0] = kMfrUlAuthOnClearKey;
}
inline ::mifare::ultralight::auth::ClearKey* Mifare::release_mfr_ul_auth_on_clear_key() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_ul_auth_on_clear_key)
  if (_internal_has_mfr_ul_auth_on_clear_key()) {
    clear_has_mifare_cmd();
      ::mifare::ultralight::auth::ClearKey* temp = mifare_cmd_.mfr_ul_auth_on_clear_key_;
    mifare_cmd_.mfr_ul_auth_on_clear_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::ultralight::auth::ClearKey& Mifare::_internal_mfr_ul_auth_on_clear_key() const {
  return _internal_has_mfr_ul_auth_on_clear_key()
      ? *mifare_cmd_.mfr_ul_auth_on_clear_key_
      : *reinterpret_cast< ::mifare::ultralight::auth::ClearKey*>(&::mifare::ultralight::auth::_ClearKey_default_instance_);
}
inline const ::mifare::ultralight::auth::ClearKey& Mifare::mfr_ul_auth_on_clear_key() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_ul_auth_on_clear_key)
  return _internal_mfr_ul_auth_on_clear_key();
}
inline ::mifare::ultralight::auth::ClearKey* Mifare::_internal_mutable_mfr_ul_auth_on_clear_key() {
  if (!_internal_has_mfr_ul_auth_on_clear_key()) {
    clear_mifare_cmd();
    set_has_mfr_ul_auth_on_clear_key();
    mifare_cmd_.mfr_ul_auth_on_clear_key_ = CreateMaybeMessage< ::mifare::ultralight::auth::ClearKey >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_ul_auth_on_clear_key_;
}
inline ::mifare::ultralight::auth::ClearKey* Mifare::mutable_mfr_ul_auth_on_clear_key() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_ul_auth_on_clear_key)
  return _internal_mutable_mfr_ul_auth_on_clear_key();
}

// optional .mifare.ultralight.auth.SamKey mfr_ul_auth_on_sam_key = 43;
inline bool Mifare::_internal_has_mfr_ul_auth_on_sam_key() const {
  return mifare_cmd_case() == kMfrUlAuthOnSamKey;
}
inline bool Mifare::has_mfr_ul_auth_on_sam_key() const {
  return _internal_has_mfr_ul_auth_on_sam_key();
}
inline void Mifare::set_has_mfr_ul_auth_on_sam_key() {
  _oneof_case_[0] = kMfrUlAuthOnSamKey;
}
inline ::mifare::ultralight::auth::SamKey* Mifare::release_mfr_ul_auth_on_sam_key() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_ul_auth_on_sam_key)
  if (_internal_has_mfr_ul_auth_on_sam_key()) {
    clear_has_mifare_cmd();
      ::mifare::ultralight::auth::SamKey* temp = mifare_cmd_.mfr_ul_auth_on_sam_key_;
    mifare_cmd_.mfr_ul_auth_on_sam_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::ultralight::auth::SamKey& Mifare::_internal_mfr_ul_auth_on_sam_key() const {
  return _internal_has_mfr_ul_auth_on_sam_key()
      ? *mifare_cmd_.mfr_ul_auth_on_sam_key_
      : *reinterpret_cast< ::mifare::ultralight::auth::SamKey*>(&::mifare::ultralight::auth::_SamKey_default_instance_);
}
inline const ::mifare::ultralight::auth::SamKey& Mifare::mfr_ul_auth_on_sam_key() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_ul_auth_on_sam_key)
  return _internal_mfr_ul_auth_on_sam_key();
}
inline ::mifare::ultralight::auth::SamKey* Mifare::_internal_mutable_mfr_ul_auth_on_sam_key() {
  if (!_internal_has_mfr_ul_auth_on_sam_key()) {
    clear_mifare_cmd();
    set_has_mfr_ul_auth_on_sam_key();
    mifare_cmd_.mfr_ul_auth_on_sam_key_ = CreateMaybeMessage< ::mifare::ultralight::auth::SamKey >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_ul_auth_on_sam_key_;
}
inline ::mifare::ultralight::auth::SamKey* Mifare::mutable_mfr_ul_auth_on_sam_key() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_ul_auth_on_sam_key)
  return _internal_mutable_mfr_ul_auth_on_sam_key();
}

// optional .mifare.ultralight.password.ClearPassword mfr_ul_auth_clear_password = 44;
inline bool Mifare::_internal_has_mfr_ul_auth_clear_password() const {
  return mifare_cmd_case() == kMfrUlAuthClearPassword;
}
inline bool Mifare::has_mfr_ul_auth_clear_password() const {
  return _internal_has_mfr_ul_auth_clear_password();
}
inline void Mifare::set_has_mfr_ul_auth_clear_password() {
  _oneof_case_[0] = kMfrUlAuthClearPassword;
}
inline ::mifare::ultralight::password::ClearPassword* Mifare::release_mfr_ul_auth_clear_password() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_ul_auth_clear_password)
  if (_internal_has_mfr_ul_auth_clear_password()) {
    clear_has_mifare_cmd();
      ::mifare::ultralight::password::ClearPassword* temp = mifare_cmd_.mfr_ul_auth_clear_password_;
    mifare_cmd_.mfr_ul_auth_clear_password_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::ultralight::password::ClearPassword& Mifare::_internal_mfr_ul_auth_clear_password() const {
  return _internal_has_mfr_ul_auth_clear_password()
      ? *mifare_cmd_.mfr_ul_auth_clear_password_
      : *reinterpret_cast< ::mifare::ultralight::password::ClearPassword*>(&::mifare::ultralight::password::_ClearPassword_default_instance_);
}
inline const ::mifare::ultralight::password::ClearPassword& Mifare::mfr_ul_auth_clear_password() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_ul_auth_clear_password)
  return _internal_mfr_ul_auth_clear_password();
}
inline ::mifare::ultralight::password::ClearPassword* Mifare::_internal_mutable_mfr_ul_auth_clear_password() {
  if (!_internal_has_mfr_ul_auth_clear_password()) {
    clear_mifare_cmd();
    set_has_mfr_ul_auth_clear_password();
    mifare_cmd_.mfr_ul_auth_clear_password_ = CreateMaybeMessage< ::mifare::ultralight::password::ClearPassword >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_ul_auth_clear_password_;
}
inline ::mifare::ultralight::password::ClearPassword* Mifare::mutable_mfr_ul_auth_clear_password() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_ul_auth_clear_password)
  return _internal_mutable_mfr_ul_auth_clear_password();
}

// optional .mifare.ultralight.password.SamPassword mfr_ul_auth_sam_password = 45;
inline bool Mifare::_internal_has_mfr_ul_auth_sam_password() const {
  return mifare_cmd_case() == kMfrUlAuthSamPassword;
}
inline bool Mifare::has_mfr_ul_auth_sam_password() const {
  return _internal_has_mfr_ul_auth_sam_password();
}
inline void Mifare::set_has_mfr_ul_auth_sam_password() {
  _oneof_case_[0] = kMfrUlAuthSamPassword;
}
inline ::mifare::ultralight::password::SamPassword* Mifare::release_mfr_ul_auth_sam_password() {
  // @@protoc_insertion_point(field_release:Mifare.mfr_ul_auth_sam_password)
  if (_internal_has_mfr_ul_auth_sam_password()) {
    clear_has_mifare_cmd();
      ::mifare::ultralight::password::SamPassword* temp = mifare_cmd_.mfr_ul_auth_sam_password_;
    mifare_cmd_.mfr_ul_auth_sam_password_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::ultralight::password::SamPassword& Mifare::_internal_mfr_ul_auth_sam_password() const {
  return _internal_has_mfr_ul_auth_sam_password()
      ? *mifare_cmd_.mfr_ul_auth_sam_password_
      : *reinterpret_cast< ::mifare::ultralight::password::SamPassword*>(&::mifare::ultralight::password::_SamPassword_default_instance_);
}
inline const ::mifare::ultralight::password::SamPassword& Mifare::mfr_ul_auth_sam_password() const {
  // @@protoc_insertion_point(field_get:Mifare.mfr_ul_auth_sam_password)
  return _internal_mfr_ul_auth_sam_password();
}
inline ::mifare::ultralight::password::SamPassword* Mifare::_internal_mutable_mfr_ul_auth_sam_password() {
  if (!_internal_has_mfr_ul_auth_sam_password()) {
    clear_mifare_cmd();
    set_has_mfr_ul_auth_sam_password();
    mifare_cmd_.mfr_ul_auth_sam_password_ = CreateMaybeMessage< ::mifare::ultralight::password::SamPassword >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_ul_auth_sam_password_;
}
inline ::mifare::ultralight::password::SamPassword* Mifare::mutable_mfr_ul_auth_sam_password() {
  // @@protoc_insertion_point(field_mutable:Mifare.mfr_ul_auth_sam_password)
  return _internal_mutable_mfr_ul_auth_sam_password();
}

inline bool Mifare::has_mifare_cmd() const {
  return mifare_cmd_case() != MIFARE_CMD_NOT_SET;
}
inline void Mifare::clear_has_mifare_cmd() {
  _oneof_case_[0] = MIFARE_CMD_NOT_SET;
}
inline Mifare::MifareCmdCase Mifare::mifare_cmd_case() const {
  return Mifare::MifareCmdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ContactLevel1

// optional .contact.power_on.PowerOnCard power_on_card = 1;
inline bool ContactLevel1::_internal_has_power_on_card() const {
  return contact_level1_cmd_case() == kPowerOnCard;
}
inline bool ContactLevel1::has_power_on_card() const {
  return _internal_has_power_on_card();
}
inline void ContactLevel1::set_has_power_on_card() {
  _oneof_case_[0] = kPowerOnCard;
}
inline ::contact::power_on::PowerOnCard* ContactLevel1::release_power_on_card() {
  // @@protoc_insertion_point(field_release:ContactLevel1.power_on_card)
  if (_internal_has_power_on_card()) {
    clear_has_contact_level1_cmd();
      ::contact::power_on::PowerOnCard* temp = contact_level1_cmd_.power_on_card_;
    contact_level1_cmd_.power_on_card_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::contact::power_on::PowerOnCard& ContactLevel1::_internal_power_on_card() const {
  return _internal_has_power_on_card()
      ? *contact_level1_cmd_.power_on_card_
      : *reinterpret_cast< ::contact::power_on::PowerOnCard*>(&::contact::power_on::_PowerOnCard_default_instance_);
}
inline const ::contact::power_on::PowerOnCard& ContactLevel1::power_on_card() const {
  // @@protoc_insertion_point(field_get:ContactLevel1.power_on_card)
  return _internal_power_on_card();
}
inline ::contact::power_on::PowerOnCard* ContactLevel1::_internal_mutable_power_on_card() {
  if (!_internal_has_power_on_card()) {
    clear_contact_level1_cmd();
    set_has_power_on_card();
    contact_level1_cmd_.power_on_card_ = CreateMaybeMessage< ::contact::power_on::PowerOnCard >(
        GetArenaNoVirtual());
  }
  return contact_level1_cmd_.power_on_card_;
}
inline ::contact::power_on::PowerOnCard* ContactLevel1::mutable_power_on_card() {
  // @@protoc_insertion_point(field_mutable:ContactLevel1.power_on_card)
  return _internal_mutable_power_on_card();
}

// optional .contact.power_off.PowerOffCard power_off_card = 2;
inline bool ContactLevel1::_internal_has_power_off_card() const {
  return contact_level1_cmd_case() == kPowerOffCard;
}
inline bool ContactLevel1::has_power_off_card() const {
  return _internal_has_power_off_card();
}
inline void ContactLevel1::set_has_power_off_card() {
  _oneof_case_[0] = kPowerOffCard;
}
inline ::contact::power_off::PowerOffCard* ContactLevel1::release_power_off_card() {
  // @@protoc_insertion_point(field_release:ContactLevel1.power_off_card)
  if (_internal_has_power_off_card()) {
    clear_has_contact_level1_cmd();
      ::contact::power_off::PowerOffCard* temp = contact_level1_cmd_.power_off_card_;
    contact_level1_cmd_.power_off_card_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::contact::power_off::PowerOffCard& ContactLevel1::_internal_power_off_card() const {
  return _internal_has_power_off_card()
      ? *contact_level1_cmd_.power_off_card_
      : *reinterpret_cast< ::contact::power_off::PowerOffCard*>(&::contact::power_off::_PowerOffCard_default_instance_);
}
inline const ::contact::power_off::PowerOffCard& ContactLevel1::power_off_card() const {
  // @@protoc_insertion_point(field_get:ContactLevel1.power_off_card)
  return _internal_power_off_card();
}
inline ::contact::power_off::PowerOffCard* ContactLevel1::_internal_mutable_power_off_card() {
  if (!_internal_has_power_off_card()) {
    clear_contact_level1_cmd();
    set_has_power_off_card();
    contact_level1_cmd_.power_off_card_ = CreateMaybeMessage< ::contact::power_off::PowerOffCard >(
        GetArenaNoVirtual());
  }
  return contact_level1_cmd_.power_off_card_;
}
inline ::contact::power_off::PowerOffCard* ContactLevel1::mutable_power_off_card() {
  // @@protoc_insertion_point(field_mutable:ContactLevel1.power_off_card)
  return _internal_mutable_power_off_card();
}

// optional .contact.iso7816_4.TransmitApdu transmit_apdu = 3;
inline bool ContactLevel1::_internal_has_transmit_apdu() const {
  return contact_level1_cmd_case() == kTransmitApdu;
}
inline bool ContactLevel1::has_transmit_apdu() const {
  return _internal_has_transmit_apdu();
}
inline void ContactLevel1::set_has_transmit_apdu() {
  _oneof_case_[0] = kTransmitApdu;
}
inline ::contact::iso7816_4::TransmitApdu* ContactLevel1::release_transmit_apdu() {
  // @@protoc_insertion_point(field_release:ContactLevel1.transmit_apdu)
  if (_internal_has_transmit_apdu()) {
    clear_has_contact_level1_cmd();
      ::contact::iso7816_4::TransmitApdu* temp = contact_level1_cmd_.transmit_apdu_;
    contact_level1_cmd_.transmit_apdu_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::contact::iso7816_4::TransmitApdu& ContactLevel1::_internal_transmit_apdu() const {
  return _internal_has_transmit_apdu()
      ? *contact_level1_cmd_.transmit_apdu_
      : *reinterpret_cast< ::contact::iso7816_4::TransmitApdu*>(&::contact::iso7816_4::_TransmitApdu_default_instance_);
}
inline const ::contact::iso7816_4::TransmitApdu& ContactLevel1::transmit_apdu() const {
  // @@protoc_insertion_point(field_get:ContactLevel1.transmit_apdu)
  return _internal_transmit_apdu();
}
inline ::contact::iso7816_4::TransmitApdu* ContactLevel1::_internal_mutable_transmit_apdu() {
  if (!_internal_has_transmit_apdu()) {
    clear_contact_level1_cmd();
    set_has_transmit_apdu();
    contact_level1_cmd_.transmit_apdu_ = CreateMaybeMessage< ::contact::iso7816_4::TransmitApdu >(
        GetArenaNoVirtual());
  }
  return contact_level1_cmd_.transmit_apdu_;
}
inline ::contact::iso7816_4::TransmitApdu* ContactLevel1::mutable_transmit_apdu() {
  // @@protoc_insertion_point(field_mutable:ContactLevel1.transmit_apdu)
  return _internal_mutable_transmit_apdu();
}

inline bool ContactLevel1::has_contact_level1_cmd() const {
  return contact_level1_cmd_case() != CONTACT_LEVEL1_CMD_NOT_SET;
}
inline void ContactLevel1::clear_has_contact_level1_cmd() {
  _oneof_case_[0] = CONTACT_LEVEL1_CMD_NOT_SET;
}
inline ContactLevel1::ContactLevel1CmdCase ContactLevel1::contact_level1_cmd_case() const {
  return ContactLevel1::ContactLevel1CmdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Service

// optional .srv.challenge.GetChallenge get_challenge = 1;
inline bool Service::_internal_has_get_challenge() const {
  return srv_cmd_case() == kGetChallenge;
}
inline bool Service::has_get_challenge() const {
  return _internal_has_get_challenge();
}
inline void Service::set_has_get_challenge() {
  _oneof_case_[0] = kGetChallenge;
}
inline ::srv::challenge::GetChallenge* Service::release_get_challenge() {
  // @@protoc_insertion_point(field_release:Service.get_challenge)
  if (_internal_has_get_challenge()) {
    clear_has_srv_cmd();
      ::srv::challenge::GetChallenge* temp = srv_cmd_.get_challenge_;
    srv_cmd_.get_challenge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::srv::challenge::GetChallenge& Service::_internal_get_challenge() const {
  return _internal_has_get_challenge()
      ? *srv_cmd_.get_challenge_
      : *reinterpret_cast< ::srv::challenge::GetChallenge*>(&::srv::challenge::_GetChallenge_default_instance_);
}
inline const ::srv::challenge::GetChallenge& Service::get_challenge() const {
  // @@protoc_insertion_point(field_get:Service.get_challenge)
  return _internal_get_challenge();
}
inline ::srv::challenge::GetChallenge* Service::_internal_mutable_get_challenge() {
  if (!_internal_has_get_challenge()) {
    clear_srv_cmd();
    set_has_get_challenge();
    srv_cmd_.get_challenge_ = CreateMaybeMessage< ::srv::challenge::GetChallenge >(
        GetArenaNoVirtual());
  }
  return srv_cmd_.get_challenge_;
}
inline ::srv::challenge::GetChallenge* Service::mutable_get_challenge() {
  // @@protoc_insertion_point(field_mutable:Service.get_challenge)
  return _internal_mutable_get_challenge();
}

// optional .srv.protection.Activate activate_protection = 2;
inline bool Service::_internal_has_activate_protection() const {
  return srv_cmd_case() == kActivateProtection;
}
inline bool Service::has_activate_protection() const {
  return _internal_has_activate_protection();
}
inline void Service::set_has_activate_protection() {
  _oneof_case_[0] = kActivateProtection;
}
inline ::srv::protection::Activate* Service::release_activate_protection() {
  // @@protoc_insertion_point(field_release:Service.activate_protection)
  if (_internal_has_activate_protection()) {
    clear_has_srv_cmd();
      ::srv::protection::Activate* temp = srv_cmd_.activate_protection_;
    srv_cmd_.activate_protection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::srv::protection::Activate& Service::_internal_activate_protection() const {
  return _internal_has_activate_protection()
      ? *srv_cmd_.activate_protection_
      : *reinterpret_cast< ::srv::protection::Activate*>(&::srv::protection::_Activate_default_instance_);
}
inline const ::srv::protection::Activate& Service::activate_protection() const {
  // @@protoc_insertion_point(field_get:Service.activate_protection)
  return _internal_activate_protection();
}
inline ::srv::protection::Activate* Service::_internal_mutable_activate_protection() {
  if (!_internal_has_activate_protection()) {
    clear_srv_cmd();
    set_has_activate_protection();
    srv_cmd_.activate_protection_ = CreateMaybeMessage< ::srv::protection::Activate >(
        GetArenaNoVirtual());
  }
  return srv_cmd_.activate_protection_;
}
inline ::srv::protection::Activate* Service::mutable_activate_protection() {
  // @@protoc_insertion_point(field_mutable:Service.activate_protection)
  return _internal_mutable_activate_protection();
}

// optional .srv.protection.Deactivate deactivate_protection = 3;
inline bool Service::_internal_has_deactivate_protection() const {
  return srv_cmd_case() == kDeactivateProtection;
}
inline bool Service::has_deactivate_protection() const {
  return _internal_has_deactivate_protection();
}
inline void Service::set_has_deactivate_protection() {
  _oneof_case_[0] = kDeactivateProtection;
}
inline ::srv::protection::Deactivate* Service::release_deactivate_protection() {
  // @@protoc_insertion_point(field_release:Service.deactivate_protection)
  if (_internal_has_deactivate_protection()) {
    clear_has_srv_cmd();
      ::srv::protection::Deactivate* temp = srv_cmd_.deactivate_protection_;
    srv_cmd_.deactivate_protection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::srv::protection::Deactivate& Service::_internal_deactivate_protection() const {
  return _internal_has_deactivate_protection()
      ? *srv_cmd_.deactivate_protection_
      : *reinterpret_cast< ::srv::protection::Deactivate*>(&::srv::protection::_Deactivate_default_instance_);
}
inline const ::srv::protection::Deactivate& Service::deactivate_protection() const {
  // @@protoc_insertion_point(field_get:Service.deactivate_protection)
  return _internal_deactivate_protection();
}
inline ::srv::protection::Deactivate* Service::_internal_mutable_deactivate_protection() {
  if (!_internal_has_deactivate_protection()) {
    clear_srv_cmd();
    set_has_deactivate_protection();
    srv_cmd_.deactivate_protection_ = CreateMaybeMessage< ::srv::protection::Deactivate >(
        GetArenaNoVirtual());
  }
  return srv_cmd_.deactivate_protection_;
}
inline ::srv::protection::Deactivate* Service::mutable_deactivate_protection() {
  // @@protoc_insertion_point(field_mutable:Service.deactivate_protection)
  return _internal_mutable_deactivate_protection();
}

// optional .srv.firmware_update.Prepare prepare_update = 4;
inline bool Service::_internal_has_prepare_update() const {
  return srv_cmd_case() == kPrepareUpdate;
}
inline bool Service::has_prepare_update() const {
  return _internal_has_prepare_update();
}
inline void Service::set_has_prepare_update() {
  _oneof_case_[0] = kPrepareUpdate;
}
inline ::srv::firmware_update::Prepare* Service::release_prepare_update() {
  // @@protoc_insertion_point(field_release:Service.prepare_update)
  if (_internal_has_prepare_update()) {
    clear_has_srv_cmd();
      ::srv::firmware_update::Prepare* temp = srv_cmd_.prepare_update_;
    srv_cmd_.prepare_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::srv::firmware_update::Prepare& Service::_internal_prepare_update() const {
  return _internal_has_prepare_update()
      ? *srv_cmd_.prepare_update_
      : *reinterpret_cast< ::srv::firmware_update::Prepare*>(&::srv::firmware_update::_Prepare_default_instance_);
}
inline const ::srv::firmware_update::Prepare& Service::prepare_update() const {
  // @@protoc_insertion_point(field_get:Service.prepare_update)
  return _internal_prepare_update();
}
inline ::srv::firmware_update::Prepare* Service::_internal_mutable_prepare_update() {
  if (!_internal_has_prepare_update()) {
    clear_srv_cmd();
    set_has_prepare_update();
    srv_cmd_.prepare_update_ = CreateMaybeMessage< ::srv::firmware_update::Prepare >(
        GetArenaNoVirtual());
  }
  return srv_cmd_.prepare_update_;
}
inline ::srv::firmware_update::Prepare* Service::mutable_prepare_update() {
  // @@protoc_insertion_point(field_mutable:Service.prepare_update)
  return _internal_mutable_prepare_update();
}

// optional .srv.firmware_update.UpdateBlock update_block = 5;
inline bool Service::_internal_has_update_block() const {
  return srv_cmd_case() == kUpdateBlock;
}
inline bool Service::has_update_block() const {
  return _internal_has_update_block();
}
inline void Service::set_has_update_block() {
  _oneof_case_[0] = kUpdateBlock;
}
inline ::srv::firmware_update::UpdateBlock* Service::release_update_block() {
  // @@protoc_insertion_point(field_release:Service.update_block)
  if (_internal_has_update_block()) {
    clear_has_srv_cmd();
      ::srv::firmware_update::UpdateBlock* temp = srv_cmd_.update_block_;
    srv_cmd_.update_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::srv::firmware_update::UpdateBlock& Service::_internal_update_block() const {
  return _internal_has_update_block()
      ? *srv_cmd_.update_block_
      : *reinterpret_cast< ::srv::firmware_update::UpdateBlock*>(&::srv::firmware_update::_UpdateBlock_default_instance_);
}
inline const ::srv::firmware_update::UpdateBlock& Service::update_block() const {
  // @@protoc_insertion_point(field_get:Service.update_block)
  return _internal_update_block();
}
inline ::srv::firmware_update::UpdateBlock* Service::_internal_mutable_update_block() {
  if (!_internal_has_update_block()) {
    clear_srv_cmd();
    set_has_update_block();
    srv_cmd_.update_block_ = CreateMaybeMessage< ::srv::firmware_update::UpdateBlock >(
        GetArenaNoVirtual());
  }
  return srv_cmd_.update_block_;
}
inline ::srv::firmware_update::UpdateBlock* Service::mutable_update_block() {
  // @@protoc_insertion_point(field_mutable:Service.update_block)
  return _internal_mutable_update_block();
}

// optional .srv.firmware_update.Apply apply_update = 6;
inline bool Service::_internal_has_apply_update() const {
  return srv_cmd_case() == kApplyUpdate;
}
inline bool Service::has_apply_update() const {
  return _internal_has_apply_update();
}
inline void Service::set_has_apply_update() {
  _oneof_case_[0] = kApplyUpdate;
}
inline ::srv::firmware_update::Apply* Service::release_apply_update() {
  // @@protoc_insertion_point(field_release:Service.apply_update)
  if (_internal_has_apply_update()) {
    clear_has_srv_cmd();
      ::srv::firmware_update::Apply* temp = srv_cmd_.apply_update_;
    srv_cmd_.apply_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::srv::firmware_update::Apply& Service::_internal_apply_update() const {
  return _internal_has_apply_update()
      ? *srv_cmd_.apply_update_
      : *reinterpret_cast< ::srv::firmware_update::Apply*>(&::srv::firmware_update::_Apply_default_instance_);
}
inline const ::srv::firmware_update::Apply& Service::apply_update() const {
  // @@protoc_insertion_point(field_get:Service.apply_update)
  return _internal_apply_update();
}
inline ::srv::firmware_update::Apply* Service::_internal_mutable_apply_update() {
  if (!_internal_has_apply_update()) {
    clear_srv_cmd();
    set_has_apply_update();
    srv_cmd_.apply_update_ = CreateMaybeMessage< ::srv::firmware_update::Apply >(
        GetArenaNoVirtual());
  }
  return srv_cmd_.apply_update_;
}
inline ::srv::firmware_update::Apply* Service::mutable_apply_update() {
  // @@protoc_insertion_point(field_mutable:Service.apply_update)
  return _internal_mutable_apply_update();
}

// optional .srv.firmware_update.Rollback rollback_update = 7;
inline bool Service::_internal_has_rollback_update() const {
  return srv_cmd_case() == kRollbackUpdate;
}
inline bool Service::has_rollback_update() const {
  return _internal_has_rollback_update();
}
inline void Service::set_has_rollback_update() {
  _oneof_case_[0] = kRollbackUpdate;
}
inline ::srv::firmware_update::Rollback* Service::release_rollback_update() {
  // @@protoc_insertion_point(field_release:Service.rollback_update)
  if (_internal_has_rollback_update()) {
    clear_has_srv_cmd();
      ::srv::firmware_update::Rollback* temp = srv_cmd_.rollback_update_;
    srv_cmd_.rollback_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::srv::firmware_update::Rollback& Service::_internal_rollback_update() const {
  return _internal_has_rollback_update()
      ? *srv_cmd_.rollback_update_
      : *reinterpret_cast< ::srv::firmware_update::Rollback*>(&::srv::firmware_update::_Rollback_default_instance_);
}
inline const ::srv::firmware_update::Rollback& Service::rollback_update() const {
  // @@protoc_insertion_point(field_get:Service.rollback_update)
  return _internal_rollback_update();
}
inline ::srv::firmware_update::Rollback* Service::_internal_mutable_rollback_update() {
  if (!_internal_has_rollback_update()) {
    clear_srv_cmd();
    set_has_rollback_update();
    srv_cmd_.rollback_update_ = CreateMaybeMessage< ::srv::firmware_update::Rollback >(
        GetArenaNoVirtual());
  }
  return srv_cmd_.rollback_update_;
}
inline ::srv::firmware_update::Rollback* Service::mutable_rollback_update() {
  // @@protoc_insertion_point(field_mutable:Service.rollback_update)
  return _internal_mutable_rollback_update();
}

// optional .srv.diagnostic.GetDiagnostic get_diagnostic = 8;
inline bool Service::_internal_has_get_diagnostic() const {
  return srv_cmd_case() == kGetDiagnostic;
}
inline bool Service::has_get_diagnostic() const {
  return _internal_has_get_diagnostic();
}
inline void Service::set_has_get_diagnostic() {
  _oneof_case_[0] = kGetDiagnostic;
}
inline ::srv::diagnostic::GetDiagnostic* Service::release_get_diagnostic() {
  // @@protoc_insertion_point(field_release:Service.get_diagnostic)
  if (_internal_has_get_diagnostic()) {
    clear_has_srv_cmd();
      ::srv::diagnostic::GetDiagnostic* temp = srv_cmd_.get_diagnostic_;
    srv_cmd_.get_diagnostic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::srv::diagnostic::GetDiagnostic& Service::_internal_get_diagnostic() const {
  return _internal_has_get_diagnostic()
      ? *srv_cmd_.get_diagnostic_
      : *reinterpret_cast< ::srv::diagnostic::GetDiagnostic*>(&::srv::diagnostic::_GetDiagnostic_default_instance_);
}
inline const ::srv::diagnostic::GetDiagnostic& Service::get_diagnostic() const {
  // @@protoc_insertion_point(field_get:Service.get_diagnostic)
  return _internal_get_diagnostic();
}
inline ::srv::diagnostic::GetDiagnostic* Service::_internal_mutable_get_diagnostic() {
  if (!_internal_has_get_diagnostic()) {
    clear_srv_cmd();
    set_has_get_diagnostic();
    srv_cmd_.get_diagnostic_ = CreateMaybeMessage< ::srv::diagnostic::GetDiagnostic >(
        GetArenaNoVirtual());
  }
  return srv_cmd_.get_diagnostic_;
}
inline ::srv::diagnostic::GetDiagnostic* Service::mutable_get_diagnostic() {
  // @@protoc_insertion_point(field_mutable:Service.get_diagnostic)
  return _internal_mutable_get_diagnostic();
}

// optional .srv.upload_config.Prepare prepare_for_config = 9;
inline bool Service::_internal_has_prepare_for_config() const {
  return srv_cmd_case() == kPrepareForConfig;
}
inline bool Service::has_prepare_for_config() const {
  return _internal_has_prepare_for_config();
}
inline void Service::set_has_prepare_for_config() {
  _oneof_case_[0] = kPrepareForConfig;
}
inline ::srv::upload_config::Prepare* Service::release_prepare_for_config() {
  // @@protoc_insertion_point(field_release:Service.prepare_for_config)
  if (_internal_has_prepare_for_config()) {
    clear_has_srv_cmd();
      ::srv::upload_config::Prepare* temp = srv_cmd_.prepare_for_config_;
    srv_cmd_.prepare_for_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::srv::upload_config::Prepare& Service::_internal_prepare_for_config() const {
  return _internal_has_prepare_for_config()
      ? *srv_cmd_.prepare_for_config_
      : *reinterpret_cast< ::srv::upload_config::Prepare*>(&::srv::upload_config::_Prepare_default_instance_);
}
inline const ::srv::upload_config::Prepare& Service::prepare_for_config() const {
  // @@protoc_insertion_point(field_get:Service.prepare_for_config)
  return _internal_prepare_for_config();
}
inline ::srv::upload_config::Prepare* Service::_internal_mutable_prepare_for_config() {
  if (!_internal_has_prepare_for_config()) {
    clear_srv_cmd();
    set_has_prepare_for_config();
    srv_cmd_.prepare_for_config_ = CreateMaybeMessage< ::srv::upload_config::Prepare >(
        GetArenaNoVirtual());
  }
  return srv_cmd_.prepare_for_config_;
}
inline ::srv::upload_config::Prepare* Service::mutable_prepare_for_config() {
  // @@protoc_insertion_point(field_mutable:Service.prepare_for_config)
  return _internal_mutable_prepare_for_config();
}

// optional .srv.upload_config.UploadBlock upload_block_of_config = 10;
inline bool Service::_internal_has_upload_block_of_config() const {
  return srv_cmd_case() == kUploadBlockOfConfig;
}
inline bool Service::has_upload_block_of_config() const {
  return _internal_has_upload_block_of_config();
}
inline void Service::set_has_upload_block_of_config() {
  _oneof_case_[0] = kUploadBlockOfConfig;
}
inline ::srv::upload_config::UploadBlock* Service::release_upload_block_of_config() {
  // @@protoc_insertion_point(field_release:Service.upload_block_of_config)
  if (_internal_has_upload_block_of_config()) {
    clear_has_srv_cmd();
      ::srv::upload_config::UploadBlock* temp = srv_cmd_.upload_block_of_config_;
    srv_cmd_.upload_block_of_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::srv::upload_config::UploadBlock& Service::_internal_upload_block_of_config() const {
  return _internal_has_upload_block_of_config()
      ? *srv_cmd_.upload_block_of_config_
      : *reinterpret_cast< ::srv::upload_config::UploadBlock*>(&::srv::upload_config::_UploadBlock_default_instance_);
}
inline const ::srv::upload_config::UploadBlock& Service::upload_block_of_config() const {
  // @@protoc_insertion_point(field_get:Service.upload_block_of_config)
  return _internal_upload_block_of_config();
}
inline ::srv::upload_config::UploadBlock* Service::_internal_mutable_upload_block_of_config() {
  if (!_internal_has_upload_block_of_config()) {
    clear_srv_cmd();
    set_has_upload_block_of_config();
    srv_cmd_.upload_block_of_config_ = CreateMaybeMessage< ::srv::upload_config::UploadBlock >(
        GetArenaNoVirtual());
  }
  return srv_cmd_.upload_block_of_config_;
}
inline ::srv::upload_config::UploadBlock* Service::mutable_upload_block_of_config() {
  // @@protoc_insertion_point(field_mutable:Service.upload_block_of_config)
  return _internal_mutable_upload_block_of_config();
}

// optional .srv.upload_config.CheckConfiguration check_configuration = 11;
inline bool Service::_internal_has_check_configuration() const {
  return srv_cmd_case() == kCheckConfiguration;
}
inline bool Service::has_check_configuration() const {
  return _internal_has_check_configuration();
}
inline void Service::set_has_check_configuration() {
  _oneof_case_[0] = kCheckConfiguration;
}
inline ::srv::upload_config::CheckConfiguration* Service::release_check_configuration() {
  // @@protoc_insertion_point(field_release:Service.check_configuration)
  if (_internal_has_check_configuration()) {
    clear_has_srv_cmd();
      ::srv::upload_config::CheckConfiguration* temp = srv_cmd_.check_configuration_;
    srv_cmd_.check_configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::srv::upload_config::CheckConfiguration& Service::_internal_check_configuration() const {
  return _internal_has_check_configuration()
      ? *srv_cmd_.check_configuration_
      : *reinterpret_cast< ::srv::upload_config::CheckConfiguration*>(&::srv::upload_config::_CheckConfiguration_default_instance_);
}
inline const ::srv::upload_config::CheckConfiguration& Service::check_configuration() const {
  // @@protoc_insertion_point(field_get:Service.check_configuration)
  return _internal_check_configuration();
}
inline ::srv::upload_config::CheckConfiguration* Service::_internal_mutable_check_configuration() {
  if (!_internal_has_check_configuration()) {
    clear_srv_cmd();
    set_has_check_configuration();
    srv_cmd_.check_configuration_ = CreateMaybeMessage< ::srv::upload_config::CheckConfiguration >(
        GetArenaNoVirtual());
  }
  return srv_cmd_.check_configuration_;
}
inline ::srv::upload_config::CheckConfiguration* Service::mutable_check_configuration() {
  // @@protoc_insertion_point(field_mutable:Service.check_configuration)
  return _internal_mutable_check_configuration();
}

inline bool Service::has_srv_cmd() const {
  return srv_cmd_case() != SRV_CMD_NOT_SET;
}
inline void Service::clear_has_srv_cmd() {
  _oneof_case_[0] = SRV_CMD_NOT_SET;
}
inline Service::SrvCmdCase Service::srv_cmd_case() const {
  return Service::SrvCmdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Gui

// optional .gui.screen.ShowScreen show_screen = 1;
inline bool Gui::_internal_has_show_screen() const {
  return gui_cmd_case() == kShowScreen;
}
inline bool Gui::has_show_screen() const {
  return _internal_has_show_screen();
}
inline void Gui::set_has_show_screen() {
  _oneof_case_[0] = kShowScreen;
}
inline ::gui::screen::ShowScreen* Gui::release_show_screen() {
  // @@protoc_insertion_point(field_release:Gui.show_screen)
  if (_internal_has_show_screen()) {
    clear_has_gui_cmd();
      ::gui::screen::ShowScreen* temp = gui_cmd_.show_screen_;
    gui_cmd_.show_screen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gui::screen::ShowScreen& Gui::_internal_show_screen() const {
  return _internal_has_show_screen()
      ? *gui_cmd_.show_screen_
      : *reinterpret_cast< ::gui::screen::ShowScreen*>(&::gui::screen::_ShowScreen_default_instance_);
}
inline const ::gui::screen::ShowScreen& Gui::show_screen() const {
  // @@protoc_insertion_point(field_get:Gui.show_screen)
  return _internal_show_screen();
}
inline ::gui::screen::ShowScreen* Gui::_internal_mutable_show_screen() {
  if (!_internal_has_show_screen()) {
    clear_gui_cmd();
    set_has_show_screen();
    gui_cmd_.show_screen_ = CreateMaybeMessage< ::gui::screen::ShowScreen >(
        GetArenaNoVirtual());
  }
  return gui_cmd_.show_screen_;
}
inline ::gui::screen::ShowScreen* Gui::mutable_show_screen() {
  // @@protoc_insertion_point(field_mutable:Gui.show_screen)
  return _internal_mutable_show_screen();
}

// optional .gui.input_dialog.InputDialog input_dialog = 2;
inline bool Gui::_internal_has_input_dialog() const {
  return gui_cmd_case() == kInputDialog;
}
inline bool Gui::has_input_dialog() const {
  return _internal_has_input_dialog();
}
inline void Gui::set_has_input_dialog() {
  _oneof_case_[0] = kInputDialog;
}
inline ::gui::input_dialog::InputDialog* Gui::release_input_dialog() {
  // @@protoc_insertion_point(field_release:Gui.input_dialog)
  if (_internal_has_input_dialog()) {
    clear_has_gui_cmd();
      ::gui::input_dialog::InputDialog* temp = gui_cmd_.input_dialog_;
    gui_cmd_.input_dialog_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gui::input_dialog::InputDialog& Gui::_internal_input_dialog() const {
  return _internal_has_input_dialog()
      ? *gui_cmd_.input_dialog_
      : *reinterpret_cast< ::gui::input_dialog::InputDialog*>(&::gui::input_dialog::_InputDialog_default_instance_);
}
inline const ::gui::input_dialog::InputDialog& Gui::input_dialog() const {
  // @@protoc_insertion_point(field_get:Gui.input_dialog)
  return _internal_input_dialog();
}
inline ::gui::input_dialog::InputDialog* Gui::_internal_mutable_input_dialog() {
  if (!_internal_has_input_dialog()) {
    clear_gui_cmd();
    set_has_input_dialog();
    gui_cmd_.input_dialog_ = CreateMaybeMessage< ::gui::input_dialog::InputDialog >(
        GetArenaNoVirtual());
  }
  return gui_cmd_.input_dialog_;
}
inline ::gui::input_dialog::InputDialog* Gui::mutable_input_dialog() {
  // @@protoc_insertion_point(field_mutable:Gui.input_dialog)
  return _internal_mutable_input_dialog();
}

// optional .gui.menu_dialog.MenuDialog menu_dialog = 3;
inline bool Gui::_internal_has_menu_dialog() const {
  return gui_cmd_case() == kMenuDialog;
}
inline bool Gui::has_menu_dialog() const {
  return _internal_has_menu_dialog();
}
inline void Gui::set_has_menu_dialog() {
  _oneof_case_[0] = kMenuDialog;
}
inline ::gui::menu_dialog::MenuDialog* Gui::release_menu_dialog() {
  // @@protoc_insertion_point(field_release:Gui.menu_dialog)
  if (_internal_has_menu_dialog()) {
    clear_has_gui_cmd();
      ::gui::menu_dialog::MenuDialog* temp = gui_cmd_.menu_dialog_;
    gui_cmd_.menu_dialog_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gui::menu_dialog::MenuDialog& Gui::_internal_menu_dialog() const {
  return _internal_has_menu_dialog()
      ? *gui_cmd_.menu_dialog_
      : *reinterpret_cast< ::gui::menu_dialog::MenuDialog*>(&::gui::menu_dialog::_MenuDialog_default_instance_);
}
inline const ::gui::menu_dialog::MenuDialog& Gui::menu_dialog() const {
  // @@protoc_insertion_point(field_get:Gui.menu_dialog)
  return _internal_menu_dialog();
}
inline ::gui::menu_dialog::MenuDialog* Gui::_internal_mutable_menu_dialog() {
  if (!_internal_has_menu_dialog()) {
    clear_gui_cmd();
    set_has_menu_dialog();
    gui_cmd_.menu_dialog_ = CreateMaybeMessage< ::gui::menu_dialog::MenuDialog >(
        GetArenaNoVirtual());
  }
  return gui_cmd_.menu_dialog_;
}
inline ::gui::menu_dialog::MenuDialog* Gui::mutable_menu_dialog() {
  // @@protoc_insertion_point(field_mutable:Gui.menu_dialog)
  return _internal_mutable_menu_dialog();
}

// optional .gui.draw_bitmap.DrawBitmap draw_bitmap = 4;
inline bool Gui::_internal_has_draw_bitmap() const {
  return gui_cmd_case() == kDrawBitmap;
}
inline bool Gui::has_draw_bitmap() const {
  return _internal_has_draw_bitmap();
}
inline void Gui::set_has_draw_bitmap() {
  _oneof_case_[0] = kDrawBitmap;
}
inline ::gui::draw_bitmap::DrawBitmap* Gui::release_draw_bitmap() {
  // @@protoc_insertion_point(field_release:Gui.draw_bitmap)
  if (_internal_has_draw_bitmap()) {
    clear_has_gui_cmd();
      ::gui::draw_bitmap::DrawBitmap* temp = gui_cmd_.draw_bitmap_;
    gui_cmd_.draw_bitmap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gui::draw_bitmap::DrawBitmap& Gui::_internal_draw_bitmap() const {
  return _internal_has_draw_bitmap()
      ? *gui_cmd_.draw_bitmap_
      : *reinterpret_cast< ::gui::draw_bitmap::DrawBitmap*>(&::gui::draw_bitmap::_DrawBitmap_default_instance_);
}
inline const ::gui::draw_bitmap::DrawBitmap& Gui::draw_bitmap() const {
  // @@protoc_insertion_point(field_get:Gui.draw_bitmap)
  return _internal_draw_bitmap();
}
inline ::gui::draw_bitmap::DrawBitmap* Gui::_internal_mutable_draw_bitmap() {
  if (!_internal_has_draw_bitmap()) {
    clear_gui_cmd();
    set_has_draw_bitmap();
    gui_cmd_.draw_bitmap_ = CreateMaybeMessage< ::gui::draw_bitmap::DrawBitmap >(
        GetArenaNoVirtual());
  }
  return gui_cmd_.draw_bitmap_;
}
inline ::gui::draw_bitmap::DrawBitmap* Gui::mutable_draw_bitmap() {
  // @@protoc_insertion_point(field_mutable:Gui.draw_bitmap)
  return _internal_mutable_draw_bitmap();
}

// optional .gui.slideshow.Slideshow slideshow = 5;
inline bool Gui::_internal_has_slideshow() const {
  return gui_cmd_case() == kSlideshow;
}
inline bool Gui::has_slideshow() const {
  return _internal_has_slideshow();
}
inline void Gui::set_has_slideshow() {
  _oneof_case_[0] = kSlideshow;
}
inline ::gui::slideshow::Slideshow* Gui::release_slideshow() {
  // @@protoc_insertion_point(field_release:Gui.slideshow)
  if (_internal_has_slideshow()) {
    clear_has_gui_cmd();
      ::gui::slideshow::Slideshow* temp = gui_cmd_.slideshow_;
    gui_cmd_.slideshow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gui::slideshow::Slideshow& Gui::_internal_slideshow() const {
  return _internal_has_slideshow()
      ? *gui_cmd_.slideshow_
      : *reinterpret_cast< ::gui::slideshow::Slideshow*>(&::gui::slideshow::_Slideshow_default_instance_);
}
inline const ::gui::slideshow::Slideshow& Gui::slideshow() const {
  // @@protoc_insertion_point(field_get:Gui.slideshow)
  return _internal_slideshow();
}
inline ::gui::slideshow::Slideshow* Gui::_internal_mutable_slideshow() {
  if (!_internal_has_slideshow()) {
    clear_gui_cmd();
    set_has_slideshow();
    gui_cmd_.slideshow_ = CreateMaybeMessage< ::gui::slideshow::Slideshow >(
        GetArenaNoVirtual());
  }
  return gui_cmd_.slideshow_;
}
inline ::gui::slideshow::Slideshow* Gui::mutable_slideshow() {
  // @@protoc_insertion_point(field_mutable:Gui.slideshow)
  return _internal_mutable_slideshow();
}

inline bool Gui::has_gui_cmd() const {
  return gui_cmd_case() != GUI_CMD_NOT_SET;
}
inline void Gui::clear_has_gui_cmd() {
  _oneof_case_[0] = GUI_CMD_NOT_SET;
}
inline Gui::GuiCmdCase Gui::gui_cmd_case() const {
  return Gui::GuiCmdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MifareExtended

// optional .mifare.classic.sector.read.ReadSectors mfr_classic_read_sectors = 1;
inline bool MifareExtended::_internal_has_mfr_classic_read_sectors() const {
  return mifare_cmd_case() == kMfrClassicReadSectors;
}
inline bool MifareExtended::has_mfr_classic_read_sectors() const {
  return _internal_has_mfr_classic_read_sectors();
}
inline void MifareExtended::set_has_mfr_classic_read_sectors() {
  _oneof_case_[0] = kMfrClassicReadSectors;
}
inline ::mifare::classic::sector::read::ReadSectors* MifareExtended::release_mfr_classic_read_sectors() {
  // @@protoc_insertion_point(field_release:MifareExtended.mfr_classic_read_sectors)
  if (_internal_has_mfr_classic_read_sectors()) {
    clear_has_mifare_cmd();
      ::mifare::classic::sector::read::ReadSectors* temp = mifare_cmd_.mfr_classic_read_sectors_;
    mifare_cmd_.mfr_classic_read_sectors_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::classic::sector::read::ReadSectors& MifareExtended::_internal_mfr_classic_read_sectors() const {
  return _internal_has_mfr_classic_read_sectors()
      ? *mifare_cmd_.mfr_classic_read_sectors_
      : *reinterpret_cast< ::mifare::classic::sector::read::ReadSectors*>(&::mifare::classic::sector::read::_ReadSectors_default_instance_);
}
inline const ::mifare::classic::sector::read::ReadSectors& MifareExtended::mfr_classic_read_sectors() const {
  // @@protoc_insertion_point(field_get:MifareExtended.mfr_classic_read_sectors)
  return _internal_mfr_classic_read_sectors();
}
inline ::mifare::classic::sector::read::ReadSectors* MifareExtended::_internal_mutable_mfr_classic_read_sectors() {
  if (!_internal_has_mfr_classic_read_sectors()) {
    clear_mifare_cmd();
    set_has_mfr_classic_read_sectors();
    mifare_cmd_.mfr_classic_read_sectors_ = CreateMaybeMessage< ::mifare::classic::sector::read::ReadSectors >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_classic_read_sectors_;
}
inline ::mifare::classic::sector::read::ReadSectors* MifareExtended::mutable_mfr_classic_read_sectors() {
  // @@protoc_insertion_point(field_mutable:MifareExtended.mfr_classic_read_sectors)
  return _internal_mutable_mfr_classic_read_sectors();
}

// optional .mifare.classic.sector.write.WriteSectors mfr_classic_write_sectors = 2;
inline bool MifareExtended::_internal_has_mfr_classic_write_sectors() const {
  return mifare_cmd_case() == kMfrClassicWriteSectors;
}
inline bool MifareExtended::has_mfr_classic_write_sectors() const {
  return _internal_has_mfr_classic_write_sectors();
}
inline void MifareExtended::set_has_mfr_classic_write_sectors() {
  _oneof_case_[0] = kMfrClassicWriteSectors;
}
inline ::mifare::classic::sector::write::WriteSectors* MifareExtended::release_mfr_classic_write_sectors() {
  // @@protoc_insertion_point(field_release:MifareExtended.mfr_classic_write_sectors)
  if (_internal_has_mfr_classic_write_sectors()) {
    clear_has_mifare_cmd();
      ::mifare::classic::sector::write::WriteSectors* temp = mifare_cmd_.mfr_classic_write_sectors_;
    mifare_cmd_.mfr_classic_write_sectors_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::classic::sector::write::WriteSectors& MifareExtended::_internal_mfr_classic_write_sectors() const {
  return _internal_has_mfr_classic_write_sectors()
      ? *mifare_cmd_.mfr_classic_write_sectors_
      : *reinterpret_cast< ::mifare::classic::sector::write::WriteSectors*>(&::mifare::classic::sector::write::_WriteSectors_default_instance_);
}
inline const ::mifare::classic::sector::write::WriteSectors& MifareExtended::mfr_classic_write_sectors() const {
  // @@protoc_insertion_point(field_get:MifareExtended.mfr_classic_write_sectors)
  return _internal_mfr_classic_write_sectors();
}
inline ::mifare::classic::sector::write::WriteSectors* MifareExtended::_internal_mutable_mfr_classic_write_sectors() {
  if (!_internal_has_mfr_classic_write_sectors()) {
    clear_mifare_cmd();
    set_has_mfr_classic_write_sectors();
    mifare_cmd_.mfr_classic_write_sectors_ = CreateMaybeMessage< ::mifare::classic::sector::write::WriteSectors >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_classic_write_sectors_;
}
inline ::mifare::classic::sector::write::WriteSectors* MifareExtended::mutable_mfr_classic_write_sectors() {
  // @@protoc_insertion_point(field_mutable:MifareExtended.mfr_classic_write_sectors)
  return _internal_mutable_mfr_classic_write_sectors();
}

// optional .mifare.generic.get_version.GetVersion mfr_get_version = 3;
inline bool MifareExtended::_internal_has_mfr_get_version() const {
  return mifare_cmd_case() == kMfrGetVersion;
}
inline bool MifareExtended::has_mfr_get_version() const {
  return _internal_has_mfr_get_version();
}
inline void MifareExtended::set_has_mfr_get_version() {
  _oneof_case_[0] = kMfrGetVersion;
}
inline ::mifare::generic::get_version::GetVersion* MifareExtended::release_mfr_get_version() {
  // @@protoc_insertion_point(field_release:MifareExtended.mfr_get_version)
  if (_internal_has_mfr_get_version()) {
    clear_has_mifare_cmd();
      ::mifare::generic::get_version::GetVersion* temp = mifare_cmd_.mfr_get_version_;
    mifare_cmd_.mfr_get_version_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::generic::get_version::GetVersion& MifareExtended::_internal_mfr_get_version() const {
  return _internal_has_mfr_get_version()
      ? *mifare_cmd_.mfr_get_version_
      : *reinterpret_cast< ::mifare::generic::get_version::GetVersion*>(&::mifare::generic::get_version::_GetVersion_default_instance_);
}
inline const ::mifare::generic::get_version::GetVersion& MifareExtended::mfr_get_version() const {
  // @@protoc_insertion_point(field_get:MifareExtended.mfr_get_version)
  return _internal_mfr_get_version();
}
inline ::mifare::generic::get_version::GetVersion* MifareExtended::_internal_mutable_mfr_get_version() {
  if (!_internal_has_mfr_get_version()) {
    clear_mifare_cmd();
    set_has_mfr_get_version();
    mifare_cmd_.mfr_get_version_ = CreateMaybeMessage< ::mifare::generic::get_version::GetVersion >(
        GetArenaNoVirtual());
  }
  return mifare_cmd_.mfr_get_version_;
}
inline ::mifare::generic::get_version::GetVersion* MifareExtended::mutable_mfr_get_version() {
  // @@protoc_insertion_point(field_mutable:MifareExtended.mfr_get_version)
  return _internal_mutable_mfr_get_version();
}

inline bool MifareExtended::has_mifare_cmd() const {
  return mifare_cmd_case() != MIFARE_CMD_NOT_SET;
}
inline void MifareExtended::clear_has_mifare_cmd() {
  _oneof_case_[0] = MIFARE_CMD_NOT_SET;
}
inline MifareExtended::MifareCmdCase MifareExtended::mifare_cmd_case() const {
  return MifareExtended::MifareCmdCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_commands7_2eproto
