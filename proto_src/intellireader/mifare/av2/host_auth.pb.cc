// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mifare/av2/host_auth.proto

#include "mifare/av2/host_auth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fav2_2fargs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthenticationArguments_mifare_2fav2_2fargs_2eproto;
namespace mifare {
namespace av2 {
namespace host_auth {
class AuthenticateHostDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateHost> _instance;
} _AuthenticateHost_default_instance_;
}  // namespace host_auth
}  // namespace av2
}  // namespace mifare
static void InitDefaultsscc_info_AuthenticateHost_mifare_2fav2_2fhost_5fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::av2::host_auth::_AuthenticateHost_default_instance_;
    new (ptr) ::mifare::av2::host_auth::AuthenticateHost();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::av2::host_auth::AuthenticateHost::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthenticateHost_mifare_2fav2_2fhost_5fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthenticateHost_mifare_2fav2_2fhost_5fauth_2eproto}, {
      &scc_info_AuthenticationArguments_mifare_2fav2_2fargs_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mifare_2fav2_2fhost_5fauth_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mifare_2fav2_2fhost_5fauth_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mifare_2fav2_2fhost_5fauth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mifare_2fav2_2fhost_5fauth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mifare::av2::host_auth::AuthenticateHost, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::av2::host_auth::AuthenticateHost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::av2::host_auth::AuthenticateHost, args_),
  PROTOBUF_FIELD_OFFSET(::mifare::av2::host_auth::AuthenticateHost, key_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::mifare::av2::host_auth::AuthenticateHost)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::av2::host_auth::_AuthenticateHost_default_instance_),
};

const char descriptor_table_protodef_mifare_2fav2_2fhost_5fauth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032mifare/av2/host_auth.proto\022\024mifare.av2"
  ".host_auth\032\025mifare/av2/args.proto\"W\n\020Aut"
  "henticateHost\0226\n\004args\030\001 \002(\0132(.mifare.av2"
  ".args.AuthenticationArguments\022\013\n\003key\030\002 \001"
  "(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mifare_2fav2_2fhost_5fauth_2eproto_deps[1] = {
  &::descriptor_table_mifare_2fav2_2fargs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mifare_2fav2_2fhost_5fauth_2eproto_sccs[1] = {
  &scc_info_AuthenticateHost_mifare_2fav2_2fhost_5fauth_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mifare_2fav2_2fhost_5fauth_2eproto_once;
static bool descriptor_table_mifare_2fav2_2fhost_5fauth_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mifare_2fav2_2fhost_5fauth_2eproto = {
  &descriptor_table_mifare_2fav2_2fhost_5fauth_2eproto_initialized, descriptor_table_protodef_mifare_2fav2_2fhost_5fauth_2eproto, "mifare/av2/host_auth.proto", 162,
  &descriptor_table_mifare_2fav2_2fhost_5fauth_2eproto_once, descriptor_table_mifare_2fav2_2fhost_5fauth_2eproto_sccs, descriptor_table_mifare_2fav2_2fhost_5fauth_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_mifare_2fav2_2fhost_5fauth_2eproto::offsets,
  file_level_metadata_mifare_2fav2_2fhost_5fauth_2eproto, 1, file_level_enum_descriptors_mifare_2fav2_2fhost_5fauth_2eproto, file_level_service_descriptors_mifare_2fav2_2fhost_5fauth_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mifare_2fav2_2fhost_5fauth_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mifare_2fav2_2fhost_5fauth_2eproto), true);
namespace mifare {
namespace av2 {
namespace host_auth {

// ===================================================================

void AuthenticateHost::InitAsDefaultInstance() {
  ::mifare::av2::host_auth::_AuthenticateHost_default_instance_._instance.get_mutable()->args_ = const_cast< ::mifare::av2::args::AuthenticationArguments*>(
      ::mifare::av2::args::AuthenticationArguments::internal_default_instance());
}
class AuthenticateHost::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthenticateHost>()._has_bits_);
  static const ::mifare::av2::args::AuthenticationArguments& args(const AuthenticateHost* msg);
  static void set_has_args(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mifare::av2::args::AuthenticationArguments&
AuthenticateHost::_Internal::args(const AuthenticateHost* msg) {
  return *msg->args_;
}
void AuthenticateHost::clear_args() {
  if (args_ != nullptr) args_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
AuthenticateHost::AuthenticateHost()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.av2.host_auth.AuthenticateHost)
}
AuthenticateHost::AuthenticateHost(const AuthenticateHost& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from._internal_has_args()) {
    args_ = new ::mifare::av2::args::AuthenticationArguments(*from.args_);
  } else {
    args_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mifare.av2.host_auth.AuthenticateHost)
}

void AuthenticateHost::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateHost_mifare_2fav2_2fhost_5fauth_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_ = nullptr;
}

AuthenticateHost::~AuthenticateHost() {
  // @@protoc_insertion_point(destructor:mifare.av2.host_auth.AuthenticateHost)
  SharedDtor();
}

void AuthenticateHost::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete args_;
}

void AuthenticateHost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthenticateHost& AuthenticateHost::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateHost_mifare_2fav2_2fhost_5fauth_2eproto.base);
  return *internal_default_instance();
}


void AuthenticateHost::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.av2.host_auth.AuthenticateHost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(args_ != nullptr);
      args_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AuthenticateHost::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mifare.av2.args.AuthenticationArguments args = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticateHost::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.av2.host_auth.AuthenticateHost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mifare.av2.args.AuthenticationArguments args = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::args(this), target, stream);
  }

  // optional bytes key = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.av2.host_auth.AuthenticateHost)
  return target;
}

size_t AuthenticateHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.av2.host_auth.AuthenticateHost)
  size_t total_size = 0;

  // required .mifare.av2.args.AuthenticationArguments args = 1;
  if (_internal_has_args()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *args_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes key = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateHost::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.av2.host_auth.AuthenticateHost)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateHost* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateHost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.av2.host_auth.AuthenticateHost)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.av2.host_auth.AuthenticateHost)
    MergeFrom(*source);
  }
}

void AuthenticateHost::MergeFrom(const AuthenticateHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.av2.host_auth.AuthenticateHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_args()->::mifare::av2::args::AuthenticationArguments::MergeFrom(from._internal_args());
    }
  }
}

void AuthenticateHost::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.av2.host_auth.AuthenticateHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateHost::CopyFrom(const AuthenticateHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.av2.host_auth.AuthenticateHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateHost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (_internal_has_args()) {
    if (!args_->IsInitialized()) return false;
  }
  return true;
}

void AuthenticateHost::InternalSwap(AuthenticateHost* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(args_, other->args_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateHost::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace host_auth
}  // namespace av2
}  // namespace mifare
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mifare::av2::host_auth::AuthenticateHost* Arena::CreateMaybeMessage< ::mifare::av2::host_auth::AuthenticateHost >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::av2::host_auth::AuthenticateHost >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
