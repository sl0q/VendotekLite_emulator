// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mifare/av2/host_auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mifare_2fav2_2fhost_5fauth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mifare_2fav2_2fhost_5fauth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mifare/av2/args.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mifare_2fav2_2fhost_5fauth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mifare_2fav2_2fhost_5fauth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mifare_2fav2_2fhost_5fauth_2eproto;
namespace mifare {
namespace av2 {
namespace host_auth {
class AuthenticateHost;
class AuthenticateHostDefaultTypeInternal;
extern AuthenticateHostDefaultTypeInternal _AuthenticateHost_default_instance_;
}  // namespace host_auth
}  // namespace av2
}  // namespace mifare
PROTOBUF_NAMESPACE_OPEN
template<> ::mifare::av2::host_auth::AuthenticateHost* Arena::CreateMaybeMessage<::mifare::av2::host_auth::AuthenticateHost>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mifare {
namespace av2 {
namespace host_auth {

// ===================================================================

class AuthenticateHost :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mifare.av2.host_auth.AuthenticateHost) */ {
 public:
  AuthenticateHost();
  virtual ~AuthenticateHost();

  AuthenticateHost(const AuthenticateHost& from);
  AuthenticateHost(AuthenticateHost&& from) noexcept
    : AuthenticateHost() {
    *this = ::std::move(from);
  }

  inline AuthenticateHost& operator=(const AuthenticateHost& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateHost& operator=(AuthenticateHost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateHost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateHost* internal_default_instance() {
    return reinterpret_cast<const AuthenticateHost*>(
               &_AuthenticateHost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthenticateHost& a, AuthenticateHost& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateHost* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateHost* New() const final {
    return CreateMaybeMessage<AuthenticateHost>(nullptr);
  }

  AuthenticateHost* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateHost>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateHost& from);
  void MergeFrom(const AuthenticateHost& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateHost* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifare.av2.host_auth.AuthenticateHost";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mifare_2fav2_2fhost_5fauth_2eproto);
    return ::descriptor_table_mifare_2fav2_2fhost_5fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kArgsFieldNumber = 1,
  };
  // optional bytes key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required .mifare.av2.args.AuthenticationArguments args = 1;
  bool has_args() const;
  private:
  bool _internal_has_args() const;
  public:
  void clear_args();
  const ::mifare::av2::args::AuthenticationArguments& args() const;
  ::mifare::av2::args::AuthenticationArguments* release_args();
  ::mifare::av2::args::AuthenticationArguments* mutable_args();
  void set_allocated_args(::mifare::av2::args::AuthenticationArguments* args);
  private:
  const ::mifare::av2::args::AuthenticationArguments& _internal_args() const;
  ::mifare::av2::args::AuthenticationArguments* _internal_mutable_args();
  public:

  // @@protoc_insertion_point(class_scope:mifare.av2.host_auth.AuthenticateHost)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::mifare::av2::args::AuthenticationArguments* args_;
  friend struct ::TableStruct_mifare_2fav2_2fhost_5fauth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthenticateHost

// required .mifare.av2.args.AuthenticationArguments args = 1;
inline bool AuthenticateHost::_internal_has_args() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || args_ != nullptr);
  return value;
}
inline bool AuthenticateHost::has_args() const {
  return _internal_has_args();
}
inline const ::mifare::av2::args::AuthenticationArguments& AuthenticateHost::_internal_args() const {
  const ::mifare::av2::args::AuthenticationArguments* p = args_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mifare::av2::args::AuthenticationArguments*>(
      &::mifare::av2::args::_AuthenticationArguments_default_instance_);
}
inline const ::mifare::av2::args::AuthenticationArguments& AuthenticateHost::args() const {
  // @@protoc_insertion_point(field_get:mifare.av2.host_auth.AuthenticateHost.args)
  return _internal_args();
}
inline ::mifare::av2::args::AuthenticationArguments* AuthenticateHost::release_args() {
  // @@protoc_insertion_point(field_release:mifare.av2.host_auth.AuthenticateHost.args)
  _has_bits_[0] &= ~0x00000002u;
  ::mifare::av2::args::AuthenticationArguments* temp = args_;
  args_ = nullptr;
  return temp;
}
inline ::mifare::av2::args::AuthenticationArguments* AuthenticateHost::_internal_mutable_args() {
  _has_bits_[0] |= 0x00000002u;
  if (args_ == nullptr) {
    auto* p = CreateMaybeMessage<::mifare::av2::args::AuthenticationArguments>(GetArenaNoVirtual());
    args_ = p;
  }
  return args_;
}
inline ::mifare::av2::args::AuthenticationArguments* AuthenticateHost::mutable_args() {
  // @@protoc_insertion_point(field_mutable:mifare.av2.host_auth.AuthenticateHost.args)
  return _internal_mutable_args();
}
inline void AuthenticateHost::set_allocated_args(::mifare::av2::args::AuthenticationArguments* args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(args_);
  }
  if (args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, args, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  args_ = args;
  // @@protoc_insertion_point(field_set_allocated:mifare.av2.host_auth.AuthenticateHost.args)
}

// optional bytes key = 2;
inline bool AuthenticateHost::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateHost::has_key() const {
  return _internal_has_key();
}
inline void AuthenticateHost::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticateHost::key() const {
  // @@protoc_insertion_point(field_get:mifare.av2.host_auth.AuthenticateHost.key)
  return _internal_key();
}
inline void AuthenticateHost::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:mifare.av2.host_auth.AuthenticateHost.key)
}
inline std::string* AuthenticateHost::mutable_key() {
  // @@protoc_insertion_point(field_mutable:mifare.av2.host_auth.AuthenticateHost.key)
  return _internal_mutable_key();
}
inline const std::string& AuthenticateHost::_internal_key() const {
  return key_.GetNoArena();
}
inline void AuthenticateHost::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthenticateHost::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mifare.av2.host_auth.AuthenticateHost.key)
}
inline void AuthenticateHost::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mifare.av2.host_auth.AuthenticateHost.key)
}
inline void AuthenticateHost::set_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mifare.av2.host_auth.AuthenticateHost.key)
}
inline std::string* AuthenticateHost::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthenticateHost::release_key() {
  // @@protoc_insertion_point(field_release:mifare.av2.host_auth.AuthenticateHost.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateHost::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mifare.av2.host_auth.AuthenticateHost.key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace host_auth
}  // namespace av2
}  // namespace mifare

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mifare_2fav2_2fhost_5fauth_2eproto
