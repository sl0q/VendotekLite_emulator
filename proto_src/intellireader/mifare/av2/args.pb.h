// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mifare/av2/args.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mifare_2fav2_2fargs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mifare_2fav2_2fargs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "contact/card_slot.pb.h"
#include "mifare/av2/channel.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mifare_2fav2_2fargs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mifare_2fav2_2fargs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mifare_2fav2_2fargs_2eproto;
namespace mifare {
namespace av2 {
namespace args {
class AuthenticationArguments;
class AuthenticationArgumentsDefaultTypeInternal;
extern AuthenticationArgumentsDefaultTypeInternal _AuthenticationArguments_default_instance_;
}  // namespace args
}  // namespace av2
}  // namespace mifare
PROTOBUF_NAMESPACE_OPEN
template<> ::mifare::av2::args::AuthenticationArguments* Arena::CreateMaybeMessage<::mifare::av2::args::AuthenticationArguments>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mifare {
namespace av2 {
namespace args {

// ===================================================================

class AuthenticationArguments :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mifare.av2.args.AuthenticationArguments) */ {
 public:
  AuthenticationArguments();
  virtual ~AuthenticationArguments();

  AuthenticationArguments(const AuthenticationArguments& from);
  AuthenticationArguments(AuthenticationArguments&& from) noexcept
    : AuthenticationArguments() {
    *this = ::std::move(from);
  }

  inline AuthenticationArguments& operator=(const AuthenticationArguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationArguments& operator=(AuthenticationArguments&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticationArguments& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticationArguments* internal_default_instance() {
    return reinterpret_cast<const AuthenticationArguments*>(
               &_AuthenticationArguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthenticationArguments& a, AuthenticationArguments& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationArguments* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticationArguments* New() const final {
    return CreateMaybeMessage<AuthenticationArguments>(nullptr);
  }

  AuthenticationArguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticationArguments>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticationArguments& from);
  void MergeFrom(const AuthenticationArguments& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationArguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifare.av2.args.AuthenticationArguments";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mifare_2fav2_2fargs_2eproto);
    return ::descriptor_table_mifare_2fav2_2fargs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotFieldNumber = 1,
    kKeyNumberFieldNumber = 2,
    kKeyVersionFieldNumber = 3,
    kChannelFieldNumber = 4,
  };
  // required .contact.card_slot.CardSlot slot = 1;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  ::contact::card_slot::CardSlot slot() const;
  void set_slot(::contact::card_slot::CardSlot value);
  private:
  ::contact::card_slot::CardSlot _internal_slot() const;
  void _internal_set_slot(::contact::card_slot::CardSlot value);
  public:

  // required uint32 key_number = 2;
  bool has_key_number() const;
  private:
  bool _internal_has_key_number() const;
  public:
  void clear_key_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 key_number() const;
  void set_key_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key_number() const;
  void _internal_set_key_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 key_version = 3 [default = 0];
  bool has_key_version() const;
  private:
  bool _internal_has_key_version() const;
  public:
  void clear_key_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 key_version() const;
  void set_key_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key_version() const;
  void _internal_set_key_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .mifare.av2.channel.Channel channel = 4 [default = AV2_CHANNEL_0];
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  ::mifare::av2::channel::Channel channel() const;
  void set_channel(::mifare::av2::channel::Channel value);
  private:
  ::mifare::av2::channel::Channel _internal_channel() const;
  void _internal_set_channel(::mifare::av2::channel::Channel value);
  public:

  // @@protoc_insertion_point(class_scope:mifare.av2.args.AuthenticationArguments)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int slot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_version_;
  int channel_;
  friend struct ::TableStruct_mifare_2fav2_2fargs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthenticationArguments

// required .contact.card_slot.CardSlot slot = 1;
inline bool AuthenticationArguments::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticationArguments::has_slot() const {
  return _internal_has_slot();
}
inline void AuthenticationArguments::clear_slot() {
  slot_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::contact::card_slot::CardSlot AuthenticationArguments::_internal_slot() const {
  return static_cast< ::contact::card_slot::CardSlot >(slot_);
}
inline ::contact::card_slot::CardSlot AuthenticationArguments::slot() const {
  // @@protoc_insertion_point(field_get:mifare.av2.args.AuthenticationArguments.slot)
  return _internal_slot();
}
inline void AuthenticationArguments::_internal_set_slot(::contact::card_slot::CardSlot value) {
  assert(::contact::card_slot::CardSlot_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  slot_ = value;
}
inline void AuthenticationArguments::set_slot(::contact::card_slot::CardSlot value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:mifare.av2.args.AuthenticationArguments.slot)
}

// required uint32 key_number = 2;
inline bool AuthenticationArguments::_internal_has_key_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticationArguments::has_key_number() const {
  return _internal_has_key_number();
}
inline void AuthenticationArguments::clear_key_number() {
  key_number_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthenticationArguments::_internal_key_number() const {
  return key_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthenticationArguments::key_number() const {
  // @@protoc_insertion_point(field_get:mifare.av2.args.AuthenticationArguments.key_number)
  return _internal_key_number();
}
inline void AuthenticationArguments::_internal_set_key_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  key_number_ = value;
}
inline void AuthenticationArguments::set_key_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key_number(value);
  // @@protoc_insertion_point(field_set:mifare.av2.args.AuthenticationArguments.key_number)
}

// optional uint32 key_version = 3 [default = 0];
inline bool AuthenticationArguments::_internal_has_key_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthenticationArguments::has_key_version() const {
  return _internal_has_key_version();
}
inline void AuthenticationArguments::clear_key_version() {
  key_version_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthenticationArguments::_internal_key_version() const {
  return key_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthenticationArguments::key_version() const {
  // @@protoc_insertion_point(field_get:mifare.av2.args.AuthenticationArguments.key_version)
  return _internal_key_version();
}
inline void AuthenticationArguments::_internal_set_key_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  key_version_ = value;
}
inline void AuthenticationArguments::set_key_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key_version(value);
  // @@protoc_insertion_point(field_set:mifare.av2.args.AuthenticationArguments.key_version)
}

// optional .mifare.av2.channel.Channel channel = 4 [default = AV2_CHANNEL_0];
inline bool AuthenticationArguments::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AuthenticationArguments::has_channel() const {
  return _internal_has_channel();
}
inline void AuthenticationArguments::clear_channel() {
  channel_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::mifare::av2::channel::Channel AuthenticationArguments::_internal_channel() const {
  return static_cast< ::mifare::av2::channel::Channel >(channel_);
}
inline ::mifare::av2::channel::Channel AuthenticationArguments::channel() const {
  // @@protoc_insertion_point(field_get:mifare.av2.args.AuthenticationArguments.channel)
  return _internal_channel();
}
inline void AuthenticationArguments::_internal_set_channel(::mifare::av2::channel::Channel value) {
  assert(::mifare::av2::channel::Channel_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  channel_ = value;
}
inline void AuthenticationArguments::set_channel(::mifare::av2::channel::Channel value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:mifare.av2.args.AuthenticationArguments.channel)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace args
}  // namespace av2
}  // namespace mifare

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mifare_2fav2_2fargs_2eproto
