// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mifare/av2/change_keyentry.proto

#include "mifare/av2/change_keyentry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fav2_2fchange_5fkeyentry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MifareKey_mifare_2fav2_2fchange_5fkeyentry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fav2_2fchange_5fkeyentry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MifareKey_DiversificationKey_mifare_2fav2_2fchange_5fkeyentry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fav2_2fchange_5fkeyentry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MifareKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fav2_2fchange_5fkeyentry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlusKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fav2_2fchange_5fkeyentry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UltralightCKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto;
namespace mifare {
namespace av2 {
namespace change_keyentry {
class ChangeKeyEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeKeyEntry> _instance;
  const ::mifare::av2::change_keyentry::MifareKeyEntry* mifare_;
  const ::mifare::av2::change_keyentry::PlusKeyEntry* plus_;
  const ::mifare::av2::change_keyentry::UltralightCKeyEntry* ultralight_c_;
} _ChangeKeyEntry_default_instance_;
class MifareKeyEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MifareKeyEntry> _instance;
} _MifareKeyEntry_default_instance_;
class MifareKey_DiversificationKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MifareKey_DiversificationKey> _instance;
} _MifareKey_DiversificationKey_default_instance_;
class MifareKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MifareKey> _instance;
} _MifareKey_default_instance_;
class PlusKeyEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlusKeyEntry> _instance;
} _PlusKeyEntry_default_instance_;
class UltralightCKeyEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UltralightCKeyEntry> _instance;
} _UltralightCKeyEntry_default_instance_;
}  // namespace change_keyentry
}  // namespace av2
}  // namespace mifare
static void InitDefaultsscc_info_ChangeKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::av2::change_keyentry::_ChangeKeyEntry_default_instance_;
    new (ptr) ::mifare::av2::change_keyentry::ChangeKeyEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::av2::change_keyentry::ChangeKeyEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ChangeKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ChangeKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto}, {
      &scc_info_MifareKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto.base,
      &scc_info_PlusKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto.base,
      &scc_info_UltralightCKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto.base,}};

static void InitDefaultsscc_info_MifareKey_mifare_2fav2_2fchange_5fkeyentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::av2::change_keyentry::_MifareKey_default_instance_;
    new (ptr) ::mifare::av2::change_keyentry::MifareKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::av2::change_keyentry::MifareKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MifareKey_mifare_2fav2_2fchange_5fkeyentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MifareKey_mifare_2fav2_2fchange_5fkeyentry_2eproto}, {
      &scc_info_MifareKey_DiversificationKey_mifare_2fav2_2fchange_5fkeyentry_2eproto.base,}};

static void InitDefaultsscc_info_MifareKey_DiversificationKey_mifare_2fav2_2fchange_5fkeyentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::av2::change_keyentry::_MifareKey_DiversificationKey_default_instance_;
    new (ptr) ::mifare::av2::change_keyentry::MifareKey_DiversificationKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::av2::change_keyentry::MifareKey_DiversificationKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MifareKey_DiversificationKey_mifare_2fav2_2fchange_5fkeyentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MifareKey_DiversificationKey_mifare_2fav2_2fchange_5fkeyentry_2eproto}, {}};

static void InitDefaultsscc_info_MifareKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::av2::change_keyentry::_MifareKeyEntry_default_instance_;
    new (ptr) ::mifare::av2::change_keyentry::MifareKeyEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::av2::change_keyentry::MifareKeyEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MifareKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MifareKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto}, {
      &scc_info_MifareKey_mifare_2fav2_2fchange_5fkeyentry_2eproto.base,}};

static void InitDefaultsscc_info_PlusKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::av2::change_keyentry::_PlusKeyEntry_default_instance_;
    new (ptr) ::mifare::av2::change_keyentry::PlusKeyEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::av2::change_keyentry::PlusKeyEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlusKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlusKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto}, {}};

static void InitDefaultsscc_info_UltralightCKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::av2::change_keyentry::_UltralightCKeyEntry_default_instance_;
    new (ptr) ::mifare::av2::change_keyentry::UltralightCKeyEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::av2::change_keyentry::UltralightCKeyEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UltralightCKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UltralightCKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mifare_2fav2_2fchange_5fkeyentry_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mifare_2fav2_2fchange_5fkeyentry_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mifare_2fav2_2fchange_5fkeyentry_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mifare_2fav2_2fchange_5fkeyentry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::ChangeKeyEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::ChangeKeyEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::ChangeKeyEntry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::ChangeKeyEntry, slot_),
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::ChangeKeyEntry, channel_),
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::ChangeKeyEntry, keyentry_number_),
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::ChangeKeyEntry, key_version_),
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::ChangeKeyEntry, key_position_),
  offsetof(::mifare::av2::change_keyentry::ChangeKeyEntryDefaultTypeInternal, mifare_),
  offsetof(::mifare::av2::change_keyentry::ChangeKeyEntryDefaultTypeInternal, plus_),
  offsetof(::mifare::av2::change_keyentry::ChangeKeyEntryDefaultTypeInternal, ultralight_c_),
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::ChangeKeyEntry, key_entry_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::MifareKeyEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::MifareKeyEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::MifareKeyEntry, key_a_),
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::MifareKeyEntry, key_b_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::MifareKey_DiversificationKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::MifareKey_DiversificationKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::MifareKey_DiversificationKey, number_),
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::MifareKey_DiversificationKey, version_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::MifareKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::MifareKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::MifareKey, key_),
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::MifareKey, diversification_key_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::PlusKeyEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::PlusKeyEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::PlusKeyEntry, key_),
  0,
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::UltralightCKeyEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::UltralightCKeyEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::av2::change_keyentry::UltralightCKeyEntry, key_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::mifare::av2::change_keyentry::ChangeKeyEntry)},
  { 22, 29, sizeof(::mifare::av2::change_keyentry::MifareKeyEntry)},
  { 31, 38, sizeof(::mifare::av2::change_keyentry::MifareKey_DiversificationKey)},
  { 40, 47, sizeof(::mifare::av2::change_keyentry::MifareKey)},
  { 49, 55, sizeof(::mifare::av2::change_keyentry::PlusKeyEntry)},
  { 56, 62, sizeof(::mifare::av2::change_keyentry::UltralightCKeyEntry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::av2::change_keyentry::_ChangeKeyEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::av2::change_keyentry::_MifareKeyEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::av2::change_keyentry::_MifareKey_DiversificationKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::av2::change_keyentry::_MifareKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::av2::change_keyentry::_PlusKeyEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::av2::change_keyentry::_UltralightCKeyEntry_default_instance_),
};

const char descriptor_table_protodef_mifare_2fav2_2fchange_5fkeyentry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n mifare/av2/change_keyentry.proto\022\032mifa"
  "re.av2.change_keyentry\032\027contact/card_slo"
  "t.proto\032\030mifare/av2/channel.proto\032\035mifar"
  "e/av2/key_position.proto\"\274\003\n\016ChangeKeyEn"
  "try\022)\n\004slot\030\001 \002(\0162\033.contact.card_slot.Ca"
  "rdSlot\022;\n\007channel\030\002 \001(\0162\033.mifare.av2.cha"
  "nnel.Channel:\rAV2_CHANNEL_0\022\027\n\017keyentry_"
  "number\030\003 \002(\r\022\023\n\013key_version\030\004 \002(\r\022F\n\014key"
  "_position\030\005 \001(\0162$.mifare.av2.key_positio"
  "n.KeyPosition:\nPOSITION_A\022<\n\006mifare\030\006 \001("
  "\0132*.mifare.av2.change_keyentry.MifareKey"
  "EntryH\000\0228\n\004plus\030\007 \001(\0132(.mifare.av2.chang"
  "e_keyentry.PlusKeyEntryH\000\022G\n\014ultralight_"
  "c\030\010 \001(\0132/.mifare.av2.change_keyentry.Ult"
  "ralightCKeyEntryH\000B\013\n\tkey_entry\"|\n\016Mifar"
  "eKeyEntry\0224\n\005key_a\030\001 \002(\0132%.mifare.av2.ch"
  "ange_keyentry.MifareKey\0224\n\005key_b\030\002 \002(\0132%"
  ".mifare.av2.change_keyentry.MifareKey\"\246\001"
  "\n\tMifareKey\022\013\n\003key\030\001 \002(\014\022U\n\023diversificat"
  "ion_key\030\002 \001(\01328.mifare.av2.change_keyent"
  "ry.MifareKey.DiversificationKey\0325\n\022Diver"
  "sificationKey\022\016\n\006number\030\001 \002(\r\022\017\n\007version"
  "\030\002 \002(\r\"\033\n\014PlusKeyEntry\022\013\n\003key\030\001 \002(\014\"\"\n\023U"
  "ltralightCKeyEntry\022\013\n\003key\030\001 \002(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mifare_2fav2_2fchange_5fkeyentry_2eproto_deps[3] = {
  &::descriptor_table_contact_2fcard_5fslot_2eproto,
  &::descriptor_table_mifare_2fav2_2fchannel_2eproto,
  &::descriptor_table_mifare_2fav2_2fkey_5fposition_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mifare_2fav2_2fchange_5fkeyentry_2eproto_sccs[6] = {
  &scc_info_ChangeKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto.base,
  &scc_info_MifareKey_mifare_2fav2_2fchange_5fkeyentry_2eproto.base,
  &scc_info_MifareKey_DiversificationKey_mifare_2fav2_2fchange_5fkeyentry_2eproto.base,
  &scc_info_MifareKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto.base,
  &scc_info_PlusKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto.base,
  &scc_info_UltralightCKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mifare_2fav2_2fchange_5fkeyentry_2eproto_once;
static bool descriptor_table_mifare_2fav2_2fchange_5fkeyentry_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mifare_2fav2_2fchange_5fkeyentry_2eproto = {
  &descriptor_table_mifare_2fav2_2fchange_5fkeyentry_2eproto_initialized, descriptor_table_protodef_mifare_2fav2_2fchange_5fkeyentry_2eproto, "mifare/av2/change_keyentry.proto", 951,
  &descriptor_table_mifare_2fav2_2fchange_5fkeyentry_2eproto_once, descriptor_table_mifare_2fav2_2fchange_5fkeyentry_2eproto_sccs, descriptor_table_mifare_2fav2_2fchange_5fkeyentry_2eproto_deps, 6, 3,
  schemas, file_default_instances, TableStruct_mifare_2fav2_2fchange_5fkeyentry_2eproto::offsets,
  file_level_metadata_mifare_2fav2_2fchange_5fkeyentry_2eproto, 6, file_level_enum_descriptors_mifare_2fav2_2fchange_5fkeyentry_2eproto, file_level_service_descriptors_mifare_2fav2_2fchange_5fkeyentry_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mifare_2fav2_2fchange_5fkeyentry_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mifare_2fav2_2fchange_5fkeyentry_2eproto), true);
namespace mifare {
namespace av2 {
namespace change_keyentry {

// ===================================================================

void ChangeKeyEntry::InitAsDefaultInstance() {
  ::mifare::av2::change_keyentry::_ChangeKeyEntry_default_instance_.mifare_ = const_cast< ::mifare::av2::change_keyentry::MifareKeyEntry*>(
      ::mifare::av2::change_keyentry::MifareKeyEntry::internal_default_instance());
  ::mifare::av2::change_keyentry::_ChangeKeyEntry_default_instance_.plus_ = const_cast< ::mifare::av2::change_keyentry::PlusKeyEntry*>(
      ::mifare::av2::change_keyentry::PlusKeyEntry::internal_default_instance());
  ::mifare::av2::change_keyentry::_ChangeKeyEntry_default_instance_.ultralight_c_ = const_cast< ::mifare::av2::change_keyentry::UltralightCKeyEntry*>(
      ::mifare::av2::change_keyentry::UltralightCKeyEntry::internal_default_instance());
}
class ChangeKeyEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeKeyEntry>()._has_bits_);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_keyentry_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_key_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_key_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mifare::av2::change_keyentry::MifareKeyEntry& mifare(const ChangeKeyEntry* msg);
  static const ::mifare::av2::change_keyentry::PlusKeyEntry& plus(const ChangeKeyEntry* msg);
  static const ::mifare::av2::change_keyentry::UltralightCKeyEntry& ultralight_c(const ChangeKeyEntry* msg);
};

const ::mifare::av2::change_keyentry::MifareKeyEntry&
ChangeKeyEntry::_Internal::mifare(const ChangeKeyEntry* msg) {
  return *msg->key_entry_.mifare_;
}
const ::mifare::av2::change_keyentry::PlusKeyEntry&
ChangeKeyEntry::_Internal::plus(const ChangeKeyEntry* msg) {
  return *msg->key_entry_.plus_;
}
const ::mifare::av2::change_keyentry::UltralightCKeyEntry&
ChangeKeyEntry::_Internal::ultralight_c(const ChangeKeyEntry* msg) {
  return *msg->key_entry_.ultralight_c_;
}
void ChangeKeyEntry::set_allocated_mifare(::mifare::av2::change_keyentry::MifareKeyEntry* mifare) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_key_entry();
  if (mifare) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mifare = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mifare, submessage_arena);
    }
    set_has_mifare();
    key_entry_.mifare_ = mifare;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.av2.change_keyentry.ChangeKeyEntry.mifare)
}
void ChangeKeyEntry::set_allocated_plus(::mifare::av2::change_keyentry::PlusKeyEntry* plus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_key_entry();
  if (plus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plus, submessage_arena);
    }
    set_has_plus();
    key_entry_.plus_ = plus;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.av2.change_keyentry.ChangeKeyEntry.plus)
}
void ChangeKeyEntry::set_allocated_ultralight_c(::mifare::av2::change_keyentry::UltralightCKeyEntry* ultralight_c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_key_entry();
  if (ultralight_c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ultralight_c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ultralight_c, submessage_arena);
    }
    set_has_ultralight_c();
    key_entry_.ultralight_c_ = ultralight_c;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.av2.change_keyentry.ChangeKeyEntry.ultralight_c)
}
ChangeKeyEntry::ChangeKeyEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.av2.change_keyentry.ChangeKeyEntry)
}
ChangeKeyEntry::ChangeKeyEntry(const ChangeKeyEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&slot_, &from.slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_position_) -
    reinterpret_cast<char*>(&slot_)) + sizeof(key_position_));
  clear_has_key_entry();
  switch (from.key_entry_case()) {
    case kMifare: {
      _internal_mutable_mifare()->::mifare::av2::change_keyentry::MifareKeyEntry::MergeFrom(from._internal_mifare());
      break;
    }
    case kPlus: {
      _internal_mutable_plus()->::mifare::av2::change_keyentry::PlusKeyEntry::MergeFrom(from._internal_plus());
      break;
    }
    case kUltralightC: {
      _internal_mutable_ultralight_c()->::mifare::av2::change_keyentry::UltralightCKeyEntry::MergeFrom(from._internal_ultralight_c());
      break;
    }
    case KEY_ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mifare.av2.change_keyentry.ChangeKeyEntry)
}

void ChangeKeyEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangeKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto.base);
  ::memset(&slot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_position_) -
      reinterpret_cast<char*>(&slot_)) + sizeof(key_position_));
  clear_has_key_entry();
}

ChangeKeyEntry::~ChangeKeyEntry() {
  // @@protoc_insertion_point(destructor:mifare.av2.change_keyentry.ChangeKeyEntry)
  SharedDtor();
}

void ChangeKeyEntry::SharedDtor() {
  if (has_key_entry()) {
    clear_key_entry();
  }
}

void ChangeKeyEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeKeyEntry& ChangeKeyEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto.base);
  return *internal_default_instance();
}


void ChangeKeyEntry::clear_key_entry() {
// @@protoc_insertion_point(one_of_clear_start:mifare.av2.change_keyentry.ChangeKeyEntry)
  switch (key_entry_case()) {
    case kMifare: {
      delete key_entry_.mifare_;
      break;
    }
    case kPlus: {
      delete key_entry_.plus_;
      break;
    }
    case kUltralightC: {
      delete key_entry_.ultralight_c_;
      break;
    }
    case KEY_ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KEY_ENTRY_NOT_SET;
}


void ChangeKeyEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.av2.change_keyentry.ChangeKeyEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&key_position_) -
        reinterpret_cast<char*>(&slot_)) + sizeof(key_position_));
  }
  clear_key_entry();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChangeKeyEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .contact.card_slot.CardSlot slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::contact::card_slot::CardSlot_IsValid(val))) {
            _internal_set_slot(static_cast<::contact::card_slot::CardSlot>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mifare.av2.channel.Channel channel = 2 [default = AV2_CHANNEL_0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mifare::av2::channel::Channel_IsValid(val))) {
            _internal_set_channel(static_cast<::mifare::av2::channel::Channel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 keyentry_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_keyentry_number(&has_bits);
          keyentry_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 key_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_key_version(&has_bits);
          key_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.av2.key_position.KeyPosition key_position = 5 [default = POSITION_A];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mifare::av2::key_position::KeyPosition_IsValid(val))) {
            _internal_set_key_position(static_cast<::mifare::av2::key_position::KeyPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mifare.av2.change_keyentry.MifareKeyEntry mifare = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mifare(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.av2.change_keyentry.PlusKeyEntry plus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_plus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.av2.change_keyentry.UltralightCKeyEntry ultralight_c = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ultralight_c(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeKeyEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.av2.change_keyentry.ChangeKeyEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .contact.card_slot.CardSlot slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_slot(), target);
  }

  // optional .mifare.av2.channel.Channel channel = 2 [default = AV2_CHANNEL_0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_channel(), target);
  }

  // required uint32 keyentry_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_keyentry_number(), target);
  }

  // required uint32 key_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_key_version(), target);
  }

  // optional .mifare.av2.key_position.KeyPosition key_position = 5 [default = POSITION_A];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_key_position(), target);
  }

  switch (key_entry_case()) {
    case kMifare: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::mifare(this), target, stream);
      break;
    }
    case kPlus: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::plus(this), target, stream);
      break;
    }
    case kUltralightC: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::ultralight_c(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.av2.change_keyentry.ChangeKeyEntry)
  return target;
}

size_t ChangeKeyEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mifare.av2.change_keyentry.ChangeKeyEntry)
  size_t total_size = 0;

  if (_internal_has_slot()) {
    // required .contact.card_slot.CardSlot slot = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_slot());
  }

  if (_internal_has_keyentry_number()) {
    // required uint32 keyentry_number = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keyentry_number());
  }

  if (_internal_has_key_version()) {
    // required uint32 key_version = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key_version());
  }

  return total_size;
}
size_t ChangeKeyEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.av2.change_keyentry.ChangeKeyEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required .contact.card_slot.CardSlot slot = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_slot());

    // required uint32 keyentry_number = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keyentry_number());

    // required uint32 key_version = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .mifare.av2.channel.Channel channel = 2 [default = AV2_CHANNEL_0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel());
  }

  // optional .mifare.av2.key_position.KeyPosition key_position = 5 [default = POSITION_A];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_key_position());
  }

  switch (key_entry_case()) {
    // optional .mifare.av2.change_keyentry.MifareKeyEntry mifare = 6;
    case kMifare: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_entry_.mifare_);
      break;
    }
    // optional .mifare.av2.change_keyentry.PlusKeyEntry plus = 7;
    case kPlus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_entry_.plus_);
      break;
    }
    // optional .mifare.av2.change_keyentry.UltralightCKeyEntry ultralight_c = 8;
    case kUltralightC: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_entry_.ultralight_c_);
      break;
    }
    case KEY_ENTRY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeKeyEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.av2.change_keyentry.ChangeKeyEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeKeyEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeKeyEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.av2.change_keyentry.ChangeKeyEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.av2.change_keyentry.ChangeKeyEntry)
    MergeFrom(*source);
  }
}

void ChangeKeyEntry::MergeFrom(const ChangeKeyEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.av2.change_keyentry.ChangeKeyEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000004u) {
      keyentry_number_ = from.keyentry_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_version_ = from.key_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      key_position_ = from.key_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.key_entry_case()) {
    case kMifare: {
      _internal_mutable_mifare()->::mifare::av2::change_keyentry::MifareKeyEntry::MergeFrom(from._internal_mifare());
      break;
    }
    case kPlus: {
      _internal_mutable_plus()->::mifare::av2::change_keyentry::PlusKeyEntry::MergeFrom(from._internal_plus());
      break;
    }
    case kUltralightC: {
      _internal_mutable_ultralight_c()->::mifare::av2::change_keyentry::UltralightCKeyEntry::MergeFrom(from._internal_ultralight_c());
      break;
    }
    case KEY_ENTRY_NOT_SET: {
      break;
    }
  }
}

void ChangeKeyEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.av2.change_keyentry.ChangeKeyEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeKeyEntry::CopyFrom(const ChangeKeyEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.av2.change_keyentry.ChangeKeyEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeKeyEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  switch (key_entry_case()) {
    case kMifare: {
      if (has_mifare()) {
        if (!this->mifare().IsInitialized()) return false;
      }
      break;
    }
    case kPlus: {
      if (has_plus()) {
        if (!this->plus().IsInitialized()) return false;
      }
      break;
    }
    case kUltralightC: {
      if (has_ultralight_c()) {
        if (!this->ultralight_c().IsInitialized()) return false;
      }
      break;
    }
    case KEY_ENTRY_NOT_SET: {
      break;
    }
  }
  return true;
}

void ChangeKeyEntry::InternalSwap(ChangeKeyEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(slot_, other->slot_);
  swap(channel_, other->channel_);
  swap(keyentry_number_, other->keyentry_number_);
  swap(key_version_, other->key_version_);
  swap(key_position_, other->key_position_);
  swap(key_entry_, other->key_entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeKeyEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MifareKeyEntry::InitAsDefaultInstance() {
  ::mifare::av2::change_keyentry::_MifareKeyEntry_default_instance_._instance.get_mutable()->key_a_ = const_cast< ::mifare::av2::change_keyentry::MifareKey*>(
      ::mifare::av2::change_keyentry::MifareKey::internal_default_instance());
  ::mifare::av2::change_keyentry::_MifareKeyEntry_default_instance_._instance.get_mutable()->key_b_ = const_cast< ::mifare::av2::change_keyentry::MifareKey*>(
      ::mifare::av2::change_keyentry::MifareKey::internal_default_instance());
}
class MifareKeyEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<MifareKeyEntry>()._has_bits_);
  static const ::mifare::av2::change_keyentry::MifareKey& key_a(const MifareKeyEntry* msg);
  static void set_has_key_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mifare::av2::change_keyentry::MifareKey& key_b(const MifareKeyEntry* msg);
  static void set_has_key_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mifare::av2::change_keyentry::MifareKey&
MifareKeyEntry::_Internal::key_a(const MifareKeyEntry* msg) {
  return *msg->key_a_;
}
const ::mifare::av2::change_keyentry::MifareKey&
MifareKeyEntry::_Internal::key_b(const MifareKeyEntry* msg) {
  return *msg->key_b_;
}
MifareKeyEntry::MifareKeyEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.av2.change_keyentry.MifareKeyEntry)
}
MifareKeyEntry::MifareKeyEntry(const MifareKeyEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_key_a()) {
    key_a_ = new ::mifare::av2::change_keyentry::MifareKey(*from.key_a_);
  } else {
    key_a_ = nullptr;
  }
  if (from._internal_has_key_b()) {
    key_b_ = new ::mifare::av2::change_keyentry::MifareKey(*from.key_b_);
  } else {
    key_b_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mifare.av2.change_keyentry.MifareKeyEntry)
}

void MifareKeyEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MifareKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto.base);
  ::memset(&key_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_b_) -
      reinterpret_cast<char*>(&key_a_)) + sizeof(key_b_));
}

MifareKeyEntry::~MifareKeyEntry() {
  // @@protoc_insertion_point(destructor:mifare.av2.change_keyentry.MifareKeyEntry)
  SharedDtor();
}

void MifareKeyEntry::SharedDtor() {
  if (this != internal_default_instance()) delete key_a_;
  if (this != internal_default_instance()) delete key_b_;
}

void MifareKeyEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MifareKeyEntry& MifareKeyEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MifareKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto.base);
  return *internal_default_instance();
}


void MifareKeyEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.av2.change_keyentry.MifareKeyEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(key_a_ != nullptr);
      key_a_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(key_b_ != nullptr);
      key_b_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MifareKeyEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mifare.av2.change_keyentry.MifareKey key_a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_a(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .mifare.av2.change_keyentry.MifareKey key_b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_b(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MifareKeyEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.av2.change_keyentry.MifareKeyEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mifare.av2.change_keyentry.MifareKey key_a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key_a(this), target, stream);
  }

  // required .mifare.av2.change_keyentry.MifareKey key_b = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key_b(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.av2.change_keyentry.MifareKeyEntry)
  return target;
}

size_t MifareKeyEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mifare.av2.change_keyentry.MifareKeyEntry)
  size_t total_size = 0;

  if (_internal_has_key_a()) {
    // required .mifare.av2.change_keyentry.MifareKey key_a = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_a_);
  }

  if (_internal_has_key_b()) {
    // required .mifare.av2.change_keyentry.MifareKey key_b = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_b_);
  }

  return total_size;
}
size_t MifareKeyEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.av2.change_keyentry.MifareKeyEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .mifare.av2.change_keyentry.MifareKey key_a = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_a_);

    // required .mifare.av2.change_keyentry.MifareKey key_b = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_b_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MifareKeyEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.av2.change_keyentry.MifareKeyEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const MifareKeyEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MifareKeyEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.av2.change_keyentry.MifareKeyEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.av2.change_keyentry.MifareKeyEntry)
    MergeFrom(*source);
  }
}

void MifareKeyEntry::MergeFrom(const MifareKeyEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.av2.change_keyentry.MifareKeyEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_key_a()->::mifare::av2::change_keyentry::MifareKey::MergeFrom(from._internal_key_a());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_key_b()->::mifare::av2::change_keyentry::MifareKey::MergeFrom(from._internal_key_b());
    }
  }
}

void MifareKeyEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.av2.change_keyentry.MifareKeyEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MifareKeyEntry::CopyFrom(const MifareKeyEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.av2.change_keyentry.MifareKeyEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MifareKeyEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_key_a()) {
    if (!key_a_->IsInitialized()) return false;
  }
  if (_internal_has_key_b()) {
    if (!key_b_->IsInitialized()) return false;
  }
  return true;
}

void MifareKeyEntry::InternalSwap(MifareKeyEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(key_a_, other->key_a_);
  swap(key_b_, other->key_b_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MifareKeyEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MifareKey_DiversificationKey::InitAsDefaultInstance() {
}
class MifareKey_DiversificationKey::_Internal {
 public:
  using HasBits = decltype(std::declval<MifareKey_DiversificationKey>()._has_bits_);
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MifareKey_DiversificationKey::MifareKey_DiversificationKey()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.av2.change_keyentry.MifareKey.DiversificationKey)
}
MifareKey_DiversificationKey::MifareKey_DiversificationKey(const MifareKey_DiversificationKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&number_, &from.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&number_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:mifare.av2.change_keyentry.MifareKey.DiversificationKey)
}

void MifareKey_DiversificationKey::SharedCtor() {
  ::memset(&number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&number_)) + sizeof(version_));
}

MifareKey_DiversificationKey::~MifareKey_DiversificationKey() {
  // @@protoc_insertion_point(destructor:mifare.av2.change_keyentry.MifareKey.DiversificationKey)
  SharedDtor();
}

void MifareKey_DiversificationKey::SharedDtor() {
}

void MifareKey_DiversificationKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MifareKey_DiversificationKey& MifareKey_DiversificationKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MifareKey_DiversificationKey_mifare_2fav2_2fchange_5fkeyentry_2eproto.base);
  return *internal_default_instance();
}


void MifareKey_DiversificationKey::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.av2.change_keyentry.MifareKey.DiversificationKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&number_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MifareKey_DiversificationKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_number(&has_bits);
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MifareKey_DiversificationKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.av2.change_keyentry.MifareKey.DiversificationKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_number(), target);
  }

  // required uint32 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.av2.change_keyentry.MifareKey.DiversificationKey)
  return target;
}

size_t MifareKey_DiversificationKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mifare.av2.change_keyentry.MifareKey.DiversificationKey)
  size_t total_size = 0;

  if (_internal_has_number()) {
    // required uint32 number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number());
  }

  if (_internal_has_version()) {
    // required uint32 version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  return total_size;
}
size_t MifareKey_DiversificationKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.av2.change_keyentry.MifareKey.DiversificationKey)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number());

    // required uint32 version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MifareKey_DiversificationKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.av2.change_keyentry.MifareKey.DiversificationKey)
  GOOGLE_DCHECK_NE(&from, this);
  const MifareKey_DiversificationKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MifareKey_DiversificationKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.av2.change_keyentry.MifareKey.DiversificationKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.av2.change_keyentry.MifareKey.DiversificationKey)
    MergeFrom(*source);
  }
}

void MifareKey_DiversificationKey::MergeFrom(const MifareKey_DiversificationKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.av2.change_keyentry.MifareKey.DiversificationKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      number_ = from.number_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MifareKey_DiversificationKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.av2.change_keyentry.MifareKey.DiversificationKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MifareKey_DiversificationKey::CopyFrom(const MifareKey_DiversificationKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.av2.change_keyentry.MifareKey.DiversificationKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MifareKey_DiversificationKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MifareKey_DiversificationKey::InternalSwap(MifareKey_DiversificationKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(number_, other->number_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MifareKey_DiversificationKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MifareKey::InitAsDefaultInstance() {
  ::mifare::av2::change_keyentry::_MifareKey_default_instance_._instance.get_mutable()->diversification_key_ = const_cast< ::mifare::av2::change_keyentry::MifareKey_DiversificationKey*>(
      ::mifare::av2::change_keyentry::MifareKey_DiversificationKey::internal_default_instance());
}
class MifareKey::_Internal {
 public:
  using HasBits = decltype(std::declval<MifareKey>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mifare::av2::change_keyentry::MifareKey_DiversificationKey& diversification_key(const MifareKey* msg);
  static void set_has_diversification_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mifare::av2::change_keyentry::MifareKey_DiversificationKey&
MifareKey::_Internal::diversification_key(const MifareKey* msg) {
  return *msg->diversification_key_;
}
MifareKey::MifareKey()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.av2.change_keyentry.MifareKey)
}
MifareKey::MifareKey(const MifareKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from._internal_has_diversification_key()) {
    diversification_key_ = new ::mifare::av2::change_keyentry::MifareKey_DiversificationKey(*from.diversification_key_);
  } else {
    diversification_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mifare.av2.change_keyentry.MifareKey)
}

void MifareKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MifareKey_mifare_2fav2_2fchange_5fkeyentry_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  diversification_key_ = nullptr;
}

MifareKey::~MifareKey() {
  // @@protoc_insertion_point(destructor:mifare.av2.change_keyentry.MifareKey)
  SharedDtor();
}

void MifareKey::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete diversification_key_;
}

void MifareKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MifareKey& MifareKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MifareKey_mifare_2fav2_2fchange_5fkeyentry_2eproto.base);
  return *internal_default_instance();
}


void MifareKey::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.av2.change_keyentry.MifareKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(diversification_key_ != nullptr);
      diversification_key_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MifareKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.av2.change_keyentry.MifareKey.DiversificationKey diversification_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_diversification_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MifareKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.av2.change_keyentry.MifareKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional .mifare.av2.change_keyentry.MifareKey.DiversificationKey diversification_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::diversification_key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.av2.change_keyentry.MifareKey)
  return target;
}

size_t MifareKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.av2.change_keyentry.MifareKey)
  size_t total_size = 0;

  // required bytes key = 1;
  if (_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .mifare.av2.change_keyentry.MifareKey.DiversificationKey diversification_key = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diversification_key_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MifareKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.av2.change_keyentry.MifareKey)
  GOOGLE_DCHECK_NE(&from, this);
  const MifareKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MifareKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.av2.change_keyentry.MifareKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.av2.change_keyentry.MifareKey)
    MergeFrom(*source);
  }
}

void MifareKey::MergeFrom(const MifareKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.av2.change_keyentry.MifareKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_diversification_key()->::mifare::av2::change_keyentry::MifareKey_DiversificationKey::MergeFrom(from._internal_diversification_key());
    }
  }
}

void MifareKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.av2.change_keyentry.MifareKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MifareKey::CopyFrom(const MifareKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.av2.change_keyentry.MifareKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MifareKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_diversification_key()) {
    if (!diversification_key_->IsInitialized()) return false;
  }
  return true;
}

void MifareKey::InternalSwap(MifareKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(diversification_key_, other->diversification_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MifareKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlusKeyEntry::InitAsDefaultInstance() {
}
class PlusKeyEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<PlusKeyEntry>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PlusKeyEntry::PlusKeyEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.av2.change_keyentry.PlusKeyEntry)
}
PlusKeyEntry::PlusKeyEntry(const PlusKeyEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:mifare.av2.change_keyentry.PlusKeyEntry)
}

void PlusKeyEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlusKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PlusKeyEntry::~PlusKeyEntry() {
  // @@protoc_insertion_point(destructor:mifare.av2.change_keyentry.PlusKeyEntry)
  SharedDtor();
}

void PlusKeyEntry::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlusKeyEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlusKeyEntry& PlusKeyEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlusKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto.base);
  return *internal_default_instance();
}


void PlusKeyEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.av2.change_keyentry.PlusKeyEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PlusKeyEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlusKeyEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.av2.change_keyentry.PlusKeyEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.av2.change_keyentry.PlusKeyEntry)
  return target;
}

size_t PlusKeyEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.av2.change_keyentry.PlusKeyEntry)
  size_t total_size = 0;

  // required bytes key = 1;
  if (_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlusKeyEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.av2.change_keyentry.PlusKeyEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const PlusKeyEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlusKeyEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.av2.change_keyentry.PlusKeyEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.av2.change_keyentry.PlusKeyEntry)
    MergeFrom(*source);
  }
}

void PlusKeyEntry::MergeFrom(const PlusKeyEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.av2.change_keyentry.PlusKeyEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _has_bits_[0] |= 0x00000001u;
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void PlusKeyEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.av2.change_keyentry.PlusKeyEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlusKeyEntry::CopyFrom(const PlusKeyEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.av2.change_keyentry.PlusKeyEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlusKeyEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PlusKeyEntry::InternalSwap(PlusKeyEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PlusKeyEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UltralightCKeyEntry::InitAsDefaultInstance() {
}
class UltralightCKeyEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<UltralightCKeyEntry>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UltralightCKeyEntry::UltralightCKeyEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.av2.change_keyentry.UltralightCKeyEntry)
}
UltralightCKeyEntry::UltralightCKeyEntry(const UltralightCKeyEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:mifare.av2.change_keyentry.UltralightCKeyEntry)
}

void UltralightCKeyEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UltralightCKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UltralightCKeyEntry::~UltralightCKeyEntry() {
  // @@protoc_insertion_point(destructor:mifare.av2.change_keyentry.UltralightCKeyEntry)
  SharedDtor();
}

void UltralightCKeyEntry::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UltralightCKeyEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UltralightCKeyEntry& UltralightCKeyEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UltralightCKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto.base);
  return *internal_default_instance();
}


void UltralightCKeyEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.av2.change_keyentry.UltralightCKeyEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UltralightCKeyEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UltralightCKeyEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.av2.change_keyentry.UltralightCKeyEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.av2.change_keyentry.UltralightCKeyEntry)
  return target;
}

size_t UltralightCKeyEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.av2.change_keyentry.UltralightCKeyEntry)
  size_t total_size = 0;

  // required bytes key = 1;
  if (_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UltralightCKeyEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.av2.change_keyentry.UltralightCKeyEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const UltralightCKeyEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UltralightCKeyEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.av2.change_keyentry.UltralightCKeyEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.av2.change_keyentry.UltralightCKeyEntry)
    MergeFrom(*source);
  }
}

void UltralightCKeyEntry::MergeFrom(const UltralightCKeyEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.av2.change_keyentry.UltralightCKeyEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _has_bits_[0] |= 0x00000001u;
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void UltralightCKeyEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.av2.change_keyentry.UltralightCKeyEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltralightCKeyEntry::CopyFrom(const UltralightCKeyEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.av2.change_keyentry.UltralightCKeyEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltralightCKeyEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UltralightCKeyEntry::InternalSwap(UltralightCKeyEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UltralightCKeyEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace change_keyentry
}  // namespace av2
}  // namespace mifare
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mifare::av2::change_keyentry::ChangeKeyEntry* Arena::CreateMaybeMessage< ::mifare::av2::change_keyentry::ChangeKeyEntry >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::av2::change_keyentry::ChangeKeyEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::mifare::av2::change_keyentry::MifareKeyEntry* Arena::CreateMaybeMessage< ::mifare::av2::change_keyentry::MifareKeyEntry >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::av2::change_keyentry::MifareKeyEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::mifare::av2::change_keyentry::MifareKey_DiversificationKey* Arena::CreateMaybeMessage< ::mifare::av2::change_keyentry::MifareKey_DiversificationKey >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::av2::change_keyentry::MifareKey_DiversificationKey >(arena);
}
template<> PROTOBUF_NOINLINE ::mifare::av2::change_keyentry::MifareKey* Arena::CreateMaybeMessage< ::mifare::av2::change_keyentry::MifareKey >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::av2::change_keyentry::MifareKey >(arena);
}
template<> PROTOBUF_NOINLINE ::mifare::av2::change_keyentry::PlusKeyEntry* Arena::CreateMaybeMessage< ::mifare::av2::change_keyentry::PlusKeyEntry >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::av2::change_keyentry::PlusKeyEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::mifare::av2::change_keyentry::UltralightCKeyEntry* Arena::CreateMaybeMessage< ::mifare::av2::change_keyentry::UltralightCKeyEntry >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::av2::change_keyentry::UltralightCKeyEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
