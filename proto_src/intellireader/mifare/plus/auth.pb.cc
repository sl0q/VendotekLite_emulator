// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mifare/plus/auth.proto

#include "mifare/plus/auth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fav2_2fargs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthenticationArguments_mifare_2fav2_2fargs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fplus_2fkey_5ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeyType_mifare_2fplus_2fkey_5ftype_2eproto;
namespace mifare {
namespace plus {
namespace auth {
class ClearKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearKey> _instance;
} _ClearKey_default_instance_;
class SamKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SamKey> _instance;
} _SamKey_default_instance_;
}  // namespace auth
}  // namespace plus
}  // namespace mifare
static void InitDefaultsscc_info_ClearKey_mifare_2fplus_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::plus::auth::_ClearKey_default_instance_;
    new (ptr) ::mifare::plus::auth::ClearKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::plus::auth::ClearKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClearKey_mifare_2fplus_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClearKey_mifare_2fplus_2fauth_2eproto}, {
      &scc_info_KeyType_mifare_2fplus_2fkey_5ftype_2eproto.base,}};

static void InitDefaultsscc_info_SamKey_mifare_2fplus_2fauth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::plus::auth::_SamKey_default_instance_;
    new (ptr) ::mifare::plus::auth::SamKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::plus::auth::SamKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SamKey_mifare_2fplus_2fauth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SamKey_mifare_2fplus_2fauth_2eproto}, {
      &scc_info_KeyType_mifare_2fplus_2fkey_5ftype_2eproto.base,
      &scc_info_AuthenticationArguments_mifare_2fav2_2fargs_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mifare_2fplus_2fauth_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mifare_2fplus_2fauth_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mifare_2fplus_2fauth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mifare_2fplus_2fauth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mifare::plus::auth::ClearKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::plus::auth::ClearKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::plus::auth::ClearKey, key_type_),
  PROTOBUF_FIELD_OFFSET(::mifare::plus::auth::ClearKey, clear_key_),
  PROTOBUF_FIELD_OFFSET(::mifare::plus::auth::ClearKey, security_level_),
  PROTOBUF_FIELD_OFFSET(::mifare::plus::auth::ClearKey, diversification_input_),
  2,
  0,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::mifare::plus::auth::SamKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::plus::auth::SamKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::plus::auth::SamKey, key_type_),
  PROTOBUF_FIELD_OFFSET(::mifare::plus::auth::SamKey, av2_args_),
  PROTOBUF_FIELD_OFFSET(::mifare::plus::auth::SamKey, security_level_),
  PROTOBUF_FIELD_OFFSET(::mifare::plus::auth::SamKey, diversification_input_),
  1,
  2,
  3,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::mifare::plus::auth::ClearKey)},
  { 13, 22, sizeof(::mifare::plus::auth::SamKey)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::plus::auth::_ClearKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::plus::auth::_SamKey_default_instance_),
};

const char descriptor_table_protodef_mifare_2fplus_2fauth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026mifare/plus/auth.proto\022\020mifare.plus.au"
  "th\032\032mifare/plus/key_type.proto\032 mifare/p"
  "lus/security_level.proto\032\025mifare/av2/arg"
  "s.proto\"\265\001\n\010ClearKey\022/\n\010key_type\030\001 \002(\0132\035"
  ".mifare.plus.key_type.KeyType\022\021\n\tclear_k"
  "ey\030\002 \002(\014\022F\n\016security_level\030\003 \001(\0162).mifar"
  "e.plus.security_level.SecurityLevel:\003SL3"
  "\022\035\n\025diversification_input\030\004 \001(\014\"\334\001\n\006SamK"
  "ey\022/\n\010key_type\030\001 \002(\0132\035.mifare.plus.key_t"
  "ype.KeyType\022:\n\010av2_args\030\002 \002(\0132(.mifare.a"
  "v2.args.AuthenticationArguments\022F\n\016secur"
  "ity_level\030\003 \001(\0162).mifare.plus.security_l"
  "evel.SecurityLevel:\003SL3\022\035\n\025diversificati"
  "on_input\030\004 \001(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mifare_2fplus_2fauth_2eproto_deps[3] = {
  &::descriptor_table_mifare_2fav2_2fargs_2eproto,
  &::descriptor_table_mifare_2fplus_2fkey_5ftype_2eproto,
  &::descriptor_table_mifare_2fplus_2fsecurity_5flevel_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mifare_2fplus_2fauth_2eproto_sccs[2] = {
  &scc_info_ClearKey_mifare_2fplus_2fauth_2eproto.base,
  &scc_info_SamKey_mifare_2fplus_2fauth_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mifare_2fplus_2fauth_2eproto_once;
static bool descriptor_table_mifare_2fplus_2fauth_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mifare_2fplus_2fauth_2eproto = {
  &descriptor_table_mifare_2fplus_2fauth_2eproto_initialized, descriptor_table_protodef_mifare_2fplus_2fauth_2eproto, "mifare/plus/auth.proto", 534,
  &descriptor_table_mifare_2fplus_2fauth_2eproto_once, descriptor_table_mifare_2fplus_2fauth_2eproto_sccs, descriptor_table_mifare_2fplus_2fauth_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_mifare_2fplus_2fauth_2eproto::offsets,
  file_level_metadata_mifare_2fplus_2fauth_2eproto, 2, file_level_enum_descriptors_mifare_2fplus_2fauth_2eproto, file_level_service_descriptors_mifare_2fplus_2fauth_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mifare_2fplus_2fauth_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mifare_2fplus_2fauth_2eproto), true);
namespace mifare {
namespace plus {
namespace auth {

// ===================================================================

void ClearKey::InitAsDefaultInstance() {
  ::mifare::plus::auth::_ClearKey_default_instance_._instance.get_mutable()->key_type_ = const_cast< ::mifare::plus::key_type::KeyType*>(
      ::mifare::plus::key_type::KeyType::internal_default_instance());
}
class ClearKey::_Internal {
 public:
  using HasBits = decltype(std::declval<ClearKey>()._has_bits_);
  static const ::mifare::plus::key_type::KeyType& key_type(const ClearKey* msg);
  static void set_has_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clear_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_security_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_diversification_input(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mifare::plus::key_type::KeyType&
ClearKey::_Internal::key_type(const ClearKey* msg) {
  return *msg->key_type_;
}
void ClearKey::clear_key_type() {
  if (key_type_ != nullptr) key_type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ClearKey::ClearKey()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.plus.auth.ClearKey)
}
ClearKey::ClearKey(const ClearKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clear_key()) {
    clear_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clear_key_);
  }
  diversification_input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_diversification_input()) {
    diversification_input_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diversification_input_);
  }
  if (from._internal_has_key_type()) {
    key_type_ = new ::mifare::plus::key_type::KeyType(*from.key_type_);
  } else {
    key_type_ = nullptr;
  }
  security_level_ = from.security_level_;
  // @@protoc_insertion_point(copy_constructor:mifare.plus.auth.ClearKey)
}

void ClearKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClearKey_mifare_2fplus_2fauth_2eproto.base);
  clear_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  diversification_input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_type_ = nullptr;
  security_level_ = 3;
}

ClearKey::~ClearKey() {
  // @@protoc_insertion_point(destructor:mifare.plus.auth.ClearKey)
  SharedDtor();
}

void ClearKey::SharedDtor() {
  clear_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  diversification_input_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete key_type_;
}

void ClearKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearKey& ClearKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearKey_mifare_2fplus_2fauth_2eproto.base);
  return *internal_default_instance();
}


void ClearKey::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.plus.auth.ClearKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      clear_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      diversification_input_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(key_type_ != nullptr);
      key_type_->Clear();
    }
    security_level_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClearKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mifare.plus.key_type.KeyType key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes clear_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_clear_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.plus.security_level.SecurityLevel security_level = 3 [default = SL3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mifare::plus::security_level::SecurityLevel_IsValid(val))) {
            _internal_set_security_level(static_cast<::mifare::plus::security_level::SecurityLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes diversification_input = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_diversification_input();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.plus.auth.ClearKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mifare.plus.key_type.KeyType key_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key_type(this), target, stream);
  }

  // required bytes clear_key = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_clear_key(), target);
  }

  // optional .mifare.plus.security_level.SecurityLevel security_level = 3 [default = SL3];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_security_level(), target);
  }

  // optional bytes diversification_input = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_diversification_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.plus.auth.ClearKey)
  return target;
}

size_t ClearKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mifare.plus.auth.ClearKey)
  size_t total_size = 0;

  if (_internal_has_clear_key()) {
    // required bytes clear_key = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clear_key());
  }

  if (_internal_has_key_type()) {
    // required .mifare.plus.key_type.KeyType key_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_type_);
  }

  return total_size;
}
size_t ClearKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.plus.auth.ClearKey)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required bytes clear_key = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clear_key());

    // required .mifare.plus.key_type.KeyType key_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_type_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes diversification_input = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_diversification_input());
  }

  // optional .mifare.plus.security_level.SecurityLevel security_level = 3 [default = SL3];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_security_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.plus.auth.ClearKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.plus.auth.ClearKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.plus.auth.ClearKey)
    MergeFrom(*source);
  }
}

void ClearKey::MergeFrom(const ClearKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.plus.auth.ClearKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      clear_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clear_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      diversification_input_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diversification_input_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_key_type()->::mifare::plus::key_type::KeyType::MergeFrom(from._internal_key_type());
    }
    if (cached_has_bits & 0x00000008u) {
      security_level_ = from.security_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClearKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.plus.auth.ClearKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearKey::CopyFrom(const ClearKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.plus.auth.ClearKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (_internal_has_key_type()) {
    if (!key_type_->IsInitialized()) return false;
  }
  return true;
}

void ClearKey::InternalSwap(ClearKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clear_key_.Swap(&other->clear_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  diversification_input_.Swap(&other->diversification_input_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(key_type_, other->key_type_);
  swap(security_level_, other->security_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SamKey::InitAsDefaultInstance() {
  ::mifare::plus::auth::_SamKey_default_instance_._instance.get_mutable()->key_type_ = const_cast< ::mifare::plus::key_type::KeyType*>(
      ::mifare::plus::key_type::KeyType::internal_default_instance());
  ::mifare::plus::auth::_SamKey_default_instance_._instance.get_mutable()->av2_args_ = const_cast< ::mifare::av2::args::AuthenticationArguments*>(
      ::mifare::av2::args::AuthenticationArguments::internal_default_instance());
}
class SamKey::_Internal {
 public:
  using HasBits = decltype(std::declval<SamKey>()._has_bits_);
  static const ::mifare::plus::key_type::KeyType& key_type(const SamKey* msg);
  static void set_has_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mifare::av2::args::AuthenticationArguments& av2_args(const SamKey* msg);
  static void set_has_av2_args(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_security_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_diversification_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mifare::plus::key_type::KeyType&
SamKey::_Internal::key_type(const SamKey* msg) {
  return *msg->key_type_;
}
const ::mifare::av2::args::AuthenticationArguments&
SamKey::_Internal::av2_args(const SamKey* msg) {
  return *msg->av2_args_;
}
void SamKey::clear_key_type() {
  if (key_type_ != nullptr) key_type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SamKey::clear_av2_args() {
  if (av2_args_ != nullptr) av2_args_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SamKey::SamKey()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.plus.auth.SamKey)
}
SamKey::SamKey(const SamKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diversification_input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_diversification_input()) {
    diversification_input_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diversification_input_);
  }
  if (from._internal_has_key_type()) {
    key_type_ = new ::mifare::plus::key_type::KeyType(*from.key_type_);
  } else {
    key_type_ = nullptr;
  }
  if (from._internal_has_av2_args()) {
    av2_args_ = new ::mifare::av2::args::AuthenticationArguments(*from.av2_args_);
  } else {
    av2_args_ = nullptr;
  }
  security_level_ = from.security_level_;
  // @@protoc_insertion_point(copy_constructor:mifare.plus.auth.SamKey)
}

void SamKey::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SamKey_mifare_2fplus_2fauth_2eproto.base);
  diversification_input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&av2_args_) -
      reinterpret_cast<char*>(&key_type_)) + sizeof(av2_args_));
  security_level_ = 3;
}

SamKey::~SamKey() {
  // @@protoc_insertion_point(destructor:mifare.plus.auth.SamKey)
  SharedDtor();
}

void SamKey::SharedDtor() {
  diversification_input_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete key_type_;
  if (this != internal_default_instance()) delete av2_args_;
}

void SamKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SamKey& SamKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SamKey_mifare_2fplus_2fauth_2eproto.base);
  return *internal_default_instance();
}


void SamKey::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.plus.auth.SamKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      diversification_input_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(key_type_ != nullptr);
      key_type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(av2_args_ != nullptr);
      av2_args_->Clear();
    }
    security_level_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SamKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mifare.plus.key_type.KeyType key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .mifare.av2.args.AuthenticationArguments av2_args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_av2_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.plus.security_level.SecurityLevel security_level = 3 [default = SL3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mifare::plus::security_level::SecurityLevel_IsValid(val))) {
            _internal_set_security_level(static_cast<::mifare::plus::security_level::SecurityLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes diversification_input = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_diversification_input();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SamKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.plus.auth.SamKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mifare.plus.key_type.KeyType key_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key_type(this), target, stream);
  }

  // required .mifare.av2.args.AuthenticationArguments av2_args = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::av2_args(this), target, stream);
  }

  // optional .mifare.plus.security_level.SecurityLevel security_level = 3 [default = SL3];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_security_level(), target);
  }

  // optional bytes diversification_input = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_diversification_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.plus.auth.SamKey)
  return target;
}

size_t SamKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mifare.plus.auth.SamKey)
  size_t total_size = 0;

  if (_internal_has_key_type()) {
    // required .mifare.plus.key_type.KeyType key_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_type_);
  }

  if (_internal_has_av2_args()) {
    // required .mifare.av2.args.AuthenticationArguments av2_args = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *av2_args_);
  }

  return total_size;
}
size_t SamKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.plus.auth.SamKey)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .mifare.plus.key_type.KeyType key_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_type_);

    // required .mifare.av2.args.AuthenticationArguments av2_args = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *av2_args_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes diversification_input = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_diversification_input());
  }

  // optional .mifare.plus.security_level.SecurityLevel security_level = 3 [default = SL3];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_security_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SamKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.plus.auth.SamKey)
  GOOGLE_DCHECK_NE(&from, this);
  const SamKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SamKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.plus.auth.SamKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.plus.auth.SamKey)
    MergeFrom(*source);
  }
}

void SamKey::MergeFrom(const SamKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.plus.auth.SamKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      diversification_input_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diversification_input_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_key_type()->::mifare::plus::key_type::KeyType::MergeFrom(from._internal_key_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_av2_args()->::mifare::av2::args::AuthenticationArguments::MergeFrom(from._internal_av2_args());
    }
    if (cached_has_bits & 0x00000008u) {
      security_level_ = from.security_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SamKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.plus.auth.SamKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SamKey::CopyFrom(const SamKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.plus.auth.SamKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (_internal_has_key_type()) {
    if (!key_type_->IsInitialized()) return false;
  }
  if (_internal_has_av2_args()) {
    if (!av2_args_->IsInitialized()) return false;
  }
  return true;
}

void SamKey::InternalSwap(SamKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  diversification_input_.Swap(&other->diversification_input_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(key_type_, other->key_type_);
  swap(av2_args_, other->av2_args_);
  swap(security_level_, other->security_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SamKey::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace auth
}  // namespace plus
}  // namespace mifare
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mifare::plus::auth::ClearKey* Arena::CreateMaybeMessage< ::mifare::plus::auth::ClearKey >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::plus::auth::ClearKey >(arena);
}
template<> PROTOBUF_NOINLINE ::mifare::plus::auth::SamKey* Arena::CreateMaybeMessage< ::mifare::plus::auth::SamKey >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::plus::auth::SamKey >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
