// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mifare/plus/key_type.proto

#include "mifare/plus/key_type.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fplus_2fkey_5ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SectorKey_mifare_2fplus_2fkey_5ftype_2eproto;
namespace mifare {
namespace plus {
namespace key_type {
class SectorKeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SectorKey> _instance;
} _SectorKey_default_instance_;
class KeyTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyType> _instance;
  int special_key_;
  const ::mifare::plus::key_type::SectorKey* sector_key_;
} _KeyType_default_instance_;
}  // namespace key_type
}  // namespace plus
}  // namespace mifare
static void InitDefaultsscc_info_KeyType_mifare_2fplus_2fkey_5ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::plus::key_type::_KeyType_default_instance_;
    new (ptr) ::mifare::plus::key_type::KeyType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::plus::key_type::KeyType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeyType_mifare_2fplus_2fkey_5ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KeyType_mifare_2fplus_2fkey_5ftype_2eproto}, {
      &scc_info_SectorKey_mifare_2fplus_2fkey_5ftype_2eproto.base,}};

static void InitDefaultsscc_info_SectorKey_mifare_2fplus_2fkey_5ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::plus::key_type::_SectorKey_default_instance_;
    new (ptr) ::mifare::plus::key_type::SectorKey();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::plus::key_type::SectorKey::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SectorKey_mifare_2fplus_2fkey_5ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SectorKey_mifare_2fplus_2fkey_5ftype_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mifare_2fplus_2fkey_5ftype_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mifare_2fplus_2fkey_5ftype_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mifare_2fplus_2fkey_5ftype_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mifare_2fplus_2fkey_5ftype_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mifare::plus::key_type::SectorKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::plus::key_type::SectorKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::plus::key_type::SectorKey, sector_number_),
  PROTOBUF_FIELD_OFFSET(::mifare::plus::key_type::SectorKey, sector_key_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mifare::plus::key_type::KeyType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::plus::key_type::KeyType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mifare::plus::key_type::KeyType, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::mifare::plus::key_type::KeyTypeDefaultTypeInternal, special_key_),
  offsetof(::mifare::plus::key_type::KeyTypeDefaultTypeInternal, sector_key_),
  PROTOBUF_FIELD_OFFSET(::mifare::plus::key_type::KeyType, key_type_),
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::mifare::plus::key_type::SectorKey)},
  { 9, 17, sizeof(::mifare::plus::key_type::KeyType)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::plus::key_type::_SectorKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::plus::key_type::_KeyType_default_instance_),
};

const char descriptor_table_protodef_mifare_2fplus_2fkey_5ftype_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032mifare/plus/key_type.proto\022\024mifare.plu"
  "s.key_type\032\030mifare/plus/sector.proto\"^\n\t"
  "SectorKey\022\025\n\rsector_number\030\001 \002(\r\022:\n\017sect"
  "or_key_type\030\002 \002(\0162!.mifare.plus.sector.S"
  "ectorKeyType\"\205\001\n\007KeyType\0227\n\013special_key\030"
  "\001 \001(\0162 .mifare.plus.key_type.SpecialKeyH"
  "\000\0225\n\nsector_key\030\002 \001(\0132\037.mifare.plus.key_"
  "type.SectorKeyH\000B\n\n\010key_type*\220\001\n\nSpecial"
  "Key\022\023\n\017ORIGINALITY_KEY\020\000\022\023\n\017CARD_MASTER_"
  "KEY\020\001\022\023\n\017CARD_CONFIG_KEY\020\002\022\025\n\021LEVEL2_SWI"
  "TCH_KEY\020\003\022\025\n\021LEVEL3_SWITCH_KEY\020\004\022\025\n\021SL1_"
  "CARD_AUTH_KEY\020\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mifare_2fplus_2fkey_5ftype_2eproto_deps[1] = {
  &::descriptor_table_mifare_2fplus_2fsector_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mifare_2fplus_2fkey_5ftype_2eproto_sccs[2] = {
  &scc_info_KeyType_mifare_2fplus_2fkey_5ftype_2eproto.base,
  &scc_info_SectorKey_mifare_2fplus_2fkey_5ftype_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mifare_2fplus_2fkey_5ftype_2eproto_once;
static bool descriptor_table_mifare_2fplus_2fkey_5ftype_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mifare_2fplus_2fkey_5ftype_2eproto = {
  &descriptor_table_mifare_2fplus_2fkey_5ftype_2eproto_initialized, descriptor_table_protodef_mifare_2fplus_2fkey_5ftype_2eproto, "mifare/plus/key_type.proto", 455,
  &descriptor_table_mifare_2fplus_2fkey_5ftype_2eproto_once, descriptor_table_mifare_2fplus_2fkey_5ftype_2eproto_sccs, descriptor_table_mifare_2fplus_2fkey_5ftype_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_mifare_2fplus_2fkey_5ftype_2eproto::offsets,
  file_level_metadata_mifare_2fplus_2fkey_5ftype_2eproto, 2, file_level_enum_descriptors_mifare_2fplus_2fkey_5ftype_2eproto, file_level_service_descriptors_mifare_2fplus_2fkey_5ftype_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mifare_2fplus_2fkey_5ftype_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mifare_2fplus_2fkey_5ftype_2eproto), true);
namespace mifare {
namespace plus {
namespace key_type {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpecialKey_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mifare_2fplus_2fkey_5ftype_2eproto);
  return file_level_enum_descriptors_mifare_2fplus_2fkey_5ftype_2eproto[0];
}
bool SpecialKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SectorKey::InitAsDefaultInstance() {
}
class SectorKey::_Internal {
 public:
  using HasBits = decltype(std::declval<SectorKey>()._has_bits_);
  static void set_has_sector_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sector_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SectorKey::SectorKey()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.plus.key_type.SectorKey)
}
SectorKey::SectorKey(const SectorKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sector_number_, &from.sector_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&sector_key_type_) -
    reinterpret_cast<char*>(&sector_number_)) + sizeof(sector_key_type_));
  // @@protoc_insertion_point(copy_constructor:mifare.plus.key_type.SectorKey)
}

void SectorKey::SharedCtor() {
  ::memset(&sector_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sector_key_type_) -
      reinterpret_cast<char*>(&sector_number_)) + sizeof(sector_key_type_));
}

SectorKey::~SectorKey() {
  // @@protoc_insertion_point(destructor:mifare.plus.key_type.SectorKey)
  SharedDtor();
}

void SectorKey::SharedDtor() {
}

void SectorKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SectorKey& SectorKey::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SectorKey_mifare_2fplus_2fkey_5ftype_2eproto.base);
  return *internal_default_instance();
}


void SectorKey::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.plus.key_type.SectorKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&sector_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sector_key_type_) -
        reinterpret_cast<char*>(&sector_number_)) + sizeof(sector_key_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SectorKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 sector_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sector_number(&has_bits);
          sector_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .mifare.plus.sector.SectorKeyType sector_key_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mifare::plus::sector::SectorKeyType_IsValid(val))) {
            _internal_set_sector_key_type(static_cast<::mifare::plus::sector::SectorKeyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SectorKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.plus.key_type.SectorKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 sector_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sector_number(), target);
  }

  // required .mifare.plus.sector.SectorKeyType sector_key_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sector_key_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.plus.key_type.SectorKey)
  return target;
}

size_t SectorKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mifare.plus.key_type.SectorKey)
  size_t total_size = 0;

  if (_internal_has_sector_number()) {
    // required uint32 sector_number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sector_number());
  }

  if (_internal_has_sector_key_type()) {
    // required .mifare.plus.sector.SectorKeyType sector_key_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sector_key_type());
  }

  return total_size;
}
size_t SectorKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.plus.key_type.SectorKey)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 sector_number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sector_number());

    // required .mifare.plus.sector.SectorKeyType sector_key_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sector_key_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SectorKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.plus.key_type.SectorKey)
  GOOGLE_DCHECK_NE(&from, this);
  const SectorKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SectorKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.plus.key_type.SectorKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.plus.key_type.SectorKey)
    MergeFrom(*source);
  }
}

void SectorKey::MergeFrom(const SectorKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.plus.key_type.SectorKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sector_number_ = from.sector_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      sector_key_type_ = from.sector_key_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SectorKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.plus.key_type.SectorKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectorKey::CopyFrom(const SectorKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.plus.key_type.SectorKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectorKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SectorKey::InternalSwap(SectorKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sector_number_, other->sector_number_);
  swap(sector_key_type_, other->sector_key_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SectorKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyType::InitAsDefaultInstance() {
  ::mifare::plus::key_type::_KeyType_default_instance_.special_key_ = 0;
  ::mifare::plus::key_type::_KeyType_default_instance_.sector_key_ = const_cast< ::mifare::plus::key_type::SectorKey*>(
      ::mifare::plus::key_type::SectorKey::internal_default_instance());
}
class KeyType::_Internal {
 public:
  using HasBits = decltype(std::declval<KeyType>()._has_bits_);
  static const ::mifare::plus::key_type::SectorKey& sector_key(const KeyType* msg);
};

const ::mifare::plus::key_type::SectorKey&
KeyType::_Internal::sector_key(const KeyType* msg) {
  return *msg->key_type_.sector_key_;
}
void KeyType::set_allocated_sector_key(::mifare::plus::key_type::SectorKey* sector_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_key_type();
  if (sector_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sector_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sector_key, submessage_arena);
    }
    set_has_sector_key();
    key_type_.sector_key_ = sector_key;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.plus.key_type.KeyType.sector_key)
}
KeyType::KeyType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.plus.key_type.KeyType)
}
KeyType::KeyType(const KeyType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_key_type();
  switch (from.key_type_case()) {
    case kSpecialKey: {
      _internal_set_special_key(from._internal_special_key());
      break;
    }
    case kSectorKey: {
      _internal_mutable_sector_key()->::mifare::plus::key_type::SectorKey::MergeFrom(from._internal_sector_key());
      break;
    }
    case KEY_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mifare.plus.key_type.KeyType)
}

void KeyType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyType_mifare_2fplus_2fkey_5ftype_2eproto.base);
  clear_has_key_type();
}

KeyType::~KeyType() {
  // @@protoc_insertion_point(destructor:mifare.plus.key_type.KeyType)
  SharedDtor();
}

void KeyType::SharedDtor() {
  if (has_key_type()) {
    clear_key_type();
  }
}

void KeyType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyType& KeyType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyType_mifare_2fplus_2fkey_5ftype_2eproto.base);
  return *internal_default_instance();
}


void KeyType::clear_key_type() {
// @@protoc_insertion_point(one_of_clear_start:mifare.plus.key_type.KeyType)
  switch (key_type_case()) {
    case kSpecialKey: {
      // No need to clear
      break;
    }
    case kSectorKey: {
      delete key_type_.sector_key_;
      break;
    }
    case KEY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KEY_TYPE_NOT_SET;
}


void KeyType::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.plus.key_type.KeyType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_key_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* KeyType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mifare.plus.key_type.SpecialKey special_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mifare::plus::key_type::SpecialKey_IsValid(val))) {
            _internal_set_special_key(static_cast<::mifare::plus::key_type::SpecialKey>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mifare.plus.key_type.SectorKey sector_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sector_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.plus.key_type.KeyType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (key_type_case()) {
    case kSpecialKey: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_special_key(), target);
      break;
    }
    case kSectorKey: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::sector_key(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.plus.key_type.KeyType)
  return target;
}

size_t KeyType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.plus.key_type.KeyType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (key_type_case()) {
    // optional .mifare.plus.key_type.SpecialKey special_key = 1;
    case kSpecialKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_special_key());
      break;
    }
    // optional .mifare.plus.key_type.SectorKey sector_key = 2;
    case kSectorKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_type_.sector_key_);
      break;
    }
    case KEY_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.plus.key_type.KeyType)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.plus.key_type.KeyType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.plus.key_type.KeyType)
    MergeFrom(*source);
  }
}

void KeyType::MergeFrom(const KeyType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.plus.key_type.KeyType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.key_type_case()) {
    case kSpecialKey: {
      _internal_set_special_key(from._internal_special_key());
      break;
    }
    case kSectorKey: {
      _internal_mutable_sector_key()->::mifare::plus::key_type::SectorKey::MergeFrom(from._internal_sector_key());
      break;
    }
    case KEY_TYPE_NOT_SET: {
      break;
    }
  }
}

void KeyType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.plus.key_type.KeyType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyType::CopyFrom(const KeyType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.plus.key_type.KeyType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyType::IsInitialized() const {
  switch (key_type_case()) {
    case kSpecialKey: {
      break;
    }
    case kSectorKey: {
      if (has_sector_key()) {
        if (!this->sector_key().IsInitialized()) return false;
      }
      break;
    }
    case KEY_TYPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void KeyType::InternalSwap(KeyType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(key_type_, other->key_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyType::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace key_type
}  // namespace plus
}  // namespace mifare
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mifare::plus::key_type::SectorKey* Arena::CreateMaybeMessage< ::mifare::plus::key_type::SectorKey >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::plus::key_type::SectorKey >(arena);
}
template<> PROTOBUF_NOINLINE ::mifare::plus::key_type::KeyType* Arena::CreateMaybeMessage< ::mifare::plus::key_type::KeyType >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::plus::key_type::KeyType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
