// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mifare/plus/key_type.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mifare_2fplus_2fkey_5ftype_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mifare_2fplus_2fkey_5ftype_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mifare/plus/sector.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mifare_2fplus_2fkey_5ftype_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mifare_2fplus_2fkey_5ftype_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mifare_2fplus_2fkey_5ftype_2eproto;
namespace mifare {
namespace plus {
namespace key_type {
class KeyType;
class KeyTypeDefaultTypeInternal;
extern KeyTypeDefaultTypeInternal _KeyType_default_instance_;
class SectorKey;
class SectorKeyDefaultTypeInternal;
extern SectorKeyDefaultTypeInternal _SectorKey_default_instance_;
}  // namespace key_type
}  // namespace plus
}  // namespace mifare
PROTOBUF_NAMESPACE_OPEN
template<> ::mifare::plus::key_type::KeyType* Arena::CreateMaybeMessage<::mifare::plus::key_type::KeyType>(Arena*);
template<> ::mifare::plus::key_type::SectorKey* Arena::CreateMaybeMessage<::mifare::plus::key_type::SectorKey>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mifare {
namespace plus {
namespace key_type {

enum SpecialKey : int {
  ORIGINALITY_KEY = 0,
  CARD_MASTER_KEY = 1,
  CARD_CONFIG_KEY = 2,
  LEVEL2_SWITCH_KEY = 3,
  LEVEL3_SWITCH_KEY = 4,
  SL1_CARD_AUTH_KEY = 5
};
bool SpecialKey_IsValid(int value);
constexpr SpecialKey SpecialKey_MIN = ORIGINALITY_KEY;
constexpr SpecialKey SpecialKey_MAX = SL1_CARD_AUTH_KEY;
constexpr int SpecialKey_ARRAYSIZE = SpecialKey_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpecialKey_descriptor();
template<typename T>
inline const std::string& SpecialKey_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpecialKey>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpecialKey_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SpecialKey_descriptor(), enum_t_value);
}
inline bool SpecialKey_Parse(
    const std::string& name, SpecialKey* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpecialKey>(
    SpecialKey_descriptor(), name, value);
}
// ===================================================================

class SectorKey :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mifare.plus.key_type.SectorKey) */ {
 public:
  SectorKey();
  virtual ~SectorKey();

  SectorKey(const SectorKey& from);
  SectorKey(SectorKey&& from) noexcept
    : SectorKey() {
    *this = ::std::move(from);
  }

  inline SectorKey& operator=(const SectorKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectorKey& operator=(SectorKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SectorKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SectorKey* internal_default_instance() {
    return reinterpret_cast<const SectorKey*>(
               &_SectorKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SectorKey& a, SectorKey& b) {
    a.Swap(&b);
  }
  inline void Swap(SectorKey* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SectorKey* New() const final {
    return CreateMaybeMessage<SectorKey>(nullptr);
  }

  SectorKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SectorKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SectorKey& from);
  void MergeFrom(const SectorKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectorKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifare.plus.key_type.SectorKey";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mifare_2fplus_2fkey_5ftype_2eproto);
    return ::descriptor_table_mifare_2fplus_2fkey_5ftype_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectorNumberFieldNumber = 1,
    kSectorKeyTypeFieldNumber = 2,
  };
  // required uint32 sector_number = 1;
  bool has_sector_number() const;
  private:
  bool _internal_has_sector_number() const;
  public:
  void clear_sector_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sector_number() const;
  void set_sector_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sector_number() const;
  void _internal_set_sector_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .mifare.plus.sector.SectorKeyType sector_key_type = 2;
  bool has_sector_key_type() const;
  private:
  bool _internal_has_sector_key_type() const;
  public:
  void clear_sector_key_type();
  ::mifare::plus::sector::SectorKeyType sector_key_type() const;
  void set_sector_key_type(::mifare::plus::sector::SectorKeyType value);
  private:
  ::mifare::plus::sector::SectorKeyType _internal_sector_key_type() const;
  void _internal_set_sector_key_type(::mifare::plus::sector::SectorKeyType value);
  public:

  // @@protoc_insertion_point(class_scope:mifare.plus.key_type.SectorKey)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sector_number_;
  int sector_key_type_;
  friend struct ::TableStruct_mifare_2fplus_2fkey_5ftype_2eproto;
};
// -------------------------------------------------------------------

class KeyType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mifare.plus.key_type.KeyType) */ {
 public:
  KeyType();
  virtual ~KeyType();

  KeyType(const KeyType& from);
  KeyType(KeyType&& from) noexcept
    : KeyType() {
    *this = ::std::move(from);
  }

  inline KeyType& operator=(const KeyType& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyType& operator=(KeyType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyType& default_instance();

  enum KeyTypeCase {
    kSpecialKey = 1,
    kSectorKey = 2,
    KEY_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyType* internal_default_instance() {
    return reinterpret_cast<const KeyType*>(
               &_KeyType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyType& a, KeyType& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyType* New() const final {
    return CreateMaybeMessage<KeyType>(nullptr);
  }

  KeyType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyType& from);
  void MergeFrom(const KeyType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifare.plus.key_type.KeyType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mifare_2fplus_2fkey_5ftype_2eproto);
    return ::descriptor_table_mifare_2fplus_2fkey_5ftype_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecialKeyFieldNumber = 1,
    kSectorKeyFieldNumber = 2,
  };
  // optional .mifare.plus.key_type.SpecialKey special_key = 1;
  bool has_special_key() const;
  private:
  bool _internal_has_special_key() const;
  public:
  void clear_special_key();
  ::mifare::plus::key_type::SpecialKey special_key() const;
  void set_special_key(::mifare::plus::key_type::SpecialKey value);
  private:
  ::mifare::plus::key_type::SpecialKey _internal_special_key() const;
  void _internal_set_special_key(::mifare::plus::key_type::SpecialKey value);
  public:

  // optional .mifare.plus.key_type.SectorKey sector_key = 2;
  bool has_sector_key() const;
  private:
  bool _internal_has_sector_key() const;
  public:
  void clear_sector_key();
  const ::mifare::plus::key_type::SectorKey& sector_key() const;
  ::mifare::plus::key_type::SectorKey* release_sector_key();
  ::mifare::plus::key_type::SectorKey* mutable_sector_key();
  void set_allocated_sector_key(::mifare::plus::key_type::SectorKey* sector_key);
  private:
  const ::mifare::plus::key_type::SectorKey& _internal_sector_key() const;
  ::mifare::plus::key_type::SectorKey* _internal_mutable_sector_key();
  public:

  void clear_key_type();
  KeyTypeCase key_type_case() const;
  // @@protoc_insertion_point(class_scope:mifare.plus.key_type.KeyType)
 private:
  class _Internal;
  void set_has_special_key();
  void set_has_sector_key();

  inline bool has_key_type() const;
  inline void clear_has_key_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union KeyTypeUnion {
    KeyTypeUnion() {}
    int special_key_;
    ::mifare::plus::key_type::SectorKey* sector_key_;
  } key_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_mifare_2fplus_2fkey_5ftype_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SectorKey

// required uint32 sector_number = 1;
inline bool SectorKey::_internal_has_sector_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SectorKey::has_sector_number() const {
  return _internal_has_sector_number();
}
inline void SectorKey::clear_sector_number() {
  sector_number_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectorKey::_internal_sector_number() const {
  return sector_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectorKey::sector_number() const {
  // @@protoc_insertion_point(field_get:mifare.plus.key_type.SectorKey.sector_number)
  return _internal_sector_number();
}
inline void SectorKey::_internal_set_sector_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  sector_number_ = value;
}
inline void SectorKey::set_sector_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sector_number(value);
  // @@protoc_insertion_point(field_set:mifare.plus.key_type.SectorKey.sector_number)
}

// required .mifare.plus.sector.SectorKeyType sector_key_type = 2;
inline bool SectorKey::_internal_has_sector_key_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SectorKey::has_sector_key_type() const {
  return _internal_has_sector_key_type();
}
inline void SectorKey::clear_sector_key_type() {
  sector_key_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::mifare::plus::sector::SectorKeyType SectorKey::_internal_sector_key_type() const {
  return static_cast< ::mifare::plus::sector::SectorKeyType >(sector_key_type_);
}
inline ::mifare::plus::sector::SectorKeyType SectorKey::sector_key_type() const {
  // @@protoc_insertion_point(field_get:mifare.plus.key_type.SectorKey.sector_key_type)
  return _internal_sector_key_type();
}
inline void SectorKey::_internal_set_sector_key_type(::mifare::plus::sector::SectorKeyType value) {
  assert(::mifare::plus::sector::SectorKeyType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  sector_key_type_ = value;
}
inline void SectorKey::set_sector_key_type(::mifare::plus::sector::SectorKeyType value) {
  _internal_set_sector_key_type(value);
  // @@protoc_insertion_point(field_set:mifare.plus.key_type.SectorKey.sector_key_type)
}

// -------------------------------------------------------------------

// KeyType

// optional .mifare.plus.key_type.SpecialKey special_key = 1;
inline bool KeyType::_internal_has_special_key() const {
  return key_type_case() == kSpecialKey;
}
inline bool KeyType::has_special_key() const {
  return _internal_has_special_key();
}
inline void KeyType::set_has_special_key() {
  _oneof_case_[0] = kSpecialKey;
}
inline void KeyType::clear_special_key() {
  if (_internal_has_special_key()) {
    key_type_.special_key_ = 0;
    clear_has_key_type();
  }
}
inline ::mifare::plus::key_type::SpecialKey KeyType::_internal_special_key() const {
  if (_internal_has_special_key()) {
    return static_cast< ::mifare::plus::key_type::SpecialKey >(key_type_.special_key_);
  }
  return static_cast< ::mifare::plus::key_type::SpecialKey >(0);
}
inline ::mifare::plus::key_type::SpecialKey KeyType::special_key() const {
  // @@protoc_insertion_point(field_get:mifare.plus.key_type.KeyType.special_key)
  return _internal_special_key();
}
inline void KeyType::_internal_set_special_key(::mifare::plus::key_type::SpecialKey value) {
  assert(::mifare::plus::key_type::SpecialKey_IsValid(value));
  if (!_internal_has_special_key()) {
    clear_key_type();
    set_has_special_key();
  }
  key_type_.special_key_ = value;
}
inline void KeyType::set_special_key(::mifare::plus::key_type::SpecialKey value) {
  // @@protoc_insertion_point(field_set:mifare.plus.key_type.KeyType.special_key)
  _internal_set_special_key(value);
}

// optional .mifare.plus.key_type.SectorKey sector_key = 2;
inline bool KeyType::_internal_has_sector_key() const {
  return key_type_case() == kSectorKey;
}
inline bool KeyType::has_sector_key() const {
  return _internal_has_sector_key();
}
inline void KeyType::set_has_sector_key() {
  _oneof_case_[0] = kSectorKey;
}
inline void KeyType::clear_sector_key() {
  if (_internal_has_sector_key()) {
    delete key_type_.sector_key_;
    clear_has_key_type();
  }
}
inline ::mifare::plus::key_type::SectorKey* KeyType::release_sector_key() {
  // @@protoc_insertion_point(field_release:mifare.plus.key_type.KeyType.sector_key)
  if (_internal_has_sector_key()) {
    clear_has_key_type();
      ::mifare::plus::key_type::SectorKey* temp = key_type_.sector_key_;
    key_type_.sector_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::plus::key_type::SectorKey& KeyType::_internal_sector_key() const {
  return _internal_has_sector_key()
      ? *key_type_.sector_key_
      : *reinterpret_cast< ::mifare::plus::key_type::SectorKey*>(&::mifare::plus::key_type::_SectorKey_default_instance_);
}
inline const ::mifare::plus::key_type::SectorKey& KeyType::sector_key() const {
  // @@protoc_insertion_point(field_get:mifare.plus.key_type.KeyType.sector_key)
  return _internal_sector_key();
}
inline ::mifare::plus::key_type::SectorKey* KeyType::_internal_mutable_sector_key() {
  if (!_internal_has_sector_key()) {
    clear_key_type();
    set_has_sector_key();
    key_type_.sector_key_ = CreateMaybeMessage< ::mifare::plus::key_type::SectorKey >(
        GetArenaNoVirtual());
  }
  return key_type_.sector_key_;
}
inline ::mifare::plus::key_type::SectorKey* KeyType::mutable_sector_key() {
  // @@protoc_insertion_point(field_mutable:mifare.plus.key_type.KeyType.sector_key)
  return _internal_mutable_sector_key();
}

inline bool KeyType::has_key_type() const {
  return key_type_case() != KEY_TYPE_NOT_SET;
}
inline void KeyType::clear_has_key_type() {
  _oneof_case_[0] = KEY_TYPE_NOT_SET;
}
inline KeyType::KeyTypeCase KeyType::key_type_case() const {
  return KeyType::KeyTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace key_type
}  // namespace plus
}  // namespace mifare

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mifare::plus::key_type::SpecialKey> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mifare::plus::key_type::SpecialKey>() {
  return ::mifare::plus::key_type::SpecialKey_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mifare_2fplus_2fkey_5ftype_2eproto
