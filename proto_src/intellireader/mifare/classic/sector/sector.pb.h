// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mifare/classic/sector/sector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mifare_2fclassic_2fsector_2fsector_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mifare_2fclassic_2fsector_2fsector_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mifare/classic/auth.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fsector_2fsector_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mifare_2fclassic_2fsector_2fsector_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mifare_2fclassic_2fsector_2fsector_2eproto;
namespace mifare {
namespace classic {
namespace sector {
namespace sector {
class Sector;
class SectorDefaultTypeInternal;
extern SectorDefaultTypeInternal _Sector_default_instance_;
}  // namespace sector
}  // namespace sector
}  // namespace classic
}  // namespace mifare
PROTOBUF_NAMESPACE_OPEN
template<> ::mifare::classic::sector::sector::Sector* Arena::CreateMaybeMessage<::mifare::classic::sector::sector::Sector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mifare {
namespace classic {
namespace sector {
namespace sector {

// ===================================================================

class Sector :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mifare.classic.sector.sector.Sector) */ {
 public:
  Sector();
  virtual ~Sector();

  Sector(const Sector& from);
  Sector(Sector&& from) noexcept
    : Sector() {
    *this = ::std::move(from);
  }

  inline Sector& operator=(const Sector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sector& operator=(Sector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sector& default_instance();

  enum AuthenticationMethodCase {
    kClearKey = 1,
    kSamKey = 2,
    AUTHENTICATION_METHOD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sector* internal_default_instance() {
    return reinterpret_cast<const Sector*>(
               &_Sector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Sector& a, Sector& b) {
    a.Swap(&b);
  }
  inline void Swap(Sector* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sector* New() const final {
    return CreateMaybeMessage<Sector>(nullptr);
  }

  Sector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sector& from);
  void MergeFrom(const Sector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifare.classic.sector.sector.Sector";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mifare_2fclassic_2fsector_2fsector_2eproto);
    return ::descriptor_table_mifare_2fclassic_2fsector_2fsector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClearKeyFieldNumber = 1,
    kSamKeyFieldNumber = 2,
  };
  // optional .mifare.classic.auth.ClearKey clear_key = 1;
  bool has_clear_key() const;
  private:
  bool _internal_has_clear_key() const;
  public:
  void clear_clear_key();
  const ::mifare::classic::auth::ClearKey& clear_key() const;
  ::mifare::classic::auth::ClearKey* release_clear_key();
  ::mifare::classic::auth::ClearKey* mutable_clear_key();
  void set_allocated_clear_key(::mifare::classic::auth::ClearKey* clear_key);
  private:
  const ::mifare::classic::auth::ClearKey& _internal_clear_key() const;
  ::mifare::classic::auth::ClearKey* _internal_mutable_clear_key();
  public:

  // optional .mifare.classic.auth.SamKey sam_key = 2;
  bool has_sam_key() const;
  private:
  bool _internal_has_sam_key() const;
  public:
  void clear_sam_key();
  const ::mifare::classic::auth::SamKey& sam_key() const;
  ::mifare::classic::auth::SamKey* release_sam_key();
  ::mifare::classic::auth::SamKey* mutable_sam_key();
  void set_allocated_sam_key(::mifare::classic::auth::SamKey* sam_key);
  private:
  const ::mifare::classic::auth::SamKey& _internal_sam_key() const;
  ::mifare::classic::auth::SamKey* _internal_mutable_sam_key();
  public:

  void clear_authentication_method();
  AuthenticationMethodCase authentication_method_case() const;
  // @@protoc_insertion_point(class_scope:mifare.classic.sector.sector.Sector)
 private:
  class _Internal;
  void set_has_clear_key();
  void set_has_sam_key();

  inline bool has_authentication_method() const;
  inline void clear_has_authentication_method();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union AuthenticationMethodUnion {
    AuthenticationMethodUnion() {}
    ::mifare::classic::auth::ClearKey* clear_key_;
    ::mifare::classic::auth::SamKey* sam_key_;
  } authentication_method_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_mifare_2fclassic_2fsector_2fsector_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sector

// optional .mifare.classic.auth.ClearKey clear_key = 1;
inline bool Sector::_internal_has_clear_key() const {
  return authentication_method_case() == kClearKey;
}
inline bool Sector::has_clear_key() const {
  return _internal_has_clear_key();
}
inline void Sector::set_has_clear_key() {
  _oneof_case_[0] = kClearKey;
}
inline ::mifare::classic::auth::ClearKey* Sector::release_clear_key() {
  // @@protoc_insertion_point(field_release:mifare.classic.sector.sector.Sector.clear_key)
  if (_internal_has_clear_key()) {
    clear_has_authentication_method();
      ::mifare::classic::auth::ClearKey* temp = authentication_method_.clear_key_;
    authentication_method_.clear_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::classic::auth::ClearKey& Sector::_internal_clear_key() const {
  return _internal_has_clear_key()
      ? *authentication_method_.clear_key_
      : *reinterpret_cast< ::mifare::classic::auth::ClearKey*>(&::mifare::classic::auth::_ClearKey_default_instance_);
}
inline const ::mifare::classic::auth::ClearKey& Sector::clear_key() const {
  // @@protoc_insertion_point(field_get:mifare.classic.sector.sector.Sector.clear_key)
  return _internal_clear_key();
}
inline ::mifare::classic::auth::ClearKey* Sector::_internal_mutable_clear_key() {
  if (!_internal_has_clear_key()) {
    clear_authentication_method();
    set_has_clear_key();
    authentication_method_.clear_key_ = CreateMaybeMessage< ::mifare::classic::auth::ClearKey >(
        GetArenaNoVirtual());
  }
  return authentication_method_.clear_key_;
}
inline ::mifare::classic::auth::ClearKey* Sector::mutable_clear_key() {
  // @@protoc_insertion_point(field_mutable:mifare.classic.sector.sector.Sector.clear_key)
  return _internal_mutable_clear_key();
}

// optional .mifare.classic.auth.SamKey sam_key = 2;
inline bool Sector::_internal_has_sam_key() const {
  return authentication_method_case() == kSamKey;
}
inline bool Sector::has_sam_key() const {
  return _internal_has_sam_key();
}
inline void Sector::set_has_sam_key() {
  _oneof_case_[0] = kSamKey;
}
inline ::mifare::classic::auth::SamKey* Sector::release_sam_key() {
  // @@protoc_insertion_point(field_release:mifare.classic.sector.sector.Sector.sam_key)
  if (_internal_has_sam_key()) {
    clear_has_authentication_method();
      ::mifare::classic::auth::SamKey* temp = authentication_method_.sam_key_;
    authentication_method_.sam_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mifare::classic::auth::SamKey& Sector::_internal_sam_key() const {
  return _internal_has_sam_key()
      ? *authentication_method_.sam_key_
      : *reinterpret_cast< ::mifare::classic::auth::SamKey*>(&::mifare::classic::auth::_SamKey_default_instance_);
}
inline const ::mifare::classic::auth::SamKey& Sector::sam_key() const {
  // @@protoc_insertion_point(field_get:mifare.classic.sector.sector.Sector.sam_key)
  return _internal_sam_key();
}
inline ::mifare::classic::auth::SamKey* Sector::_internal_mutable_sam_key() {
  if (!_internal_has_sam_key()) {
    clear_authentication_method();
    set_has_sam_key();
    authentication_method_.sam_key_ = CreateMaybeMessage< ::mifare::classic::auth::SamKey >(
        GetArenaNoVirtual());
  }
  return authentication_method_.sam_key_;
}
inline ::mifare::classic::auth::SamKey* Sector::mutable_sam_key() {
  // @@protoc_insertion_point(field_mutable:mifare.classic.sector.sector.Sector.sam_key)
  return _internal_mutable_sam_key();
}

inline bool Sector::has_authentication_method() const {
  return authentication_method_case() != AUTHENTICATION_METHOD_NOT_SET;
}
inline void Sector::clear_has_authentication_method() {
  _oneof_case_[0] = AUTHENTICATION_METHOD_NOT_SET;
}
inline Sector::AuthenticationMethodCase Sector::authentication_method_case() const {
  return Sector::AuthenticationMethodCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sector
}  // namespace sector
}  // namespace classic
}  // namespace mifare

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mifare_2fclassic_2fsector_2fsector_2eproto
