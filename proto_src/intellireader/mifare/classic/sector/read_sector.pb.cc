// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mifare/classic/sector/read_sector.proto

#include "mifare/classic/sector/read_sector.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fread_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Blocks_mifare_2fclassic_2fread_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fsector_2fread_5fsector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SectorData_mifare_2fclassic_2fsector_2fread_5fsector_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fsector_2fsector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Sector_mifare_2fclassic_2fsector_2fsector_2eproto;
namespace mifare {
namespace classic {
namespace sector {
namespace read {
class ReadSectorsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadSectors> _instance;
} _ReadSectors_default_instance_;
class SectorsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SectorsData> _instance;
} _SectorsData_default_instance_;
class SectorDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SectorData> _instance;
} _SectorData_default_instance_;
}  // namespace read
}  // namespace sector
}  // namespace classic
}  // namespace mifare
static void InitDefaultsscc_info_ReadSectors_mifare_2fclassic_2fsector_2fread_5fsector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::classic::sector::read::_ReadSectors_default_instance_;
    new (ptr) ::mifare::classic::sector::read::ReadSectors();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::classic::sector::read::ReadSectors::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadSectors_mifare_2fclassic_2fsector_2fread_5fsector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadSectors_mifare_2fclassic_2fsector_2fread_5fsector_2eproto}, {
      &scc_info_Sector_mifare_2fclassic_2fsector_2fsector_2eproto.base,}};

static void InitDefaultsscc_info_SectorData_mifare_2fclassic_2fsector_2fread_5fsector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::classic::sector::read::_SectorData_default_instance_;
    new (ptr) ::mifare::classic::sector::read::SectorData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::classic::sector::read::SectorData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SectorData_mifare_2fclassic_2fsector_2fread_5fsector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SectorData_mifare_2fclassic_2fsector_2fread_5fsector_2eproto}, {
      &scc_info_Blocks_mifare_2fclassic_2fread_2eproto.base,}};

static void InitDefaultsscc_info_SectorsData_mifare_2fclassic_2fsector_2fread_5fsector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::classic::sector::read::_SectorsData_default_instance_;
    new (ptr) ::mifare::classic::sector::read::SectorsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::classic::sector::read::SectorsData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SectorsData_mifare_2fclassic_2fsector_2fread_5fsector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SectorsData_mifare_2fclassic_2fsector_2fread_5fsector_2eproto}, {
      &scc_info_SectorData_mifare_2fclassic_2fsector_2fread_5fsector_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mifare_2fclassic_2fsector_2fread_5fsector_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mifare_2fclassic_2fsector_2fread_5fsector_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mifare_2fclassic_2fsector_2fread_5fsector_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mifare_2fclassic_2fsector_2fread_5fsector_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mifare::classic::sector::read::ReadSectors, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::classic::sector::read::ReadSectors, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::classic::sector::read::ReadSectors, sectors_),
  PROTOBUF_FIELD_OFFSET(::mifare::classic::sector::read::ReadSectors, read_trailer_block_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mifare::classic::sector::read::SectorsData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::classic::sector::read::SectorsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::classic::sector::read::SectorsData, sectors_data_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mifare::classic::sector::read::SectorData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::classic::sector::read::SectorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::classic::sector::read::SectorData, sector_number_),
  PROTOBUF_FIELD_OFFSET(::mifare::classic::sector::read::SectorData, blocks_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::mifare::classic::sector::read::ReadSectors)},
  { 9, 15, sizeof(::mifare::classic::sector::read::SectorsData)},
  { 16, 23, sizeof(::mifare::classic::sector::read::SectorData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::classic::sector::read::_ReadSectors_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::classic::sector::read::_SectorsData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::classic::sector::read::_SectorData_default_instance_),
};

const char descriptor_table_protodef_mifare_2fclassic_2fsector_2fread_5fsector_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'mifare/classic/sector/read_sector.prot"
  "o\022\032mifare.classic.sector.read\032\"mifare/cl"
  "assic/sector/sector.proto\032\031mifare/classi"
  "c/read.proto\"g\n\013ReadSectors\0225\n\007sectors\030\001"
  " \003(\0132$.mifare.classic.sector.sector.Sect"
  "or\022!\n\022read_trailer_block\030\002 \001(\010:\005false\"K\n"
  "\013SectorsData\022<\n\014sectors_data\030\001 \003(\0132&.mif"
  "are.classic.sector.read.SectorData\"P\n\nSe"
  "ctorData\022\025\n\rsector_number\030\001 \002(\r\022+\n\006block"
  "s\030\002 \002(\0132\033.mifare.classic.read.Blocks"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto_deps[2] = {
  &::descriptor_table_mifare_2fclassic_2fread_2eproto,
  &::descriptor_table_mifare_2fclassic_2fsector_2fsector_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto_sccs[3] = {
  &scc_info_ReadSectors_mifare_2fclassic_2fsector_2fread_5fsector_2eproto.base,
  &scc_info_SectorData_mifare_2fclassic_2fsector_2fread_5fsector_2eproto.base,
  &scc_info_SectorsData_mifare_2fclassic_2fsector_2fread_5fsector_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto_once;
static bool descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto = {
  &descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto_initialized, descriptor_table_protodef_mifare_2fclassic_2fsector_2fread_5fsector_2eproto, "mifare/classic/sector/read_sector.proto", 396,
  &descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto_once, descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto_sccs, descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_mifare_2fclassic_2fsector_2fread_5fsector_2eproto::offsets,
  file_level_metadata_mifare_2fclassic_2fsector_2fread_5fsector_2eproto, 3, file_level_enum_descriptors_mifare_2fclassic_2fsector_2fread_5fsector_2eproto, file_level_service_descriptors_mifare_2fclassic_2fsector_2fread_5fsector_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mifare_2fclassic_2fsector_2fread_5fsector_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto), true);
namespace mifare {
namespace classic {
namespace sector {
namespace read {

// ===================================================================

void ReadSectors::InitAsDefaultInstance() {
}
class ReadSectors::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadSectors>()._has_bits_);
  static void set_has_read_trailer_block(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void ReadSectors::clear_sectors() {
  sectors_.Clear();
}
ReadSectors::ReadSectors()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.classic.sector.read.ReadSectors)
}
ReadSectors::ReadSectors(const ReadSectors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sectors_(from.sectors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  read_trailer_block_ = from.read_trailer_block_;
  // @@protoc_insertion_point(copy_constructor:mifare.classic.sector.read.ReadSectors)
}

void ReadSectors::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadSectors_mifare_2fclassic_2fsector_2fread_5fsector_2eproto.base);
  read_trailer_block_ = false;
}

ReadSectors::~ReadSectors() {
  // @@protoc_insertion_point(destructor:mifare.classic.sector.read.ReadSectors)
  SharedDtor();
}

void ReadSectors::SharedDtor() {
}

void ReadSectors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadSectors& ReadSectors::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadSectors_mifare_2fclassic_2fsector_2fread_5fsector_2eproto.base);
  return *internal_default_instance();
}


void ReadSectors::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.classic.sector.read.ReadSectors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sectors_.Clear();
  read_trailer_block_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReadSectors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mifare.classic.sector.sector.Sector sectors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool read_trailer_block = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_read_trailer_block(&has_bits);
          read_trailer_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadSectors::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.classic.sector.read.ReadSectors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mifare.classic.sector.sector.Sector sectors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sectors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sectors(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool read_trailer_block = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_read_trailer_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.classic.sector.read.ReadSectors)
  return target;
}

size_t ReadSectors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.classic.sector.read.ReadSectors)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mifare.classic.sector.sector.Sector sectors = 1;
  total_size += 1UL * this->_internal_sectors_size();
  for (const auto& msg : this->sectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool read_trailer_block = 2 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadSectors::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.classic.sector.read.ReadSectors)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadSectors* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadSectors>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.classic.sector.read.ReadSectors)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.classic.sector.read.ReadSectors)
    MergeFrom(*source);
  }
}

void ReadSectors::MergeFrom(const ReadSectors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.classic.sector.read.ReadSectors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sectors_.MergeFrom(from.sectors_);
  if (from._internal_has_read_trailer_block()) {
    _internal_set_read_trailer_block(from._internal_read_trailer_block());
  }
}

void ReadSectors::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.classic.sector.read.ReadSectors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadSectors::CopyFrom(const ReadSectors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.classic.sector.read.ReadSectors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadSectors::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sectors_)) return false;
  return true;
}

void ReadSectors::InternalSwap(ReadSectors* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sectors_.InternalSwap(&other->sectors_);
  swap(read_trailer_block_, other->read_trailer_block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadSectors::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SectorsData::InitAsDefaultInstance() {
}
class SectorsData::_Internal {
 public:
  using HasBits = decltype(std::declval<SectorsData>()._has_bits_);
};

SectorsData::SectorsData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.classic.sector.read.SectorsData)
}
SectorsData::SectorsData(const SectorsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sectors_data_(from.sectors_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mifare.classic.sector.read.SectorsData)
}

void SectorsData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SectorsData_mifare_2fclassic_2fsector_2fread_5fsector_2eproto.base);
}

SectorsData::~SectorsData() {
  // @@protoc_insertion_point(destructor:mifare.classic.sector.read.SectorsData)
  SharedDtor();
}

void SectorsData::SharedDtor() {
}

void SectorsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SectorsData& SectorsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SectorsData_mifare_2fclassic_2fsector_2fread_5fsector_2eproto.base);
  return *internal_default_instance();
}


void SectorsData::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.classic.sector.read.SectorsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sectors_data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SectorsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mifare.classic.sector.read.SectorData sectors_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sectors_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SectorsData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.classic.sector.read.SectorsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mifare.classic.sector.read.SectorData sectors_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sectors_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sectors_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.classic.sector.read.SectorsData)
  return target;
}

size_t SectorsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.classic.sector.read.SectorsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mifare.classic.sector.read.SectorData sectors_data = 1;
  total_size += 1UL * this->_internal_sectors_data_size();
  for (const auto& msg : this->sectors_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SectorsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.classic.sector.read.SectorsData)
  GOOGLE_DCHECK_NE(&from, this);
  const SectorsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SectorsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.classic.sector.read.SectorsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.classic.sector.read.SectorsData)
    MergeFrom(*source);
  }
}

void SectorsData::MergeFrom(const SectorsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.classic.sector.read.SectorsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sectors_data_.MergeFrom(from.sectors_data_);
}

void SectorsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.classic.sector.read.SectorsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectorsData::CopyFrom(const SectorsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.classic.sector.read.SectorsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectorsData::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(sectors_data_)) return false;
  return true;
}

void SectorsData::InternalSwap(SectorsData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sectors_data_.InternalSwap(&other->sectors_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SectorsData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SectorData::InitAsDefaultInstance() {
  ::mifare::classic::sector::read::_SectorData_default_instance_._instance.get_mutable()->blocks_ = const_cast< ::mifare::classic::read::Blocks*>(
      ::mifare::classic::read::Blocks::internal_default_instance());
}
class SectorData::_Internal {
 public:
  using HasBits = decltype(std::declval<SectorData>()._has_bits_);
  static void set_has_sector_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mifare::classic::read::Blocks& blocks(const SectorData* msg);
  static void set_has_blocks(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mifare::classic::read::Blocks&
SectorData::_Internal::blocks(const SectorData* msg) {
  return *msg->blocks_;
}
void SectorData::clear_blocks() {
  if (blocks_ != nullptr) blocks_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SectorData::SectorData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.classic.sector.read.SectorData)
}
SectorData::SectorData(const SectorData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_blocks()) {
    blocks_ = new ::mifare::classic::read::Blocks(*from.blocks_);
  } else {
    blocks_ = nullptr;
  }
  sector_number_ = from.sector_number_;
  // @@protoc_insertion_point(copy_constructor:mifare.classic.sector.read.SectorData)
}

void SectorData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SectorData_mifare_2fclassic_2fsector_2fread_5fsector_2eproto.base);
  ::memset(&blocks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sector_number_) -
      reinterpret_cast<char*>(&blocks_)) + sizeof(sector_number_));
}

SectorData::~SectorData() {
  // @@protoc_insertion_point(destructor:mifare.classic.sector.read.SectorData)
  SharedDtor();
}

void SectorData::SharedDtor() {
  if (this != internal_default_instance()) delete blocks_;
}

void SectorData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SectorData& SectorData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SectorData_mifare_2fclassic_2fsector_2fread_5fsector_2eproto.base);
  return *internal_default_instance();
}


void SectorData::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.classic.sector.read.SectorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(blocks_ != nullptr);
    blocks_->Clear();
  }
  sector_number_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SectorData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 sector_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sector_number(&has_bits);
          sector_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .mifare.classic.read.Blocks blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_blocks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SectorData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.classic.sector.read.SectorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 sector_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sector_number(), target);
  }

  // required .mifare.classic.read.Blocks blocks = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::blocks(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.classic.sector.read.SectorData)
  return target;
}

size_t SectorData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mifare.classic.sector.read.SectorData)
  size_t total_size = 0;

  if (_internal_has_blocks()) {
    // required .mifare.classic.read.Blocks blocks = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blocks_);
  }

  if (_internal_has_sector_number()) {
    // required uint32 sector_number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sector_number());
  }

  return total_size;
}
size_t SectorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.classic.sector.read.SectorData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .mifare.classic.read.Blocks blocks = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blocks_);

    // required uint32 sector_number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sector_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SectorData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.classic.sector.read.SectorData)
  GOOGLE_DCHECK_NE(&from, this);
  const SectorData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SectorData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.classic.sector.read.SectorData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.classic.sector.read.SectorData)
    MergeFrom(*source);
  }
}

void SectorData::MergeFrom(const SectorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.classic.sector.read.SectorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_blocks()->::mifare::classic::read::Blocks::MergeFrom(from._internal_blocks());
    }
    if (cached_has_bits & 0x00000002u) {
      sector_number_ = from.sector_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SectorData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.classic.sector.read.SectorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectorData::CopyFrom(const SectorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.classic.sector.read.SectorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectorData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_blocks()) {
    if (!blocks_->IsInitialized()) return false;
  }
  return true;
}

void SectorData::InternalSwap(SectorData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(blocks_, other->blocks_);
  swap(sector_number_, other->sector_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SectorData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace read
}  // namespace sector
}  // namespace classic
}  // namespace mifare
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mifare::classic::sector::read::ReadSectors* Arena::CreateMaybeMessage< ::mifare::classic::sector::read::ReadSectors >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::classic::sector::read::ReadSectors >(arena);
}
template<> PROTOBUF_NOINLINE ::mifare::classic::sector::read::SectorsData* Arena::CreateMaybeMessage< ::mifare::classic::sector::read::SectorsData >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::classic::sector::read::SectorsData >(arena);
}
template<> PROTOBUF_NOINLINE ::mifare::classic::sector::read::SectorData* Arena::CreateMaybeMessage< ::mifare::classic::sector::read::SectorData >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::classic::sector::read::SectorData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
