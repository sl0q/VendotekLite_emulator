// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mifare/classic/sector/read_sector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mifare_2fclassic_2fsector_2fread_5fsector_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mifare_2fclassic_2fsector_2fread_5fsector_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mifare/classic/sector/sector.pb.h"
#include "mifare/classic/read.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fsector_2fread_5fsector_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mifare_2fclassic_2fsector_2fread_5fsector_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto;
namespace mifare {
namespace classic {
namespace sector {
namespace read {
class ReadSectors;
class ReadSectorsDefaultTypeInternal;
extern ReadSectorsDefaultTypeInternal _ReadSectors_default_instance_;
class SectorData;
class SectorDataDefaultTypeInternal;
extern SectorDataDefaultTypeInternal _SectorData_default_instance_;
class SectorsData;
class SectorsDataDefaultTypeInternal;
extern SectorsDataDefaultTypeInternal _SectorsData_default_instance_;
}  // namespace read
}  // namespace sector
}  // namespace classic
}  // namespace mifare
PROTOBUF_NAMESPACE_OPEN
template<> ::mifare::classic::sector::read::ReadSectors* Arena::CreateMaybeMessage<::mifare::classic::sector::read::ReadSectors>(Arena*);
template<> ::mifare::classic::sector::read::SectorData* Arena::CreateMaybeMessage<::mifare::classic::sector::read::SectorData>(Arena*);
template<> ::mifare::classic::sector::read::SectorsData* Arena::CreateMaybeMessage<::mifare::classic::sector::read::SectorsData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mifare {
namespace classic {
namespace sector {
namespace read {

// ===================================================================

class ReadSectors :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mifare.classic.sector.read.ReadSectors) */ {
 public:
  ReadSectors();
  virtual ~ReadSectors();

  ReadSectors(const ReadSectors& from);
  ReadSectors(ReadSectors&& from) noexcept
    : ReadSectors() {
    *this = ::std::move(from);
  }

  inline ReadSectors& operator=(const ReadSectors& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadSectors& operator=(ReadSectors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadSectors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadSectors* internal_default_instance() {
    return reinterpret_cast<const ReadSectors*>(
               &_ReadSectors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReadSectors& a, ReadSectors& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadSectors* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadSectors* New() const final {
    return CreateMaybeMessage<ReadSectors>(nullptr);
  }

  ReadSectors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadSectors>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadSectors& from);
  void MergeFrom(const ReadSectors& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadSectors* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifare.classic.sector.read.ReadSectors";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto);
    return ::descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectorsFieldNumber = 1,
    kReadTrailerBlockFieldNumber = 2,
  };
  // repeated .mifare.classic.sector.sector.Sector sectors = 1;
  int sectors_size() const;
  private:
  int _internal_sectors_size() const;
  public:
  void clear_sectors();
  ::mifare::classic::sector::sector::Sector* mutable_sectors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifare::classic::sector::sector::Sector >*
      mutable_sectors();
  private:
  const ::mifare::classic::sector::sector::Sector& _internal_sectors(int index) const;
  ::mifare::classic::sector::sector::Sector* _internal_add_sectors();
  public:
  const ::mifare::classic::sector::sector::Sector& sectors(int index) const;
  ::mifare::classic::sector::sector::Sector* add_sectors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifare::classic::sector::sector::Sector >&
      sectors() const;

  // optional bool read_trailer_block = 2 [default = false];
  bool has_read_trailer_block() const;
  private:
  bool _internal_has_read_trailer_block() const;
  public:
  void clear_read_trailer_block();
  bool read_trailer_block() const;
  void set_read_trailer_block(bool value);
  private:
  bool _internal_read_trailer_block() const;
  void _internal_set_read_trailer_block(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mifare.classic.sector.read.ReadSectors)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifare::classic::sector::sector::Sector > sectors_;
  bool read_trailer_block_;
  friend struct ::TableStruct_mifare_2fclassic_2fsector_2fread_5fsector_2eproto;
};
// -------------------------------------------------------------------

class SectorsData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mifare.classic.sector.read.SectorsData) */ {
 public:
  SectorsData();
  virtual ~SectorsData();

  SectorsData(const SectorsData& from);
  SectorsData(SectorsData&& from) noexcept
    : SectorsData() {
    *this = ::std::move(from);
  }

  inline SectorsData& operator=(const SectorsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectorsData& operator=(SectorsData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SectorsData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SectorsData* internal_default_instance() {
    return reinterpret_cast<const SectorsData*>(
               &_SectorsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SectorsData& a, SectorsData& b) {
    a.Swap(&b);
  }
  inline void Swap(SectorsData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SectorsData* New() const final {
    return CreateMaybeMessage<SectorsData>(nullptr);
  }

  SectorsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SectorsData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SectorsData& from);
  void MergeFrom(const SectorsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectorsData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifare.classic.sector.read.SectorsData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto);
    return ::descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectorsDataFieldNumber = 1,
  };
  // repeated .mifare.classic.sector.read.SectorData sectors_data = 1;
  int sectors_data_size() const;
  private:
  int _internal_sectors_data_size() const;
  public:
  void clear_sectors_data();
  ::mifare::classic::sector::read::SectorData* mutable_sectors_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifare::classic::sector::read::SectorData >*
      mutable_sectors_data();
  private:
  const ::mifare::classic::sector::read::SectorData& _internal_sectors_data(int index) const;
  ::mifare::classic::sector::read::SectorData* _internal_add_sectors_data();
  public:
  const ::mifare::classic::sector::read::SectorData& sectors_data(int index) const;
  ::mifare::classic::sector::read::SectorData* add_sectors_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifare::classic::sector::read::SectorData >&
      sectors_data() const;

  // @@protoc_insertion_point(class_scope:mifare.classic.sector.read.SectorsData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifare::classic::sector::read::SectorData > sectors_data_;
  friend struct ::TableStruct_mifare_2fclassic_2fsector_2fread_5fsector_2eproto;
};
// -------------------------------------------------------------------

class SectorData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mifare.classic.sector.read.SectorData) */ {
 public:
  SectorData();
  virtual ~SectorData();

  SectorData(const SectorData& from);
  SectorData(SectorData&& from) noexcept
    : SectorData() {
    *this = ::std::move(from);
  }

  inline SectorData& operator=(const SectorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectorData& operator=(SectorData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SectorData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SectorData* internal_default_instance() {
    return reinterpret_cast<const SectorData*>(
               &_SectorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SectorData& a, SectorData& b) {
    a.Swap(&b);
  }
  inline void Swap(SectorData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SectorData* New() const final {
    return CreateMaybeMessage<SectorData>(nullptr);
  }

  SectorData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SectorData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SectorData& from);
  void MergeFrom(const SectorData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectorData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifare.classic.sector.read.SectorData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto);
    return ::descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 2,
    kSectorNumberFieldNumber = 1,
  };
  // required .mifare.classic.read.Blocks blocks = 2;
  bool has_blocks() const;
  private:
  bool _internal_has_blocks() const;
  public:
  void clear_blocks();
  const ::mifare::classic::read::Blocks& blocks() const;
  ::mifare::classic::read::Blocks* release_blocks();
  ::mifare::classic::read::Blocks* mutable_blocks();
  void set_allocated_blocks(::mifare::classic::read::Blocks* blocks);
  private:
  const ::mifare::classic::read::Blocks& _internal_blocks() const;
  ::mifare::classic::read::Blocks* _internal_mutable_blocks();
  public:

  // required uint32 sector_number = 1;
  bool has_sector_number() const;
  private:
  bool _internal_has_sector_number() const;
  public:
  void clear_sector_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sector_number() const;
  void set_sector_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sector_number() const;
  void _internal_set_sector_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mifare.classic.sector.read.SectorData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mifare::classic::read::Blocks* blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sector_number_;
  friend struct ::TableStruct_mifare_2fclassic_2fsector_2fread_5fsector_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReadSectors

// repeated .mifare.classic.sector.sector.Sector sectors = 1;
inline int ReadSectors::_internal_sectors_size() const {
  return sectors_.size();
}
inline int ReadSectors::sectors_size() const {
  return _internal_sectors_size();
}
inline ::mifare::classic::sector::sector::Sector* ReadSectors::mutable_sectors(int index) {
  // @@protoc_insertion_point(field_mutable:mifare.classic.sector.read.ReadSectors.sectors)
  return sectors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifare::classic::sector::sector::Sector >*
ReadSectors::mutable_sectors() {
  // @@protoc_insertion_point(field_mutable_list:mifare.classic.sector.read.ReadSectors.sectors)
  return &sectors_;
}
inline const ::mifare::classic::sector::sector::Sector& ReadSectors::_internal_sectors(int index) const {
  return sectors_.Get(index);
}
inline const ::mifare::classic::sector::sector::Sector& ReadSectors::sectors(int index) const {
  // @@protoc_insertion_point(field_get:mifare.classic.sector.read.ReadSectors.sectors)
  return _internal_sectors(index);
}
inline ::mifare::classic::sector::sector::Sector* ReadSectors::_internal_add_sectors() {
  return sectors_.Add();
}
inline ::mifare::classic::sector::sector::Sector* ReadSectors::add_sectors() {
  // @@protoc_insertion_point(field_add:mifare.classic.sector.read.ReadSectors.sectors)
  return _internal_add_sectors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifare::classic::sector::sector::Sector >&
ReadSectors::sectors() const {
  // @@protoc_insertion_point(field_list:mifare.classic.sector.read.ReadSectors.sectors)
  return sectors_;
}

// optional bool read_trailer_block = 2 [default = false];
inline bool ReadSectors::_internal_has_read_trailer_block() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReadSectors::has_read_trailer_block() const {
  return _internal_has_read_trailer_block();
}
inline void ReadSectors::clear_read_trailer_block() {
  read_trailer_block_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ReadSectors::_internal_read_trailer_block() const {
  return read_trailer_block_;
}
inline bool ReadSectors::read_trailer_block() const {
  // @@protoc_insertion_point(field_get:mifare.classic.sector.read.ReadSectors.read_trailer_block)
  return _internal_read_trailer_block();
}
inline void ReadSectors::_internal_set_read_trailer_block(bool value) {
  _has_bits_[0] |= 0x00000001u;
  read_trailer_block_ = value;
}
inline void ReadSectors::set_read_trailer_block(bool value) {
  _internal_set_read_trailer_block(value);
  // @@protoc_insertion_point(field_set:mifare.classic.sector.read.ReadSectors.read_trailer_block)
}

// -------------------------------------------------------------------

// SectorsData

// repeated .mifare.classic.sector.read.SectorData sectors_data = 1;
inline int SectorsData::_internal_sectors_data_size() const {
  return sectors_data_.size();
}
inline int SectorsData::sectors_data_size() const {
  return _internal_sectors_data_size();
}
inline void SectorsData::clear_sectors_data() {
  sectors_data_.Clear();
}
inline ::mifare::classic::sector::read::SectorData* SectorsData::mutable_sectors_data(int index) {
  // @@protoc_insertion_point(field_mutable:mifare.classic.sector.read.SectorsData.sectors_data)
  return sectors_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifare::classic::sector::read::SectorData >*
SectorsData::mutable_sectors_data() {
  // @@protoc_insertion_point(field_mutable_list:mifare.classic.sector.read.SectorsData.sectors_data)
  return &sectors_data_;
}
inline const ::mifare::classic::sector::read::SectorData& SectorsData::_internal_sectors_data(int index) const {
  return sectors_data_.Get(index);
}
inline const ::mifare::classic::sector::read::SectorData& SectorsData::sectors_data(int index) const {
  // @@protoc_insertion_point(field_get:mifare.classic.sector.read.SectorsData.sectors_data)
  return _internal_sectors_data(index);
}
inline ::mifare::classic::sector::read::SectorData* SectorsData::_internal_add_sectors_data() {
  return sectors_data_.Add();
}
inline ::mifare::classic::sector::read::SectorData* SectorsData::add_sectors_data() {
  // @@protoc_insertion_point(field_add:mifare.classic.sector.read.SectorsData.sectors_data)
  return _internal_add_sectors_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mifare::classic::sector::read::SectorData >&
SectorsData::sectors_data() const {
  // @@protoc_insertion_point(field_list:mifare.classic.sector.read.SectorsData.sectors_data)
  return sectors_data_;
}

// -------------------------------------------------------------------

// SectorData

// required uint32 sector_number = 1;
inline bool SectorData::_internal_has_sector_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SectorData::has_sector_number() const {
  return _internal_has_sector_number();
}
inline void SectorData::clear_sector_number() {
  sector_number_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectorData::_internal_sector_number() const {
  return sector_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SectorData::sector_number() const {
  // @@protoc_insertion_point(field_get:mifare.classic.sector.read.SectorData.sector_number)
  return _internal_sector_number();
}
inline void SectorData::_internal_set_sector_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  sector_number_ = value;
}
inline void SectorData::set_sector_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sector_number(value);
  // @@protoc_insertion_point(field_set:mifare.classic.sector.read.SectorData.sector_number)
}

// required .mifare.classic.read.Blocks blocks = 2;
inline bool SectorData::_internal_has_blocks() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || blocks_ != nullptr);
  return value;
}
inline bool SectorData::has_blocks() const {
  return _internal_has_blocks();
}
inline const ::mifare::classic::read::Blocks& SectorData::_internal_blocks() const {
  const ::mifare::classic::read::Blocks* p = blocks_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mifare::classic::read::Blocks*>(
      &::mifare::classic::read::_Blocks_default_instance_);
}
inline const ::mifare::classic::read::Blocks& SectorData::blocks() const {
  // @@protoc_insertion_point(field_get:mifare.classic.sector.read.SectorData.blocks)
  return _internal_blocks();
}
inline ::mifare::classic::read::Blocks* SectorData::release_blocks() {
  // @@protoc_insertion_point(field_release:mifare.classic.sector.read.SectorData.blocks)
  _has_bits_[0] &= ~0x00000001u;
  ::mifare::classic::read::Blocks* temp = blocks_;
  blocks_ = nullptr;
  return temp;
}
inline ::mifare::classic::read::Blocks* SectorData::_internal_mutable_blocks() {
  _has_bits_[0] |= 0x00000001u;
  if (blocks_ == nullptr) {
    auto* p = CreateMaybeMessage<::mifare::classic::read::Blocks>(GetArenaNoVirtual());
    blocks_ = p;
  }
  return blocks_;
}
inline ::mifare::classic::read::Blocks* SectorData::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable:mifare.classic.sector.read.SectorData.blocks)
  return _internal_mutable_blocks();
}
inline void SectorData::set_allocated_blocks(::mifare::classic::read::Blocks* blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(blocks_);
  }
  if (blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blocks, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  blocks_ = blocks;
  // @@protoc_insertion_point(field_set_allocated:mifare.classic.sector.read.SectorData.blocks)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace read
}  // namespace sector
}  // namespace classic
}  // namespace mifare

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mifare_2fclassic_2fsector_2fread_5fsector_2eproto
