// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mifare/classic/bulk.proto

#include "mifare/classic/bulk.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearKey_mifare_2fclassic_2fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SamKey_mifare_2fclassic_2fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fbulk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Command_mifare_2fclassic_2fbulk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fbulk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommandResult_mifare_2fclassic_2fbulk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fcounter_2fcommit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommitCounter_mifare_2fclassic_2fcounter_2fcommit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fcounter_2fcopy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CopyCounter_mifare_2fclassic_2fcounter_2fcopy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fcounter_2fget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Counter_mifare_2fclassic_2fcounter_2fget_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fcounter_2fget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCounter_mifare_2fclassic_2fcounter_2fget_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fcounter_2fmodify_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModifyCounter_mifare_2fclassic_2fcounter_2fmodify_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fcounter_2fset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetCounter_mifare_2fclassic_2fcounter_2fset_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fread_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Blocks_mifare_2fclassic_2fread_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fread_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadBlocks_mifare_2fclassic_2fread_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fwrite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteBlocks_mifare_2fclassic_2fwrite_2eproto;
namespace mifare {
namespace classic {
namespace bulk {
class CommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Command> _instance;
  const ::mifare::classic::auth::ClearKey* auth_on_clear_key_;
  const ::mifare::classic::auth::SamKey* auth_on_sam_key_;
  const ::mifare::classic::read::ReadBlocks* read_blocks_;
  const ::mifare::classic::write::WriteBlocks* write_blocks_;
  const ::mifare::classic::counter::get::GetCounter* get_counter_;
  const ::mifare::classic::counter::set::SetCounter* set_counter_;
  const ::mifare::classic::counter::modify::ModifyCounter* modify_counter_;
  const ::mifare::classic::counter::copy::CopyCounter* copy_counter_;
  const ::mifare::classic::counter::commit::CommitCounter* commit_counter_;
} _Command_default_instance_;
class CommandResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandResult> _instance;
  const ::mifare::classic::read::Blocks* read_blocks_;
  const ::mifare::classic::counter::get::Counter* get_counter_;
} _CommandResult_default_instance_;
class BulkOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkOperation> _instance;
} _BulkOperation_default_instance_;
class BulkResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkResult> _instance;
} _BulkResult_default_instance_;
}  // namespace bulk
}  // namespace classic
}  // namespace mifare
static void InitDefaultsscc_info_BulkOperation_mifare_2fclassic_2fbulk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::classic::bulk::_BulkOperation_default_instance_;
    new (ptr) ::mifare::classic::bulk::BulkOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::classic::bulk::BulkOperation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BulkOperation_mifare_2fclassic_2fbulk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BulkOperation_mifare_2fclassic_2fbulk_2eproto}, {
      &scc_info_Command_mifare_2fclassic_2fbulk_2eproto.base,}};

static void InitDefaultsscc_info_BulkResult_mifare_2fclassic_2fbulk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::classic::bulk::_BulkResult_default_instance_;
    new (ptr) ::mifare::classic::bulk::BulkResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::classic::bulk::BulkResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BulkResult_mifare_2fclassic_2fbulk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BulkResult_mifare_2fclassic_2fbulk_2eproto}, {
      &scc_info_CommandResult_mifare_2fclassic_2fbulk_2eproto.base,}};

static void InitDefaultsscc_info_Command_mifare_2fclassic_2fbulk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::classic::bulk::_Command_default_instance_;
    new (ptr) ::mifare::classic::bulk::Command();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::classic::bulk::Command::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Command_mifare_2fclassic_2fbulk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_Command_mifare_2fclassic_2fbulk_2eproto}, {
      &scc_info_ClearKey_mifare_2fclassic_2fauth_2eproto.base,
      &scc_info_SamKey_mifare_2fclassic_2fauth_2eproto.base,
      &scc_info_ReadBlocks_mifare_2fclassic_2fread_2eproto.base,
      &scc_info_WriteBlocks_mifare_2fclassic_2fwrite_2eproto.base,
      &scc_info_GetCounter_mifare_2fclassic_2fcounter_2fget_2eproto.base,
      &scc_info_SetCounter_mifare_2fclassic_2fcounter_2fset_2eproto.base,
      &scc_info_ModifyCounter_mifare_2fclassic_2fcounter_2fmodify_2eproto.base,
      &scc_info_CopyCounter_mifare_2fclassic_2fcounter_2fcopy_2eproto.base,
      &scc_info_CommitCounter_mifare_2fclassic_2fcounter_2fcommit_2eproto.base,}};

static void InitDefaultsscc_info_CommandResult_mifare_2fclassic_2fbulk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::classic::bulk::_CommandResult_default_instance_;
    new (ptr) ::mifare::classic::bulk::CommandResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::classic::bulk::CommandResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommandResult_mifare_2fclassic_2fbulk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CommandResult_mifare_2fclassic_2fbulk_2eproto}, {
      &scc_info_Blocks_mifare_2fclassic_2fread_2eproto.base,
      &scc_info_Counter_mifare_2fclassic_2fcounter_2fget_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mifare_2fclassic_2fbulk_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mifare_2fclassic_2fbulk_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mifare_2fclassic_2fbulk_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mifare_2fclassic_2fbulk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mifare::classic::bulk::Command, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::classic::bulk::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mifare::classic::bulk::Command, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::mifare::classic::bulk::CommandDefaultTypeInternal, auth_on_clear_key_),
  offsetof(::mifare::classic::bulk::CommandDefaultTypeInternal, auth_on_sam_key_),
  offsetof(::mifare::classic::bulk::CommandDefaultTypeInternal, read_blocks_),
  offsetof(::mifare::classic::bulk::CommandDefaultTypeInternal, write_blocks_),
  offsetof(::mifare::classic::bulk::CommandDefaultTypeInternal, get_counter_),
  offsetof(::mifare::classic::bulk::CommandDefaultTypeInternal, set_counter_),
  offsetof(::mifare::classic::bulk::CommandDefaultTypeInternal, modify_counter_),
  offsetof(::mifare::classic::bulk::CommandDefaultTypeInternal, copy_counter_),
  offsetof(::mifare::classic::bulk::CommandDefaultTypeInternal, commit_counter_),
  PROTOBUF_FIELD_OFFSET(::mifare::classic::bulk::Command, MfrCmd_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mifare::classic::bulk::CommandResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::classic::bulk::CommandResult, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mifare::classic::bulk::CommandResult, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::mifare::classic::bulk::CommandResultDefaultTypeInternal, read_blocks_),
  offsetof(::mifare::classic::bulk::CommandResultDefaultTypeInternal, get_counter_),
  PROTOBUF_FIELD_OFFSET(::mifare::classic::bulk::CommandResult, MfrResult_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mifare::classic::bulk::BulkOperation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::classic::bulk::BulkOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::classic::bulk::BulkOperation, operations_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mifare::classic::bulk::BulkResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::classic::bulk::BulkResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::classic::bulk::BulkResult, results_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::mifare::classic::bulk::Command)},
  { 24, 32, sizeof(::mifare::classic::bulk::CommandResult)},
  { 34, 40, sizeof(::mifare::classic::bulk::BulkOperation)},
  { 41, 47, sizeof(::mifare::classic::bulk::BulkResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::classic::bulk::_Command_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::classic::bulk::_CommandResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::classic::bulk::_BulkOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::classic::bulk::_BulkResult_default_instance_),
};

const char descriptor_table_protodef_mifare_2fclassic_2fbulk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031mifare/classic/bulk.proto\022\023mifare.clas"
  "sic.bulk\032\031mifare/classic/auth.proto\032\031mif"
  "are/classic/read.proto\032\032mifare/classic/w"
  "rite.proto\032#mifare/classic/counter/commi"
  "t.proto\032!mifare/classic/counter/copy.pro"
  "to\032 mifare/classic/counter/get.proto\032#mi"
  "fare/classic/counter/modify.proto\032 mifar"
  "e/classic/counter/set.proto\"\312\004\n\007Command\022"
  ":\n\021auth_on_clear_key\030\001 \001(\0132\035.mifare.clas"
  "sic.auth.ClearKeyH\000\0226\n\017auth_on_sam_key\030\002"
  " \001(\0132\033.mifare.classic.auth.SamKeyH\000\0226\n\013r"
  "ead_blocks\030\003 \001(\0132\037.mifare.classic.read.R"
  "eadBlocksH\000\0229\n\014write_blocks\030\004 \001(\0132!.mifa"
  "re.classic.write.WriteBlocksH\000\022=\n\013get_co"
  "unter\030\005 \001(\0132&.mifare.classic.counter.get"
  ".GetCounterH\000\022=\n\013set_counter\030\006 \001(\0132&.mif"
  "are.classic.counter.set.SetCounterH\000\022F\n\016"
  "modify_counter\030\007 \001(\0132,.mifare.classic.co"
  "unter.modify.ModifyCounterH\000\022@\n\014copy_cou"
  "nter\030\010 \001(\0132(.mifare.classic.counter.copy"
  ".CopyCounterH\000\022F\n\016commit_counter\030\t \001(\0132,"
  ".mifare.classic.counter.commit.CommitCou"
  "nterH\000B\010\n\006MfrCmd\"\214\001\n\rCommandResult\0222\n\013re"
  "ad_blocks\030\001 \001(\0132\033.mifare.classic.read.Bl"
  "ocksH\000\022:\n\013get_counter\030\002 \001(\0132#.mifare.cla"
  "ssic.counter.get.CounterH\000B\013\n\tMfrResult\""
  "A\n\rBulkOperation\0220\n\noperations\030\001 \003(\0132\034.m"
  "ifare.classic.bulk.Command\"A\n\nBulkResult"
  "\0223\n\007results\030\001 \003(\0132\".mifare.classic.bulk."
  "CommandResult"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mifare_2fclassic_2fbulk_2eproto_deps[8] = {
  &::descriptor_table_mifare_2fclassic_2fauth_2eproto,
  &::descriptor_table_mifare_2fclassic_2fcounter_2fcommit_2eproto,
  &::descriptor_table_mifare_2fclassic_2fcounter_2fcopy_2eproto,
  &::descriptor_table_mifare_2fclassic_2fcounter_2fget_2eproto,
  &::descriptor_table_mifare_2fclassic_2fcounter_2fmodify_2eproto,
  &::descriptor_table_mifare_2fclassic_2fcounter_2fset_2eproto,
  &::descriptor_table_mifare_2fclassic_2fread_2eproto,
  &::descriptor_table_mifare_2fclassic_2fwrite_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mifare_2fclassic_2fbulk_2eproto_sccs[4] = {
  &scc_info_BulkOperation_mifare_2fclassic_2fbulk_2eproto.base,
  &scc_info_BulkResult_mifare_2fclassic_2fbulk_2eproto.base,
  &scc_info_Command_mifare_2fclassic_2fbulk_2eproto.base,
  &scc_info_CommandResult_mifare_2fclassic_2fbulk_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mifare_2fclassic_2fbulk_2eproto_once;
static bool descriptor_table_mifare_2fclassic_2fbulk_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mifare_2fclassic_2fbulk_2eproto = {
  &descriptor_table_mifare_2fclassic_2fbulk_2eproto_initialized, descriptor_table_protodef_mifare_2fclassic_2fbulk_2eproto, "mifare/classic/bulk.proto", 1173,
  &descriptor_table_mifare_2fclassic_2fbulk_2eproto_once, descriptor_table_mifare_2fclassic_2fbulk_2eproto_sccs, descriptor_table_mifare_2fclassic_2fbulk_2eproto_deps, 4, 8,
  schemas, file_default_instances, TableStruct_mifare_2fclassic_2fbulk_2eproto::offsets,
  file_level_metadata_mifare_2fclassic_2fbulk_2eproto, 4, file_level_enum_descriptors_mifare_2fclassic_2fbulk_2eproto, file_level_service_descriptors_mifare_2fclassic_2fbulk_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mifare_2fclassic_2fbulk_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mifare_2fclassic_2fbulk_2eproto), true);
namespace mifare {
namespace classic {
namespace bulk {

// ===================================================================

void Command::InitAsDefaultInstance() {
  ::mifare::classic::bulk::_Command_default_instance_.auth_on_clear_key_ = const_cast< ::mifare::classic::auth::ClearKey*>(
      ::mifare::classic::auth::ClearKey::internal_default_instance());
  ::mifare::classic::bulk::_Command_default_instance_.auth_on_sam_key_ = const_cast< ::mifare::classic::auth::SamKey*>(
      ::mifare::classic::auth::SamKey::internal_default_instance());
  ::mifare::classic::bulk::_Command_default_instance_.read_blocks_ = const_cast< ::mifare::classic::read::ReadBlocks*>(
      ::mifare::classic::read::ReadBlocks::internal_default_instance());
  ::mifare::classic::bulk::_Command_default_instance_.write_blocks_ = const_cast< ::mifare::classic::write::WriteBlocks*>(
      ::mifare::classic::write::WriteBlocks::internal_default_instance());
  ::mifare::classic::bulk::_Command_default_instance_.get_counter_ = const_cast< ::mifare::classic::counter::get::GetCounter*>(
      ::mifare::classic::counter::get::GetCounter::internal_default_instance());
  ::mifare::classic::bulk::_Command_default_instance_.set_counter_ = const_cast< ::mifare::classic::counter::set::SetCounter*>(
      ::mifare::classic::counter::set::SetCounter::internal_default_instance());
  ::mifare::classic::bulk::_Command_default_instance_.modify_counter_ = const_cast< ::mifare::classic::counter::modify::ModifyCounter*>(
      ::mifare::classic::counter::modify::ModifyCounter::internal_default_instance());
  ::mifare::classic::bulk::_Command_default_instance_.copy_counter_ = const_cast< ::mifare::classic::counter::copy::CopyCounter*>(
      ::mifare::classic::counter::copy::CopyCounter::internal_default_instance());
  ::mifare::classic::bulk::_Command_default_instance_.commit_counter_ = const_cast< ::mifare::classic::counter::commit::CommitCounter*>(
      ::mifare::classic::counter::commit::CommitCounter::internal_default_instance());
}
class Command::_Internal {
 public:
  using HasBits = decltype(std::declval<Command>()._has_bits_);
  static const ::mifare::classic::auth::ClearKey& auth_on_clear_key(const Command* msg);
  static const ::mifare::classic::auth::SamKey& auth_on_sam_key(const Command* msg);
  static const ::mifare::classic::read::ReadBlocks& read_blocks(const Command* msg);
  static const ::mifare::classic::write::WriteBlocks& write_blocks(const Command* msg);
  static const ::mifare::classic::counter::get::GetCounter& get_counter(const Command* msg);
  static const ::mifare::classic::counter::set::SetCounter& set_counter(const Command* msg);
  static const ::mifare::classic::counter::modify::ModifyCounter& modify_counter(const Command* msg);
  static const ::mifare::classic::counter::copy::CopyCounter& copy_counter(const Command* msg);
  static const ::mifare::classic::counter::commit::CommitCounter& commit_counter(const Command* msg);
};

const ::mifare::classic::auth::ClearKey&
Command::_Internal::auth_on_clear_key(const Command* msg) {
  return *msg->MfrCmd_.auth_on_clear_key_;
}
const ::mifare::classic::auth::SamKey&
Command::_Internal::auth_on_sam_key(const Command* msg) {
  return *msg->MfrCmd_.auth_on_sam_key_;
}
const ::mifare::classic::read::ReadBlocks&
Command::_Internal::read_blocks(const Command* msg) {
  return *msg->MfrCmd_.read_blocks_;
}
const ::mifare::classic::write::WriteBlocks&
Command::_Internal::write_blocks(const Command* msg) {
  return *msg->MfrCmd_.write_blocks_;
}
const ::mifare::classic::counter::get::GetCounter&
Command::_Internal::get_counter(const Command* msg) {
  return *msg->MfrCmd_.get_counter_;
}
const ::mifare::classic::counter::set::SetCounter&
Command::_Internal::set_counter(const Command* msg) {
  return *msg->MfrCmd_.set_counter_;
}
const ::mifare::classic::counter::modify::ModifyCounter&
Command::_Internal::modify_counter(const Command* msg) {
  return *msg->MfrCmd_.modify_counter_;
}
const ::mifare::classic::counter::copy::CopyCounter&
Command::_Internal::copy_counter(const Command* msg) {
  return *msg->MfrCmd_.copy_counter_;
}
const ::mifare::classic::counter::commit::CommitCounter&
Command::_Internal::commit_counter(const Command* msg) {
  return *msg->MfrCmd_.commit_counter_;
}
void Command::set_allocated_auth_on_clear_key(::mifare::classic::auth::ClearKey* auth_on_clear_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrCmd();
  if (auth_on_clear_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_on_clear_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_on_clear_key, submessage_arena);
    }
    set_has_auth_on_clear_key();
    MfrCmd_.auth_on_clear_key_ = auth_on_clear_key;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.classic.bulk.Command.auth_on_clear_key)
}
void Command::clear_auth_on_clear_key() {
  if (_internal_has_auth_on_clear_key()) {
    delete MfrCmd_.auth_on_clear_key_;
    clear_has_MfrCmd();
  }
}
void Command::set_allocated_auth_on_sam_key(::mifare::classic::auth::SamKey* auth_on_sam_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrCmd();
  if (auth_on_sam_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_on_sam_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_on_sam_key, submessage_arena);
    }
    set_has_auth_on_sam_key();
    MfrCmd_.auth_on_sam_key_ = auth_on_sam_key;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.classic.bulk.Command.auth_on_sam_key)
}
void Command::clear_auth_on_sam_key() {
  if (_internal_has_auth_on_sam_key()) {
    delete MfrCmd_.auth_on_sam_key_;
    clear_has_MfrCmd();
  }
}
void Command::set_allocated_read_blocks(::mifare::classic::read::ReadBlocks* read_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrCmd();
  if (read_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      read_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_blocks, submessage_arena);
    }
    set_has_read_blocks();
    MfrCmd_.read_blocks_ = read_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.classic.bulk.Command.read_blocks)
}
void Command::clear_read_blocks() {
  if (_internal_has_read_blocks()) {
    delete MfrCmd_.read_blocks_;
    clear_has_MfrCmd();
  }
}
void Command::set_allocated_write_blocks(::mifare::classic::write::WriteBlocks* write_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrCmd();
  if (write_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      write_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, write_blocks, submessage_arena);
    }
    set_has_write_blocks();
    MfrCmd_.write_blocks_ = write_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.classic.bulk.Command.write_blocks)
}
void Command::clear_write_blocks() {
  if (_internal_has_write_blocks()) {
    delete MfrCmd_.write_blocks_;
    clear_has_MfrCmd();
  }
}
void Command::set_allocated_get_counter(::mifare::classic::counter::get::GetCounter* get_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrCmd();
  if (get_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_counter, submessage_arena);
    }
    set_has_get_counter();
    MfrCmd_.get_counter_ = get_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.classic.bulk.Command.get_counter)
}
void Command::clear_get_counter() {
  if (_internal_has_get_counter()) {
    delete MfrCmd_.get_counter_;
    clear_has_MfrCmd();
  }
}
void Command::set_allocated_set_counter(::mifare::classic::counter::set::SetCounter* set_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrCmd();
  if (set_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      set_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_counter, submessage_arena);
    }
    set_has_set_counter();
    MfrCmd_.set_counter_ = set_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.classic.bulk.Command.set_counter)
}
void Command::clear_set_counter() {
  if (_internal_has_set_counter()) {
    delete MfrCmd_.set_counter_;
    clear_has_MfrCmd();
  }
}
void Command::set_allocated_modify_counter(::mifare::classic::counter::modify::ModifyCounter* modify_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrCmd();
  if (modify_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      modify_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modify_counter, submessage_arena);
    }
    set_has_modify_counter();
    MfrCmd_.modify_counter_ = modify_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.classic.bulk.Command.modify_counter)
}
void Command::clear_modify_counter() {
  if (_internal_has_modify_counter()) {
    delete MfrCmd_.modify_counter_;
    clear_has_MfrCmd();
  }
}
void Command::set_allocated_copy_counter(::mifare::classic::counter::copy::CopyCounter* copy_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrCmd();
  if (copy_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      copy_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, copy_counter, submessage_arena);
    }
    set_has_copy_counter();
    MfrCmd_.copy_counter_ = copy_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.classic.bulk.Command.copy_counter)
}
void Command::clear_copy_counter() {
  if (_internal_has_copy_counter()) {
    delete MfrCmd_.copy_counter_;
    clear_has_MfrCmd();
  }
}
void Command::set_allocated_commit_counter(::mifare::classic::counter::commit::CommitCounter* commit_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrCmd();
  if (commit_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      commit_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit_counter, submessage_arena);
    }
    set_has_commit_counter();
    MfrCmd_.commit_counter_ = commit_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.classic.bulk.Command.commit_counter)
}
void Command::clear_commit_counter() {
  if (_internal_has_commit_counter()) {
    delete MfrCmd_.commit_counter_;
    clear_has_MfrCmd();
  }
}
Command::Command()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.classic.bulk.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_MfrCmd();
  switch (from.MfrCmd_case()) {
    case kAuthOnClearKey: {
      _internal_mutable_auth_on_clear_key()->::mifare::classic::auth::ClearKey::MergeFrom(from._internal_auth_on_clear_key());
      break;
    }
    case kAuthOnSamKey: {
      _internal_mutable_auth_on_sam_key()->::mifare::classic::auth::SamKey::MergeFrom(from._internal_auth_on_sam_key());
      break;
    }
    case kReadBlocks: {
      _internal_mutable_read_blocks()->::mifare::classic::read::ReadBlocks::MergeFrom(from._internal_read_blocks());
      break;
    }
    case kWriteBlocks: {
      _internal_mutable_write_blocks()->::mifare::classic::write::WriteBlocks::MergeFrom(from._internal_write_blocks());
      break;
    }
    case kGetCounter: {
      _internal_mutable_get_counter()->::mifare::classic::counter::get::GetCounter::MergeFrom(from._internal_get_counter());
      break;
    }
    case kSetCounter: {
      _internal_mutable_set_counter()->::mifare::classic::counter::set::SetCounter::MergeFrom(from._internal_set_counter());
      break;
    }
    case kModifyCounter: {
      _internal_mutable_modify_counter()->::mifare::classic::counter::modify::ModifyCounter::MergeFrom(from._internal_modify_counter());
      break;
    }
    case kCopyCounter: {
      _internal_mutable_copy_counter()->::mifare::classic::counter::copy::CopyCounter::MergeFrom(from._internal_copy_counter());
      break;
    }
    case kCommitCounter: {
      _internal_mutable_commit_counter()->::mifare::classic::counter::commit::CommitCounter::MergeFrom(from._internal_commit_counter());
      break;
    }
    case MFRCMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mifare.classic.bulk.Command)
}

void Command::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Command_mifare_2fclassic_2fbulk_2eproto.base);
  clear_has_MfrCmd();
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:mifare.classic.bulk.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (has_MfrCmd()) {
    clear_MfrCmd();
  }
}

void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Command& Command::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Command_mifare_2fclassic_2fbulk_2eproto.base);
  return *internal_default_instance();
}


void Command::clear_MfrCmd() {
// @@protoc_insertion_point(one_of_clear_start:mifare.classic.bulk.Command)
  switch (MfrCmd_case()) {
    case kAuthOnClearKey: {
      delete MfrCmd_.auth_on_clear_key_;
      break;
    }
    case kAuthOnSamKey: {
      delete MfrCmd_.auth_on_sam_key_;
      break;
    }
    case kReadBlocks: {
      delete MfrCmd_.read_blocks_;
      break;
    }
    case kWriteBlocks: {
      delete MfrCmd_.write_blocks_;
      break;
    }
    case kGetCounter: {
      delete MfrCmd_.get_counter_;
      break;
    }
    case kSetCounter: {
      delete MfrCmd_.set_counter_;
      break;
    }
    case kModifyCounter: {
      delete MfrCmd_.modify_counter_;
      break;
    }
    case kCopyCounter: {
      delete MfrCmd_.copy_counter_;
      break;
    }
    case kCommitCounter: {
      delete MfrCmd_.commit_counter_;
      break;
    }
    case MFRCMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MFRCMD_NOT_SET;
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.classic.bulk.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_MfrCmd();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mifare.classic.auth.ClearKey auth_on_clear_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth_on_clear_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.auth.SamKey auth_on_sam_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth_on_sam_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.read.ReadBlocks read_blocks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_blocks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.write.WriteBlocks write_blocks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_write_blocks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.counter.get.GetCounter get_counter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.counter.set.SetCounter set_counter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.counter.modify.ModifyCounter modify_counter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_modify_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.counter.copy.CopyCounter copy_counter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_copy_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.counter.commit.CommitCounter commit_counter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.classic.bulk.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (MfrCmd_case()) {
    case kAuthOnClearKey: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::auth_on_clear_key(this), target, stream);
      break;
    }
    case kAuthOnSamKey: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::auth_on_sam_key(this), target, stream);
      break;
    }
    case kReadBlocks: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::read_blocks(this), target, stream);
      break;
    }
    case kWriteBlocks: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::write_blocks(this), target, stream);
      break;
    }
    case kGetCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::get_counter(this), target, stream);
      break;
    }
    case kSetCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::set_counter(this), target, stream);
      break;
    }
    case kModifyCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::modify_counter(this), target, stream);
      break;
    }
    case kCopyCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::copy_counter(this), target, stream);
      break;
    }
    case kCommitCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::commit_counter(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.classic.bulk.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.classic.bulk.Command)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (MfrCmd_case()) {
    // optional .mifare.classic.auth.ClearKey auth_on_clear_key = 1;
    case kAuthOnClearKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrCmd_.auth_on_clear_key_);
      break;
    }
    // optional .mifare.classic.auth.SamKey auth_on_sam_key = 2;
    case kAuthOnSamKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrCmd_.auth_on_sam_key_);
      break;
    }
    // optional .mifare.classic.read.ReadBlocks read_blocks = 3;
    case kReadBlocks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrCmd_.read_blocks_);
      break;
    }
    // optional .mifare.classic.write.WriteBlocks write_blocks = 4;
    case kWriteBlocks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrCmd_.write_blocks_);
      break;
    }
    // optional .mifare.classic.counter.get.GetCounter get_counter = 5;
    case kGetCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrCmd_.get_counter_);
      break;
    }
    // optional .mifare.classic.counter.set.SetCounter set_counter = 6;
    case kSetCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrCmd_.set_counter_);
      break;
    }
    // optional .mifare.classic.counter.modify.ModifyCounter modify_counter = 7;
    case kModifyCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrCmd_.modify_counter_);
      break;
    }
    // optional .mifare.classic.counter.copy.CopyCounter copy_counter = 8;
    case kCopyCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrCmd_.copy_counter_);
      break;
    }
    // optional .mifare.classic.counter.commit.CommitCounter commit_counter = 9;
    case kCommitCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrCmd_.commit_counter_);
      break;
    }
    case MFRCMD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.classic.bulk.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.classic.bulk.Command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.classic.bulk.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.classic.bulk.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.MfrCmd_case()) {
    case kAuthOnClearKey: {
      _internal_mutable_auth_on_clear_key()->::mifare::classic::auth::ClearKey::MergeFrom(from._internal_auth_on_clear_key());
      break;
    }
    case kAuthOnSamKey: {
      _internal_mutable_auth_on_sam_key()->::mifare::classic::auth::SamKey::MergeFrom(from._internal_auth_on_sam_key());
      break;
    }
    case kReadBlocks: {
      _internal_mutable_read_blocks()->::mifare::classic::read::ReadBlocks::MergeFrom(from._internal_read_blocks());
      break;
    }
    case kWriteBlocks: {
      _internal_mutable_write_blocks()->::mifare::classic::write::WriteBlocks::MergeFrom(from._internal_write_blocks());
      break;
    }
    case kGetCounter: {
      _internal_mutable_get_counter()->::mifare::classic::counter::get::GetCounter::MergeFrom(from._internal_get_counter());
      break;
    }
    case kSetCounter: {
      _internal_mutable_set_counter()->::mifare::classic::counter::set::SetCounter::MergeFrom(from._internal_set_counter());
      break;
    }
    case kModifyCounter: {
      _internal_mutable_modify_counter()->::mifare::classic::counter::modify::ModifyCounter::MergeFrom(from._internal_modify_counter());
      break;
    }
    case kCopyCounter: {
      _internal_mutable_copy_counter()->::mifare::classic::counter::copy::CopyCounter::MergeFrom(from._internal_copy_counter());
      break;
    }
    case kCommitCounter: {
      _internal_mutable_commit_counter()->::mifare::classic::counter::commit::CommitCounter::MergeFrom(from._internal_commit_counter());
      break;
    }
    case MFRCMD_NOT_SET: {
      break;
    }
  }
}

void Command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.classic.bulk.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.classic.bulk.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  switch (MfrCmd_case()) {
    case kAuthOnClearKey: {
      if (has_auth_on_clear_key()) {
        if (!this->auth_on_clear_key().IsInitialized()) return false;
      }
      break;
    }
    case kAuthOnSamKey: {
      if (has_auth_on_sam_key()) {
        if (!this->auth_on_sam_key().IsInitialized()) return false;
      }
      break;
    }
    case kReadBlocks: {
      if (has_read_blocks()) {
        if (!this->read_blocks().IsInitialized()) return false;
      }
      break;
    }
    case kWriteBlocks: {
      if (has_write_blocks()) {
        if (!this->write_blocks().IsInitialized()) return false;
      }
      break;
    }
    case kGetCounter: {
      if (has_get_counter()) {
        if (!this->get_counter().IsInitialized()) return false;
      }
      break;
    }
    case kSetCounter: {
      if (has_set_counter()) {
        if (!this->set_counter().IsInitialized()) return false;
      }
      break;
    }
    case kModifyCounter: {
      if (has_modify_counter()) {
        if (!this->modify_counter().IsInitialized()) return false;
      }
      break;
    }
    case kCopyCounter: {
      if (has_copy_counter()) {
        if (!this->copy_counter().IsInitialized()) return false;
      }
      break;
    }
    case kCommitCounter: {
      if (has_commit_counter()) {
        if (!this->commit_counter().IsInitialized()) return false;
      }
      break;
    }
    case MFRCMD_NOT_SET: {
      break;
    }
  }
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(MfrCmd_, other->MfrCmd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandResult::InitAsDefaultInstance() {
  ::mifare::classic::bulk::_CommandResult_default_instance_.read_blocks_ = const_cast< ::mifare::classic::read::Blocks*>(
      ::mifare::classic::read::Blocks::internal_default_instance());
  ::mifare::classic::bulk::_CommandResult_default_instance_.get_counter_ = const_cast< ::mifare::classic::counter::get::Counter*>(
      ::mifare::classic::counter::get::Counter::internal_default_instance());
}
class CommandResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandResult>()._has_bits_);
  static const ::mifare::classic::read::Blocks& read_blocks(const CommandResult* msg);
  static const ::mifare::classic::counter::get::Counter& get_counter(const CommandResult* msg);
};

const ::mifare::classic::read::Blocks&
CommandResult::_Internal::read_blocks(const CommandResult* msg) {
  return *msg->MfrResult_.read_blocks_;
}
const ::mifare::classic::counter::get::Counter&
CommandResult::_Internal::get_counter(const CommandResult* msg) {
  return *msg->MfrResult_.get_counter_;
}
void CommandResult::set_allocated_read_blocks(::mifare::classic::read::Blocks* read_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrResult();
  if (read_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      read_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_blocks, submessage_arena);
    }
    set_has_read_blocks();
    MfrResult_.read_blocks_ = read_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.classic.bulk.CommandResult.read_blocks)
}
void CommandResult::clear_read_blocks() {
  if (_internal_has_read_blocks()) {
    delete MfrResult_.read_blocks_;
    clear_has_MfrResult();
  }
}
void CommandResult::set_allocated_get_counter(::mifare::classic::counter::get::Counter* get_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrResult();
  if (get_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_counter, submessage_arena);
    }
    set_has_get_counter();
    MfrResult_.get_counter_ = get_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.classic.bulk.CommandResult.get_counter)
}
void CommandResult::clear_get_counter() {
  if (_internal_has_get_counter()) {
    delete MfrResult_.get_counter_;
    clear_has_MfrResult();
  }
}
CommandResult::CommandResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.classic.bulk.CommandResult)
}
CommandResult::CommandResult(const CommandResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_MfrResult();
  switch (from.MfrResult_case()) {
    case kReadBlocks: {
      _internal_mutable_read_blocks()->::mifare::classic::read::Blocks::MergeFrom(from._internal_read_blocks());
      break;
    }
    case kGetCounter: {
      _internal_mutable_get_counter()->::mifare::classic::counter::get::Counter::MergeFrom(from._internal_get_counter());
      break;
    }
    case MFRRESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mifare.classic.bulk.CommandResult)
}

void CommandResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandResult_mifare_2fclassic_2fbulk_2eproto.base);
  clear_has_MfrResult();
}

CommandResult::~CommandResult() {
  // @@protoc_insertion_point(destructor:mifare.classic.bulk.CommandResult)
  SharedDtor();
}

void CommandResult::SharedDtor() {
  if (has_MfrResult()) {
    clear_MfrResult();
  }
}

void CommandResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandResult& CommandResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandResult_mifare_2fclassic_2fbulk_2eproto.base);
  return *internal_default_instance();
}


void CommandResult::clear_MfrResult() {
// @@protoc_insertion_point(one_of_clear_start:mifare.classic.bulk.CommandResult)
  switch (MfrResult_case()) {
    case kReadBlocks: {
      delete MfrResult_.read_blocks_;
      break;
    }
    case kGetCounter: {
      delete MfrResult_.get_counter_;
      break;
    }
    case MFRRESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MFRRESULT_NOT_SET;
}


void CommandResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.classic.bulk.CommandResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_MfrResult();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CommandResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mifare.classic.read.Blocks read_blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_blocks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.counter.get.Counter get_counter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.classic.bulk.CommandResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (MfrResult_case()) {
    case kReadBlocks: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::read_blocks(this), target, stream);
      break;
    }
    case kGetCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::get_counter(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.classic.bulk.CommandResult)
  return target;
}

size_t CommandResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.classic.bulk.CommandResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (MfrResult_case()) {
    // optional .mifare.classic.read.Blocks read_blocks = 1;
    case kReadBlocks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrResult_.read_blocks_);
      break;
    }
    // optional .mifare.classic.counter.get.Counter get_counter = 2;
    case kGetCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrResult_.get_counter_);
      break;
    }
    case MFRRESULT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.classic.bulk.CommandResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.classic.bulk.CommandResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.classic.bulk.CommandResult)
    MergeFrom(*source);
  }
}

void CommandResult::MergeFrom(const CommandResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.classic.bulk.CommandResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.MfrResult_case()) {
    case kReadBlocks: {
      _internal_mutable_read_blocks()->::mifare::classic::read::Blocks::MergeFrom(from._internal_read_blocks());
      break;
    }
    case kGetCounter: {
      _internal_mutable_get_counter()->::mifare::classic::counter::get::Counter::MergeFrom(from._internal_get_counter());
      break;
    }
    case MFRRESULT_NOT_SET: {
      break;
    }
  }
}

void CommandResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.classic.bulk.CommandResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandResult::CopyFrom(const CommandResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.classic.bulk.CommandResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResult::IsInitialized() const {
  switch (MfrResult_case()) {
    case kReadBlocks: {
      if (has_read_blocks()) {
        if (!this->read_blocks().IsInitialized()) return false;
      }
      break;
    }
    case kGetCounter: {
      if (has_get_counter()) {
        if (!this->get_counter().IsInitialized()) return false;
      }
      break;
    }
    case MFRRESULT_NOT_SET: {
      break;
    }
  }
  return true;
}

void CommandResult::InternalSwap(CommandResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(MfrResult_, other->MfrResult_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BulkOperation::InitAsDefaultInstance() {
}
class BulkOperation::_Internal {
 public:
  using HasBits = decltype(std::declval<BulkOperation>()._has_bits_);
};

BulkOperation::BulkOperation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.classic.bulk.BulkOperation)
}
BulkOperation::BulkOperation(const BulkOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mifare.classic.bulk.BulkOperation)
}

void BulkOperation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkOperation_mifare_2fclassic_2fbulk_2eproto.base);
}

BulkOperation::~BulkOperation() {
  // @@protoc_insertion_point(destructor:mifare.classic.bulk.BulkOperation)
  SharedDtor();
}

void BulkOperation::SharedDtor() {
}

void BulkOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkOperation& BulkOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkOperation_mifare_2fclassic_2fbulk_2eproto.base);
  return *internal_default_instance();
}


void BulkOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.classic.bulk.BulkOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BulkOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mifare.classic.bulk.Command operations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.classic.bulk.BulkOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mifare.classic.bulk.Command operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_operations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.classic.bulk.BulkOperation)
  return target;
}

size_t BulkOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.classic.bulk.BulkOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mifare.classic.bulk.Command operations = 1;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.classic.bulk.BulkOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.classic.bulk.BulkOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.classic.bulk.BulkOperation)
    MergeFrom(*source);
  }
}

void BulkOperation::MergeFrom(const BulkOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.classic.bulk.BulkOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
}

void BulkOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.classic.bulk.BulkOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkOperation::CopyFrom(const BulkOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.classic.bulk.BulkOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkOperation::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(operations_)) return false;
  return true;
}

void BulkOperation::InternalSwap(BulkOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  operations_.InternalSwap(&other->operations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkOperation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BulkResult::InitAsDefaultInstance() {
}
class BulkResult::_Internal {
 public:
  using HasBits = decltype(std::declval<BulkResult>()._has_bits_);
};

BulkResult::BulkResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.classic.bulk.BulkResult)
}
BulkResult::BulkResult(const BulkResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mifare.classic.bulk.BulkResult)
}

void BulkResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkResult_mifare_2fclassic_2fbulk_2eproto.base);
}

BulkResult::~BulkResult() {
  // @@protoc_insertion_point(destructor:mifare.classic.bulk.BulkResult)
  SharedDtor();
}

void BulkResult::SharedDtor() {
}

void BulkResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkResult& BulkResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkResult_mifare_2fclassic_2fbulk_2eproto.base);
  return *internal_default_instance();
}


void BulkResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.classic.bulk.BulkResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BulkResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mifare.classic.bulk.CommandResult results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.classic.bulk.BulkResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mifare.classic.bulk.CommandResult results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.classic.bulk.BulkResult)
  return target;
}

size_t BulkResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.classic.bulk.BulkResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mifare.classic.bulk.CommandResult results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.classic.bulk.BulkResult)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.classic.bulk.BulkResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.classic.bulk.BulkResult)
    MergeFrom(*source);
  }
}

void BulkResult::MergeFrom(const BulkResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.classic.bulk.BulkResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void BulkResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.classic.bulk.BulkResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkResult::CopyFrom(const BulkResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.classic.bulk.BulkResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkResult::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(results_)) return false;
  return true;
}

void BulkResult::InternalSwap(BulkResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bulk
}  // namespace classic
}  // namespace mifare
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mifare::classic::bulk::Command* Arena::CreateMaybeMessage< ::mifare::classic::bulk::Command >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::classic::bulk::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::mifare::classic::bulk::CommandResult* Arena::CreateMaybeMessage< ::mifare::classic::bulk::CommandResult >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::classic::bulk::CommandResult >(arena);
}
template<> PROTOBUF_NOINLINE ::mifare::classic::bulk::BulkOperation* Arena::CreateMaybeMessage< ::mifare::classic::bulk::BulkOperation >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::classic::bulk::BulkOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::mifare::classic::bulk::BulkResult* Arena::CreateMaybeMessage< ::mifare::classic::bulk::BulkResult >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::classic::bulk::BulkResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
