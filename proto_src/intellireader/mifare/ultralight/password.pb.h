// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mifare/ultralight/password.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mifare_2fultralight_2fpassword_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mifare_2fultralight_2fpassword_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mifare/av2/args.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fpassword_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mifare_2fultralight_2fpassword_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mifare_2fultralight_2fpassword_2eproto;
namespace mifare {
namespace ultralight {
namespace password {
class ClearPassword;
class ClearPasswordDefaultTypeInternal;
extern ClearPasswordDefaultTypeInternal _ClearPassword_default_instance_;
class PasswordAcknowledge;
class PasswordAcknowledgeDefaultTypeInternal;
extern PasswordAcknowledgeDefaultTypeInternal _PasswordAcknowledge_default_instance_;
class SamPassword;
class SamPasswordDefaultTypeInternal;
extern SamPasswordDefaultTypeInternal _SamPassword_default_instance_;
}  // namespace password
}  // namespace ultralight
}  // namespace mifare
PROTOBUF_NAMESPACE_OPEN
template<> ::mifare::ultralight::password::ClearPassword* Arena::CreateMaybeMessage<::mifare::ultralight::password::ClearPassword>(Arena*);
template<> ::mifare::ultralight::password::PasswordAcknowledge* Arena::CreateMaybeMessage<::mifare::ultralight::password::PasswordAcknowledge>(Arena*);
template<> ::mifare::ultralight::password::SamPassword* Arena::CreateMaybeMessage<::mifare::ultralight::password::SamPassword>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mifare {
namespace ultralight {
namespace password {

// ===================================================================

class ClearPassword :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mifare.ultralight.password.ClearPassword) */ {
 public:
  ClearPassword();
  virtual ~ClearPassword();

  ClearPassword(const ClearPassword& from);
  ClearPassword(ClearPassword&& from) noexcept
    : ClearPassword() {
    *this = ::std::move(from);
  }

  inline ClearPassword& operator=(const ClearPassword& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearPassword& operator=(ClearPassword&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearPassword& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearPassword* internal_default_instance() {
    return reinterpret_cast<const ClearPassword*>(
               &_ClearPassword_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClearPassword& a, ClearPassword& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearPassword* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearPassword* New() const final {
    return CreateMaybeMessage<ClearPassword>(nullptr);
  }

  ClearPassword* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearPassword>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearPassword& from);
  void MergeFrom(const ClearPassword& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearPassword* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifare.ultralight.password.ClearPassword";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mifare_2fultralight_2fpassword_2eproto);
    return ::descriptor_table_mifare_2fultralight_2fpassword_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 1,
  };
  // required bytes password = 1;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:mifare.ultralight.password.ClearPassword)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  friend struct ::TableStruct_mifare_2fultralight_2fpassword_2eproto;
};
// -------------------------------------------------------------------

class SamPassword :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mifare.ultralight.password.SamPassword) */ {
 public:
  SamPassword();
  virtual ~SamPassword();

  SamPassword(const SamPassword& from);
  SamPassword(SamPassword&& from) noexcept
    : SamPassword() {
    *this = ::std::move(from);
  }

  inline SamPassword& operator=(const SamPassword& from) {
    CopyFrom(from);
    return *this;
  }
  inline SamPassword& operator=(SamPassword&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SamPassword& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SamPassword* internal_default_instance() {
    return reinterpret_cast<const SamPassword*>(
               &_SamPassword_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SamPassword& a, SamPassword& b) {
    a.Swap(&b);
  }
  inline void Swap(SamPassword* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SamPassword* New() const final {
    return CreateMaybeMessage<SamPassword>(nullptr);
  }

  SamPassword* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SamPassword>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SamPassword& from);
  void MergeFrom(const SamPassword& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SamPassword* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifare.ultralight.password.SamPassword";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mifare_2fultralight_2fpassword_2eproto);
    return ::descriptor_table_mifare_2fultralight_2fpassword_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiversificationInputFieldNumber = 2,
    kAv3ArgsFieldNumber = 1,
  };
  // optional bytes diversification_input = 2;
  bool has_diversification_input() const;
  private:
  bool _internal_has_diversification_input() const;
  public:
  void clear_diversification_input();
  const std::string& diversification_input() const;
  void set_diversification_input(const std::string& value);
  void set_diversification_input(std::string&& value);
  void set_diversification_input(const char* value);
  void set_diversification_input(const void* value, size_t size);
  std::string* mutable_diversification_input();
  std::string* release_diversification_input();
  void set_allocated_diversification_input(std::string* diversification_input);
  private:
  const std::string& _internal_diversification_input() const;
  void _internal_set_diversification_input(const std::string& value);
  std::string* _internal_mutable_diversification_input();
  public:

  // required .mifare.av2.args.AuthenticationArguments av3_args = 1;
  bool has_av3_args() const;
  private:
  bool _internal_has_av3_args() const;
  public:
  void clear_av3_args();
  const ::mifare::av2::args::AuthenticationArguments& av3_args() const;
  ::mifare::av2::args::AuthenticationArguments* release_av3_args();
  ::mifare::av2::args::AuthenticationArguments* mutable_av3_args();
  void set_allocated_av3_args(::mifare::av2::args::AuthenticationArguments* av3_args);
  private:
  const ::mifare::av2::args::AuthenticationArguments& _internal_av3_args() const;
  ::mifare::av2::args::AuthenticationArguments* _internal_mutable_av3_args();
  public:

  // @@protoc_insertion_point(class_scope:mifare.ultralight.password.SamPassword)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diversification_input_;
  ::mifare::av2::args::AuthenticationArguments* av3_args_;
  friend struct ::TableStruct_mifare_2fultralight_2fpassword_2eproto;
};
// -------------------------------------------------------------------

class PasswordAcknowledge :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mifare.ultralight.password.PasswordAcknowledge) */ {
 public:
  PasswordAcknowledge();
  virtual ~PasswordAcknowledge();

  PasswordAcknowledge(const PasswordAcknowledge& from);
  PasswordAcknowledge(PasswordAcknowledge&& from) noexcept
    : PasswordAcknowledge() {
    *this = ::std::move(from);
  }

  inline PasswordAcknowledge& operator=(const PasswordAcknowledge& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordAcknowledge& operator=(PasswordAcknowledge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PasswordAcknowledge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PasswordAcknowledge* internal_default_instance() {
    return reinterpret_cast<const PasswordAcknowledge*>(
               &_PasswordAcknowledge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PasswordAcknowledge& a, PasswordAcknowledge& b) {
    a.Swap(&b);
  }
  inline void Swap(PasswordAcknowledge* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PasswordAcknowledge* New() const final {
    return CreateMaybeMessage<PasswordAcknowledge>(nullptr);
  }

  PasswordAcknowledge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PasswordAcknowledge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PasswordAcknowledge& from);
  void MergeFrom(const PasswordAcknowledge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PasswordAcknowledge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifare.ultralight.password.PasswordAcknowledge";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mifare_2fultralight_2fpassword_2eproto);
    return ::descriptor_table_mifare_2fultralight_2fpassword_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordAckFieldNumber = 1,
  };
  // required bytes password_ack = 1;
  bool has_password_ack() const;
  private:
  bool _internal_has_password_ack() const;
  public:
  void clear_password_ack();
  const std::string& password_ack() const;
  void set_password_ack(const std::string& value);
  void set_password_ack(std::string&& value);
  void set_password_ack(const char* value);
  void set_password_ack(const void* value, size_t size);
  std::string* mutable_password_ack();
  std::string* release_password_ack();
  void set_allocated_password_ack(std::string* password_ack);
  private:
  const std::string& _internal_password_ack() const;
  void _internal_set_password_ack(const std::string& value);
  std::string* _internal_mutable_password_ack();
  public:

  // @@protoc_insertion_point(class_scope:mifare.ultralight.password.PasswordAcknowledge)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_ack_;
  friend struct ::TableStruct_mifare_2fultralight_2fpassword_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClearPassword

// required bytes password = 1;
inline bool ClearPassword::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClearPassword::has_password() const {
  return _internal_has_password();
}
inline void ClearPassword::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClearPassword::password() const {
  // @@protoc_insertion_point(field_get:mifare.ultralight.password.ClearPassword.password)
  return _internal_password();
}
inline void ClearPassword::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:mifare.ultralight.password.ClearPassword.password)
}
inline std::string* ClearPassword::mutable_password() {
  // @@protoc_insertion_point(field_mutable:mifare.ultralight.password.ClearPassword.password)
  return _internal_mutable_password();
}
inline const std::string& ClearPassword::_internal_password() const {
  return password_.GetNoArena();
}
inline void ClearPassword::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ClearPassword::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mifare.ultralight.password.ClearPassword.password)
}
inline void ClearPassword::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mifare.ultralight.password.ClearPassword.password)
}
inline void ClearPassword::set_password(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mifare.ultralight.password.ClearPassword.password)
}
inline std::string* ClearPassword::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClearPassword::release_password() {
  // @@protoc_insertion_point(field_release:mifare.ultralight.password.ClearPassword.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return password_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClearPassword::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:mifare.ultralight.password.ClearPassword.password)
}

// -------------------------------------------------------------------

// SamPassword

// required .mifare.av2.args.AuthenticationArguments av3_args = 1;
inline bool SamPassword::_internal_has_av3_args() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || av3_args_ != nullptr);
  return value;
}
inline bool SamPassword::has_av3_args() const {
  return _internal_has_av3_args();
}
inline const ::mifare::av2::args::AuthenticationArguments& SamPassword::_internal_av3_args() const {
  const ::mifare::av2::args::AuthenticationArguments* p = av3_args_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mifare::av2::args::AuthenticationArguments*>(
      &::mifare::av2::args::_AuthenticationArguments_default_instance_);
}
inline const ::mifare::av2::args::AuthenticationArguments& SamPassword::av3_args() const {
  // @@protoc_insertion_point(field_get:mifare.ultralight.password.SamPassword.av3_args)
  return _internal_av3_args();
}
inline ::mifare::av2::args::AuthenticationArguments* SamPassword::release_av3_args() {
  // @@protoc_insertion_point(field_release:mifare.ultralight.password.SamPassword.av3_args)
  _has_bits_[0] &= ~0x00000002u;
  ::mifare::av2::args::AuthenticationArguments* temp = av3_args_;
  av3_args_ = nullptr;
  return temp;
}
inline ::mifare::av2::args::AuthenticationArguments* SamPassword::_internal_mutable_av3_args() {
  _has_bits_[0] |= 0x00000002u;
  if (av3_args_ == nullptr) {
    auto* p = CreateMaybeMessage<::mifare::av2::args::AuthenticationArguments>(GetArenaNoVirtual());
    av3_args_ = p;
  }
  return av3_args_;
}
inline ::mifare::av2::args::AuthenticationArguments* SamPassword::mutable_av3_args() {
  // @@protoc_insertion_point(field_mutable:mifare.ultralight.password.SamPassword.av3_args)
  return _internal_mutable_av3_args();
}
inline void SamPassword::set_allocated_av3_args(::mifare::av2::args::AuthenticationArguments* av3_args) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(av3_args_);
  }
  if (av3_args) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      av3_args = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, av3_args, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  av3_args_ = av3_args;
  // @@protoc_insertion_point(field_set_allocated:mifare.ultralight.password.SamPassword.av3_args)
}

// optional bytes diversification_input = 2;
inline bool SamPassword::_internal_has_diversification_input() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SamPassword::has_diversification_input() const {
  return _internal_has_diversification_input();
}
inline void SamPassword::clear_diversification_input() {
  diversification_input_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SamPassword::diversification_input() const {
  // @@protoc_insertion_point(field_get:mifare.ultralight.password.SamPassword.diversification_input)
  return _internal_diversification_input();
}
inline void SamPassword::set_diversification_input(const std::string& value) {
  _internal_set_diversification_input(value);
  // @@protoc_insertion_point(field_set:mifare.ultralight.password.SamPassword.diversification_input)
}
inline std::string* SamPassword::mutable_diversification_input() {
  // @@protoc_insertion_point(field_mutable:mifare.ultralight.password.SamPassword.diversification_input)
  return _internal_mutable_diversification_input();
}
inline const std::string& SamPassword::_internal_diversification_input() const {
  return diversification_input_.GetNoArena();
}
inline void SamPassword::_internal_set_diversification_input(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  diversification_input_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SamPassword::set_diversification_input(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  diversification_input_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mifare.ultralight.password.SamPassword.diversification_input)
}
inline void SamPassword::set_diversification_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  diversification_input_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mifare.ultralight.password.SamPassword.diversification_input)
}
inline void SamPassword::set_diversification_input(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  diversification_input_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mifare.ultralight.password.SamPassword.diversification_input)
}
inline std::string* SamPassword::_internal_mutable_diversification_input() {
  _has_bits_[0] |= 0x00000001u;
  return diversification_input_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SamPassword::release_diversification_input() {
  // @@protoc_insertion_point(field_release:mifare.ultralight.password.SamPassword.diversification_input)
  if (!_internal_has_diversification_input()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return diversification_input_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SamPassword::set_allocated_diversification_input(std::string* diversification_input) {
  if (diversification_input != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  diversification_input_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), diversification_input);
  // @@protoc_insertion_point(field_set_allocated:mifare.ultralight.password.SamPassword.diversification_input)
}

// -------------------------------------------------------------------

// PasswordAcknowledge

// required bytes password_ack = 1;
inline bool PasswordAcknowledge::_internal_has_password_ack() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PasswordAcknowledge::has_password_ack() const {
  return _internal_has_password_ack();
}
inline void PasswordAcknowledge::clear_password_ack() {
  password_ack_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PasswordAcknowledge::password_ack() const {
  // @@protoc_insertion_point(field_get:mifare.ultralight.password.PasswordAcknowledge.password_ack)
  return _internal_password_ack();
}
inline void PasswordAcknowledge::set_password_ack(const std::string& value) {
  _internal_set_password_ack(value);
  // @@protoc_insertion_point(field_set:mifare.ultralight.password.PasswordAcknowledge.password_ack)
}
inline std::string* PasswordAcknowledge::mutable_password_ack() {
  // @@protoc_insertion_point(field_mutable:mifare.ultralight.password.PasswordAcknowledge.password_ack)
  return _internal_mutable_password_ack();
}
inline const std::string& PasswordAcknowledge::_internal_password_ack() const {
  return password_ack_.GetNoArena();
}
inline void PasswordAcknowledge::_internal_set_password_ack(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_ack_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PasswordAcknowledge::set_password_ack(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  password_ack_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mifare.ultralight.password.PasswordAcknowledge.password_ack)
}
inline void PasswordAcknowledge::set_password_ack(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  password_ack_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mifare.ultralight.password.PasswordAcknowledge.password_ack)
}
inline void PasswordAcknowledge::set_password_ack(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  password_ack_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mifare.ultralight.password.PasswordAcknowledge.password_ack)
}
inline std::string* PasswordAcknowledge::_internal_mutable_password_ack() {
  _has_bits_[0] |= 0x00000001u;
  return password_ack_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PasswordAcknowledge::release_password_ack() {
  // @@protoc_insertion_point(field_release:mifare.ultralight.password.PasswordAcknowledge.password_ack)
  if (!_internal_has_password_ack()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return password_ack_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordAcknowledge::set_allocated_password_ack(std::string* password_ack) {
  if (password_ack != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_ack_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password_ack);
  // @@protoc_insertion_point(field_set_allocated:mifare.ultralight.password.PasswordAcknowledge.password_ack)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace password
}  // namespace ultralight
}  // namespace mifare

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mifare_2fultralight_2fpassword_2eproto
