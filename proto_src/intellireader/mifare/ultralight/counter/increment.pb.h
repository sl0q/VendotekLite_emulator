// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mifare/ultralight/counter/increment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mifare_2fultralight_2fcounter_2fincrement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mifare_2fultralight_2fcounter_2fincrement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mifare/ultralight/counter/number.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fcounter_2fincrement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mifare_2fultralight_2fcounter_2fincrement_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mifare_2fultralight_2fcounter_2fincrement_2eproto;
namespace mifare {
namespace ultralight {
namespace counter {
namespace increment {
class IncrementCounter;
class IncrementCounterDefaultTypeInternal;
extern IncrementCounterDefaultTypeInternal _IncrementCounter_default_instance_;
}  // namespace increment
}  // namespace counter
}  // namespace ultralight
}  // namespace mifare
PROTOBUF_NAMESPACE_OPEN
template<> ::mifare::ultralight::counter::increment::IncrementCounter* Arena::CreateMaybeMessage<::mifare::ultralight::counter::increment::IncrementCounter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mifare {
namespace ultralight {
namespace counter {
namespace increment {

// ===================================================================

class IncrementCounter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mifare.ultralight.counter.increment.IncrementCounter) */ {
 public:
  IncrementCounter();
  virtual ~IncrementCounter();

  IncrementCounter(const IncrementCounter& from);
  IncrementCounter(IncrementCounter&& from) noexcept
    : IncrementCounter() {
    *this = ::std::move(from);
  }

  inline IncrementCounter& operator=(const IncrementCounter& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncrementCounter& operator=(IncrementCounter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IncrementCounter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncrementCounter* internal_default_instance() {
    return reinterpret_cast<const IncrementCounter*>(
               &_IncrementCounter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IncrementCounter& a, IncrementCounter& b) {
    a.Swap(&b);
  }
  inline void Swap(IncrementCounter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncrementCounter* New() const final {
    return CreateMaybeMessage<IncrementCounter>(nullptr);
  }

  IncrementCounter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncrementCounter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IncrementCounter& from);
  void MergeFrom(const IncrementCounter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncrementCounter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mifare.ultralight.counter.increment.IncrementCounter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mifare_2fultralight_2fcounter_2fincrement_2eproto);
    return ::descriptor_table_mifare_2fultralight_2fcounter_2fincrement_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCounterNumberFieldNumber = 1,
    kOperandFieldNumber = 2,
  };
  // required .mifare.ultralight.counter.number.CounterNumber counter_number = 1;
  bool has_counter_number() const;
  private:
  bool _internal_has_counter_number() const;
  public:
  void clear_counter_number();
  ::mifare::ultralight::counter::number::CounterNumber counter_number() const;
  void set_counter_number(::mifare::ultralight::counter::number::CounterNumber value);
  private:
  ::mifare::ultralight::counter::number::CounterNumber _internal_counter_number() const;
  void _internal_set_counter_number(::mifare::ultralight::counter::number::CounterNumber value);
  public:

  // required uint32 operand = 2;
  bool has_operand() const;
  private:
  bool _internal_has_operand() const;
  public:
  void clear_operand();
  ::PROTOBUF_NAMESPACE_ID::uint32 operand() const;
  void set_operand(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_operand() const;
  void _internal_set_operand(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mifare.ultralight.counter.increment.IncrementCounter)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int counter_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 operand_;
  friend struct ::TableStruct_mifare_2fultralight_2fcounter_2fincrement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IncrementCounter

// required .mifare.ultralight.counter.number.CounterNumber counter_number = 1;
inline bool IncrementCounter::_internal_has_counter_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IncrementCounter::has_counter_number() const {
  return _internal_has_counter_number();
}
inline void IncrementCounter::clear_counter_number() {
  counter_number_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::mifare::ultralight::counter::number::CounterNumber IncrementCounter::_internal_counter_number() const {
  return static_cast< ::mifare::ultralight::counter::number::CounterNumber >(counter_number_);
}
inline ::mifare::ultralight::counter::number::CounterNumber IncrementCounter::counter_number() const {
  // @@protoc_insertion_point(field_get:mifare.ultralight.counter.increment.IncrementCounter.counter_number)
  return _internal_counter_number();
}
inline void IncrementCounter::_internal_set_counter_number(::mifare::ultralight::counter::number::CounterNumber value) {
  assert(::mifare::ultralight::counter::number::CounterNumber_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  counter_number_ = value;
}
inline void IncrementCounter::set_counter_number(::mifare::ultralight::counter::number::CounterNumber value) {
  _internal_set_counter_number(value);
  // @@protoc_insertion_point(field_set:mifare.ultralight.counter.increment.IncrementCounter.counter_number)
}

// required uint32 operand = 2;
inline bool IncrementCounter::_internal_has_operand() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IncrementCounter::has_operand() const {
  return _internal_has_operand();
}
inline void IncrementCounter::clear_operand() {
  operand_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncrementCounter::_internal_operand() const {
  return operand_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncrementCounter::operand() const {
  // @@protoc_insertion_point(field_get:mifare.ultralight.counter.increment.IncrementCounter.operand)
  return _internal_operand();
}
inline void IncrementCounter::_internal_set_operand(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  operand_ = value;
}
inline void IncrementCounter::set_operand(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_operand(value);
  // @@protoc_insertion_point(field_set:mifare.ultralight.counter.increment.IncrementCounter.operand)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace increment
}  // namespace counter
}  // namespace ultralight
}  // namespace mifare

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mifare_2fultralight_2fcounter_2fincrement_2eproto
