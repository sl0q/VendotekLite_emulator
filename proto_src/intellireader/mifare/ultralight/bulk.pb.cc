// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mifare/ultralight/bulk.proto

#include "mifare/ultralight/bulk.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearKey_mifare_2fultralight_2fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SamKey_mifare_2fultralight_2fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fbulk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Command_mifare_2fultralight_2fbulk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fbulk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommandResult_mifare_2fultralight_2fbulk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fcounter_2fget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CounterValue_mifare_2fultralight_2fcounter_2fget_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fcounter_2fget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCounter_mifare_2fultralight_2fcounter_2fget_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fcounter_2fincrement_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncrementCounter_mifare_2fultralight_2fcounter_2fincrement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fpassword_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearPassword_mifare_2fultralight_2fpassword_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fpassword_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SamPassword_mifare_2fultralight_2fpassword_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fread_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pages_mifare_2fultralight_2fread_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fread_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadPages_mifare_2fultralight_2fread_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fwrite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WritePages_mifare_2fultralight_2fwrite_2eproto;
namespace mifare {
namespace ultralight {
namespace bulk {
class BulkOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkOperation> _instance;
} _BulkOperation_default_instance_;
class BulkResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BulkResult> _instance;
} _BulkResult_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Command> _instance;
  const ::mifare::ultralight::read::ReadPages* read_pages_;
  const ::mifare::ultralight::write::WritePages* write_pages_;
  const ::mifare::ultralight::counter::get::GetCounter* get_counter_;
  const ::mifare::ultralight::counter::increment::IncrementCounter* increment_counter_;
  const ::mifare::ultralight::auth::ClearKey* auth_on_clear_key_;
  const ::mifare::ultralight::auth::SamKey* auth_on_sam_key_;
  const ::mifare::ultralight::password::ClearPassword* auth_clear_password_;
  const ::mifare::ultralight::password::SamPassword* auth_sam_password_;
} _Command_default_instance_;
class CommandResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandResult> _instance;
  const ::mifare::ultralight::read::Pages* pages_;
  const ::mifare::ultralight::counter::get::CounterValue* counter_value_;
} _CommandResult_default_instance_;
}  // namespace bulk
}  // namespace ultralight
}  // namespace mifare
static void InitDefaultsscc_info_BulkOperation_mifare_2fultralight_2fbulk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::ultralight::bulk::_BulkOperation_default_instance_;
    new (ptr) ::mifare::ultralight::bulk::BulkOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::ultralight::bulk::BulkOperation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BulkOperation_mifare_2fultralight_2fbulk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BulkOperation_mifare_2fultralight_2fbulk_2eproto}, {
      &scc_info_Command_mifare_2fultralight_2fbulk_2eproto.base,}};

static void InitDefaultsscc_info_BulkResult_mifare_2fultralight_2fbulk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::ultralight::bulk::_BulkResult_default_instance_;
    new (ptr) ::mifare::ultralight::bulk::BulkResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::ultralight::bulk::BulkResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BulkResult_mifare_2fultralight_2fbulk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BulkResult_mifare_2fultralight_2fbulk_2eproto}, {
      &scc_info_CommandResult_mifare_2fultralight_2fbulk_2eproto.base,}};

static void InitDefaultsscc_info_Command_mifare_2fultralight_2fbulk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::ultralight::bulk::_Command_default_instance_;
    new (ptr) ::mifare::ultralight::bulk::Command();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::ultralight::bulk::Command::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Command_mifare_2fultralight_2fbulk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_Command_mifare_2fultralight_2fbulk_2eproto}, {
      &scc_info_ReadPages_mifare_2fultralight_2fread_2eproto.base,
      &scc_info_WritePages_mifare_2fultralight_2fwrite_2eproto.base,
      &scc_info_GetCounter_mifare_2fultralight_2fcounter_2fget_2eproto.base,
      &scc_info_IncrementCounter_mifare_2fultralight_2fcounter_2fincrement_2eproto.base,
      &scc_info_ClearKey_mifare_2fultralight_2fauth_2eproto.base,
      &scc_info_SamKey_mifare_2fultralight_2fauth_2eproto.base,
      &scc_info_ClearPassword_mifare_2fultralight_2fpassword_2eproto.base,
      &scc_info_SamPassword_mifare_2fultralight_2fpassword_2eproto.base,}};

static void InitDefaultsscc_info_CommandResult_mifare_2fultralight_2fbulk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::ultralight::bulk::_CommandResult_default_instance_;
    new (ptr) ::mifare::ultralight::bulk::CommandResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::ultralight::bulk::CommandResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommandResult_mifare_2fultralight_2fbulk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CommandResult_mifare_2fultralight_2fbulk_2eproto}, {
      &scc_info_Pages_mifare_2fultralight_2fread_2eproto.base,
      &scc_info_CounterValue_mifare_2fultralight_2fcounter_2fget_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mifare_2fultralight_2fbulk_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mifare_2fultralight_2fbulk_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mifare_2fultralight_2fbulk_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mifare_2fultralight_2fbulk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::bulk::BulkOperation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::bulk::BulkOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::bulk::BulkOperation, operations_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::bulk::BulkResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::bulk::BulkResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::bulk::BulkResult, results_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::bulk::Command, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::bulk::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::bulk::Command, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::mifare::ultralight::bulk::CommandDefaultTypeInternal, read_pages_),
  offsetof(::mifare::ultralight::bulk::CommandDefaultTypeInternal, write_pages_),
  offsetof(::mifare::ultralight::bulk::CommandDefaultTypeInternal, get_counter_),
  offsetof(::mifare::ultralight::bulk::CommandDefaultTypeInternal, increment_counter_),
  offsetof(::mifare::ultralight::bulk::CommandDefaultTypeInternal, auth_on_clear_key_),
  offsetof(::mifare::ultralight::bulk::CommandDefaultTypeInternal, auth_on_sam_key_),
  offsetof(::mifare::ultralight::bulk::CommandDefaultTypeInternal, auth_clear_password_),
  offsetof(::mifare::ultralight::bulk::CommandDefaultTypeInternal, auth_sam_password_),
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::bulk::Command, MfrCmd_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::bulk::CommandResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::bulk::CommandResult, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::bulk::CommandResult, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::mifare::ultralight::bulk::CommandResultDefaultTypeInternal, pages_),
  offsetof(::mifare::ultralight::bulk::CommandResultDefaultTypeInternal, counter_value_),
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::bulk::CommandResult, MfrResult_),
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::mifare::ultralight::bulk::BulkOperation)},
  { 7, 13, sizeof(::mifare::ultralight::bulk::BulkResult)},
  { 14, 28, sizeof(::mifare::ultralight::bulk::Command)},
  { 36, 44, sizeof(::mifare::ultralight::bulk::CommandResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::ultralight::bulk::_BulkOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::ultralight::bulk::_BulkResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::ultralight::bulk::_Command_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::ultralight::bulk::_CommandResult_default_instance_),
};

const char descriptor_table_protodef_mifare_2fultralight_2fbulk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034mifare/ultralight/bulk.proto\022\026mifare.u"
  "ltralight.bulk\032\034mifare/ultralight/auth.p"
  "roto\032\034mifare/ultralight/read.proto\032\035mifa"
  "re/ultralight/write.proto\032 mifare/ultral"
  "ight/password.proto\032#mifare/ultralight/c"
  "ounter/get.proto\032)mifare/ultralight/coun"
  "ter/increment.proto\"D\n\rBulkOperation\0223\n\n"
  "operations\030\001 \003(\0132\037.mifare.ultralight.bul"
  "k.Command\"D\n\nBulkResult\0226\n\007results\030\001 \003(\013"
  "2%.mifare.ultralight.bulk.CommandResult\""
  "\250\004\n\007Command\0227\n\nread_pages\030\001 \001(\0132!.mifare"
  ".ultralight.read.ReadPagesH\000\022:\n\013write_pa"
  "ges\030\002 \001(\0132#.mifare.ultralight.write.Writ"
  "ePagesH\000\022@\n\013get_counter\030\003 \001(\0132).mifare.u"
  "ltralight.counter.get.GetCounterH\000\022R\n\021in"
  "crement_counter\030\004 \001(\01325.mifare.ultraligh"
  "t.counter.increment.IncrementCounterH\000\022="
  "\n\021auth_on_clear_key\030\005 \001(\0132 .mifare.ultra"
  "light.auth.ClearKeyH\000\0229\n\017auth_on_sam_key"
  "\030\006 \001(\0132\036.mifare.ultralight.auth.SamKeyH\000"
  "\022H\n\023auth_clear_password\030\007 \001(\0132).mifare.u"
  "ltralight.password.ClearPasswordH\000\022D\n\021au"
  "th_sam_password\030\010 \001(\0132\'.mifare.ultraligh"
  "t.password.SamPasswordH\000B\010\n\006MfrCmd\"\222\001\n\rC"
  "ommandResult\022.\n\005pages\030\001 \001(\0132\035.mifare.ult"
  "ralight.read.PagesH\000\022D\n\rcounter_value\030\002 "
  "\001(\0132+.mifare.ultralight.counter.get.Coun"
  "terValueH\000B\013\n\tMfrResult"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mifare_2fultralight_2fbulk_2eproto_deps[6] = {
  &::descriptor_table_mifare_2fultralight_2fauth_2eproto,
  &::descriptor_table_mifare_2fultralight_2fcounter_2fget_2eproto,
  &::descriptor_table_mifare_2fultralight_2fcounter_2fincrement_2eproto,
  &::descriptor_table_mifare_2fultralight_2fpassword_2eproto,
  &::descriptor_table_mifare_2fultralight_2fread_2eproto,
  &::descriptor_table_mifare_2fultralight_2fwrite_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mifare_2fultralight_2fbulk_2eproto_sccs[4] = {
  &scc_info_BulkOperation_mifare_2fultralight_2fbulk_2eproto.base,
  &scc_info_BulkResult_mifare_2fultralight_2fbulk_2eproto.base,
  &scc_info_Command_mifare_2fultralight_2fbulk_2eproto.base,
  &scc_info_CommandResult_mifare_2fultralight_2fbulk_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mifare_2fultralight_2fbulk_2eproto_once;
static bool descriptor_table_mifare_2fultralight_2fbulk_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mifare_2fultralight_2fbulk_2eproto = {
  &descriptor_table_mifare_2fultralight_2fbulk_2eproto_initialized, descriptor_table_protodef_mifare_2fultralight_2fbulk_2eproto, "mifare/ultralight/bulk.proto", 1103,
  &descriptor_table_mifare_2fultralight_2fbulk_2eproto_once, descriptor_table_mifare_2fultralight_2fbulk_2eproto_sccs, descriptor_table_mifare_2fultralight_2fbulk_2eproto_deps, 4, 6,
  schemas, file_default_instances, TableStruct_mifare_2fultralight_2fbulk_2eproto::offsets,
  file_level_metadata_mifare_2fultralight_2fbulk_2eproto, 4, file_level_enum_descriptors_mifare_2fultralight_2fbulk_2eproto, file_level_service_descriptors_mifare_2fultralight_2fbulk_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mifare_2fultralight_2fbulk_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mifare_2fultralight_2fbulk_2eproto), true);
namespace mifare {
namespace ultralight {
namespace bulk {

// ===================================================================

void BulkOperation::InitAsDefaultInstance() {
}
class BulkOperation::_Internal {
 public:
  using HasBits = decltype(std::declval<BulkOperation>()._has_bits_);
};

BulkOperation::BulkOperation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.ultralight.bulk.BulkOperation)
}
BulkOperation::BulkOperation(const BulkOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mifare.ultralight.bulk.BulkOperation)
}

void BulkOperation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkOperation_mifare_2fultralight_2fbulk_2eproto.base);
}

BulkOperation::~BulkOperation() {
  // @@protoc_insertion_point(destructor:mifare.ultralight.bulk.BulkOperation)
  SharedDtor();
}

void BulkOperation::SharedDtor() {
}

void BulkOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkOperation& BulkOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkOperation_mifare_2fultralight_2fbulk_2eproto.base);
  return *internal_default_instance();
}


void BulkOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.ultralight.bulk.BulkOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BulkOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mifare.ultralight.bulk.Command operations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.ultralight.bulk.BulkOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mifare.ultralight.bulk.Command operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_operations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.ultralight.bulk.BulkOperation)
  return target;
}

size_t BulkOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.ultralight.bulk.BulkOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mifare.ultralight.bulk.Command operations = 1;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.ultralight.bulk.BulkOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.ultralight.bulk.BulkOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.ultralight.bulk.BulkOperation)
    MergeFrom(*source);
  }
}

void BulkOperation::MergeFrom(const BulkOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.ultralight.bulk.BulkOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
}

void BulkOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.ultralight.bulk.BulkOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkOperation::CopyFrom(const BulkOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.ultralight.bulk.BulkOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkOperation::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(operations_)) return false;
  return true;
}

void BulkOperation::InternalSwap(BulkOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  operations_.InternalSwap(&other->operations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkOperation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BulkResult::InitAsDefaultInstance() {
}
class BulkResult::_Internal {
 public:
  using HasBits = decltype(std::declval<BulkResult>()._has_bits_);
};

BulkResult::BulkResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.ultralight.bulk.BulkResult)
}
BulkResult::BulkResult(const BulkResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mifare.ultralight.bulk.BulkResult)
}

void BulkResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BulkResult_mifare_2fultralight_2fbulk_2eproto.base);
}

BulkResult::~BulkResult() {
  // @@protoc_insertion_point(destructor:mifare.ultralight.bulk.BulkResult)
  SharedDtor();
}

void BulkResult::SharedDtor() {
}

void BulkResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BulkResult& BulkResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BulkResult_mifare_2fultralight_2fbulk_2eproto.base);
  return *internal_default_instance();
}


void BulkResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.ultralight.bulk.BulkResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BulkResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mifare.ultralight.bulk.CommandResult results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BulkResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.ultralight.bulk.BulkResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mifare.ultralight.bulk.CommandResult results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.ultralight.bulk.BulkResult)
  return target;
}

size_t BulkResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.ultralight.bulk.BulkResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mifare.ultralight.bulk.CommandResult results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BulkResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.ultralight.bulk.BulkResult)
  GOOGLE_DCHECK_NE(&from, this);
  const BulkResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BulkResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.ultralight.bulk.BulkResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.ultralight.bulk.BulkResult)
    MergeFrom(*source);
  }
}

void BulkResult::MergeFrom(const BulkResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.ultralight.bulk.BulkResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void BulkResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.ultralight.bulk.BulkResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BulkResult::CopyFrom(const BulkResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.ultralight.bulk.BulkResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkResult::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(results_)) return false;
  return true;
}

void BulkResult::InternalSwap(BulkResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Command::InitAsDefaultInstance() {
  ::mifare::ultralight::bulk::_Command_default_instance_.read_pages_ = const_cast< ::mifare::ultralight::read::ReadPages*>(
      ::mifare::ultralight::read::ReadPages::internal_default_instance());
  ::mifare::ultralight::bulk::_Command_default_instance_.write_pages_ = const_cast< ::mifare::ultralight::write::WritePages*>(
      ::mifare::ultralight::write::WritePages::internal_default_instance());
  ::mifare::ultralight::bulk::_Command_default_instance_.get_counter_ = const_cast< ::mifare::ultralight::counter::get::GetCounter*>(
      ::mifare::ultralight::counter::get::GetCounter::internal_default_instance());
  ::mifare::ultralight::bulk::_Command_default_instance_.increment_counter_ = const_cast< ::mifare::ultralight::counter::increment::IncrementCounter*>(
      ::mifare::ultralight::counter::increment::IncrementCounter::internal_default_instance());
  ::mifare::ultralight::bulk::_Command_default_instance_.auth_on_clear_key_ = const_cast< ::mifare::ultralight::auth::ClearKey*>(
      ::mifare::ultralight::auth::ClearKey::internal_default_instance());
  ::mifare::ultralight::bulk::_Command_default_instance_.auth_on_sam_key_ = const_cast< ::mifare::ultralight::auth::SamKey*>(
      ::mifare::ultralight::auth::SamKey::internal_default_instance());
  ::mifare::ultralight::bulk::_Command_default_instance_.auth_clear_password_ = const_cast< ::mifare::ultralight::password::ClearPassword*>(
      ::mifare::ultralight::password::ClearPassword::internal_default_instance());
  ::mifare::ultralight::bulk::_Command_default_instance_.auth_sam_password_ = const_cast< ::mifare::ultralight::password::SamPassword*>(
      ::mifare::ultralight::password::SamPassword::internal_default_instance());
}
class Command::_Internal {
 public:
  using HasBits = decltype(std::declval<Command>()._has_bits_);
  static const ::mifare::ultralight::read::ReadPages& read_pages(const Command* msg);
  static const ::mifare::ultralight::write::WritePages& write_pages(const Command* msg);
  static const ::mifare::ultralight::counter::get::GetCounter& get_counter(const Command* msg);
  static const ::mifare::ultralight::counter::increment::IncrementCounter& increment_counter(const Command* msg);
  static const ::mifare::ultralight::auth::ClearKey& auth_on_clear_key(const Command* msg);
  static const ::mifare::ultralight::auth::SamKey& auth_on_sam_key(const Command* msg);
  static const ::mifare::ultralight::password::ClearPassword& auth_clear_password(const Command* msg);
  static const ::mifare::ultralight::password::SamPassword& auth_sam_password(const Command* msg);
};

const ::mifare::ultralight::read::ReadPages&
Command::_Internal::read_pages(const Command* msg) {
  return *msg->MfrCmd_.read_pages_;
}
const ::mifare::ultralight::write::WritePages&
Command::_Internal::write_pages(const Command* msg) {
  return *msg->MfrCmd_.write_pages_;
}
const ::mifare::ultralight::counter::get::GetCounter&
Command::_Internal::get_counter(const Command* msg) {
  return *msg->MfrCmd_.get_counter_;
}
const ::mifare::ultralight::counter::increment::IncrementCounter&
Command::_Internal::increment_counter(const Command* msg) {
  return *msg->MfrCmd_.increment_counter_;
}
const ::mifare::ultralight::auth::ClearKey&
Command::_Internal::auth_on_clear_key(const Command* msg) {
  return *msg->MfrCmd_.auth_on_clear_key_;
}
const ::mifare::ultralight::auth::SamKey&
Command::_Internal::auth_on_sam_key(const Command* msg) {
  return *msg->MfrCmd_.auth_on_sam_key_;
}
const ::mifare::ultralight::password::ClearPassword&
Command::_Internal::auth_clear_password(const Command* msg) {
  return *msg->MfrCmd_.auth_clear_password_;
}
const ::mifare::ultralight::password::SamPassword&
Command::_Internal::auth_sam_password(const Command* msg) {
  return *msg->MfrCmd_.auth_sam_password_;
}
void Command::set_allocated_read_pages(::mifare::ultralight::read::ReadPages* read_pages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrCmd();
  if (read_pages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      read_pages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_pages, submessage_arena);
    }
    set_has_read_pages();
    MfrCmd_.read_pages_ = read_pages;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.ultralight.bulk.Command.read_pages)
}
void Command::clear_read_pages() {
  if (_internal_has_read_pages()) {
    delete MfrCmd_.read_pages_;
    clear_has_MfrCmd();
  }
}
void Command::set_allocated_write_pages(::mifare::ultralight::write::WritePages* write_pages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrCmd();
  if (write_pages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      write_pages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, write_pages, submessage_arena);
    }
    set_has_write_pages();
    MfrCmd_.write_pages_ = write_pages;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.ultralight.bulk.Command.write_pages)
}
void Command::clear_write_pages() {
  if (_internal_has_write_pages()) {
    delete MfrCmd_.write_pages_;
    clear_has_MfrCmd();
  }
}
void Command::set_allocated_get_counter(::mifare::ultralight::counter::get::GetCounter* get_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrCmd();
  if (get_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_counter, submessage_arena);
    }
    set_has_get_counter();
    MfrCmd_.get_counter_ = get_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.ultralight.bulk.Command.get_counter)
}
void Command::clear_get_counter() {
  if (_internal_has_get_counter()) {
    delete MfrCmd_.get_counter_;
    clear_has_MfrCmd();
  }
}
void Command::set_allocated_increment_counter(::mifare::ultralight::counter::increment::IncrementCounter* increment_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrCmd();
  if (increment_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      increment_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, increment_counter, submessage_arena);
    }
    set_has_increment_counter();
    MfrCmd_.increment_counter_ = increment_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.ultralight.bulk.Command.increment_counter)
}
void Command::clear_increment_counter() {
  if (_internal_has_increment_counter()) {
    delete MfrCmd_.increment_counter_;
    clear_has_MfrCmd();
  }
}
void Command::set_allocated_auth_on_clear_key(::mifare::ultralight::auth::ClearKey* auth_on_clear_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrCmd();
  if (auth_on_clear_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_on_clear_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_on_clear_key, submessage_arena);
    }
    set_has_auth_on_clear_key();
    MfrCmd_.auth_on_clear_key_ = auth_on_clear_key;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.ultralight.bulk.Command.auth_on_clear_key)
}
void Command::clear_auth_on_clear_key() {
  if (_internal_has_auth_on_clear_key()) {
    delete MfrCmd_.auth_on_clear_key_;
    clear_has_MfrCmd();
  }
}
void Command::set_allocated_auth_on_sam_key(::mifare::ultralight::auth::SamKey* auth_on_sam_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrCmd();
  if (auth_on_sam_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_on_sam_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_on_sam_key, submessage_arena);
    }
    set_has_auth_on_sam_key();
    MfrCmd_.auth_on_sam_key_ = auth_on_sam_key;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.ultralight.bulk.Command.auth_on_sam_key)
}
void Command::clear_auth_on_sam_key() {
  if (_internal_has_auth_on_sam_key()) {
    delete MfrCmd_.auth_on_sam_key_;
    clear_has_MfrCmd();
  }
}
void Command::set_allocated_auth_clear_password(::mifare::ultralight::password::ClearPassword* auth_clear_password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrCmd();
  if (auth_clear_password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_clear_password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_clear_password, submessage_arena);
    }
    set_has_auth_clear_password();
    MfrCmd_.auth_clear_password_ = auth_clear_password;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.ultralight.bulk.Command.auth_clear_password)
}
void Command::clear_auth_clear_password() {
  if (_internal_has_auth_clear_password()) {
    delete MfrCmd_.auth_clear_password_;
    clear_has_MfrCmd();
  }
}
void Command::set_allocated_auth_sam_password(::mifare::ultralight::password::SamPassword* auth_sam_password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrCmd();
  if (auth_sam_password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth_sam_password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_sam_password, submessage_arena);
    }
    set_has_auth_sam_password();
    MfrCmd_.auth_sam_password_ = auth_sam_password;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.ultralight.bulk.Command.auth_sam_password)
}
void Command::clear_auth_sam_password() {
  if (_internal_has_auth_sam_password()) {
    delete MfrCmd_.auth_sam_password_;
    clear_has_MfrCmd();
  }
}
Command::Command()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.ultralight.bulk.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_MfrCmd();
  switch (from.MfrCmd_case()) {
    case kReadPages: {
      _internal_mutable_read_pages()->::mifare::ultralight::read::ReadPages::MergeFrom(from._internal_read_pages());
      break;
    }
    case kWritePages: {
      _internal_mutable_write_pages()->::mifare::ultralight::write::WritePages::MergeFrom(from._internal_write_pages());
      break;
    }
    case kGetCounter: {
      _internal_mutable_get_counter()->::mifare::ultralight::counter::get::GetCounter::MergeFrom(from._internal_get_counter());
      break;
    }
    case kIncrementCounter: {
      _internal_mutable_increment_counter()->::mifare::ultralight::counter::increment::IncrementCounter::MergeFrom(from._internal_increment_counter());
      break;
    }
    case kAuthOnClearKey: {
      _internal_mutable_auth_on_clear_key()->::mifare::ultralight::auth::ClearKey::MergeFrom(from._internal_auth_on_clear_key());
      break;
    }
    case kAuthOnSamKey: {
      _internal_mutable_auth_on_sam_key()->::mifare::ultralight::auth::SamKey::MergeFrom(from._internal_auth_on_sam_key());
      break;
    }
    case kAuthClearPassword: {
      _internal_mutable_auth_clear_password()->::mifare::ultralight::password::ClearPassword::MergeFrom(from._internal_auth_clear_password());
      break;
    }
    case kAuthSamPassword: {
      _internal_mutable_auth_sam_password()->::mifare::ultralight::password::SamPassword::MergeFrom(from._internal_auth_sam_password());
      break;
    }
    case MFRCMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mifare.ultralight.bulk.Command)
}

void Command::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Command_mifare_2fultralight_2fbulk_2eproto.base);
  clear_has_MfrCmd();
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:mifare.ultralight.bulk.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (has_MfrCmd()) {
    clear_MfrCmd();
  }
}

void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Command& Command::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Command_mifare_2fultralight_2fbulk_2eproto.base);
  return *internal_default_instance();
}


void Command::clear_MfrCmd() {
// @@protoc_insertion_point(one_of_clear_start:mifare.ultralight.bulk.Command)
  switch (MfrCmd_case()) {
    case kReadPages: {
      delete MfrCmd_.read_pages_;
      break;
    }
    case kWritePages: {
      delete MfrCmd_.write_pages_;
      break;
    }
    case kGetCounter: {
      delete MfrCmd_.get_counter_;
      break;
    }
    case kIncrementCounter: {
      delete MfrCmd_.increment_counter_;
      break;
    }
    case kAuthOnClearKey: {
      delete MfrCmd_.auth_on_clear_key_;
      break;
    }
    case kAuthOnSamKey: {
      delete MfrCmd_.auth_on_sam_key_;
      break;
    }
    case kAuthClearPassword: {
      delete MfrCmd_.auth_clear_password_;
      break;
    }
    case kAuthSamPassword: {
      delete MfrCmd_.auth_sam_password_;
      break;
    }
    case MFRCMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MFRCMD_NOT_SET;
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.ultralight.bulk.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_MfrCmd();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mifare.ultralight.read.ReadPages read_pages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_pages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.write.WritePages write_pages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_write_pages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.counter.get.GetCounter get_counter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.counter.increment.IncrementCounter increment_counter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_increment_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.auth.ClearKey auth_on_clear_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth_on_clear_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.auth.SamKey auth_on_sam_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth_on_sam_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.password.ClearPassword auth_clear_password = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth_clear_password(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.password.SamPassword auth_sam_password = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth_sam_password(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.ultralight.bulk.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (MfrCmd_case()) {
    case kReadPages: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::read_pages(this), target, stream);
      break;
    }
    case kWritePages: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::write_pages(this), target, stream);
      break;
    }
    case kGetCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::get_counter(this), target, stream);
      break;
    }
    case kIncrementCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::increment_counter(this), target, stream);
      break;
    }
    case kAuthOnClearKey: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::auth_on_clear_key(this), target, stream);
      break;
    }
    case kAuthOnSamKey: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::auth_on_sam_key(this), target, stream);
      break;
    }
    case kAuthClearPassword: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::auth_clear_password(this), target, stream);
      break;
    }
    case kAuthSamPassword: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::auth_sam_password(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.ultralight.bulk.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.ultralight.bulk.Command)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (MfrCmd_case()) {
    // optional .mifare.ultralight.read.ReadPages read_pages = 1;
    case kReadPages: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrCmd_.read_pages_);
      break;
    }
    // optional .mifare.ultralight.write.WritePages write_pages = 2;
    case kWritePages: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrCmd_.write_pages_);
      break;
    }
    // optional .mifare.ultralight.counter.get.GetCounter get_counter = 3;
    case kGetCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrCmd_.get_counter_);
      break;
    }
    // optional .mifare.ultralight.counter.increment.IncrementCounter increment_counter = 4;
    case kIncrementCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrCmd_.increment_counter_);
      break;
    }
    // optional .mifare.ultralight.auth.ClearKey auth_on_clear_key = 5;
    case kAuthOnClearKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrCmd_.auth_on_clear_key_);
      break;
    }
    // optional .mifare.ultralight.auth.SamKey auth_on_sam_key = 6;
    case kAuthOnSamKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrCmd_.auth_on_sam_key_);
      break;
    }
    // optional .mifare.ultralight.password.ClearPassword auth_clear_password = 7;
    case kAuthClearPassword: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrCmd_.auth_clear_password_);
      break;
    }
    // optional .mifare.ultralight.password.SamPassword auth_sam_password = 8;
    case kAuthSamPassword: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrCmd_.auth_sam_password_);
      break;
    }
    case MFRCMD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.ultralight.bulk.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.ultralight.bulk.Command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.ultralight.bulk.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.ultralight.bulk.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.MfrCmd_case()) {
    case kReadPages: {
      _internal_mutable_read_pages()->::mifare::ultralight::read::ReadPages::MergeFrom(from._internal_read_pages());
      break;
    }
    case kWritePages: {
      _internal_mutable_write_pages()->::mifare::ultralight::write::WritePages::MergeFrom(from._internal_write_pages());
      break;
    }
    case kGetCounter: {
      _internal_mutable_get_counter()->::mifare::ultralight::counter::get::GetCounter::MergeFrom(from._internal_get_counter());
      break;
    }
    case kIncrementCounter: {
      _internal_mutable_increment_counter()->::mifare::ultralight::counter::increment::IncrementCounter::MergeFrom(from._internal_increment_counter());
      break;
    }
    case kAuthOnClearKey: {
      _internal_mutable_auth_on_clear_key()->::mifare::ultralight::auth::ClearKey::MergeFrom(from._internal_auth_on_clear_key());
      break;
    }
    case kAuthOnSamKey: {
      _internal_mutable_auth_on_sam_key()->::mifare::ultralight::auth::SamKey::MergeFrom(from._internal_auth_on_sam_key());
      break;
    }
    case kAuthClearPassword: {
      _internal_mutable_auth_clear_password()->::mifare::ultralight::password::ClearPassword::MergeFrom(from._internal_auth_clear_password());
      break;
    }
    case kAuthSamPassword: {
      _internal_mutable_auth_sam_password()->::mifare::ultralight::password::SamPassword::MergeFrom(from._internal_auth_sam_password());
      break;
    }
    case MFRCMD_NOT_SET: {
      break;
    }
  }
}

void Command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.ultralight.bulk.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.ultralight.bulk.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  switch (MfrCmd_case()) {
    case kReadPages: {
      if (has_read_pages()) {
        if (!this->read_pages().IsInitialized()) return false;
      }
      break;
    }
    case kWritePages: {
      if (has_write_pages()) {
        if (!this->write_pages().IsInitialized()) return false;
      }
      break;
    }
    case kGetCounter: {
      if (has_get_counter()) {
        if (!this->get_counter().IsInitialized()) return false;
      }
      break;
    }
    case kIncrementCounter: {
      if (has_increment_counter()) {
        if (!this->increment_counter().IsInitialized()) return false;
      }
      break;
    }
    case kAuthOnClearKey: {
      if (has_auth_on_clear_key()) {
        if (!this->auth_on_clear_key().IsInitialized()) return false;
      }
      break;
    }
    case kAuthOnSamKey: {
      if (has_auth_on_sam_key()) {
        if (!this->auth_on_sam_key().IsInitialized()) return false;
      }
      break;
    }
    case kAuthClearPassword: {
      if (has_auth_clear_password()) {
        if (!this->auth_clear_password().IsInitialized()) return false;
      }
      break;
    }
    case kAuthSamPassword: {
      if (has_auth_sam_password()) {
        if (!this->auth_sam_password().IsInitialized()) return false;
      }
      break;
    }
    case MFRCMD_NOT_SET: {
      break;
    }
  }
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(MfrCmd_, other->MfrCmd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandResult::InitAsDefaultInstance() {
  ::mifare::ultralight::bulk::_CommandResult_default_instance_.pages_ = const_cast< ::mifare::ultralight::read::Pages*>(
      ::mifare::ultralight::read::Pages::internal_default_instance());
  ::mifare::ultralight::bulk::_CommandResult_default_instance_.counter_value_ = const_cast< ::mifare::ultralight::counter::get::CounterValue*>(
      ::mifare::ultralight::counter::get::CounterValue::internal_default_instance());
}
class CommandResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandResult>()._has_bits_);
  static const ::mifare::ultralight::read::Pages& pages(const CommandResult* msg);
  static const ::mifare::ultralight::counter::get::CounterValue& counter_value(const CommandResult* msg);
};

const ::mifare::ultralight::read::Pages&
CommandResult::_Internal::pages(const CommandResult* msg) {
  return *msg->MfrResult_.pages_;
}
const ::mifare::ultralight::counter::get::CounterValue&
CommandResult::_Internal::counter_value(const CommandResult* msg) {
  return *msg->MfrResult_.counter_value_;
}
void CommandResult::set_allocated_pages(::mifare::ultralight::read::Pages* pages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrResult();
  if (pages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pages, submessage_arena);
    }
    set_has_pages();
    MfrResult_.pages_ = pages;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.ultralight.bulk.CommandResult.pages)
}
void CommandResult::clear_pages() {
  if (_internal_has_pages()) {
    delete MfrResult_.pages_;
    clear_has_MfrResult();
  }
}
void CommandResult::set_allocated_counter_value(::mifare::ultralight::counter::get::CounterValue* counter_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_MfrResult();
  if (counter_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      counter_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counter_value, submessage_arena);
    }
    set_has_counter_value();
    MfrResult_.counter_value_ = counter_value;
  }
  // @@protoc_insertion_point(field_set_allocated:mifare.ultralight.bulk.CommandResult.counter_value)
}
void CommandResult::clear_counter_value() {
  if (_internal_has_counter_value()) {
    delete MfrResult_.counter_value_;
    clear_has_MfrResult();
  }
}
CommandResult::CommandResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.ultralight.bulk.CommandResult)
}
CommandResult::CommandResult(const CommandResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_MfrResult();
  switch (from.MfrResult_case()) {
    case kPages: {
      _internal_mutable_pages()->::mifare::ultralight::read::Pages::MergeFrom(from._internal_pages());
      break;
    }
    case kCounterValue: {
      _internal_mutable_counter_value()->::mifare::ultralight::counter::get::CounterValue::MergeFrom(from._internal_counter_value());
      break;
    }
    case MFRRESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mifare.ultralight.bulk.CommandResult)
}

void CommandResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandResult_mifare_2fultralight_2fbulk_2eproto.base);
  clear_has_MfrResult();
}

CommandResult::~CommandResult() {
  // @@protoc_insertion_point(destructor:mifare.ultralight.bulk.CommandResult)
  SharedDtor();
}

void CommandResult::SharedDtor() {
  if (has_MfrResult()) {
    clear_MfrResult();
  }
}

void CommandResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandResult& CommandResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandResult_mifare_2fultralight_2fbulk_2eproto.base);
  return *internal_default_instance();
}


void CommandResult::clear_MfrResult() {
// @@protoc_insertion_point(one_of_clear_start:mifare.ultralight.bulk.CommandResult)
  switch (MfrResult_case()) {
    case kPages: {
      delete MfrResult_.pages_;
      break;
    }
    case kCounterValue: {
      delete MfrResult_.counter_value_;
      break;
    }
    case MFRRESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MFRRESULT_NOT_SET;
}


void CommandResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.ultralight.bulk.CommandResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_MfrResult();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CommandResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mifare.ultralight.read.Pages pages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.counter.get.CounterValue counter_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_counter_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.ultralight.bulk.CommandResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (MfrResult_case()) {
    case kPages: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::pages(this), target, stream);
      break;
    }
    case kCounterValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::counter_value(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.ultralight.bulk.CommandResult)
  return target;
}

size_t CommandResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.ultralight.bulk.CommandResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (MfrResult_case()) {
    // optional .mifare.ultralight.read.Pages pages = 1;
    case kPages: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrResult_.pages_);
      break;
    }
    // optional .mifare.ultralight.counter.get.CounterValue counter_value = 2;
    case kCounterValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *MfrResult_.counter_value_);
      break;
    }
    case MFRRESULT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.ultralight.bulk.CommandResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.ultralight.bulk.CommandResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.ultralight.bulk.CommandResult)
    MergeFrom(*source);
  }
}

void CommandResult::MergeFrom(const CommandResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.ultralight.bulk.CommandResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.MfrResult_case()) {
    case kPages: {
      _internal_mutable_pages()->::mifare::ultralight::read::Pages::MergeFrom(from._internal_pages());
      break;
    }
    case kCounterValue: {
      _internal_mutable_counter_value()->::mifare::ultralight::counter::get::CounterValue::MergeFrom(from._internal_counter_value());
      break;
    }
    case MFRRESULT_NOT_SET: {
      break;
    }
  }
}

void CommandResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.ultralight.bulk.CommandResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandResult::CopyFrom(const CommandResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.ultralight.bulk.CommandResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResult::IsInitialized() const {
  switch (MfrResult_case()) {
    case kPages: {
      if (has_pages()) {
        if (!this->pages().IsInitialized()) return false;
      }
      break;
    }
    case kCounterValue: {
      if (has_counter_value()) {
        if (!this->counter_value().IsInitialized()) return false;
      }
      break;
    }
    case MFRRESULT_NOT_SET: {
      break;
    }
  }
  return true;
}

void CommandResult::InternalSwap(CommandResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(MfrResult_, other->MfrResult_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bulk
}  // namespace ultralight
}  // namespace mifare
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mifare::ultralight::bulk::BulkOperation* Arena::CreateMaybeMessage< ::mifare::ultralight::bulk::BulkOperation >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::ultralight::bulk::BulkOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::mifare::ultralight::bulk::BulkResult* Arena::CreateMaybeMessage< ::mifare::ultralight::bulk::BulkResult >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::ultralight::bulk::BulkResult >(arena);
}
template<> PROTOBUF_NOINLINE ::mifare::ultralight::bulk::Command* Arena::CreateMaybeMessage< ::mifare::ultralight::bulk::Command >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::ultralight::bulk::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::mifare::ultralight::bulk::CommandResult* Arena::CreateMaybeMessage< ::mifare::ultralight::bulk::CommandResult >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::ultralight::bulk::CommandResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
