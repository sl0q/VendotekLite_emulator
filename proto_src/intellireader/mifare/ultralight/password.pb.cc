// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mifare/ultralight/password.proto

#include "mifare/ultralight/password.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fav2_2fargs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthenticationArguments_mifare_2fav2_2fargs_2eproto;
namespace mifare {
namespace ultralight {
namespace password {
class ClearPasswordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearPassword> _instance;
} _ClearPassword_default_instance_;
class SamPasswordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SamPassword> _instance;
} _SamPassword_default_instance_;
class PasswordAcknowledgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PasswordAcknowledge> _instance;
} _PasswordAcknowledge_default_instance_;
}  // namespace password
}  // namespace ultralight
}  // namespace mifare
static void InitDefaultsscc_info_ClearPassword_mifare_2fultralight_2fpassword_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::ultralight::password::_ClearPassword_default_instance_;
    new (ptr) ::mifare::ultralight::password::ClearPassword();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::ultralight::password::ClearPassword::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearPassword_mifare_2fultralight_2fpassword_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearPassword_mifare_2fultralight_2fpassword_2eproto}, {}};

static void InitDefaultsscc_info_PasswordAcknowledge_mifare_2fultralight_2fpassword_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::ultralight::password::_PasswordAcknowledge_default_instance_;
    new (ptr) ::mifare::ultralight::password::PasswordAcknowledge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::ultralight::password::PasswordAcknowledge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PasswordAcknowledge_mifare_2fultralight_2fpassword_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PasswordAcknowledge_mifare_2fultralight_2fpassword_2eproto}, {}};

static void InitDefaultsscc_info_SamPassword_mifare_2fultralight_2fpassword_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mifare::ultralight::password::_SamPassword_default_instance_;
    new (ptr) ::mifare::ultralight::password::SamPassword();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mifare::ultralight::password::SamPassword::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SamPassword_mifare_2fultralight_2fpassword_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SamPassword_mifare_2fultralight_2fpassword_2eproto}, {
      &scc_info_AuthenticationArguments_mifare_2fav2_2fargs_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mifare_2fultralight_2fpassword_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mifare_2fultralight_2fpassword_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mifare_2fultralight_2fpassword_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mifare_2fultralight_2fpassword_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::password::ClearPassword, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::password::ClearPassword, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::password::ClearPassword, password_),
  0,
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::password::SamPassword, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::password::SamPassword, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::password::SamPassword, av3_args_),
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::password::SamPassword, diversification_input_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::password::PasswordAcknowledge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::password::PasswordAcknowledge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mifare::ultralight::password::PasswordAcknowledge, password_ack_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::mifare::ultralight::password::ClearPassword)},
  { 7, 14, sizeof(::mifare::ultralight::password::SamPassword)},
  { 16, 22, sizeof(::mifare::ultralight::password::PasswordAcknowledge)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::ultralight::password::_ClearPassword_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::ultralight::password::_SamPassword_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mifare::ultralight::password::_PasswordAcknowledge_default_instance_),
};

const char descriptor_table_protodef_mifare_2fultralight_2fpassword_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n mifare/ultralight/password.proto\022\032mifa"
  "re.ultralight.password\032\025mifare/av2/args."
  "proto\"!\n\rClearPassword\022\020\n\010password\030\001 \002(\014"
  "\"h\n\013SamPassword\022:\n\010av3_args\030\001 \002(\0132(.mifa"
  "re.av2.args.AuthenticationArguments\022\035\n\025d"
  "iversification_input\030\002 \001(\014\"+\n\023PasswordAc"
  "knowledge\022\024\n\014password_ack\030\001 \002(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mifare_2fultralight_2fpassword_2eproto_deps[1] = {
  &::descriptor_table_mifare_2fav2_2fargs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mifare_2fultralight_2fpassword_2eproto_sccs[3] = {
  &scc_info_ClearPassword_mifare_2fultralight_2fpassword_2eproto.base,
  &scc_info_PasswordAcknowledge_mifare_2fultralight_2fpassword_2eproto.base,
  &scc_info_SamPassword_mifare_2fultralight_2fpassword_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mifare_2fultralight_2fpassword_2eproto_once;
static bool descriptor_table_mifare_2fultralight_2fpassword_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mifare_2fultralight_2fpassword_2eproto = {
  &descriptor_table_mifare_2fultralight_2fpassword_2eproto_initialized, descriptor_table_protodef_mifare_2fultralight_2fpassword_2eproto, "mifare/ultralight/password.proto", 271,
  &descriptor_table_mifare_2fultralight_2fpassword_2eproto_once, descriptor_table_mifare_2fultralight_2fpassword_2eproto_sccs, descriptor_table_mifare_2fultralight_2fpassword_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_mifare_2fultralight_2fpassword_2eproto::offsets,
  file_level_metadata_mifare_2fultralight_2fpassword_2eproto, 3, file_level_enum_descriptors_mifare_2fultralight_2fpassword_2eproto, file_level_service_descriptors_mifare_2fultralight_2fpassword_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mifare_2fultralight_2fpassword_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mifare_2fultralight_2fpassword_2eproto), true);
namespace mifare {
namespace ultralight {
namespace password {

// ===================================================================

void ClearPassword::InitAsDefaultInstance() {
}
class ClearPassword::_Internal {
 public:
  using HasBits = decltype(std::declval<ClearPassword>()._has_bits_);
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClearPassword::ClearPassword()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.ultralight.password.ClearPassword)
}
ClearPassword::ClearPassword(const ClearPassword& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:mifare.ultralight.password.ClearPassword)
}

void ClearPassword::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClearPassword_mifare_2fultralight_2fpassword_2eproto.base);
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClearPassword::~ClearPassword() {
  // @@protoc_insertion_point(destructor:mifare.ultralight.password.ClearPassword)
  SharedDtor();
}

void ClearPassword::SharedDtor() {
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClearPassword::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearPassword& ClearPassword::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearPassword_mifare_2fultralight_2fpassword_2eproto.base);
  return *internal_default_instance();
}


void ClearPassword::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.ultralight.password.ClearPassword)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    password_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ClearPassword::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearPassword::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.ultralight.password.ClearPassword)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes password = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.ultralight.password.ClearPassword)
  return target;
}

size_t ClearPassword::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.ultralight.password.ClearPassword)
  size_t total_size = 0;

  // required bytes password = 1;
  if (_internal_has_password()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_password());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearPassword::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.ultralight.password.ClearPassword)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearPassword* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearPassword>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.ultralight.password.ClearPassword)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.ultralight.password.ClearPassword)
    MergeFrom(*source);
  }
}

void ClearPassword::MergeFrom(const ClearPassword& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.ultralight.password.ClearPassword)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_password()) {
    _has_bits_[0] |= 0x00000001u;
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void ClearPassword::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.ultralight.password.ClearPassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearPassword::CopyFrom(const ClearPassword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.ultralight.password.ClearPassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearPassword::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ClearPassword::InternalSwap(ClearPassword* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearPassword::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SamPassword::InitAsDefaultInstance() {
  ::mifare::ultralight::password::_SamPassword_default_instance_._instance.get_mutable()->av3_args_ = const_cast< ::mifare::av2::args::AuthenticationArguments*>(
      ::mifare::av2::args::AuthenticationArguments::internal_default_instance());
}
class SamPassword::_Internal {
 public:
  using HasBits = decltype(std::declval<SamPassword>()._has_bits_);
  static const ::mifare::av2::args::AuthenticationArguments& av3_args(const SamPassword* msg);
  static void set_has_av3_args(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_diversification_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mifare::av2::args::AuthenticationArguments&
SamPassword::_Internal::av3_args(const SamPassword* msg) {
  return *msg->av3_args_;
}
void SamPassword::clear_av3_args() {
  if (av3_args_ != nullptr) av3_args_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SamPassword::SamPassword()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.ultralight.password.SamPassword)
}
SamPassword::SamPassword(const SamPassword& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diversification_input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_diversification_input()) {
    diversification_input_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diversification_input_);
  }
  if (from._internal_has_av3_args()) {
    av3_args_ = new ::mifare::av2::args::AuthenticationArguments(*from.av3_args_);
  } else {
    av3_args_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mifare.ultralight.password.SamPassword)
}

void SamPassword::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SamPassword_mifare_2fultralight_2fpassword_2eproto.base);
  diversification_input_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  av3_args_ = nullptr;
}

SamPassword::~SamPassword() {
  // @@protoc_insertion_point(destructor:mifare.ultralight.password.SamPassword)
  SharedDtor();
}

void SamPassword::SharedDtor() {
  diversification_input_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete av3_args_;
}

void SamPassword::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SamPassword& SamPassword::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SamPassword_mifare_2fultralight_2fpassword_2eproto.base);
  return *internal_default_instance();
}


void SamPassword::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.ultralight.password.SamPassword)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      diversification_input_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(av3_args_ != nullptr);
      av3_args_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SamPassword::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mifare.av2.args.AuthenticationArguments av3_args = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_av3_args(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes diversification_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_diversification_input();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SamPassword::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.ultralight.password.SamPassword)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mifare.av2.args.AuthenticationArguments av3_args = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::av3_args(this), target, stream);
  }

  // optional bytes diversification_input = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_diversification_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.ultralight.password.SamPassword)
  return target;
}

size_t SamPassword::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.ultralight.password.SamPassword)
  size_t total_size = 0;

  // required .mifare.av2.args.AuthenticationArguments av3_args = 1;
  if (_internal_has_av3_args()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *av3_args_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes diversification_input = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_diversification_input());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SamPassword::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.ultralight.password.SamPassword)
  GOOGLE_DCHECK_NE(&from, this);
  const SamPassword* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SamPassword>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.ultralight.password.SamPassword)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.ultralight.password.SamPassword)
    MergeFrom(*source);
  }
}

void SamPassword::MergeFrom(const SamPassword& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.ultralight.password.SamPassword)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      diversification_input_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.diversification_input_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_av3_args()->::mifare::av2::args::AuthenticationArguments::MergeFrom(from._internal_av3_args());
    }
  }
}

void SamPassword::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.ultralight.password.SamPassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SamPassword::CopyFrom(const SamPassword& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.ultralight.password.SamPassword)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamPassword::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (_internal_has_av3_args()) {
    if (!av3_args_->IsInitialized()) return false;
  }
  return true;
}

void SamPassword::InternalSwap(SamPassword* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  diversification_input_.Swap(&other->diversification_input_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(av3_args_, other->av3_args_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SamPassword::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PasswordAcknowledge::InitAsDefaultInstance() {
}
class PasswordAcknowledge::_Internal {
 public:
  using HasBits = decltype(std::declval<PasswordAcknowledge>()._has_bits_);
  static void set_has_password_ack(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PasswordAcknowledge::PasswordAcknowledge()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mifare.ultralight.password.PasswordAcknowledge)
}
PasswordAcknowledge::PasswordAcknowledge(const PasswordAcknowledge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_ack_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password_ack()) {
    password_ack_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_ack_);
  }
  // @@protoc_insertion_point(copy_constructor:mifare.ultralight.password.PasswordAcknowledge)
}

void PasswordAcknowledge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PasswordAcknowledge_mifare_2fultralight_2fpassword_2eproto.base);
  password_ack_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PasswordAcknowledge::~PasswordAcknowledge() {
  // @@protoc_insertion_point(destructor:mifare.ultralight.password.PasswordAcknowledge)
  SharedDtor();
}

void PasswordAcknowledge::SharedDtor() {
  password_ack_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PasswordAcknowledge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PasswordAcknowledge& PasswordAcknowledge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PasswordAcknowledge_mifare_2fultralight_2fpassword_2eproto.base);
  return *internal_default_instance();
}


void PasswordAcknowledge::Clear() {
// @@protoc_insertion_point(message_clear_start:mifare.ultralight.password.PasswordAcknowledge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    password_ack_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PasswordAcknowledge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes password_ack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_password_ack();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PasswordAcknowledge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mifare.ultralight.password.PasswordAcknowledge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes password_ack = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_password_ack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mifare.ultralight.password.PasswordAcknowledge)
  return target;
}

size_t PasswordAcknowledge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mifare.ultralight.password.PasswordAcknowledge)
  size_t total_size = 0;

  // required bytes password_ack = 1;
  if (_internal_has_password_ack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_password_ack());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PasswordAcknowledge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mifare.ultralight.password.PasswordAcknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  const PasswordAcknowledge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PasswordAcknowledge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mifare.ultralight.password.PasswordAcknowledge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mifare.ultralight.password.PasswordAcknowledge)
    MergeFrom(*source);
  }
}

void PasswordAcknowledge::MergeFrom(const PasswordAcknowledge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mifare.ultralight.password.PasswordAcknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_password_ack()) {
    _has_bits_[0] |= 0x00000001u;
    password_ack_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_ack_);
  }
}

void PasswordAcknowledge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mifare.ultralight.password.PasswordAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PasswordAcknowledge::CopyFrom(const PasswordAcknowledge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mifare.ultralight.password.PasswordAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PasswordAcknowledge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PasswordAcknowledge::InternalSwap(PasswordAcknowledge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  password_ack_.Swap(&other->password_ack_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PasswordAcknowledge::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace password
}  // namespace ultralight
}  // namespace mifare
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mifare::ultralight::password::ClearPassword* Arena::CreateMaybeMessage< ::mifare::ultralight::password::ClearPassword >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::ultralight::password::ClearPassword >(arena);
}
template<> PROTOBUF_NOINLINE ::mifare::ultralight::password::SamPassword* Arena::CreateMaybeMessage< ::mifare::ultralight::password::SamPassword >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::ultralight::password::SamPassword >(arena);
}
template<> PROTOBUF_NOINLINE ::mifare::ultralight::password::PasswordAcknowledge* Arena::CreateMaybeMessage< ::mifare::ultralight::password::PasswordAcknowledge >(Arena* arena) {
  return Arena::CreateInternal< ::mifare::ultralight::password::PasswordAcknowledge >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
