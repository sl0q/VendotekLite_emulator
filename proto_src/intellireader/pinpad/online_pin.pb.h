// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pinpad/online_pin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pinpad_2fonline_5fpin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pinpad_2fonline_5fpin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "pinpad/key_bundle.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pinpad_2fonline_5fpin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pinpad_2fonline_5fpin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pinpad_2fonline_5fpin_2eproto;
namespace pinpad {
namespace online_pin {
class EnterOnlinePin;
class EnterOnlinePinDefaultTypeInternal;
extern EnterOnlinePinDefaultTypeInternal _EnterOnlinePin_default_instance_;
class EntryResult;
class EntryResultDefaultTypeInternal;
extern EntryResultDefaultTypeInternal _EntryResult_default_instance_;
class PinEncryptionParams;
class PinEncryptionParamsDefaultTypeInternal;
extern PinEncryptionParamsDefaultTypeInternal _PinEncryptionParams_default_instance_;
}  // namespace online_pin
}  // namespace pinpad
PROTOBUF_NAMESPACE_OPEN
template<> ::pinpad::online_pin::EnterOnlinePin* Arena::CreateMaybeMessage<::pinpad::online_pin::EnterOnlinePin>(Arena*);
template<> ::pinpad::online_pin::EntryResult* Arena::CreateMaybeMessage<::pinpad::online_pin::EntryResult>(Arena*);
template<> ::pinpad::online_pin::PinEncryptionParams* Arena::CreateMaybeMessage<::pinpad::online_pin::PinEncryptionParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pinpad {
namespace online_pin {

enum PinBlockFormat : int {
  ISO_9564_FORMAT_0 = 0,
  ISO_9564_FORMAT_4 = 4
};
bool PinBlockFormat_IsValid(int value);
constexpr PinBlockFormat PinBlockFormat_MIN = ISO_9564_FORMAT_0;
constexpr PinBlockFormat PinBlockFormat_MAX = ISO_9564_FORMAT_4;
constexpr int PinBlockFormat_ARRAYSIZE = PinBlockFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PinBlockFormat_descriptor();
template<typename T>
inline const std::string& PinBlockFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PinBlockFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PinBlockFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PinBlockFormat_descriptor(), enum_t_value);
}
inline bool PinBlockFormat_Parse(
    const std::string& name, PinBlockFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PinBlockFormat>(
    PinBlockFormat_descriptor(), name, value);
}
enum EntryStatus : int {
  PIN_ENTERED = 0,
  PIN_ENTRY_BYPASSED = 1,
  PIN_ENTRY_TIMEOUT = 2
};
bool EntryStatus_IsValid(int value);
constexpr EntryStatus EntryStatus_MIN = PIN_ENTERED;
constexpr EntryStatus EntryStatus_MAX = PIN_ENTRY_TIMEOUT;
constexpr int EntryStatus_ARRAYSIZE = EntryStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntryStatus_descriptor();
template<typename T>
inline const std::string& EntryStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EntryStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EntryStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EntryStatus_descriptor(), enum_t_value);
}
inline bool EntryStatus_Parse(
    const std::string& name, EntryStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EntryStatus>(
    EntryStatus_descriptor(), name, value);
}
// ===================================================================

class EnterOnlinePin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pinpad.online_pin.EnterOnlinePin) */ {
 public:
  EnterOnlinePin();
  virtual ~EnterOnlinePin();

  EnterOnlinePin(const EnterOnlinePin& from);
  EnterOnlinePin(EnterOnlinePin&& from) noexcept
    : EnterOnlinePin() {
    *this = ::std::move(from);
  }

  inline EnterOnlinePin& operator=(const EnterOnlinePin& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterOnlinePin& operator=(EnterOnlinePin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnterOnlinePin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterOnlinePin* internal_default_instance() {
    return reinterpret_cast<const EnterOnlinePin*>(
               &_EnterOnlinePin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EnterOnlinePin& a, EnterOnlinePin& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterOnlinePin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterOnlinePin* New() const final {
    return CreateMaybeMessage<EnterOnlinePin>(nullptr);
  }

  EnterOnlinePin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterOnlinePin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterOnlinePin& from);
  void MergeFrom(const EnterOnlinePin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterOnlinePin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pinpad.online_pin.EnterOnlinePin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pinpad_2fonline_5fpin_2eproto);
    return ::descriptor_table_pinpad_2fonline_5fpin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPanFieldNumber = 1,
    kEncryptionParamsFieldNumber = 2,
  };
  // required bytes pan = 1;
  bool has_pan() const;
  private:
  bool _internal_has_pan() const;
  public:
  void clear_pan();
  const std::string& pan() const;
  void set_pan(const std::string& value);
  void set_pan(std::string&& value);
  void set_pan(const char* value);
  void set_pan(const void* value, size_t size);
  std::string* mutable_pan();
  std::string* release_pan();
  void set_allocated_pan(std::string* pan);
  private:
  const std::string& _internal_pan() const;
  void _internal_set_pan(const std::string& value);
  std::string* _internal_mutable_pan();
  public:

  // required .pinpad.online_pin.PinEncryptionParams encryption_params = 2;
  bool has_encryption_params() const;
  private:
  bool _internal_has_encryption_params() const;
  public:
  void clear_encryption_params();
  const ::pinpad::online_pin::PinEncryptionParams& encryption_params() const;
  ::pinpad::online_pin::PinEncryptionParams* release_encryption_params();
  ::pinpad::online_pin::PinEncryptionParams* mutable_encryption_params();
  void set_allocated_encryption_params(::pinpad::online_pin::PinEncryptionParams* encryption_params);
  private:
  const ::pinpad::online_pin::PinEncryptionParams& _internal_encryption_params() const;
  ::pinpad::online_pin::PinEncryptionParams* _internal_mutable_encryption_params();
  public:

  // @@protoc_insertion_point(class_scope:pinpad.online_pin.EnterOnlinePin)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pan_;
  ::pinpad::online_pin::PinEncryptionParams* encryption_params_;
  friend struct ::TableStruct_pinpad_2fonline_5fpin_2eproto;
};
// -------------------------------------------------------------------

class PinEncryptionParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pinpad.online_pin.PinEncryptionParams) */ {
 public:
  PinEncryptionParams();
  virtual ~PinEncryptionParams();

  PinEncryptionParams(const PinEncryptionParams& from);
  PinEncryptionParams(PinEncryptionParams&& from) noexcept
    : PinEncryptionParams() {
    *this = ::std::move(from);
  }

  inline PinEncryptionParams& operator=(const PinEncryptionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline PinEncryptionParams& operator=(PinEncryptionParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PinEncryptionParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PinEncryptionParams* internal_default_instance() {
    return reinterpret_cast<const PinEncryptionParams*>(
               &_PinEncryptionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PinEncryptionParams& a, PinEncryptionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(PinEncryptionParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PinEncryptionParams* New() const final {
    return CreateMaybeMessage<PinEncryptionParams>(nullptr);
  }

  PinEncryptionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PinEncryptionParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PinEncryptionParams& from);
  void MergeFrom(const PinEncryptionParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PinEncryptionParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pinpad.online_pin.PinEncryptionParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pinpad_2fonline_5fpin_2eproto);
    return ::descriptor_table_pinpad_2fonline_5fpin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionKeyFieldNumber = 2,
    kKeyFormatFieldNumber = 1,
    kPinBlockFormatFieldNumber = 3,
  };
  // required bytes session_key = 2;
  bool has_session_key() const;
  private:
  bool _internal_has_session_key() const;
  public:
  void clear_session_key();
  const std::string& session_key() const;
  void set_session_key(const std::string& value);
  void set_session_key(std::string&& value);
  void set_session_key(const char* value);
  void set_session_key(const void* value, size_t size);
  std::string* mutable_session_key();
  std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);
  private:
  const std::string& _internal_session_key() const;
  void _internal_set_session_key(const std::string& value);
  std::string* _internal_mutable_session_key();
  public:

  // required .pinpad.key_bundle.KeyBundleFormat key_format = 1;
  bool has_key_format() const;
  private:
  bool _internal_has_key_format() const;
  public:
  void clear_key_format();
  ::pinpad::key_bundle::KeyBundleFormat key_format() const;
  void set_key_format(::pinpad::key_bundle::KeyBundleFormat value);
  private:
  ::pinpad::key_bundle::KeyBundleFormat _internal_key_format() const;
  void _internal_set_key_format(::pinpad::key_bundle::KeyBundleFormat value);
  public:

  // optional .pinpad.online_pin.PinBlockFormat pin_block_format = 3 [default = ISO_9564_FORMAT_4];
  bool has_pin_block_format() const;
  private:
  bool _internal_has_pin_block_format() const;
  public:
  void clear_pin_block_format();
  ::pinpad::online_pin::PinBlockFormat pin_block_format() const;
  void set_pin_block_format(::pinpad::online_pin::PinBlockFormat value);
  private:
  ::pinpad::online_pin::PinBlockFormat _internal_pin_block_format() const;
  void _internal_set_pin_block_format(::pinpad::online_pin::PinBlockFormat value);
  public:

  // @@protoc_insertion_point(class_scope:pinpad.online_pin.PinEncryptionParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
  int key_format_;
  int pin_block_format_;
  friend struct ::TableStruct_pinpad_2fonline_5fpin_2eproto;
};
// -------------------------------------------------------------------

class EntryResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pinpad.online_pin.EntryResult) */ {
 public:
  EntryResult();
  virtual ~EntryResult();

  EntryResult(const EntryResult& from);
  EntryResult(EntryResult&& from) noexcept
    : EntryResult() {
    *this = ::std::move(from);
  }

  inline EntryResult& operator=(const EntryResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntryResult& operator=(EntryResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntryResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntryResult* internal_default_instance() {
    return reinterpret_cast<const EntryResult*>(
               &_EntryResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EntryResult& a, EntryResult& b) {
    a.Swap(&b);
  }
  inline void Swap(EntryResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntryResult* New() const final {
    return CreateMaybeMessage<EntryResult>(nullptr);
  }

  EntryResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntryResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntryResult& from);
  void MergeFrom(const EntryResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntryResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pinpad.online_pin.EntryResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pinpad_2fonline_5fpin_2eproto);
    return ::descriptor_table_pinpad_2fonline_5fpin_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPinBlockFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional bytes pin_block = 2;
  bool has_pin_block() const;
  private:
  bool _internal_has_pin_block() const;
  public:
  void clear_pin_block();
  const std::string& pin_block() const;
  void set_pin_block(const std::string& value);
  void set_pin_block(std::string&& value);
  void set_pin_block(const char* value);
  void set_pin_block(const void* value, size_t size);
  std::string* mutable_pin_block();
  std::string* release_pin_block();
  void set_allocated_pin_block(std::string* pin_block);
  private:
  const std::string& _internal_pin_block() const;
  void _internal_set_pin_block(const std::string& value);
  std::string* _internal_mutable_pin_block();
  public:

  // required .pinpad.online_pin.EntryStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::pinpad::online_pin::EntryStatus status() const;
  void set_status(::pinpad::online_pin::EntryStatus value);
  private:
  ::pinpad::online_pin::EntryStatus _internal_status() const;
  void _internal_set_status(::pinpad::online_pin::EntryStatus value);
  public:

  // @@protoc_insertion_point(class_scope:pinpad.online_pin.EntryResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pin_block_;
  int status_;
  friend struct ::TableStruct_pinpad_2fonline_5fpin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EnterOnlinePin

// required bytes pan = 1;
inline bool EnterOnlinePin::_internal_has_pan() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EnterOnlinePin::has_pan() const {
  return _internal_has_pan();
}
inline void EnterOnlinePin::clear_pan() {
  pan_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EnterOnlinePin::pan() const {
  // @@protoc_insertion_point(field_get:pinpad.online_pin.EnterOnlinePin.pan)
  return _internal_pan();
}
inline void EnterOnlinePin::set_pan(const std::string& value) {
  _internal_set_pan(value);
  // @@protoc_insertion_point(field_set:pinpad.online_pin.EnterOnlinePin.pan)
}
inline std::string* EnterOnlinePin::mutable_pan() {
  // @@protoc_insertion_point(field_mutable:pinpad.online_pin.EnterOnlinePin.pan)
  return _internal_mutable_pan();
}
inline const std::string& EnterOnlinePin::_internal_pan() const {
  return pan_.GetNoArena();
}
inline void EnterOnlinePin::_internal_set_pan(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pan_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnterOnlinePin::set_pan(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pan_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pinpad.online_pin.EnterOnlinePin.pan)
}
inline void EnterOnlinePin::set_pan(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pan_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pinpad.online_pin.EnterOnlinePin.pan)
}
inline void EnterOnlinePin::set_pan(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pan_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pinpad.online_pin.EnterOnlinePin.pan)
}
inline std::string* EnterOnlinePin::_internal_mutable_pan() {
  _has_bits_[0] |= 0x00000001u;
  return pan_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnterOnlinePin::release_pan() {
  // @@protoc_insertion_point(field_release:pinpad.online_pin.EnterOnlinePin.pan)
  if (!_internal_has_pan()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pan_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnterOnlinePin::set_allocated_pan(std::string* pan) {
  if (pan != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pan_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pan);
  // @@protoc_insertion_point(field_set_allocated:pinpad.online_pin.EnterOnlinePin.pan)
}

// required .pinpad.online_pin.PinEncryptionParams encryption_params = 2;
inline bool EnterOnlinePin::_internal_has_encryption_params() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || encryption_params_ != nullptr);
  return value;
}
inline bool EnterOnlinePin::has_encryption_params() const {
  return _internal_has_encryption_params();
}
inline void EnterOnlinePin::clear_encryption_params() {
  if (encryption_params_ != nullptr) encryption_params_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::pinpad::online_pin::PinEncryptionParams& EnterOnlinePin::_internal_encryption_params() const {
  const ::pinpad::online_pin::PinEncryptionParams* p = encryption_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pinpad::online_pin::PinEncryptionParams*>(
      &::pinpad::online_pin::_PinEncryptionParams_default_instance_);
}
inline const ::pinpad::online_pin::PinEncryptionParams& EnterOnlinePin::encryption_params() const {
  // @@protoc_insertion_point(field_get:pinpad.online_pin.EnterOnlinePin.encryption_params)
  return _internal_encryption_params();
}
inline ::pinpad::online_pin::PinEncryptionParams* EnterOnlinePin::release_encryption_params() {
  // @@protoc_insertion_point(field_release:pinpad.online_pin.EnterOnlinePin.encryption_params)
  _has_bits_[0] &= ~0x00000002u;
  ::pinpad::online_pin::PinEncryptionParams* temp = encryption_params_;
  encryption_params_ = nullptr;
  return temp;
}
inline ::pinpad::online_pin::PinEncryptionParams* EnterOnlinePin::_internal_mutable_encryption_params() {
  _has_bits_[0] |= 0x00000002u;
  if (encryption_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::pinpad::online_pin::PinEncryptionParams>(GetArenaNoVirtual());
    encryption_params_ = p;
  }
  return encryption_params_;
}
inline ::pinpad::online_pin::PinEncryptionParams* EnterOnlinePin::mutable_encryption_params() {
  // @@protoc_insertion_point(field_mutable:pinpad.online_pin.EnterOnlinePin.encryption_params)
  return _internal_mutable_encryption_params();
}
inline void EnterOnlinePin::set_allocated_encryption_params(::pinpad::online_pin::PinEncryptionParams* encryption_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete encryption_params_;
  }
  if (encryption_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      encryption_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encryption_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  encryption_params_ = encryption_params;
  // @@protoc_insertion_point(field_set_allocated:pinpad.online_pin.EnterOnlinePin.encryption_params)
}

// -------------------------------------------------------------------

// PinEncryptionParams

// required .pinpad.key_bundle.KeyBundleFormat key_format = 1;
inline bool PinEncryptionParams::_internal_has_key_format() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PinEncryptionParams::has_key_format() const {
  return _internal_has_key_format();
}
inline void PinEncryptionParams::clear_key_format() {
  key_format_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pinpad::key_bundle::KeyBundleFormat PinEncryptionParams::_internal_key_format() const {
  return static_cast< ::pinpad::key_bundle::KeyBundleFormat >(key_format_);
}
inline ::pinpad::key_bundle::KeyBundleFormat PinEncryptionParams::key_format() const {
  // @@protoc_insertion_point(field_get:pinpad.online_pin.PinEncryptionParams.key_format)
  return _internal_key_format();
}
inline void PinEncryptionParams::_internal_set_key_format(::pinpad::key_bundle::KeyBundleFormat value) {
  assert(::pinpad::key_bundle::KeyBundleFormat_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  key_format_ = value;
}
inline void PinEncryptionParams::set_key_format(::pinpad::key_bundle::KeyBundleFormat value) {
  _internal_set_key_format(value);
  // @@protoc_insertion_point(field_set:pinpad.online_pin.PinEncryptionParams.key_format)
}

// required bytes session_key = 2;
inline bool PinEncryptionParams::_internal_has_session_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PinEncryptionParams::has_session_key() const {
  return _internal_has_session_key();
}
inline void PinEncryptionParams::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PinEncryptionParams::session_key() const {
  // @@protoc_insertion_point(field_get:pinpad.online_pin.PinEncryptionParams.session_key)
  return _internal_session_key();
}
inline void PinEncryptionParams::set_session_key(const std::string& value) {
  _internal_set_session_key(value);
  // @@protoc_insertion_point(field_set:pinpad.online_pin.PinEncryptionParams.session_key)
}
inline std::string* PinEncryptionParams::mutable_session_key() {
  // @@protoc_insertion_point(field_mutable:pinpad.online_pin.PinEncryptionParams.session_key)
  return _internal_mutable_session_key();
}
inline const std::string& PinEncryptionParams::_internal_session_key() const {
  return session_key_.GetNoArena();
}
inline void PinEncryptionParams::_internal_set_session_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PinEncryptionParams::set_session_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pinpad.online_pin.PinEncryptionParams.session_key)
}
inline void PinEncryptionParams::set_session_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pinpad.online_pin.PinEncryptionParams.session_key)
}
inline void PinEncryptionParams::set_session_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pinpad.online_pin.PinEncryptionParams.session_key)
}
inline std::string* PinEncryptionParams::_internal_mutable_session_key() {
  _has_bits_[0] |= 0x00000001u;
  return session_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PinEncryptionParams::release_session_key() {
  // @@protoc_insertion_point(field_release:pinpad.online_pin.PinEncryptionParams.session_key)
  if (!_internal_has_session_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return session_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PinEncryptionParams::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:pinpad.online_pin.PinEncryptionParams.session_key)
}

// optional .pinpad.online_pin.PinBlockFormat pin_block_format = 3 [default = ISO_9564_FORMAT_4];
inline bool PinEncryptionParams::_internal_has_pin_block_format() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PinEncryptionParams::has_pin_block_format() const {
  return _internal_has_pin_block_format();
}
inline void PinEncryptionParams::clear_pin_block_format() {
  pin_block_format_ = 4;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::pinpad::online_pin::PinBlockFormat PinEncryptionParams::_internal_pin_block_format() const {
  return static_cast< ::pinpad::online_pin::PinBlockFormat >(pin_block_format_);
}
inline ::pinpad::online_pin::PinBlockFormat PinEncryptionParams::pin_block_format() const {
  // @@protoc_insertion_point(field_get:pinpad.online_pin.PinEncryptionParams.pin_block_format)
  return _internal_pin_block_format();
}
inline void PinEncryptionParams::_internal_set_pin_block_format(::pinpad::online_pin::PinBlockFormat value) {
  assert(::pinpad::online_pin::PinBlockFormat_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  pin_block_format_ = value;
}
inline void PinEncryptionParams::set_pin_block_format(::pinpad::online_pin::PinBlockFormat value) {
  _internal_set_pin_block_format(value);
  // @@protoc_insertion_point(field_set:pinpad.online_pin.PinEncryptionParams.pin_block_format)
}

// -------------------------------------------------------------------

// EntryResult

// required .pinpad.online_pin.EntryStatus status = 1;
inline bool EntryResult::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EntryResult::has_status() const {
  return _internal_has_status();
}
inline void EntryResult::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::pinpad::online_pin::EntryStatus EntryResult::_internal_status() const {
  return static_cast< ::pinpad::online_pin::EntryStatus >(status_);
}
inline ::pinpad::online_pin::EntryStatus EntryResult::status() const {
  // @@protoc_insertion_point(field_get:pinpad.online_pin.EntryResult.status)
  return _internal_status();
}
inline void EntryResult::_internal_set_status(::pinpad::online_pin::EntryStatus value) {
  assert(::pinpad::online_pin::EntryStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void EntryResult::set_status(::pinpad::online_pin::EntryStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:pinpad.online_pin.EntryResult.status)
}

// optional bytes pin_block = 2;
inline bool EntryResult::_internal_has_pin_block() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EntryResult::has_pin_block() const {
  return _internal_has_pin_block();
}
inline void EntryResult::clear_pin_block() {
  pin_block_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EntryResult::pin_block() const {
  // @@protoc_insertion_point(field_get:pinpad.online_pin.EntryResult.pin_block)
  return _internal_pin_block();
}
inline void EntryResult::set_pin_block(const std::string& value) {
  _internal_set_pin_block(value);
  // @@protoc_insertion_point(field_set:pinpad.online_pin.EntryResult.pin_block)
}
inline std::string* EntryResult::mutable_pin_block() {
  // @@protoc_insertion_point(field_mutable:pinpad.online_pin.EntryResult.pin_block)
  return _internal_mutable_pin_block();
}
inline const std::string& EntryResult::_internal_pin_block() const {
  return pin_block_.GetNoArena();
}
inline void EntryResult::_internal_set_pin_block(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pin_block_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EntryResult::set_pin_block(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pin_block_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pinpad.online_pin.EntryResult.pin_block)
}
inline void EntryResult::set_pin_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pin_block_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pinpad.online_pin.EntryResult.pin_block)
}
inline void EntryResult::set_pin_block(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pin_block_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pinpad.online_pin.EntryResult.pin_block)
}
inline std::string* EntryResult::_internal_mutable_pin_block() {
  _has_bits_[0] |= 0x00000001u;
  return pin_block_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EntryResult::release_pin_block() {
  // @@protoc_insertion_point(field_release:pinpad.online_pin.EntryResult.pin_block)
  if (!_internal_has_pin_block()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pin_block_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EntryResult::set_allocated_pin_block(std::string* pin_block) {
  if (pin_block != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pin_block_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pin_block);
  // @@protoc_insertion_point(field_set_allocated:pinpad.online_pin.EntryResult.pin_block)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace online_pin
}  // namespace pinpad

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pinpad::online_pin::PinBlockFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pinpad::online_pin::PinBlockFormat>() {
  return ::pinpad::online_pin::PinBlockFormat_descriptor();
}
template <> struct is_proto_enum< ::pinpad::online_pin::EntryStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pinpad::online_pin::EntryStatus>() {
  return ::pinpad::online_pin::EntryStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pinpad_2fonline_5fpin_2eproto
