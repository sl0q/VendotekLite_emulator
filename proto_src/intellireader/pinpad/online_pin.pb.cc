// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pinpad/online_pin.proto

#include "pinpad/online_pin.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pinpad_2fonline_5fpin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PinEncryptionParams_pinpad_2fonline_5fpin_2eproto;
namespace pinpad {
namespace online_pin {
class EnterOnlinePinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterOnlinePin> _instance;
} _EnterOnlinePin_default_instance_;
class PinEncryptionParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PinEncryptionParams> _instance;
} _PinEncryptionParams_default_instance_;
class EntryResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntryResult> _instance;
} _EntryResult_default_instance_;
}  // namespace online_pin
}  // namespace pinpad
static void InitDefaultsscc_info_EnterOnlinePin_pinpad_2fonline_5fpin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pinpad::online_pin::_EnterOnlinePin_default_instance_;
    new (ptr) ::pinpad::online_pin::EnterOnlinePin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pinpad::online_pin::EnterOnlinePin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnterOnlinePin_pinpad_2fonline_5fpin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnterOnlinePin_pinpad_2fonline_5fpin_2eproto}, {
      &scc_info_PinEncryptionParams_pinpad_2fonline_5fpin_2eproto.base,}};

static void InitDefaultsscc_info_EntryResult_pinpad_2fonline_5fpin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pinpad::online_pin::_EntryResult_default_instance_;
    new (ptr) ::pinpad::online_pin::EntryResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pinpad::online_pin::EntryResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntryResult_pinpad_2fonline_5fpin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EntryResult_pinpad_2fonline_5fpin_2eproto}, {}};

static void InitDefaultsscc_info_PinEncryptionParams_pinpad_2fonline_5fpin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pinpad::online_pin::_PinEncryptionParams_default_instance_;
    new (ptr) ::pinpad::online_pin::PinEncryptionParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pinpad::online_pin::PinEncryptionParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PinEncryptionParams_pinpad_2fonline_5fpin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PinEncryptionParams_pinpad_2fonline_5fpin_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pinpad_2fonline_5fpin_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pinpad_2fonline_5fpin_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pinpad_2fonline_5fpin_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pinpad_2fonline_5fpin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pinpad::online_pin::EnterOnlinePin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pinpad::online_pin::EnterOnlinePin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pinpad::online_pin::EnterOnlinePin, pan_),
  PROTOBUF_FIELD_OFFSET(::pinpad::online_pin::EnterOnlinePin, encryption_params_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pinpad::online_pin::PinEncryptionParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pinpad::online_pin::PinEncryptionParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pinpad::online_pin::PinEncryptionParams, key_format_),
  PROTOBUF_FIELD_OFFSET(::pinpad::online_pin::PinEncryptionParams, session_key_),
  PROTOBUF_FIELD_OFFSET(::pinpad::online_pin::PinEncryptionParams, pin_block_format_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::pinpad::online_pin::EntryResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pinpad::online_pin::EntryResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pinpad::online_pin::EntryResult, status_),
  PROTOBUF_FIELD_OFFSET(::pinpad::online_pin::EntryResult, pin_block_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::pinpad::online_pin::EnterOnlinePin)},
  { 9, 17, sizeof(::pinpad::online_pin::PinEncryptionParams)},
  { 20, 27, sizeof(::pinpad::online_pin::EntryResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pinpad::online_pin::_EnterOnlinePin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pinpad::online_pin::_PinEncryptionParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pinpad::online_pin::_EntryResult_default_instance_),
};

const char descriptor_table_protodef_pinpad_2fonline_5fpin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027pinpad/online_pin.proto\022\021pinpad.online"
  "_pin\032\027pinpad/key_bundle.proto\"`\n\016EnterOn"
  "linePin\022\013\n\003pan\030\001 \002(\014\022A\n\021encryption_param"
  "s\030\002 \002(\0132&.pinpad.online_pin.PinEncryptio"
  "nParams\"\262\001\n\023PinEncryptionParams\0226\n\nkey_f"
  "ormat\030\001 \002(\0162\".pinpad.key_bundle.KeyBundl"
  "eFormat\022\023\n\013session_key\030\002 \002(\014\022N\n\020pin_bloc"
  "k_format\030\003 \001(\0162!.pinpad.online_pin.PinBl"
  "ockFormat:\021ISO_9564_FORMAT_4\"P\n\013EntryRes"
  "ult\022.\n\006status\030\001 \002(\0162\036.pinpad.online_pin."
  "EntryStatus\022\021\n\tpin_block\030\002 \001(\014*>\n\016PinBlo"
  "ckFormat\022\025\n\021ISO_9564_FORMAT_0\020\000\022\025\n\021ISO_9"
  "564_FORMAT_4\020\004*M\n\013EntryStatus\022\017\n\013PIN_ENT"
  "ERED\020\000\022\026\n\022PIN_ENTRY_BYPASSED\020\001\022\025\n\021PIN_EN"
  "TRY_TIMEOUT\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pinpad_2fonline_5fpin_2eproto_deps[1] = {
  &::descriptor_table_pinpad_2fkey_5fbundle_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pinpad_2fonline_5fpin_2eproto_sccs[3] = {
  &scc_info_EnterOnlinePin_pinpad_2fonline_5fpin_2eproto.base,
  &scc_info_EntryResult_pinpad_2fonline_5fpin_2eproto.base,
  &scc_info_PinEncryptionParams_pinpad_2fonline_5fpin_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pinpad_2fonline_5fpin_2eproto_once;
static bool descriptor_table_pinpad_2fonline_5fpin_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pinpad_2fonline_5fpin_2eproto = {
  &descriptor_table_pinpad_2fonline_5fpin_2eproto_initialized, descriptor_table_protodef_pinpad_2fonline_5fpin_2eproto, "pinpad/online_pin.proto", 573,
  &descriptor_table_pinpad_2fonline_5fpin_2eproto_once, descriptor_table_pinpad_2fonline_5fpin_2eproto_sccs, descriptor_table_pinpad_2fonline_5fpin_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_pinpad_2fonline_5fpin_2eproto::offsets,
  file_level_metadata_pinpad_2fonline_5fpin_2eproto, 3, file_level_enum_descriptors_pinpad_2fonline_5fpin_2eproto, file_level_service_descriptors_pinpad_2fonline_5fpin_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pinpad_2fonline_5fpin_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pinpad_2fonline_5fpin_2eproto), true);
namespace pinpad {
namespace online_pin {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PinBlockFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pinpad_2fonline_5fpin_2eproto);
  return file_level_enum_descriptors_pinpad_2fonline_5fpin_2eproto[0];
}
bool PinBlockFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntryStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pinpad_2fonline_5fpin_2eproto);
  return file_level_enum_descriptors_pinpad_2fonline_5fpin_2eproto[1];
}
bool EntryStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void EnterOnlinePin::InitAsDefaultInstance() {
  ::pinpad::online_pin::_EnterOnlinePin_default_instance_._instance.get_mutable()->encryption_params_ = const_cast< ::pinpad::online_pin::PinEncryptionParams*>(
      ::pinpad::online_pin::PinEncryptionParams::internal_default_instance());
}
class EnterOnlinePin::_Internal {
 public:
  using HasBits = decltype(std::declval<EnterOnlinePin>()._has_bits_);
  static void set_has_pan(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pinpad::online_pin::PinEncryptionParams& encryption_params(const EnterOnlinePin* msg);
  static void set_has_encryption_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::pinpad::online_pin::PinEncryptionParams&
EnterOnlinePin::_Internal::encryption_params(const EnterOnlinePin* msg) {
  return *msg->encryption_params_;
}
EnterOnlinePin::EnterOnlinePin()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pinpad.online_pin.EnterOnlinePin)
}
EnterOnlinePin::EnterOnlinePin(const EnterOnlinePin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pan()) {
    pan_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pan_);
  }
  if (from._internal_has_encryption_params()) {
    encryption_params_ = new ::pinpad::online_pin::PinEncryptionParams(*from.encryption_params_);
  } else {
    encryption_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pinpad.online_pin.EnterOnlinePin)
}

void EnterOnlinePin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnterOnlinePin_pinpad_2fonline_5fpin_2eproto.base);
  pan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encryption_params_ = nullptr;
}

EnterOnlinePin::~EnterOnlinePin() {
  // @@protoc_insertion_point(destructor:pinpad.online_pin.EnterOnlinePin)
  SharedDtor();
}

void EnterOnlinePin::SharedDtor() {
  pan_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encryption_params_;
}

void EnterOnlinePin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterOnlinePin& EnterOnlinePin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterOnlinePin_pinpad_2fonline_5fpin_2eproto.base);
  return *internal_default_instance();
}


void EnterOnlinePin::Clear() {
// @@protoc_insertion_point(message_clear_start:pinpad.online_pin.EnterOnlinePin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pan_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(encryption_params_ != nullptr);
      encryption_params_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EnterOnlinePin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes pan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pan();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .pinpad.online_pin.PinEncryptionParams encryption_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_encryption_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterOnlinePin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pinpad.online_pin.EnterOnlinePin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes pan = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pan(), target);
  }

  // required .pinpad.online_pin.PinEncryptionParams encryption_params = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::encryption_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pinpad.online_pin.EnterOnlinePin)
  return target;
}

size_t EnterOnlinePin::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pinpad.online_pin.EnterOnlinePin)
  size_t total_size = 0;

  if (_internal_has_pan()) {
    // required bytes pan = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pan());
  }

  if (_internal_has_encryption_params()) {
    // required .pinpad.online_pin.PinEncryptionParams encryption_params = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encryption_params_);
  }

  return total_size;
}
size_t EnterOnlinePin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pinpad.online_pin.EnterOnlinePin)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes pan = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pan());

    // required .pinpad.online_pin.PinEncryptionParams encryption_params = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *encryption_params_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterOnlinePin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pinpad.online_pin.EnterOnlinePin)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterOnlinePin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterOnlinePin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pinpad.online_pin.EnterOnlinePin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pinpad.online_pin.EnterOnlinePin)
    MergeFrom(*source);
  }
}

void EnterOnlinePin::MergeFrom(const EnterOnlinePin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pinpad.online_pin.EnterOnlinePin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      pan_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pan_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_encryption_params()->::pinpad::online_pin::PinEncryptionParams::MergeFrom(from._internal_encryption_params());
    }
  }
}

void EnterOnlinePin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pinpad.online_pin.EnterOnlinePin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterOnlinePin::CopyFrom(const EnterOnlinePin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pinpad.online_pin.EnterOnlinePin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterOnlinePin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_encryption_params()) {
    if (!encryption_params_->IsInitialized()) return false;
  }
  return true;
}

void EnterOnlinePin::InternalSwap(EnterOnlinePin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pan_.Swap(&other->pan_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encryption_params_, other->encryption_params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterOnlinePin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PinEncryptionParams::InitAsDefaultInstance() {
}
class PinEncryptionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<PinEncryptionParams>()._has_bits_);
  static void set_has_key_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_session_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pin_block_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PinEncryptionParams::PinEncryptionParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pinpad.online_pin.PinEncryptionParams)
}
PinEncryptionParams::PinEncryptionParams(const PinEncryptionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_session_key()) {
    session_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_key_);
  }
  ::memcpy(&key_format_, &from.key_format_,
    static_cast<size_t>(reinterpret_cast<char*>(&pin_block_format_) -
    reinterpret_cast<char*>(&key_format_)) + sizeof(pin_block_format_));
  // @@protoc_insertion_point(copy_constructor:pinpad.online_pin.PinEncryptionParams)
}

void PinEncryptionParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PinEncryptionParams_pinpad_2fonline_5fpin_2eproto.base);
  session_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_format_ = 0;
  pin_block_format_ = 4;
}

PinEncryptionParams::~PinEncryptionParams() {
  // @@protoc_insertion_point(destructor:pinpad.online_pin.PinEncryptionParams)
  SharedDtor();
}

void PinEncryptionParams::SharedDtor() {
  session_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PinEncryptionParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PinEncryptionParams& PinEncryptionParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PinEncryptionParams_pinpad_2fonline_5fpin_2eproto.base);
  return *internal_default_instance();
}


void PinEncryptionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:pinpad.online_pin.PinEncryptionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_key_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    key_format_ = 0;
    pin_block_format_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PinEncryptionParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .pinpad.key_bundle.KeyBundleFormat key_format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pinpad::key_bundle::KeyBundleFormat_IsValid(val))) {
            _internal_set_key_format(static_cast<::pinpad::key_bundle::KeyBundleFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bytes session_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_session_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pinpad.online_pin.PinBlockFormat pin_block_format = 3 [default = ISO_9564_FORMAT_4];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pinpad::online_pin::PinBlockFormat_IsValid(val))) {
            _internal_set_pin_block_format(static_cast<::pinpad::online_pin::PinBlockFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PinEncryptionParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pinpad.online_pin.PinEncryptionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pinpad.key_bundle.KeyBundleFormat key_format = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_key_format(), target);
  }

  // required bytes session_key = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_session_key(), target);
  }

  // optional .pinpad.online_pin.PinBlockFormat pin_block_format = 3 [default = ISO_9564_FORMAT_4];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_pin_block_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pinpad.online_pin.PinEncryptionParams)
  return target;
}

size_t PinEncryptionParams::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pinpad.online_pin.PinEncryptionParams)
  size_t total_size = 0;

  if (_internal_has_session_key()) {
    // required bytes session_key = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_session_key());
  }

  if (_internal_has_key_format()) {
    // required .pinpad.key_bundle.KeyBundleFormat key_format = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_key_format());
  }

  return total_size;
}
size_t PinEncryptionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pinpad.online_pin.PinEncryptionParams)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes session_key = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_session_key());

    // required .pinpad.key_bundle.KeyBundleFormat key_format = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_key_format());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .pinpad.online_pin.PinBlockFormat pin_block_format = 3 [default = ISO_9564_FORMAT_4];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pin_block_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PinEncryptionParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pinpad.online_pin.PinEncryptionParams)
  GOOGLE_DCHECK_NE(&from, this);
  const PinEncryptionParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PinEncryptionParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pinpad.online_pin.PinEncryptionParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pinpad.online_pin.PinEncryptionParams)
    MergeFrom(*source);
  }
}

void PinEncryptionParams::MergeFrom(const PinEncryptionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pinpad.online_pin.PinEncryptionParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      session_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      key_format_ = from.key_format_;
    }
    if (cached_has_bits & 0x00000004u) {
      pin_block_format_ = from.pin_block_format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PinEncryptionParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pinpad.online_pin.PinEncryptionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PinEncryptionParams::CopyFrom(const PinEncryptionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pinpad.online_pin.PinEncryptionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinEncryptionParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PinEncryptionParams::InternalSwap(PinEncryptionParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  session_key_.Swap(&other->session_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(key_format_, other->key_format_);
  swap(pin_block_format_, other->pin_block_format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PinEncryptionParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EntryResult::InitAsDefaultInstance() {
}
class EntryResult::_Internal {
 public:
  using HasBits = decltype(std::declval<EntryResult>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pin_block(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EntryResult::EntryResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pinpad.online_pin.EntryResult)
}
EntryResult::EntryResult(const EntryResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pin_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pin_block()) {
    pin_block_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pin_block_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:pinpad.online_pin.EntryResult)
}

void EntryResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EntryResult_pinpad_2fonline_5fpin_2eproto.base);
  pin_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

EntryResult::~EntryResult() {
  // @@protoc_insertion_point(destructor:pinpad.online_pin.EntryResult)
  SharedDtor();
}

void EntryResult::SharedDtor() {
  pin_block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EntryResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntryResult& EntryResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntryResult_pinpad_2fonline_5fpin_2eproto.base);
  return *internal_default_instance();
}


void EntryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:pinpad.online_pin.EntryResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pin_block_.ClearNonDefaultToEmptyNoArena();
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EntryResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .pinpad.online_pin.EntryStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::pinpad::online_pin::EntryStatus_IsValid(val))) {
            _internal_set_status(static_cast<::pinpad::online_pin::EntryStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes pin_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pin_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntryResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pinpad.online_pin.EntryResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .pinpad.online_pin.EntryStatus status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional bytes pin_block = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pin_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pinpad.online_pin.EntryResult)
  return target;
}

size_t EntryResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pinpad.online_pin.EntryResult)
  size_t total_size = 0;

  // required .pinpad.online_pin.EntryStatus status = 1;
  if (_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes pin_block = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pin_block());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntryResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pinpad.online_pin.EntryResult)
  GOOGLE_DCHECK_NE(&from, this);
  const EntryResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntryResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pinpad.online_pin.EntryResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pinpad.online_pin.EntryResult)
    MergeFrom(*source);
  }
}

void EntryResult::MergeFrom(const EntryResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pinpad.online_pin.EntryResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      pin_block_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pin_block_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EntryResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pinpad.online_pin.EntryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryResult::CopyFrom(const EntryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pinpad.online_pin.EntryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void EntryResult::InternalSwap(EntryResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pin_block_.Swap(&other->pin_block_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntryResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace online_pin
}  // namespace pinpad
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pinpad::online_pin::EnterOnlinePin* Arena::CreateMaybeMessage< ::pinpad::online_pin::EnterOnlinePin >(Arena* arena) {
  return Arena::CreateInternal< ::pinpad::online_pin::EnterOnlinePin >(arena);
}
template<> PROTOBUF_NOINLINE ::pinpad::online_pin::PinEncryptionParams* Arena::CreateMaybeMessage< ::pinpad::online_pin::PinEncryptionParams >(Arena* arena) {
  return Arena::CreateInternal< ::pinpad::online_pin::PinEncryptionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::pinpad::online_pin::EntryResult* Arena::CreateMaybeMessage< ::pinpad::online_pin::EntryResult >(Arena* arena) {
  return Arena::CreateInternal< ::pinpad::online_pin::EntryResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
