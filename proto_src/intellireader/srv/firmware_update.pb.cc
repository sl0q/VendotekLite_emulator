// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srv/firmware_update.proto

#include "srv/firmware_update.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace srv {
namespace firmware_update {
class PrepareDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Prepare> _instance;
} _Prepare_default_instance_;
class UpdateBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateBlock> _instance;
} _UpdateBlock_default_instance_;
class ApplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Apply> _instance;
} _Apply_default_instance_;
class RollbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rollback> _instance;
} _Rollback_default_instance_;
}  // namespace firmware_update
}  // namespace srv
static void InitDefaultsscc_info_Apply_srv_2ffirmware_5fupdate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::firmware_update::_Apply_default_instance_;
    new (ptr) ::srv::firmware_update::Apply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::firmware_update::Apply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Apply_srv_2ffirmware_5fupdate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Apply_srv_2ffirmware_5fupdate_2eproto}, {}};

static void InitDefaultsscc_info_Prepare_srv_2ffirmware_5fupdate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::firmware_update::_Prepare_default_instance_;
    new (ptr) ::srv::firmware_update::Prepare();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::firmware_update::Prepare::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prepare_srv_2ffirmware_5fupdate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Prepare_srv_2ffirmware_5fupdate_2eproto}, {}};

static void InitDefaultsscc_info_Rollback_srv_2ffirmware_5fupdate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::firmware_update::_Rollback_default_instance_;
    new (ptr) ::srv::firmware_update::Rollback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::firmware_update::Rollback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rollback_srv_2ffirmware_5fupdate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rollback_srv_2ffirmware_5fupdate_2eproto}, {}};

static void InitDefaultsscc_info_UpdateBlock_srv_2ffirmware_5fupdate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::firmware_update::_UpdateBlock_default_instance_;
    new (ptr) ::srv::firmware_update::UpdateBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::firmware_update::UpdateBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateBlock_srv_2ffirmware_5fupdate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateBlock_srv_2ffirmware_5fupdate_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_srv_2ffirmware_5fupdate_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_srv_2ffirmware_5fupdate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_srv_2ffirmware_5fupdate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_srv_2ffirmware_5fupdate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::srv::firmware_update::Prepare, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::srv::firmware_update::Prepare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::firmware_update::Prepare, firmware_image_size_),
  0,
  PROTOBUF_FIELD_OFFSET(::srv::firmware_update::UpdateBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::srv::firmware_update::UpdateBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::firmware_update::UpdateBlock, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::srv::firmware_update::Apply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::srv::firmware_update::Apply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::firmware_update::Apply, restart_),
  0,
  PROTOBUF_FIELD_OFFSET(::srv::firmware_update::Rollback, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::srv::firmware_update::Rollback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::srv::firmware_update::Prepare)},
  { 7, 13, sizeof(::srv::firmware_update::UpdateBlock)},
  { 14, 20, sizeof(::srv::firmware_update::Apply)},
  { 21, 26, sizeof(::srv::firmware_update::Rollback)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::firmware_update::_Prepare_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::firmware_update::_UpdateBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::firmware_update::_Apply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::firmware_update::_Rollback_default_instance_),
};

const char descriptor_table_protodef_srv_2ffirmware_5fupdate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031srv/firmware_update.proto\022\023srv.firmwar"
  "e_update\"&\n\007Prepare\022\033\n\023firmware_image_si"
  "ze\030\001 \001(\r\"\033\n\013UpdateBlock\022\014\n\004data\030\001 \002(\014\"\037\n"
  "\005Apply\022\026\n\007restart\030\001 \001(\010:\005false\"\n\n\010Rollba"
  "ck"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_srv_2ffirmware_5fupdate_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_srv_2ffirmware_5fupdate_2eproto_sccs[4] = {
  &scc_info_Apply_srv_2ffirmware_5fupdate_2eproto.base,
  &scc_info_Prepare_srv_2ffirmware_5fupdate_2eproto.base,
  &scc_info_Rollback_srv_2ffirmware_5fupdate_2eproto.base,
  &scc_info_UpdateBlock_srv_2ffirmware_5fupdate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_srv_2ffirmware_5fupdate_2eproto_once;
static bool descriptor_table_srv_2ffirmware_5fupdate_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_srv_2ffirmware_5fupdate_2eproto = {
  &descriptor_table_srv_2ffirmware_5fupdate_2eproto_initialized, descriptor_table_protodef_srv_2ffirmware_5fupdate_2eproto, "srv/firmware_update.proto", 162,
  &descriptor_table_srv_2ffirmware_5fupdate_2eproto_once, descriptor_table_srv_2ffirmware_5fupdate_2eproto_sccs, descriptor_table_srv_2ffirmware_5fupdate_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_srv_2ffirmware_5fupdate_2eproto::offsets,
  file_level_metadata_srv_2ffirmware_5fupdate_2eproto, 4, file_level_enum_descriptors_srv_2ffirmware_5fupdate_2eproto, file_level_service_descriptors_srv_2ffirmware_5fupdate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_srv_2ffirmware_5fupdate_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_srv_2ffirmware_5fupdate_2eproto), true);
namespace srv {
namespace firmware_update {

// ===================================================================

void Prepare::InitAsDefaultInstance() {
}
class Prepare::_Internal {
 public:
  using HasBits = decltype(std::declval<Prepare>()._has_bits_);
  static void set_has_firmware_image_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Prepare::Prepare()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:srv.firmware_update.Prepare)
}
Prepare::Prepare(const Prepare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  firmware_image_size_ = from.firmware_image_size_;
  // @@protoc_insertion_point(copy_constructor:srv.firmware_update.Prepare)
}

void Prepare::SharedCtor() {
  firmware_image_size_ = 0u;
}

Prepare::~Prepare() {
  // @@protoc_insertion_point(destructor:srv.firmware_update.Prepare)
  SharedDtor();
}

void Prepare::SharedDtor() {
}

void Prepare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Prepare& Prepare::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Prepare_srv_2ffirmware_5fupdate_2eproto.base);
  return *internal_default_instance();
}


void Prepare::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.firmware_update.Prepare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  firmware_image_size_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Prepare::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 firmware_image_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_firmware_image_size(&has_bits);
          firmware_image_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Prepare::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.firmware_update.Prepare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 firmware_image_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_firmware_image_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.firmware_update.Prepare)
  return target;
}

size_t Prepare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.firmware_update.Prepare)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 firmware_image_size = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_firmware_image_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prepare::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.firmware_update.Prepare)
  GOOGLE_DCHECK_NE(&from, this);
  const Prepare* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Prepare>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.firmware_update.Prepare)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.firmware_update.Prepare)
    MergeFrom(*source);
  }
}

void Prepare::MergeFrom(const Prepare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.firmware_update.Prepare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_firmware_image_size()) {
    _internal_set_firmware_image_size(from._internal_firmware_image_size());
  }
}

void Prepare::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.firmware_update.Prepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prepare::CopyFrom(const Prepare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.firmware_update.Prepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prepare::IsInitialized() const {
  return true;
}

void Prepare::InternalSwap(Prepare* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(firmware_image_size_, other->firmware_image_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Prepare::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateBlock::InitAsDefaultInstance() {
}
class UpdateBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateBlock>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UpdateBlock::UpdateBlock()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:srv.firmware_update.UpdateBlock)
}
UpdateBlock::UpdateBlock(const UpdateBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:srv.firmware_update.UpdateBlock)
}

void UpdateBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateBlock_srv_2ffirmware_5fupdate_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateBlock::~UpdateBlock() {
  // @@protoc_insertion_point(destructor:srv.firmware_update.UpdateBlock)
  SharedDtor();
}

void UpdateBlock::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateBlock& UpdateBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateBlock_srv_2ffirmware_5fupdate_2eproto.base);
  return *internal_default_instance();
}


void UpdateBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.firmware_update.UpdateBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UpdateBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.firmware_update.UpdateBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.firmware_update.UpdateBlock)
  return target;
}

size_t UpdateBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.firmware_update.UpdateBlock)
  size_t total_size = 0;

  // required bytes data = 1;
  if (_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.firmware_update.UpdateBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.firmware_update.UpdateBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.firmware_update.UpdateBlock)
    MergeFrom(*source);
  }
}

void UpdateBlock::MergeFrom(const UpdateBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.firmware_update.UpdateBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _has_bits_[0] |= 0x00000001u;
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void UpdateBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.firmware_update.UpdateBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBlock::CopyFrom(const UpdateBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.firmware_update.UpdateBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void UpdateBlock::InternalSwap(UpdateBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Apply::InitAsDefaultInstance() {
}
class Apply::_Internal {
 public:
  using HasBits = decltype(std::declval<Apply>()._has_bits_);
  static void set_has_restart(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Apply::Apply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:srv.firmware_update.Apply)
}
Apply::Apply(const Apply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  restart_ = from.restart_;
  // @@protoc_insertion_point(copy_constructor:srv.firmware_update.Apply)
}

void Apply::SharedCtor() {
  restart_ = false;
}

Apply::~Apply() {
  // @@protoc_insertion_point(destructor:srv.firmware_update.Apply)
  SharedDtor();
}

void Apply::SharedDtor() {
}

void Apply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Apply& Apply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Apply_srv_2ffirmware_5fupdate_2eproto.base);
  return *internal_default_instance();
}


void Apply::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.firmware_update.Apply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  restart_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Apply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool restart = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_restart(&has_bits);
          restart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Apply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.firmware_update.Apply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool restart = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_restart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.firmware_update.Apply)
  return target;
}

size_t Apply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.firmware_update.Apply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool restart = 1 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Apply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.firmware_update.Apply)
  GOOGLE_DCHECK_NE(&from, this);
  const Apply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Apply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.firmware_update.Apply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.firmware_update.Apply)
    MergeFrom(*source);
  }
}

void Apply::MergeFrom(const Apply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.firmware_update.Apply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_restart()) {
    _internal_set_restart(from._internal_restart());
  }
}

void Apply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.firmware_update.Apply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Apply::CopyFrom(const Apply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.firmware_update.Apply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Apply::IsInitialized() const {
  return true;
}

void Apply::InternalSwap(Apply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(restart_, other->restart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Apply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rollback::InitAsDefaultInstance() {
}
class Rollback::_Internal {
 public:
  using HasBits = decltype(std::declval<Rollback>()._has_bits_);
};

Rollback::Rollback()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:srv.firmware_update.Rollback)
}
Rollback::Rollback(const Rollback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:srv.firmware_update.Rollback)
}

void Rollback::SharedCtor() {
}

Rollback::~Rollback() {
  // @@protoc_insertion_point(destructor:srv.firmware_update.Rollback)
  SharedDtor();
}

void Rollback::SharedDtor() {
}

void Rollback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rollback& Rollback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rollback_srv_2ffirmware_5fupdate_2eproto.base);
  return *internal_default_instance();
}


void Rollback::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.firmware_update.Rollback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Rollback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rollback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.firmware_update.Rollback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.firmware_update.Rollback)
  return target;
}

size_t Rollback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.firmware_update.Rollback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rollback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.firmware_update.Rollback)
  GOOGLE_DCHECK_NE(&from, this);
  const Rollback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rollback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.firmware_update.Rollback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.firmware_update.Rollback)
    MergeFrom(*source);
  }
}

void Rollback::MergeFrom(const Rollback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.firmware_update.Rollback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rollback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.firmware_update.Rollback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rollback::CopyFrom(const Rollback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.firmware_update.Rollback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rollback::IsInitialized() const {
  return true;
}

void Rollback::InternalSwap(Rollback* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Rollback::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace firmware_update
}  // namespace srv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::srv::firmware_update::Prepare* Arena::CreateMaybeMessage< ::srv::firmware_update::Prepare >(Arena* arena) {
  return Arena::CreateInternal< ::srv::firmware_update::Prepare >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::firmware_update::UpdateBlock* Arena::CreateMaybeMessage< ::srv::firmware_update::UpdateBlock >(Arena* arena) {
  return Arena::CreateInternal< ::srv::firmware_update::UpdateBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::firmware_update::Apply* Arena::CreateMaybeMessage< ::srv::firmware_update::Apply >(Arena* arena) {
  return Arena::CreateInternal< ::srv::firmware_update::Apply >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::firmware_update::Rollback* Arena::CreateMaybeMessage< ::srv::firmware_update::Rollback >(Arena* arena) {
  return Arena::CreateInternal< ::srv::firmware_update::Rollback >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
