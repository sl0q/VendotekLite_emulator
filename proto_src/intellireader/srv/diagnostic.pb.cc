// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srv/diagnostic.proto

#include "srv/diagnostic.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace srv {
namespace diagnostic {
class GetDiagnosticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDiagnostic> _instance;
} _GetDiagnostic_default_instance_;
class DiagnosticInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiagnosticInfo> _instance;
} _DiagnosticInfo_default_instance_;
}  // namespace diagnostic
}  // namespace srv
static void InitDefaultsscc_info_DiagnosticInfo_srv_2fdiagnostic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::diagnostic::_DiagnosticInfo_default_instance_;
    new (ptr) ::srv::diagnostic::DiagnosticInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::diagnostic::DiagnosticInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiagnosticInfo_srv_2fdiagnostic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DiagnosticInfo_srv_2fdiagnostic_2eproto}, {}};

static void InitDefaultsscc_info_GetDiagnostic_srv_2fdiagnostic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::diagnostic::_GetDiagnostic_default_instance_;
    new (ptr) ::srv::diagnostic::GetDiagnostic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::diagnostic::GetDiagnostic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDiagnostic_srv_2fdiagnostic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDiagnostic_srv_2fdiagnostic_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_srv_2fdiagnostic_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_srv_2fdiagnostic_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_srv_2fdiagnostic_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_srv_2fdiagnostic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::srv::diagnostic::GetDiagnostic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::srv::diagnostic::GetDiagnostic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::diagnostic::DiagnosticInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::srv::diagnostic::DiagnosticInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::diagnostic::DiagnosticInfo, nfc_error_),
  PROTOBUF_FIELD_OFFSET(::srv::diagnostic::DiagnosticInfo, mcu_error_),
  PROTOBUF_FIELD_OFFSET(::srv::diagnostic::DiagnosticInfo, touchscreen_error_),
  PROTOBUF_FIELD_OFFSET(::srv::diagnostic::DiagnosticInfo, storage_error_),
  PROTOBUF_FIELD_OFFSET(::srv::diagnostic::DiagnosticInfo, last_reboot_reason_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::srv::diagnostic::GetDiagnostic)},
  { 5, 15, sizeof(::srv::diagnostic::DiagnosticInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::diagnostic::_GetDiagnostic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::diagnostic::_DiagnosticInfo_default_instance_),
};

const char descriptor_table_protodef_srv_2fdiagnostic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024srv/diagnostic.proto\022\016srv.diagnostic\"\017"
  "\n\rGetDiagnostic\"\204\001\n\016DiagnosticInfo\022\021\n\tnf"
  "c_error\030\001 \001(\t\022\021\n\tmcu_error\030\002 \001(\t\022\031\n\021touc"
  "hscreen_error\030\003 \001(\t\022\025\n\rstorage_error\030\004 \001"
  "(\t\022\032\n\022last_reboot_reason\030\005 \001(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_srv_2fdiagnostic_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_srv_2fdiagnostic_2eproto_sccs[2] = {
  &scc_info_DiagnosticInfo_srv_2fdiagnostic_2eproto.base,
  &scc_info_GetDiagnostic_srv_2fdiagnostic_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_srv_2fdiagnostic_2eproto_once;
static bool descriptor_table_srv_2fdiagnostic_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_srv_2fdiagnostic_2eproto = {
  &descriptor_table_srv_2fdiagnostic_2eproto_initialized, descriptor_table_protodef_srv_2fdiagnostic_2eproto, "srv/diagnostic.proto", 190,
  &descriptor_table_srv_2fdiagnostic_2eproto_once, descriptor_table_srv_2fdiagnostic_2eproto_sccs, descriptor_table_srv_2fdiagnostic_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_srv_2fdiagnostic_2eproto::offsets,
  file_level_metadata_srv_2fdiagnostic_2eproto, 2, file_level_enum_descriptors_srv_2fdiagnostic_2eproto, file_level_service_descriptors_srv_2fdiagnostic_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_srv_2fdiagnostic_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_srv_2fdiagnostic_2eproto), true);
namespace srv {
namespace diagnostic {

// ===================================================================

void GetDiagnostic::InitAsDefaultInstance() {
}
class GetDiagnostic::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDiagnostic>()._has_bits_);
};

GetDiagnostic::GetDiagnostic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:srv.diagnostic.GetDiagnostic)
}
GetDiagnostic::GetDiagnostic(const GetDiagnostic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:srv.diagnostic.GetDiagnostic)
}

void GetDiagnostic::SharedCtor() {
}

GetDiagnostic::~GetDiagnostic() {
  // @@protoc_insertion_point(destructor:srv.diagnostic.GetDiagnostic)
  SharedDtor();
}

void GetDiagnostic::SharedDtor() {
}

void GetDiagnostic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDiagnostic& GetDiagnostic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDiagnostic_srv_2fdiagnostic_2eproto.base);
  return *internal_default_instance();
}


void GetDiagnostic::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.diagnostic.GetDiagnostic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetDiagnostic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDiagnostic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.diagnostic.GetDiagnostic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.diagnostic.GetDiagnostic)
  return target;
}

size_t GetDiagnostic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.diagnostic.GetDiagnostic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDiagnostic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.diagnostic.GetDiagnostic)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDiagnostic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDiagnostic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.diagnostic.GetDiagnostic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.diagnostic.GetDiagnostic)
    MergeFrom(*source);
  }
}

void GetDiagnostic::MergeFrom(const GetDiagnostic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.diagnostic.GetDiagnostic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetDiagnostic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.diagnostic.GetDiagnostic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDiagnostic::CopyFrom(const GetDiagnostic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.diagnostic.GetDiagnostic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDiagnostic::IsInitialized() const {
  return true;
}

void GetDiagnostic::InternalSwap(GetDiagnostic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDiagnostic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiagnosticInfo::InitAsDefaultInstance() {
}
class DiagnosticInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DiagnosticInfo>()._has_bits_);
  static void set_has_nfc_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mcu_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_touchscreen_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_storage_error(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_reboot_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DiagnosticInfo::DiagnosticInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:srv.diagnostic.DiagnosticInfo)
}
DiagnosticInfo::DiagnosticInfo(const DiagnosticInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nfc_error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nfc_error()) {
    nfc_error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nfc_error_);
  }
  mcu_error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mcu_error()) {
    mcu_error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mcu_error_);
  }
  touchscreen_error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_touchscreen_error()) {
    touchscreen_error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.touchscreen_error_);
  }
  storage_error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_storage_error()) {
    storage_error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.storage_error_);
  }
  last_reboot_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_last_reboot_reason()) {
    last_reboot_reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_reboot_reason_);
  }
  // @@protoc_insertion_point(copy_constructor:srv.diagnostic.DiagnosticInfo)
}

void DiagnosticInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiagnosticInfo_srv_2fdiagnostic_2eproto.base);
  nfc_error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mcu_error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  touchscreen_error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storage_error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_reboot_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiagnosticInfo::~DiagnosticInfo() {
  // @@protoc_insertion_point(destructor:srv.diagnostic.DiagnosticInfo)
  SharedDtor();
}

void DiagnosticInfo::SharedDtor() {
  nfc_error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mcu_error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  touchscreen_error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storage_error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_reboot_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiagnosticInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiagnosticInfo& DiagnosticInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiagnosticInfo_srv_2fdiagnostic_2eproto.base);
  return *internal_default_instance();
}


void DiagnosticInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.diagnostic.DiagnosticInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      nfc_error_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mcu_error_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      touchscreen_error_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      storage_error_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      last_reboot_reason_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DiagnosticInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string nfc_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nfc_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "srv.diagnostic.DiagnosticInfo.nfc_error");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mcu_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mcu_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "srv.diagnostic.DiagnosticInfo.mcu_error");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string touchscreen_error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_touchscreen_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "srv.diagnostic.DiagnosticInfo.touchscreen_error");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string storage_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_storage_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "srv.diagnostic.DiagnosticInfo.storage_error");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string last_reboot_reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_last_reboot_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "srv.diagnostic.DiagnosticInfo.last_reboot_reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiagnosticInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.diagnostic.DiagnosticInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string nfc_error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nfc_error().data(), static_cast<int>(this->_internal_nfc_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "srv.diagnostic.DiagnosticInfo.nfc_error");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nfc_error(), target);
  }

  // optional string mcu_error = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mcu_error().data(), static_cast<int>(this->_internal_mcu_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "srv.diagnostic.DiagnosticInfo.mcu_error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mcu_error(), target);
  }

  // optional string touchscreen_error = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_touchscreen_error().data(), static_cast<int>(this->_internal_touchscreen_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "srv.diagnostic.DiagnosticInfo.touchscreen_error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_touchscreen_error(), target);
  }

  // optional string storage_error = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_storage_error().data(), static_cast<int>(this->_internal_storage_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "srv.diagnostic.DiagnosticInfo.storage_error");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_storage_error(), target);
  }

  // optional string last_reboot_reason = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_last_reboot_reason().data(), static_cast<int>(this->_internal_last_reboot_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "srv.diagnostic.DiagnosticInfo.last_reboot_reason");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_last_reboot_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.diagnostic.DiagnosticInfo)
  return target;
}

size_t DiagnosticInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.diagnostic.DiagnosticInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string nfc_error = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nfc_error());
    }

    // optional string mcu_error = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mcu_error());
    }

    // optional string touchscreen_error = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_touchscreen_error());
    }

    // optional string storage_error = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_storage_error());
    }

    // optional string last_reboot_reason = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_reboot_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiagnosticInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.diagnostic.DiagnosticInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosticInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiagnosticInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.diagnostic.DiagnosticInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.diagnostic.DiagnosticInfo)
    MergeFrom(*source);
  }
}

void DiagnosticInfo::MergeFrom(const DiagnosticInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.diagnostic.DiagnosticInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      nfc_error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nfc_error_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      mcu_error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mcu_error_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      touchscreen_error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.touchscreen_error_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      storage_error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.storage_error_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      last_reboot_reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_reboot_reason_);
    }
  }
}

void DiagnosticInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.diagnostic.DiagnosticInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosticInfo::CopyFrom(const DiagnosticInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.diagnostic.DiagnosticInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosticInfo::IsInitialized() const {
  return true;
}

void DiagnosticInfo::InternalSwap(DiagnosticInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nfc_error_.Swap(&other->nfc_error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mcu_error_.Swap(&other->mcu_error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  touchscreen_error_.Swap(&other->touchscreen_error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  storage_error_.Swap(&other->storage_error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_reboot_reason_.Swap(&other->last_reboot_reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiagnosticInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace diagnostic
}  // namespace srv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::srv::diagnostic::GetDiagnostic* Arena::CreateMaybeMessage< ::srv::diagnostic::GetDiagnostic >(Arena* arena) {
  return Arena::CreateInternal< ::srv::diagnostic::GetDiagnostic >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::diagnostic::DiagnosticInfo* Arena::CreateMaybeMessage< ::srv::diagnostic::DiagnosticInfo >(Arena* arena) {
  return Arena::CreateInternal< ::srv::diagnostic::DiagnosticInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
