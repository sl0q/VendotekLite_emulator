// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands7.proto

#include "commands7.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_contact_2fiso7816_5f4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransmitApdu_contact_2fiso7816_5f4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contact_2fpower_5foff_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerOffCard_contact_2fpower_5foff_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contact_2fpower_5fon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerOnCard_contact_2fpower_5fon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2femv_5fremoval_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmvRemoval_contactless_2femv_5fremoval_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2fiso14443_5f4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Command_contactless_2fiso14443_5f4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2fiso14443_5f4a_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestForAnswerToSelect_contactless_2fiso14443_5f4a_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2fpoll_5ffor_5ftoken_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PollForToken_contactless_2fpoll_5ffor_5ftoken_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2frf_5ffield_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerOffField_contactless_2frf_5ffield_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2ftransaction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerformTransaction_contactless_2ftransaction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2ftransceive_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransceiveBitArray_contactless_2ftransceive_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2fdraw_5fbitmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrawBitmap_gui_2fdraw_5fbitmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2finput_5fdialog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InputDialog_gui_2finput_5fdialog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2fmenu_5fdialog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MenuDialog_gui_2fmenu_5fdialog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2fscreen_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ShowScreen_gui_2fscreen_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gui_2fslideshow_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Slideshow_gui_2fslideshow_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fav2_2fchange_5fkeyentry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ChangeKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fav2_2fhost_5fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthenticateHost_mifare_2fav2_2fhost_5fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fav2_2funlock_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Unlock_mifare_2fav2_2funlock_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearKey_mifare_2fclassic_2fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SamKey_mifare_2fclassic_2fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fbulk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BulkOperation_mifare_2fclassic_2fbulk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fcounter_2fcommit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommitCounter_mifare_2fclassic_2fcounter_2fcommit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fcounter_2fcopy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CopyCounter_mifare_2fclassic_2fcounter_2fcopy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fcounter_2fget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCounter_mifare_2fclassic_2fcounter_2fget_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fcounter_2fmodify_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModifyCounter_mifare_2fclassic_2fcounter_2fmodify_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fcounter_2fset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetCounter_mifare_2fclassic_2fcounter_2fset_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fread_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadBlocks_mifare_2fclassic_2fread_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fsector_2fread_5fsector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadSectors_mifare_2fclassic_2fsector_2fread_5fsector_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fsector_2fwrite_5fsector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WriteSectors_mifare_2fclassic_2fsector_2fwrite_5fsector_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fclassic_2fwrite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteBlocks_mifare_2fclassic_2fwrite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fgeneric_2fget_5fversion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetVersion_mifare_2fgeneric_2fget_5fversion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fplus_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClearKey_mifare_2fplus_2fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fplus_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SamKey_mifare_2fplus_2fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fplus_2fbulk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BulkOperation_mifare_2fplus_2fbulk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fplus_2fcounter_2fcommit_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommitCounter_mifare_2fplus_2fcounter_2fcommit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fplus_2fcounter_2fcopy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CopyCounter_mifare_2fplus_2fcounter_2fcopy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fplus_2fcounter_2fget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCounter_mifare_2fplus_2fcounter_2fget_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fplus_2fcounter_2fmodify_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModifyCounter_mifare_2fplus_2fcounter_2fmodify_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fplus_2fcounter_2fset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetCounter_mifare_2fplus_2fcounter_2fset_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fplus_2fread_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadBlocks_mifare_2fplus_2fread_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fplus_2fwrite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteBlocks_mifare_2fplus_2fwrite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearKey_mifare_2fultralight_2fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fauth_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SamKey_mifare_2fultralight_2fauth_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fbulk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BulkOperation_mifare_2fultralight_2fbulk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fcounter_2fget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCounter_mifare_2fultralight_2fcounter_2fget_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fcounter_2fincrement_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncrementCounter_mifare_2fultralight_2fcounter_2fincrement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fpassword_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearPassword_mifare_2fultralight_2fpassword_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fpassword_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SamPassword_mifare_2fultralight_2fpassword_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fread_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadPages_mifare_2fultralight_2fread_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fversion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetVersion_mifare_2fultralight_2fversion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mifare_2fultralight_2fwrite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WritePages_mifare_2fultralight_2fwrite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2fbaudrate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChangeBaudrate_misc_2fbaudrate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2fbuzzer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MakeSound_misc_2fbuzzer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDeviceStatus_misc_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadDeviceInfo_misc_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2fecho_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEcho_misc_2fecho_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2flan_5fsettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChangeLanSettings_misc_2flan_5fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2fleds_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Leds_misc_2fleds_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2freboot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Reboot_misc_2freboot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDeviceStatistic_misc_2fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_srv_2fchallenge_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChallenge_srv_2fchallenge_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_srv_2fdiagnostic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDiagnostic_srv_2fdiagnostic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_srv_2ffirmware_5fupdate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Apply_srv_2ffirmware_5fupdate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_srv_2ffirmware_5fupdate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prepare_srv_2ffirmware_5fupdate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_srv_2ffirmware_5fupdate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rollback_srv_2ffirmware_5fupdate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_srv_2ffirmware_5fupdate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateBlock_srv_2ffirmware_5fupdate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_srv_2fprotection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Activate_srv_2fprotection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_srv_2fprotection_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Deactivate_srv_2fprotection_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_srv_2fupload_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckConfiguration_srv_2fupload_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_srv_2fupload_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prepare_srv_2fupload_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_srv_2fupload_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UploadBlock_srv_2fupload_5fconfig_2eproto;
class MiscellaneousDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Miscellaneous> _instance;
  const ::misc::leds::Leds* set_leds_state_;
  const ::misc::device::ReadDeviceInfo* read_device_info_;
  const ::misc::reboot::Reboot* reboot_device_;
  const ::misc::device::GetDeviceStatus* get_device_status_;
  const ::misc::buzzer::MakeSound* make_sound_;
  const ::misc::stats::GetDeviceStatistic* get_device_statistic_;
  const ::misc::echo::GetEcho* get_echo_;
  const ::misc::baudrate::ChangeBaudrate* change_baudrate_;
  const ::misc::lan_settings::ChangeLanSettings* change_lan_settings_;
} _Miscellaneous_default_instance_;
class ContactlessLevel1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContactlessLevel1> _instance;
  const ::contactless::poll::PollForToken* poll_for_token_;
  const ::contactless::emv_removal::EmvRemoval* emv_removal_;
  const ::contactless::transceive::TransceiveBitArray* tsv_bit_array_;
  const ::contactless::iso14443_4::Command* iso14443_4_command_;
  const ::contactless::rf_field::PowerOffField* power_off_field_;
  const ::contactless::iso14443_4a::RequestForAnswerToSelect* request_for_ats_;
} _ContactlessLevel1_default_instance_;
class ContactlessLevel2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContactlessLevel2> _instance;
  const ::contactless::transaction::PerformTransaction* perform_transaction_;
} _ContactlessLevel2_default_instance_;
class MifareDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mifare> _instance;
  const ::mifare::classic::auth::ClearKey* mfr_classic_auth_on_clear_key_;
  const ::mifare::classic::auth::SamKey* mfr_classic_auth_on_sam_key_;
  const ::mifare::classic::read::ReadBlocks* mfr_classic_read_blocks_;
  const ::mifare::classic::write::WriteBlocks* mfr_classic_write_blocks_;
  const ::mifare::classic::bulk::BulkOperation* mfr_classic_bulk_operation_;
  const ::mifare::classic::counter::get::GetCounter* mfr_classic_get_counter_;
  const ::mifare::classic::counter::set::SetCounter* mfr_classic_set_counter_;
  const ::mifare::classic::counter::modify::ModifyCounter* mfr_classic_modify_counter_;
  const ::mifare::classic::counter::copy::CopyCounter* mfr_classic_copy_counter_;
  const ::mifare::classic::counter::commit::CommitCounter* mfr_classic_commit_counter_;
  const ::mifare::plus::auth::ClearKey* mfr_plus_auth_on_clear_key_;
  const ::mifare::plus::read::ReadBlocks* mfr_plus_read_blocks_;
  const ::mifare::plus::write::WriteBlocks* mfr_plus_write_blocks_;
  const ::mifare::plus::bulk::BulkOperation* mfr_plus_bulk_operation_;
  const ::mifare::plus::counter::get::GetCounter* mfr_plus_get_counter_;
  const ::mifare::plus::counter::set::SetCounter* mfr_plus_set_counter_;
  const ::mifare::plus::counter::modify::ModifyCounter* mfr_plus_modify_counter_;
  const ::mifare::plus::counter::copy::CopyCounter* mfr_plus_copy_counter_;
  const ::mifare::plus::counter::commit::CommitCounter* mfr_plus_commit_counter_;
  const ::mifare::plus::auth::SamKey* mfr_plus_auth_on_sam_key_;
  const ::mifare::av2::host_auth::AuthenticateHost* av2_authenticate_host_;
  const ::mifare::av2::change_keyentry::ChangeKeyEntry* av2_change_keyentry_;
  const ::mifare::av2::unlock::Unlock* av2_unlock_;
  const ::mifare::ultralight::read::ReadPages* mfr_ul_read_pages_;
  const ::mifare::ultralight::write::WritePages* mfr_ul_write_pages_;
  const ::mifare::ultralight::version::GetVersion* mfr_ul_get_version_;
  const ::mifare::ultralight::counter::get::GetCounter* mfr_ul_get_counter_;
  const ::mifare::ultralight::counter::increment::IncrementCounter* mfr_ul_increment_counter_;
  const ::mifare::ultralight::bulk::BulkOperation* mfr_ul_bulk_operation_;
  const ::mifare::ultralight::auth::ClearKey* mfr_ul_auth_on_clear_key_;
  const ::mifare::ultralight::auth::SamKey* mfr_ul_auth_on_sam_key_;
  const ::mifare::ultralight::password::ClearPassword* mfr_ul_auth_clear_password_;
  const ::mifare::ultralight::password::SamPassword* mfr_ul_auth_sam_password_;
} _Mifare_default_instance_;
class ContactLevel1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContactLevel1> _instance;
  const ::contact::power_on::PowerOnCard* power_on_card_;
  const ::contact::power_off::PowerOffCard* power_off_card_;
  const ::contact::iso7816_4::TransmitApdu* transmit_apdu_;
} _ContactLevel1_default_instance_;
class ServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Service> _instance;
  const ::srv::challenge::GetChallenge* get_challenge_;
  const ::srv::protection::Activate* activate_protection_;
  const ::srv::protection::Deactivate* deactivate_protection_;
  const ::srv::firmware_update::Prepare* prepare_update_;
  const ::srv::firmware_update::UpdateBlock* update_block_;
  const ::srv::firmware_update::Apply* apply_update_;
  const ::srv::firmware_update::Rollback* rollback_update_;
  const ::srv::diagnostic::GetDiagnostic* get_diagnostic_;
  const ::srv::upload_config::Prepare* prepare_for_config_;
  const ::srv::upload_config::UploadBlock* upload_block_of_config_;
  const ::srv::upload_config::CheckConfiguration* check_configuration_;
} _Service_default_instance_;
class GuiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gui> _instance;
  const ::gui::screen::ShowScreen* show_screen_;
  const ::gui::input_dialog::InputDialog* input_dialog_;
  const ::gui::menu_dialog::MenuDialog* menu_dialog_;
  const ::gui::draw_bitmap::DrawBitmap* draw_bitmap_;
  const ::gui::slideshow::Slideshow* slideshow_;
} _Gui_default_instance_;
class MifareExtendedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MifareExtended> _instance;
  const ::mifare::classic::sector::read::ReadSectors* mfr_classic_read_sectors_;
  const ::mifare::classic::sector::write::WriteSectors* mfr_classic_write_sectors_;
  const ::mifare::generic::get_version::GetVersion* mfr_get_version_;
} _MifareExtended_default_instance_;
static void InitDefaultsscc_info_ContactLevel1_commands7_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContactLevel1_default_instance_;
    new (ptr) ::ContactLevel1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContactLevel1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ContactLevel1_commands7_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ContactLevel1_commands7_2eproto}, {
      &scc_info_PowerOnCard_contact_2fpower_5fon_2eproto.base,
      &scc_info_PowerOffCard_contact_2fpower_5foff_2eproto.base,
      &scc_info_TransmitApdu_contact_2fiso7816_5f4_2eproto.base,}};

static void InitDefaultsscc_info_ContactlessLevel1_commands7_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContactlessLevel1_default_instance_;
    new (ptr) ::ContactlessLevel1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContactlessLevel1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ContactlessLevel1_commands7_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ContactlessLevel1_commands7_2eproto}, {
      &scc_info_PollForToken_contactless_2fpoll_5ffor_5ftoken_2eproto.base,
      &scc_info_EmvRemoval_contactless_2femv_5fremoval_2eproto.base,
      &scc_info_TransceiveBitArray_contactless_2ftransceive_2eproto.base,
      &scc_info_Command_contactless_2fiso14443_5f4_2eproto.base,
      &scc_info_PowerOffField_contactless_2frf_5ffield_2eproto.base,
      &scc_info_RequestForAnswerToSelect_contactless_2fiso14443_5f4a_2eproto.base,}};

static void InitDefaultsscc_info_ContactlessLevel2_commands7_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ContactlessLevel2_default_instance_;
    new (ptr) ::ContactlessLevel2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ContactlessLevel2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContactlessLevel2_commands7_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContactlessLevel2_commands7_2eproto}, {
      &scc_info_PerformTransaction_contactless_2ftransaction_2eproto.base,}};

static void InitDefaultsscc_info_Gui_commands7_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Gui_default_instance_;
    new (ptr) ::Gui();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Gui::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Gui_commands7_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Gui_commands7_2eproto}, {
      &scc_info_ShowScreen_gui_2fscreen_2eproto.base,
      &scc_info_InputDialog_gui_2finput_5fdialog_2eproto.base,
      &scc_info_MenuDialog_gui_2fmenu_5fdialog_2eproto.base,
      &scc_info_DrawBitmap_gui_2fdraw_5fbitmap_2eproto.base,
      &scc_info_Slideshow_gui_2fslideshow_2eproto.base,}};

static void InitDefaultsscc_info_Mifare_commands7_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Mifare_default_instance_;
    new (ptr) ::Mifare();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mifare::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<33> scc_info_Mifare_commands7_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 33, 0, InitDefaultsscc_info_Mifare_commands7_2eproto}, {
      &scc_info_ClearKey_mifare_2fclassic_2fauth_2eproto.base,
      &scc_info_SamKey_mifare_2fclassic_2fauth_2eproto.base,
      &scc_info_ReadBlocks_mifare_2fclassic_2fread_2eproto.base,
      &scc_info_WriteBlocks_mifare_2fclassic_2fwrite_2eproto.base,
      &scc_info_BulkOperation_mifare_2fclassic_2fbulk_2eproto.base,
      &scc_info_GetCounter_mifare_2fclassic_2fcounter_2fget_2eproto.base,
      &scc_info_SetCounter_mifare_2fclassic_2fcounter_2fset_2eproto.base,
      &scc_info_ModifyCounter_mifare_2fclassic_2fcounter_2fmodify_2eproto.base,
      &scc_info_CopyCounter_mifare_2fclassic_2fcounter_2fcopy_2eproto.base,
      &scc_info_CommitCounter_mifare_2fclassic_2fcounter_2fcommit_2eproto.base,
      &scc_info_ClearKey_mifare_2fplus_2fauth_2eproto.base,
      &scc_info_ReadBlocks_mifare_2fplus_2fread_2eproto.base,
      &scc_info_WriteBlocks_mifare_2fplus_2fwrite_2eproto.base,
      &scc_info_BulkOperation_mifare_2fplus_2fbulk_2eproto.base,
      &scc_info_GetCounter_mifare_2fplus_2fcounter_2fget_2eproto.base,
      &scc_info_SetCounter_mifare_2fplus_2fcounter_2fset_2eproto.base,
      &scc_info_ModifyCounter_mifare_2fplus_2fcounter_2fmodify_2eproto.base,
      &scc_info_CopyCounter_mifare_2fplus_2fcounter_2fcopy_2eproto.base,
      &scc_info_CommitCounter_mifare_2fplus_2fcounter_2fcommit_2eproto.base,
      &scc_info_SamKey_mifare_2fplus_2fauth_2eproto.base,
      &scc_info_AuthenticateHost_mifare_2fav2_2fhost_5fauth_2eproto.base,
      &scc_info_ChangeKeyEntry_mifare_2fav2_2fchange_5fkeyentry_2eproto.base,
      &scc_info_Unlock_mifare_2fav2_2funlock_2eproto.base,
      &scc_info_ReadPages_mifare_2fultralight_2fread_2eproto.base,
      &scc_info_WritePages_mifare_2fultralight_2fwrite_2eproto.base,
      &scc_info_GetVersion_mifare_2fultralight_2fversion_2eproto.base,
      &scc_info_GetCounter_mifare_2fultralight_2fcounter_2fget_2eproto.base,
      &scc_info_IncrementCounter_mifare_2fultralight_2fcounter_2fincrement_2eproto.base,
      &scc_info_BulkOperation_mifare_2fultralight_2fbulk_2eproto.base,
      &scc_info_ClearKey_mifare_2fultralight_2fauth_2eproto.base,
      &scc_info_SamKey_mifare_2fultralight_2fauth_2eproto.base,
      &scc_info_ClearPassword_mifare_2fultralight_2fpassword_2eproto.base,
      &scc_info_SamPassword_mifare_2fultralight_2fpassword_2eproto.base,}};

static void InitDefaultsscc_info_MifareExtended_commands7_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MifareExtended_default_instance_;
    new (ptr) ::MifareExtended();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MifareExtended::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MifareExtended_commands7_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MifareExtended_commands7_2eproto}, {
      &scc_info_ReadSectors_mifare_2fclassic_2fsector_2fread_5fsector_2eproto.base,
      &scc_info_WriteSectors_mifare_2fclassic_2fsector_2fwrite_5fsector_2eproto.base,
      &scc_info_GetVersion_mifare_2fgeneric_2fget_5fversion_2eproto.base,}};

static void InitDefaultsscc_info_Miscellaneous_commands7_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Miscellaneous_default_instance_;
    new (ptr) ::Miscellaneous();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Miscellaneous::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Miscellaneous_commands7_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_Miscellaneous_commands7_2eproto}, {
      &scc_info_Leds_misc_2fleds_2eproto.base,
      &scc_info_ReadDeviceInfo_misc_2fdevice_2eproto.base,
      &scc_info_Reboot_misc_2freboot_2eproto.base,
      &scc_info_GetDeviceStatus_misc_2fdevice_2eproto.base,
      &scc_info_MakeSound_misc_2fbuzzer_2eproto.base,
      &scc_info_GetDeviceStatistic_misc_2fstats_2eproto.base,
      &scc_info_GetEcho_misc_2fecho_2eproto.base,
      &scc_info_ChangeBaudrate_misc_2fbaudrate_2eproto.base,
      &scc_info_ChangeLanSettings_misc_2flan_5fsettings_2eproto.base,}};

static void InitDefaultsscc_info_Service_commands7_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Service_default_instance_;
    new (ptr) ::Service();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Service::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_Service_commands7_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_Service_commands7_2eproto}, {
      &scc_info_GetChallenge_srv_2fchallenge_2eproto.base,
      &scc_info_Activate_srv_2fprotection_2eproto.base,
      &scc_info_Deactivate_srv_2fprotection_2eproto.base,
      &scc_info_Prepare_srv_2ffirmware_5fupdate_2eproto.base,
      &scc_info_UpdateBlock_srv_2ffirmware_5fupdate_2eproto.base,
      &scc_info_Apply_srv_2ffirmware_5fupdate_2eproto.base,
      &scc_info_Rollback_srv_2ffirmware_5fupdate_2eproto.base,
      &scc_info_GetDiagnostic_srv_2fdiagnostic_2eproto.base,
      &scc_info_Prepare_srv_2fupload_5fconfig_2eproto.base,
      &scc_info_UploadBlock_srv_2fupload_5fconfig_2eproto.base,
      &scc_info_CheckConfiguration_srv_2fupload_5fconfig_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_commands7_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_commands7_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_commands7_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_commands7_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Miscellaneous, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Miscellaneous, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Miscellaneous, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::MiscellaneousDefaultTypeInternal, set_leds_state_),
  offsetof(::MiscellaneousDefaultTypeInternal, read_device_info_),
  offsetof(::MiscellaneousDefaultTypeInternal, reboot_device_),
  offsetof(::MiscellaneousDefaultTypeInternal, get_device_status_),
  offsetof(::MiscellaneousDefaultTypeInternal, make_sound_),
  offsetof(::MiscellaneousDefaultTypeInternal, get_device_statistic_),
  offsetof(::MiscellaneousDefaultTypeInternal, get_echo_),
  offsetof(::MiscellaneousDefaultTypeInternal, change_baudrate_),
  offsetof(::MiscellaneousDefaultTypeInternal, change_lan_settings_),
  PROTOBUF_FIELD_OFFSET(::Miscellaneous, misc_cmd_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ContactlessLevel1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContactlessLevel1, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ContactlessLevel1, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ContactlessLevel1DefaultTypeInternal, poll_for_token_),
  offsetof(::ContactlessLevel1DefaultTypeInternal, emv_removal_),
  offsetof(::ContactlessLevel1DefaultTypeInternal, tsv_bit_array_),
  offsetof(::ContactlessLevel1DefaultTypeInternal, iso14443_4_command_),
  offsetof(::ContactlessLevel1DefaultTypeInternal, power_off_field_),
  offsetof(::ContactlessLevel1DefaultTypeInternal, request_for_ats_),
  PROTOBUF_FIELD_OFFSET(::ContactlessLevel1, contactless_level1_cmd_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ContactlessLevel2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContactlessLevel2, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ContactlessLevel2, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ContactlessLevel2DefaultTypeInternal, perform_transaction_),
  PROTOBUF_FIELD_OFFSET(::ContactlessLevel2, contactless_level2_cmd_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Mifare, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Mifare, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Mifare, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::MifareDefaultTypeInternal, mfr_classic_auth_on_clear_key_),
  offsetof(::MifareDefaultTypeInternal, mfr_classic_auth_on_sam_key_),
  offsetof(::MifareDefaultTypeInternal, mfr_classic_read_blocks_),
  offsetof(::MifareDefaultTypeInternal, mfr_classic_write_blocks_),
  offsetof(::MifareDefaultTypeInternal, mfr_classic_bulk_operation_),
  offsetof(::MifareDefaultTypeInternal, mfr_classic_get_counter_),
  offsetof(::MifareDefaultTypeInternal, mfr_classic_set_counter_),
  offsetof(::MifareDefaultTypeInternal, mfr_classic_modify_counter_),
  offsetof(::MifareDefaultTypeInternal, mfr_classic_copy_counter_),
  offsetof(::MifareDefaultTypeInternal, mfr_classic_commit_counter_),
  offsetof(::MifareDefaultTypeInternal, mfr_plus_auth_on_clear_key_),
  offsetof(::MifareDefaultTypeInternal, mfr_plus_read_blocks_),
  offsetof(::MifareDefaultTypeInternal, mfr_plus_write_blocks_),
  offsetof(::MifareDefaultTypeInternal, mfr_plus_bulk_operation_),
  offsetof(::MifareDefaultTypeInternal, mfr_plus_get_counter_),
  offsetof(::MifareDefaultTypeInternal, mfr_plus_set_counter_),
  offsetof(::MifareDefaultTypeInternal, mfr_plus_modify_counter_),
  offsetof(::MifareDefaultTypeInternal, mfr_plus_copy_counter_),
  offsetof(::MifareDefaultTypeInternal, mfr_plus_commit_counter_),
  offsetof(::MifareDefaultTypeInternal, mfr_plus_auth_on_sam_key_),
  offsetof(::MifareDefaultTypeInternal, av2_authenticate_host_),
  offsetof(::MifareDefaultTypeInternal, av2_change_keyentry_),
  offsetof(::MifareDefaultTypeInternal, av2_unlock_),
  offsetof(::MifareDefaultTypeInternal, mfr_ul_read_pages_),
  offsetof(::MifareDefaultTypeInternal, mfr_ul_write_pages_),
  offsetof(::MifareDefaultTypeInternal, mfr_ul_get_version_),
  offsetof(::MifareDefaultTypeInternal, mfr_ul_get_counter_),
  offsetof(::MifareDefaultTypeInternal, mfr_ul_increment_counter_),
  offsetof(::MifareDefaultTypeInternal, mfr_ul_bulk_operation_),
  offsetof(::MifareDefaultTypeInternal, mfr_ul_auth_on_clear_key_),
  offsetof(::MifareDefaultTypeInternal, mfr_ul_auth_on_sam_key_),
  offsetof(::MifareDefaultTypeInternal, mfr_ul_auth_clear_password_),
  offsetof(::MifareDefaultTypeInternal, mfr_ul_auth_sam_password_),
  PROTOBUF_FIELD_OFFSET(::Mifare, mifare_cmd_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ContactLevel1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ContactLevel1, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ContactLevel1, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ContactLevel1DefaultTypeInternal, power_on_card_),
  offsetof(::ContactLevel1DefaultTypeInternal, power_off_card_),
  offsetof(::ContactLevel1DefaultTypeInternal, transmit_apdu_),
  PROTOBUF_FIELD_OFFSET(::ContactLevel1, contact_level1_cmd_),
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Service, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Service, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Service, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ServiceDefaultTypeInternal, get_challenge_),
  offsetof(::ServiceDefaultTypeInternal, activate_protection_),
  offsetof(::ServiceDefaultTypeInternal, deactivate_protection_),
  offsetof(::ServiceDefaultTypeInternal, prepare_update_),
  offsetof(::ServiceDefaultTypeInternal, update_block_),
  offsetof(::ServiceDefaultTypeInternal, apply_update_),
  offsetof(::ServiceDefaultTypeInternal, rollback_update_),
  offsetof(::ServiceDefaultTypeInternal, get_diagnostic_),
  offsetof(::ServiceDefaultTypeInternal, prepare_for_config_),
  offsetof(::ServiceDefaultTypeInternal, upload_block_of_config_),
  offsetof(::ServiceDefaultTypeInternal, check_configuration_),
  PROTOBUF_FIELD_OFFSET(::Service, srv_cmd_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Gui, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Gui, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Gui, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::GuiDefaultTypeInternal, show_screen_),
  offsetof(::GuiDefaultTypeInternal, input_dialog_),
  offsetof(::GuiDefaultTypeInternal, menu_dialog_),
  offsetof(::GuiDefaultTypeInternal, draw_bitmap_),
  offsetof(::GuiDefaultTypeInternal, slideshow_),
  PROTOBUF_FIELD_OFFSET(::Gui, gui_cmd_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::MifareExtended, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MifareExtended, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::MifareExtended, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::MifareExtendedDefaultTypeInternal, mfr_classic_read_sectors_),
  offsetof(::MifareExtendedDefaultTypeInternal, mfr_classic_write_sectors_),
  offsetof(::MifareExtendedDefaultTypeInternal, mfr_get_version_),
  PROTOBUF_FIELD_OFFSET(::MifareExtended, mifare_cmd_),
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::Miscellaneous)},
  { 24, 36, sizeof(::ContactlessLevel1)},
  { 42, 49, sizeof(::ContactlessLevel2)},
  { 50, 89, sizeof(::Mifare)},
  { 122, 131, sizeof(::ContactLevel1)},
  { 134, 151, sizeof(::Service)},
  { 162, 173, sizeof(::Gui)},
  { 178, 187, sizeof(::MifareExtended)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Miscellaneous_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ContactlessLevel1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ContactlessLevel2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Mifare_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ContactLevel1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Service_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Gui_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MifareExtended_default_instance_),
};

const char descriptor_table_protodef_commands7_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017commands7.proto\032\017misc/leds.proto\032\021misc"
  "/device.proto\032\021misc/reboot.proto\032\021misc/b"
  "uzzer.proto\032\020misc/stats.proto\032\017misc/echo"
  ".proto\032\023misc/baudrate.proto\032\027misc/lan_se"
  "ttings.proto\032\023srv/challenge.proto\032\024srv/p"
  "rotection.proto\032\031srv/firmware_update.pro"
  "to\032\024srv/diagnostic.proto\032\027srv/upload_con"
  "fig.proto\032 contactless/poll_for_token.pr"
  "oto\032\035contactless/transaction.proto\032\035cont"
  "actless/emv_removal.proto\032\034contactless/t"
  "ransceive.proto\032\034contactless/iso14443_4."
  "proto\032\035contactless/iso14443_4a.proto\032\032co"
  "ntactless/rf_field.proto\032\031mifare/classic"
  "/auth.proto\032\031mifare/classic/read.proto\032\032"
  "mifare/classic/write.proto\032\031mifare/class"
  "ic/bulk.proto\032#mifare/classic/counter/co"
  "mmit.proto\032!mifare/classic/counter/copy."
  "proto\032 mifare/classic/counter/get.proto\032"
  "#mifare/classic/counter/modify.proto\032 mi"
  "fare/classic/counter/set.proto\032\'mifare/c"
  "lassic/sector/read_sector.proto\032(mifare/"
  "classic/sector/write_sector.proto\032\026mifar"
  "e/plus/auth.proto\032\026mifare/plus/read.prot"
  "o\032\027mifare/plus/write.proto\032\026mifare/plus/"
  "bulk.proto\032 mifare/plus/counter/commit.p"
  "roto\032\036mifare/plus/counter/copy.proto\032\035mi"
  "fare/plus/counter/get.proto\032 mifare/plus"
  "/counter/modify.proto\032\035mifare/plus/count"
  "er/set.proto\032\032mifare/av2/host_auth.proto"
  "\032 mifare/av2/change_keyentry.proto\032\027mifa"
  "re/av2/unlock.proto\032\034mifare/ultralight/r"
  "ead.proto\032\035mifare/ultralight/write.proto"
  "\032\037mifare/ultralight/version.proto\032\034mifar"
  "e/ultralight/bulk.proto\032\034mifare/ultralig"
  "ht/auth.proto\032 mifare/ultralight/passwor"
  "d.proto\032#mifare/ultralight/counter/get.p"
  "roto\032)mifare/ultralight/counter/incremen"
  "t.proto\032 mifare/generic/get_version.prot"
  "o\032\026contact/power_on.proto\032\027contact/power"
  "_off.proto\032\027contact/iso7816_4.proto\032\020gui"
  "/screen.proto\032\026gui/input_dialog.proto\032\025g"
  "ui/menu_dialog.proto\032\025gui/draw_bitmap.pr"
  "oto\032\023gui/slideshow.proto\"\375\003\n\rMiscellaneo"
  "us\022)\n\016set_leds_state\030\001 \001(\0132\017.misc.leds.L"
  "edsH\000\0227\n\020read_device_info\030\002 \001(\0132\033.misc.d"
  "evice.ReadDeviceInfoH\000\022,\n\rreboot_device\030"
  "\003 \001(\0132\023.misc.reboot.RebootH\000\0229\n\021get_devi"
  "ce_status\030\004 \001(\0132\034.misc.device.GetDeviceS"
  "tatusH\000\022,\n\nmake_sound\030\006 \001(\0132\026.misc.buzze"
  "r.MakeSoundH\000\022>\n\024get_device_statistic\030\007 "
  "\001(\0132\036.misc.stats.GetDeviceStatisticH\000\022&\n"
  "\010get_echo\030\010 \001(\0132\022.misc.echo.GetEchoH\000\0228\n"
  "\017change_baudrate\030\t \001(\0132\035.misc.baudrate.C"
  "hangeBaudrateH\000\022C\n\023change_lan_settings\030\n"
  " \001(\0132$.misc.lan_settings.ChangeLanSettin"
  "gsH\000B\n\n\010misc_cmd\"\265\003\n\021ContactlessLevel1\0228"
  "\n\016poll_for_token\030\001 \001(\0132\036.contactless.pol"
  "l.PollForTokenH\000\022:\n\013emv_removal\030\002 \001(\0132#."
  "contactless.emv_removal.EmvRemovalH\000\022C\n\r"
  "tsv_bit_array\030\003 \001(\0132*.contactless.transc"
  "eive.TransceiveBitArrayH\000\022=\n\022iso14443_4_"
  "command\030\004 \001(\0132\037.contactless.iso14443_4.C"
  "ommandH\000\022>\n\017power_off_field\030\005 \001(\0132#.cont"
  "actless.rf_field.PowerOffFieldH\000\022L\n\017requ"
  "est_for_ats\030\006 \001(\01321.contactless.iso14443"
  "_4a.RequestForAnswerToSelectH\000B\030\n\026contac"
  "tless_level1_cmd\"y\n\021ContactlessLevel2\022J\n"
  "\023perform_transaction\030\001 \001(\0132+.contactless"
  ".transaction.PerformTransactionH\000B\030\n\026con"
  "tactless_level2_cmd\"\323\022\n\006Mifare\022F\n\035mfr_cl"
  "assic_auth_on_clear_key\030\001 \001(\0132\035.mifare.c"
  "lassic.auth.ClearKeyH\000\022B\n\033mfr_classic_au"
  "th_on_sam_key\030\002 \001(\0132\033.mifare.classic.aut"
  "h.SamKeyH\000\022B\n\027mfr_classic_read_blocks\030\003 "
  "\001(\0132\037.mifare.classic.read.ReadBlocksH\000\022E"
  "\n\030mfr_classic_write_blocks\030\004 \001(\0132!.mifar"
  "e.classic.write.WriteBlocksH\000\022H\n\032mfr_cla"
  "ssic_bulk_operation\030\005 \001(\0132\".mifare.class"
  "ic.bulk.BulkOperationH\000\022I\n\027mfr_classic_g"
  "et_counter\030\006 \001(\0132&.mifare.classic.counte"
  "r.get.GetCounterH\000\022I\n\027mfr_classic_set_co"
  "unter\030\007 \001(\0132&.mifare.classic.counter.set"
  ".SetCounterH\000\022R\n\032mfr_classic_modify_coun"
  "ter\030\010 \001(\0132,.mifare.classic.counter.modif"
  "y.ModifyCounterH\000\022L\n\030mfr_classic_copy_co"
  "unter\030\t \001(\0132(.mifare.classic.counter.cop"
  "y.CopyCounterH\000\022R\n\032mfr_classic_commit_co"
  "unter\030\n \001(\0132,.mifare.classic.counter.com"
  "mit.CommitCounterH\000\022@\n\032mfr_plus_auth_on_"
  "clear_key\030\020 \001(\0132\032.mifare.plus.auth.Clear"
  "KeyH\000\022<\n\024mfr_plus_read_blocks\030\021 \001(\0132\034.mi"
  "fare.plus.read.ReadBlocksH\000\022\?\n\025mfr_plus_"
  "write_blocks\030\022 \001(\0132\036.mifare.plus.write.W"
  "riteBlocksH\000\022B\n\027mfr_plus_bulk_operation\030"
  "\023 \001(\0132\037.mifare.plus.bulk.BulkOperationH\000"
  "\022C\n\024mfr_plus_get_counter\030\024 \001(\0132#.mifare."
  "plus.counter.get.GetCounterH\000\022C\n\024mfr_plu"
  "s_set_counter\030\025 \001(\0132#.mifare.plus.counte"
  "r.set.SetCounterH\000\022L\n\027mfr_plus_modify_co"
  "unter\030\026 \001(\0132).mifare.plus.counter.modify"
  ".ModifyCounterH\000\022F\n\025mfr_plus_copy_counte"
  "r\030\027 \001(\0132%.mifare.plus.counter.copy.CopyC"
  "ounterH\000\022L\n\027mfr_plus_commit_counter\030\030 \001("
  "\0132).mifare.plus.counter.commit.CommitCou"
  "nterH\000\022<\n\030mfr_plus_auth_on_sam_key\030\031 \001(\013"
  "2\030.mifare.plus.auth.SamKeyH\000\022G\n\025av2_auth"
  "enticate_host\030\036 \001(\0132&.mifare.av2.host_au"
  "th.AuthenticateHostH\000\022I\n\023av2_change_keye"
  "ntry\030\037 \001(\0132*.mifare.av2.change_keyentry."
  "ChangeKeyEntryH\000\022/\n\nav2_unlock\030  \001(\0132\031.m"
  "ifare.av2.unlock.UnlockH\000\022>\n\021mfr_ul_read"
  "_pages\030$ \001(\0132!.mifare.ultralight.read.Re"
  "adPagesH\000\022A\n\022mfr_ul_write_pages\030% \001(\0132#."
  "mifare.ultralight.write.WritePagesH\000\022C\n\022"
  "mfr_ul_get_version\030& \001(\0132%.mifare.ultral"
  "ight.version.GetVersionH\000\022G\n\022mfr_ul_get_"
  "counter\030\' \001(\0132).mifare.ultralight.counte"
  "r.get.GetCounterH\000\022Y\n\030mfr_ul_increment_c"
  "ounter\030( \001(\01325.mifare.ultralight.counter"
  ".increment.IncrementCounterH\000\022F\n\025mfr_ul_"
  "bulk_operation\030) \001(\0132%.mifare.ultralight"
  ".bulk.BulkOperationH\000\022D\n\030mfr_ul_auth_on_"
  "clear_key\030* \001(\0132 .mifare.ultralight.auth"
  ".ClearKeyH\000\022@\n\026mfr_ul_auth_on_sam_key\030+ "
  "\001(\0132\036.mifare.ultralight.auth.SamKeyH\000\022O\n"
  "\032mfr_ul_auth_clear_password\030, \001(\0132).mifa"
  "re.ultralight.password.ClearPasswordH\000\022K"
  "\n\030mfr_ul_auth_sam_password\030- \001(\0132\'.mifar"
  "e.ultralight.password.SamPasswordH\000B\014\n\nm"
  "ifare_cmd\"\322\001\n\rContactLevel1\0226\n\rpower_on_"
  "card\030\001 \001(\0132\035.contact.power_on.PowerOnCar"
  "dH\000\0229\n\016power_off_card\030\002 \001(\0132\037.contact.po"
  "wer_off.PowerOffCardH\000\0228\n\rtransmit_apdu\030"
  "\003 \001(\0132\037.contact.iso7816_4.TransmitApduH\000"
  "B\024\n\022contact_level1_cmd\"\233\005\n\007Service\0224\n\rge"
  "t_challenge\030\001 \001(\0132\033.srv.challenge.GetCha"
  "llengeH\000\0227\n\023activate_protection\030\002 \001(\0132\030."
  "srv.protection.ActivateH\000\022;\n\025deactivate_"
  "protection\030\003 \001(\0132\032.srv.protection.Deacti"
  "vateH\000\0226\n\016prepare_update\030\004 \001(\0132\034.srv.fir"
  "mware_update.PrepareH\000\0228\n\014update_block\030\005"
  " \001(\0132 .srv.firmware_update.UpdateBlockH\000"
  "\0222\n\014apply_update\030\006 \001(\0132\032.srv.firmware_up"
  "date.ApplyH\000\0228\n\017rollback_update\030\007 \001(\0132\035."
  "srv.firmware_update.RollbackH\000\0227\n\016get_di"
  "agnostic\030\010 \001(\0132\035.srv.diagnostic.GetDiagn"
  "osticH\000\0228\n\022prepare_for_config\030\t \001(\0132\032.sr"
  "v.upload_config.PrepareH\000\022@\n\026upload_bloc"
  "k_of_config\030\n \001(\0132\036.srv.upload_config.Up"
  "loadBlockH\000\022D\n\023check_configuration\030\013 \001(\013"
  "2%.srv.upload_config.CheckConfigurationH"
  "\000B\t\n\007srv_cmd\"\215\002\n\003Gui\022-\n\013show_screen\030\001 \001("
  "\0132\026.gui.screen.ShowScreenH\000\0225\n\014input_dia"
  "log\030\002 \001(\0132\035.gui.input_dialog.InputDialog"
  "H\000\0222\n\013menu_dialog\030\003 \001(\0132\033.gui.menu_dialo"
  "g.MenuDialogH\000\0222\n\013draw_bitmap\030\004 \001(\0132\033.gu"
  "i.draw_bitmap.DrawBitmapH\000\022-\n\tslideshow\030"
  "\005 \001(\0132\030.gui.slideshow.SlideshowH\000B\t\n\007gui"
  "_cmd\"\376\001\n\016MifareExtended\022K\n\030mfr_classic_r"
  "ead_sectors\030\001 \001(\0132\'.mifare.classic.secto"
  "r.read.ReadSectorsH\000\022N\n\031mfr_classic_writ"
  "e_sectors\030\002 \001(\0132).mifare.classic.sector."
  "write.WriteSectorsH\000\022A\n\017mfr_get_version\030"
  "\003 \001(\0132&.mifare.generic.get_version.GetVe"
  "rsionH\000B\014\n\nmifare_cmd"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_commands7_2eproto_deps[60] = {
  &::descriptor_table_contact_2fiso7816_5f4_2eproto,
  &::descriptor_table_contact_2fpower_5foff_2eproto,
  &::descriptor_table_contact_2fpower_5fon_2eproto,
  &::descriptor_table_contactless_2femv_5fremoval_2eproto,
  &::descriptor_table_contactless_2fiso14443_5f4_2eproto,
  &::descriptor_table_contactless_2fiso14443_5f4a_2eproto,
  &::descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto,
  &::descriptor_table_contactless_2frf_5ffield_2eproto,
  &::descriptor_table_contactless_2ftransaction_2eproto,
  &::descriptor_table_contactless_2ftransceive_2eproto,
  &::descriptor_table_gui_2fdraw_5fbitmap_2eproto,
  &::descriptor_table_gui_2finput_5fdialog_2eproto,
  &::descriptor_table_gui_2fmenu_5fdialog_2eproto,
  &::descriptor_table_gui_2fscreen_2eproto,
  &::descriptor_table_gui_2fslideshow_2eproto,
  &::descriptor_table_mifare_2fav2_2fchange_5fkeyentry_2eproto,
  &::descriptor_table_mifare_2fav2_2fhost_5fauth_2eproto,
  &::descriptor_table_mifare_2fav2_2funlock_2eproto,
  &::descriptor_table_mifare_2fclassic_2fauth_2eproto,
  &::descriptor_table_mifare_2fclassic_2fbulk_2eproto,
  &::descriptor_table_mifare_2fclassic_2fcounter_2fcommit_2eproto,
  &::descriptor_table_mifare_2fclassic_2fcounter_2fcopy_2eproto,
  &::descriptor_table_mifare_2fclassic_2fcounter_2fget_2eproto,
  &::descriptor_table_mifare_2fclassic_2fcounter_2fmodify_2eproto,
  &::descriptor_table_mifare_2fclassic_2fcounter_2fset_2eproto,
  &::descriptor_table_mifare_2fclassic_2fread_2eproto,
  &::descriptor_table_mifare_2fclassic_2fsector_2fread_5fsector_2eproto,
  &::descriptor_table_mifare_2fclassic_2fsector_2fwrite_5fsector_2eproto,
  &::descriptor_table_mifare_2fclassic_2fwrite_2eproto,
  &::descriptor_table_mifare_2fgeneric_2fget_5fversion_2eproto,
  &::descriptor_table_mifare_2fplus_2fauth_2eproto,
  &::descriptor_table_mifare_2fplus_2fbulk_2eproto,
  &::descriptor_table_mifare_2fplus_2fcounter_2fcommit_2eproto,
  &::descriptor_table_mifare_2fplus_2fcounter_2fcopy_2eproto,
  &::descriptor_table_mifare_2fplus_2fcounter_2fget_2eproto,
  &::descriptor_table_mifare_2fplus_2fcounter_2fmodify_2eproto,
  &::descriptor_table_mifare_2fplus_2fcounter_2fset_2eproto,
  &::descriptor_table_mifare_2fplus_2fread_2eproto,
  &::descriptor_table_mifare_2fplus_2fwrite_2eproto,
  &::descriptor_table_mifare_2fultralight_2fauth_2eproto,
  &::descriptor_table_mifare_2fultralight_2fbulk_2eproto,
  &::descriptor_table_mifare_2fultralight_2fcounter_2fget_2eproto,
  &::descriptor_table_mifare_2fultralight_2fcounter_2fincrement_2eproto,
  &::descriptor_table_mifare_2fultralight_2fpassword_2eproto,
  &::descriptor_table_mifare_2fultralight_2fread_2eproto,
  &::descriptor_table_mifare_2fultralight_2fversion_2eproto,
  &::descriptor_table_mifare_2fultralight_2fwrite_2eproto,
  &::descriptor_table_misc_2fbaudrate_2eproto,
  &::descriptor_table_misc_2fbuzzer_2eproto,
  &::descriptor_table_misc_2fdevice_2eproto,
  &::descriptor_table_misc_2fecho_2eproto,
  &::descriptor_table_misc_2flan_5fsettings_2eproto,
  &::descriptor_table_misc_2fleds_2eproto,
  &::descriptor_table_misc_2freboot_2eproto,
  &::descriptor_table_misc_2fstats_2eproto,
  &::descriptor_table_srv_2fchallenge_2eproto,
  &::descriptor_table_srv_2fdiagnostic_2eproto,
  &::descriptor_table_srv_2ffirmware_5fupdate_2eproto,
  &::descriptor_table_srv_2fprotection_2eproto,
  &::descriptor_table_srv_2fupload_5fconfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_commands7_2eproto_sccs[8] = {
  &scc_info_ContactLevel1_commands7_2eproto.base,
  &scc_info_ContactlessLevel1_commands7_2eproto.base,
  &scc_info_ContactlessLevel2_commands7_2eproto.base,
  &scc_info_Gui_commands7_2eproto.base,
  &scc_info_Mifare_commands7_2eproto.base,
  &scc_info_MifareExtended_commands7_2eproto.base,
  &scc_info_Miscellaneous_commands7_2eproto.base,
  &scc_info_Service_commands7_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_commands7_2eproto_once;
static bool descriptor_table_commands7_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commands7_2eproto = {
  &descriptor_table_commands7_2eproto_initialized, descriptor_table_protodef_commands7_2eproto, "commands7.proto", 6581,
  &descriptor_table_commands7_2eproto_once, descriptor_table_commands7_2eproto_sccs, descriptor_table_commands7_2eproto_deps, 8, 60,
  schemas, file_default_instances, TableStruct_commands7_2eproto::offsets,
  file_level_metadata_commands7_2eproto, 8, file_level_enum_descriptors_commands7_2eproto, file_level_service_descriptors_commands7_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_commands7_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_commands7_2eproto), true);

// ===================================================================

void Miscellaneous::InitAsDefaultInstance() {
  ::_Miscellaneous_default_instance_.set_leds_state_ = const_cast< ::misc::leds::Leds*>(
      ::misc::leds::Leds::internal_default_instance());
  ::_Miscellaneous_default_instance_.read_device_info_ = const_cast< ::misc::device::ReadDeviceInfo*>(
      ::misc::device::ReadDeviceInfo::internal_default_instance());
  ::_Miscellaneous_default_instance_.reboot_device_ = const_cast< ::misc::reboot::Reboot*>(
      ::misc::reboot::Reboot::internal_default_instance());
  ::_Miscellaneous_default_instance_.get_device_status_ = const_cast< ::misc::device::GetDeviceStatus*>(
      ::misc::device::GetDeviceStatus::internal_default_instance());
  ::_Miscellaneous_default_instance_.make_sound_ = const_cast< ::misc::buzzer::MakeSound*>(
      ::misc::buzzer::MakeSound::internal_default_instance());
  ::_Miscellaneous_default_instance_.get_device_statistic_ = const_cast< ::misc::stats::GetDeviceStatistic*>(
      ::misc::stats::GetDeviceStatistic::internal_default_instance());
  ::_Miscellaneous_default_instance_.get_echo_ = const_cast< ::misc::echo::GetEcho*>(
      ::misc::echo::GetEcho::internal_default_instance());
  ::_Miscellaneous_default_instance_.change_baudrate_ = const_cast< ::misc::baudrate::ChangeBaudrate*>(
      ::misc::baudrate::ChangeBaudrate::internal_default_instance());
  ::_Miscellaneous_default_instance_.change_lan_settings_ = const_cast< ::misc::lan_settings::ChangeLanSettings*>(
      ::misc::lan_settings::ChangeLanSettings::internal_default_instance());
}
class Miscellaneous::_Internal {
 public:
  using HasBits = decltype(std::declval<Miscellaneous>()._has_bits_);
  static const ::misc::leds::Leds& set_leds_state(const Miscellaneous* msg);
  static const ::misc::device::ReadDeviceInfo& read_device_info(const Miscellaneous* msg);
  static const ::misc::reboot::Reboot& reboot_device(const Miscellaneous* msg);
  static const ::misc::device::GetDeviceStatus& get_device_status(const Miscellaneous* msg);
  static const ::misc::buzzer::MakeSound& make_sound(const Miscellaneous* msg);
  static const ::misc::stats::GetDeviceStatistic& get_device_statistic(const Miscellaneous* msg);
  static const ::misc::echo::GetEcho& get_echo(const Miscellaneous* msg);
  static const ::misc::baudrate::ChangeBaudrate& change_baudrate(const Miscellaneous* msg);
  static const ::misc::lan_settings::ChangeLanSettings& change_lan_settings(const Miscellaneous* msg);
};

const ::misc::leds::Leds&
Miscellaneous::_Internal::set_leds_state(const Miscellaneous* msg) {
  return *msg->misc_cmd_.set_leds_state_;
}
const ::misc::device::ReadDeviceInfo&
Miscellaneous::_Internal::read_device_info(const Miscellaneous* msg) {
  return *msg->misc_cmd_.read_device_info_;
}
const ::misc::reboot::Reboot&
Miscellaneous::_Internal::reboot_device(const Miscellaneous* msg) {
  return *msg->misc_cmd_.reboot_device_;
}
const ::misc::device::GetDeviceStatus&
Miscellaneous::_Internal::get_device_status(const Miscellaneous* msg) {
  return *msg->misc_cmd_.get_device_status_;
}
const ::misc::buzzer::MakeSound&
Miscellaneous::_Internal::make_sound(const Miscellaneous* msg) {
  return *msg->misc_cmd_.make_sound_;
}
const ::misc::stats::GetDeviceStatistic&
Miscellaneous::_Internal::get_device_statistic(const Miscellaneous* msg) {
  return *msg->misc_cmd_.get_device_statistic_;
}
const ::misc::echo::GetEcho&
Miscellaneous::_Internal::get_echo(const Miscellaneous* msg) {
  return *msg->misc_cmd_.get_echo_;
}
const ::misc::baudrate::ChangeBaudrate&
Miscellaneous::_Internal::change_baudrate(const Miscellaneous* msg) {
  return *msg->misc_cmd_.change_baudrate_;
}
const ::misc::lan_settings::ChangeLanSettings&
Miscellaneous::_Internal::change_lan_settings(const Miscellaneous* msg) {
  return *msg->misc_cmd_.change_lan_settings_;
}
void Miscellaneous::set_allocated_set_leds_state(::misc::leds::Leds* set_leds_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (set_leds_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      set_leds_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_leds_state, submessage_arena);
    }
    set_has_set_leds_state();
    misc_cmd_.set_leds_state_ = set_leds_state;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.set_leds_state)
}
void Miscellaneous::clear_set_leds_state() {
  if (_internal_has_set_leds_state()) {
    delete misc_cmd_.set_leds_state_;
    clear_has_misc_cmd();
  }
}
void Miscellaneous::set_allocated_read_device_info(::misc::device::ReadDeviceInfo* read_device_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (read_device_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      read_device_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_device_info, submessage_arena);
    }
    set_has_read_device_info();
    misc_cmd_.read_device_info_ = read_device_info;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.read_device_info)
}
void Miscellaneous::clear_read_device_info() {
  if (_internal_has_read_device_info()) {
    delete misc_cmd_.read_device_info_;
    clear_has_misc_cmd();
  }
}
void Miscellaneous::set_allocated_reboot_device(::misc::reboot::Reboot* reboot_device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (reboot_device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reboot_device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reboot_device, submessage_arena);
    }
    set_has_reboot_device();
    misc_cmd_.reboot_device_ = reboot_device;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.reboot_device)
}
void Miscellaneous::clear_reboot_device() {
  if (_internal_has_reboot_device()) {
    delete misc_cmd_.reboot_device_;
    clear_has_misc_cmd();
  }
}
void Miscellaneous::set_allocated_get_device_status(::misc::device::GetDeviceStatus* get_device_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (get_device_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_device_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_device_status, submessage_arena);
    }
    set_has_get_device_status();
    misc_cmd_.get_device_status_ = get_device_status;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.get_device_status)
}
void Miscellaneous::clear_get_device_status() {
  if (_internal_has_get_device_status()) {
    delete misc_cmd_.get_device_status_;
    clear_has_misc_cmd();
  }
}
void Miscellaneous::set_allocated_make_sound(::misc::buzzer::MakeSound* make_sound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (make_sound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      make_sound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, make_sound, submessage_arena);
    }
    set_has_make_sound();
    misc_cmd_.make_sound_ = make_sound;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.make_sound)
}
void Miscellaneous::clear_make_sound() {
  if (_internal_has_make_sound()) {
    delete misc_cmd_.make_sound_;
    clear_has_misc_cmd();
  }
}
void Miscellaneous::set_allocated_get_device_statistic(::misc::stats::GetDeviceStatistic* get_device_statistic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (get_device_statistic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_device_statistic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_device_statistic, submessage_arena);
    }
    set_has_get_device_statistic();
    misc_cmd_.get_device_statistic_ = get_device_statistic;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.get_device_statistic)
}
void Miscellaneous::clear_get_device_statistic() {
  if (_internal_has_get_device_statistic()) {
    delete misc_cmd_.get_device_statistic_;
    clear_has_misc_cmd();
  }
}
void Miscellaneous::set_allocated_get_echo(::misc::echo::GetEcho* get_echo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (get_echo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_echo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_echo, submessage_arena);
    }
    set_has_get_echo();
    misc_cmd_.get_echo_ = get_echo;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.get_echo)
}
void Miscellaneous::clear_get_echo() {
  if (_internal_has_get_echo()) {
    delete misc_cmd_.get_echo_;
    clear_has_misc_cmd();
  }
}
void Miscellaneous::set_allocated_change_baudrate(::misc::baudrate::ChangeBaudrate* change_baudrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (change_baudrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      change_baudrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_baudrate, submessage_arena);
    }
    set_has_change_baudrate();
    misc_cmd_.change_baudrate_ = change_baudrate;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.change_baudrate)
}
void Miscellaneous::clear_change_baudrate() {
  if (_internal_has_change_baudrate()) {
    delete misc_cmd_.change_baudrate_;
    clear_has_misc_cmd();
  }
}
void Miscellaneous::set_allocated_change_lan_settings(::misc::lan_settings::ChangeLanSettings* change_lan_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_misc_cmd();
  if (change_lan_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      change_lan_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_lan_settings, submessage_arena);
    }
    set_has_change_lan_settings();
    misc_cmd_.change_lan_settings_ = change_lan_settings;
  }
  // @@protoc_insertion_point(field_set_allocated:Miscellaneous.change_lan_settings)
}
void Miscellaneous::clear_change_lan_settings() {
  if (_internal_has_change_lan_settings()) {
    delete misc_cmd_.change_lan_settings_;
    clear_has_misc_cmd();
  }
}
Miscellaneous::Miscellaneous()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Miscellaneous)
}
Miscellaneous::Miscellaneous(const Miscellaneous& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_misc_cmd();
  switch (from.misc_cmd_case()) {
    case kSetLedsState: {
      _internal_mutable_set_leds_state()->::misc::leds::Leds::MergeFrom(from._internal_set_leds_state());
      break;
    }
    case kReadDeviceInfo: {
      _internal_mutable_read_device_info()->::misc::device::ReadDeviceInfo::MergeFrom(from._internal_read_device_info());
      break;
    }
    case kRebootDevice: {
      _internal_mutable_reboot_device()->::misc::reboot::Reboot::MergeFrom(from._internal_reboot_device());
      break;
    }
    case kGetDeviceStatus: {
      _internal_mutable_get_device_status()->::misc::device::GetDeviceStatus::MergeFrom(from._internal_get_device_status());
      break;
    }
    case kMakeSound: {
      _internal_mutable_make_sound()->::misc::buzzer::MakeSound::MergeFrom(from._internal_make_sound());
      break;
    }
    case kGetDeviceStatistic: {
      _internal_mutable_get_device_statistic()->::misc::stats::GetDeviceStatistic::MergeFrom(from._internal_get_device_statistic());
      break;
    }
    case kGetEcho: {
      _internal_mutable_get_echo()->::misc::echo::GetEcho::MergeFrom(from._internal_get_echo());
      break;
    }
    case kChangeBaudrate: {
      _internal_mutable_change_baudrate()->::misc::baudrate::ChangeBaudrate::MergeFrom(from._internal_change_baudrate());
      break;
    }
    case kChangeLanSettings: {
      _internal_mutable_change_lan_settings()->::misc::lan_settings::ChangeLanSettings::MergeFrom(from._internal_change_lan_settings());
      break;
    }
    case MISC_CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Miscellaneous)
}

void Miscellaneous::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Miscellaneous_commands7_2eproto.base);
  clear_has_misc_cmd();
}

Miscellaneous::~Miscellaneous() {
  // @@protoc_insertion_point(destructor:Miscellaneous)
  SharedDtor();
}

void Miscellaneous::SharedDtor() {
  if (has_misc_cmd()) {
    clear_misc_cmd();
  }
}

void Miscellaneous::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Miscellaneous& Miscellaneous::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Miscellaneous_commands7_2eproto.base);
  return *internal_default_instance();
}


void Miscellaneous::clear_misc_cmd() {
// @@protoc_insertion_point(one_of_clear_start:Miscellaneous)
  switch (misc_cmd_case()) {
    case kSetLedsState: {
      delete misc_cmd_.set_leds_state_;
      break;
    }
    case kReadDeviceInfo: {
      delete misc_cmd_.read_device_info_;
      break;
    }
    case kRebootDevice: {
      delete misc_cmd_.reboot_device_;
      break;
    }
    case kGetDeviceStatus: {
      delete misc_cmd_.get_device_status_;
      break;
    }
    case kMakeSound: {
      delete misc_cmd_.make_sound_;
      break;
    }
    case kGetDeviceStatistic: {
      delete misc_cmd_.get_device_statistic_;
      break;
    }
    case kGetEcho: {
      delete misc_cmd_.get_echo_;
      break;
    }
    case kChangeBaudrate: {
      delete misc_cmd_.change_baudrate_;
      break;
    }
    case kChangeLanSettings: {
      delete misc_cmd_.change_lan_settings_;
      break;
    }
    case MISC_CMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MISC_CMD_NOT_SET;
}


void Miscellaneous::Clear() {
// @@protoc_insertion_point(message_clear_start:Miscellaneous)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_misc_cmd();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Miscellaneous::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .misc.leds.Leds set_leds_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_leds_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.device.ReadDeviceInfo read_device_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_device_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.reboot.Reboot reboot_device = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reboot_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.device.GetDeviceStatus get_device_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_device_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.buzzer.MakeSound make_sound = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_make_sound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.stats.GetDeviceStatistic get_device_statistic = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_device_statistic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.echo.GetEcho get_echo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_echo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.baudrate.ChangeBaudrate change_baudrate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_baudrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.lan_settings.ChangeLanSettings change_lan_settings = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_lan_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Miscellaneous::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Miscellaneous)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (misc_cmd_case()) {
    case kSetLedsState: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::set_leds_state(this), target, stream);
      break;
    }
    case kReadDeviceInfo: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::read_device_info(this), target, stream);
      break;
    }
    case kRebootDevice: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::reboot_device(this), target, stream);
      break;
    }
    case kGetDeviceStatus: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::get_device_status(this), target, stream);
      break;
    }
    case kMakeSound: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::make_sound(this), target, stream);
      break;
    }
    case kGetDeviceStatistic: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::get_device_statistic(this), target, stream);
      break;
    }
    case kGetEcho: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::get_echo(this), target, stream);
      break;
    }
    case kChangeBaudrate: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::change_baudrate(this), target, stream);
      break;
    }
    case kChangeLanSettings: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::change_lan_settings(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Miscellaneous)
  return target;
}

size_t Miscellaneous::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Miscellaneous)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (misc_cmd_case()) {
    // optional .misc.leds.Leds set_leds_state = 1;
    case kSetLedsState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.set_leds_state_);
      break;
    }
    // optional .misc.device.ReadDeviceInfo read_device_info = 2;
    case kReadDeviceInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.read_device_info_);
      break;
    }
    // optional .misc.reboot.Reboot reboot_device = 3;
    case kRebootDevice: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.reboot_device_);
      break;
    }
    // optional .misc.device.GetDeviceStatus get_device_status = 4;
    case kGetDeviceStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.get_device_status_);
      break;
    }
    // optional .misc.buzzer.MakeSound make_sound = 6;
    case kMakeSound: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.make_sound_);
      break;
    }
    // optional .misc.stats.GetDeviceStatistic get_device_statistic = 7;
    case kGetDeviceStatistic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.get_device_statistic_);
      break;
    }
    // optional .misc.echo.GetEcho get_echo = 8;
    case kGetEcho: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.get_echo_);
      break;
    }
    // optional .misc.baudrate.ChangeBaudrate change_baudrate = 9;
    case kChangeBaudrate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.change_baudrate_);
      break;
    }
    // optional .misc.lan_settings.ChangeLanSettings change_lan_settings = 10;
    case kChangeLanSettings: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_cmd_.change_lan_settings_);
      break;
    }
    case MISC_CMD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Miscellaneous::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Miscellaneous)
  GOOGLE_DCHECK_NE(&from, this);
  const Miscellaneous* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Miscellaneous>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Miscellaneous)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Miscellaneous)
    MergeFrom(*source);
  }
}

void Miscellaneous::MergeFrom(const Miscellaneous& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Miscellaneous)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.misc_cmd_case()) {
    case kSetLedsState: {
      _internal_mutable_set_leds_state()->::misc::leds::Leds::MergeFrom(from._internal_set_leds_state());
      break;
    }
    case kReadDeviceInfo: {
      _internal_mutable_read_device_info()->::misc::device::ReadDeviceInfo::MergeFrom(from._internal_read_device_info());
      break;
    }
    case kRebootDevice: {
      _internal_mutable_reboot_device()->::misc::reboot::Reboot::MergeFrom(from._internal_reboot_device());
      break;
    }
    case kGetDeviceStatus: {
      _internal_mutable_get_device_status()->::misc::device::GetDeviceStatus::MergeFrom(from._internal_get_device_status());
      break;
    }
    case kMakeSound: {
      _internal_mutable_make_sound()->::misc::buzzer::MakeSound::MergeFrom(from._internal_make_sound());
      break;
    }
    case kGetDeviceStatistic: {
      _internal_mutable_get_device_statistic()->::misc::stats::GetDeviceStatistic::MergeFrom(from._internal_get_device_statistic());
      break;
    }
    case kGetEcho: {
      _internal_mutable_get_echo()->::misc::echo::GetEcho::MergeFrom(from._internal_get_echo());
      break;
    }
    case kChangeBaudrate: {
      _internal_mutable_change_baudrate()->::misc::baudrate::ChangeBaudrate::MergeFrom(from._internal_change_baudrate());
      break;
    }
    case kChangeLanSettings: {
      _internal_mutable_change_lan_settings()->::misc::lan_settings::ChangeLanSettings::MergeFrom(from._internal_change_lan_settings());
      break;
    }
    case MISC_CMD_NOT_SET: {
      break;
    }
  }
}

void Miscellaneous::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Miscellaneous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Miscellaneous::CopyFrom(const Miscellaneous& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Miscellaneous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Miscellaneous::IsInitialized() const {
  switch (misc_cmd_case()) {
    case kSetLedsState: {
      break;
    }
    case kReadDeviceInfo: {
      break;
    }
    case kRebootDevice: {
      break;
    }
    case kGetDeviceStatus: {
      break;
    }
    case kMakeSound: {
      if (has_make_sound()) {
        if (!this->make_sound().IsInitialized()) return false;
      }
      break;
    }
    case kGetDeviceStatistic: {
      break;
    }
    case kGetEcho: {
      break;
    }
    case kChangeBaudrate: {
      if (has_change_baudrate()) {
        if (!this->change_baudrate().IsInitialized()) return false;
      }
      break;
    }
    case kChangeLanSettings: {
      if (has_change_lan_settings()) {
        if (!this->change_lan_settings().IsInitialized()) return false;
      }
      break;
    }
    case MISC_CMD_NOT_SET: {
      break;
    }
  }
  return true;
}

void Miscellaneous::InternalSwap(Miscellaneous* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(misc_cmd_, other->misc_cmd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Miscellaneous::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContactlessLevel1::InitAsDefaultInstance() {
  ::_ContactlessLevel1_default_instance_.poll_for_token_ = const_cast< ::contactless::poll::PollForToken*>(
      ::contactless::poll::PollForToken::internal_default_instance());
  ::_ContactlessLevel1_default_instance_.emv_removal_ = const_cast< ::contactless::emv_removal::EmvRemoval*>(
      ::contactless::emv_removal::EmvRemoval::internal_default_instance());
  ::_ContactlessLevel1_default_instance_.tsv_bit_array_ = const_cast< ::contactless::transceive::TransceiveBitArray*>(
      ::contactless::transceive::TransceiveBitArray::internal_default_instance());
  ::_ContactlessLevel1_default_instance_.iso14443_4_command_ = const_cast< ::contactless::iso14443_4::Command*>(
      ::contactless::iso14443_4::Command::internal_default_instance());
  ::_ContactlessLevel1_default_instance_.power_off_field_ = const_cast< ::contactless::rf_field::PowerOffField*>(
      ::contactless::rf_field::PowerOffField::internal_default_instance());
  ::_ContactlessLevel1_default_instance_.request_for_ats_ = const_cast< ::contactless::iso14443_4a::RequestForAnswerToSelect*>(
      ::contactless::iso14443_4a::RequestForAnswerToSelect::internal_default_instance());
}
class ContactlessLevel1::_Internal {
 public:
  using HasBits = decltype(std::declval<ContactlessLevel1>()._has_bits_);
  static const ::contactless::poll::PollForToken& poll_for_token(const ContactlessLevel1* msg);
  static const ::contactless::emv_removal::EmvRemoval& emv_removal(const ContactlessLevel1* msg);
  static const ::contactless::transceive::TransceiveBitArray& tsv_bit_array(const ContactlessLevel1* msg);
  static const ::contactless::iso14443_4::Command& iso14443_4_command(const ContactlessLevel1* msg);
  static const ::contactless::rf_field::PowerOffField& power_off_field(const ContactlessLevel1* msg);
  static const ::contactless::iso14443_4a::RequestForAnswerToSelect& request_for_ats(const ContactlessLevel1* msg);
};

const ::contactless::poll::PollForToken&
ContactlessLevel1::_Internal::poll_for_token(const ContactlessLevel1* msg) {
  return *msg->contactless_level1_cmd_.poll_for_token_;
}
const ::contactless::emv_removal::EmvRemoval&
ContactlessLevel1::_Internal::emv_removal(const ContactlessLevel1* msg) {
  return *msg->contactless_level1_cmd_.emv_removal_;
}
const ::contactless::transceive::TransceiveBitArray&
ContactlessLevel1::_Internal::tsv_bit_array(const ContactlessLevel1* msg) {
  return *msg->contactless_level1_cmd_.tsv_bit_array_;
}
const ::contactless::iso14443_4::Command&
ContactlessLevel1::_Internal::iso14443_4_command(const ContactlessLevel1* msg) {
  return *msg->contactless_level1_cmd_.iso14443_4_command_;
}
const ::contactless::rf_field::PowerOffField&
ContactlessLevel1::_Internal::power_off_field(const ContactlessLevel1* msg) {
  return *msg->contactless_level1_cmd_.power_off_field_;
}
const ::contactless::iso14443_4a::RequestForAnswerToSelect&
ContactlessLevel1::_Internal::request_for_ats(const ContactlessLevel1* msg) {
  return *msg->contactless_level1_cmd_.request_for_ats_;
}
void ContactlessLevel1::set_allocated_poll_for_token(::contactless::poll::PollForToken* poll_for_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contactless_level1_cmd();
  if (poll_for_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      poll_for_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poll_for_token, submessage_arena);
    }
    set_has_poll_for_token();
    contactless_level1_cmd_.poll_for_token_ = poll_for_token;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactlessLevel1.poll_for_token)
}
void ContactlessLevel1::clear_poll_for_token() {
  if (_internal_has_poll_for_token()) {
    delete contactless_level1_cmd_.poll_for_token_;
    clear_has_contactless_level1_cmd();
  }
}
void ContactlessLevel1::set_allocated_emv_removal(::contactless::emv_removal::EmvRemoval* emv_removal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contactless_level1_cmd();
  if (emv_removal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      emv_removal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emv_removal, submessage_arena);
    }
    set_has_emv_removal();
    contactless_level1_cmd_.emv_removal_ = emv_removal;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactlessLevel1.emv_removal)
}
void ContactlessLevel1::clear_emv_removal() {
  if (_internal_has_emv_removal()) {
    delete contactless_level1_cmd_.emv_removal_;
    clear_has_contactless_level1_cmd();
  }
}
void ContactlessLevel1::set_allocated_tsv_bit_array(::contactless::transceive::TransceiveBitArray* tsv_bit_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contactless_level1_cmd();
  if (tsv_bit_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tsv_bit_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tsv_bit_array, submessage_arena);
    }
    set_has_tsv_bit_array();
    contactless_level1_cmd_.tsv_bit_array_ = tsv_bit_array;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactlessLevel1.tsv_bit_array)
}
void ContactlessLevel1::clear_tsv_bit_array() {
  if (_internal_has_tsv_bit_array()) {
    delete contactless_level1_cmd_.tsv_bit_array_;
    clear_has_contactless_level1_cmd();
  }
}
void ContactlessLevel1::set_allocated_iso14443_4_command(::contactless::iso14443_4::Command* iso14443_4_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contactless_level1_cmd();
  if (iso14443_4_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      iso14443_4_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iso14443_4_command, submessage_arena);
    }
    set_has_iso14443_4_command();
    contactless_level1_cmd_.iso14443_4_command_ = iso14443_4_command;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactlessLevel1.iso14443_4_command)
}
void ContactlessLevel1::clear_iso14443_4_command() {
  if (_internal_has_iso14443_4_command()) {
    delete contactless_level1_cmd_.iso14443_4_command_;
    clear_has_contactless_level1_cmd();
  }
}
void ContactlessLevel1::set_allocated_power_off_field(::contactless::rf_field::PowerOffField* power_off_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contactless_level1_cmd();
  if (power_off_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      power_off_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_off_field, submessage_arena);
    }
    set_has_power_off_field();
    contactless_level1_cmd_.power_off_field_ = power_off_field;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactlessLevel1.power_off_field)
}
void ContactlessLevel1::clear_power_off_field() {
  if (_internal_has_power_off_field()) {
    delete contactless_level1_cmd_.power_off_field_;
    clear_has_contactless_level1_cmd();
  }
}
void ContactlessLevel1::set_allocated_request_for_ats(::contactless::iso14443_4a::RequestForAnswerToSelect* request_for_ats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contactless_level1_cmd();
  if (request_for_ats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request_for_ats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_for_ats, submessage_arena);
    }
    set_has_request_for_ats();
    contactless_level1_cmd_.request_for_ats_ = request_for_ats;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactlessLevel1.request_for_ats)
}
void ContactlessLevel1::clear_request_for_ats() {
  if (_internal_has_request_for_ats()) {
    delete contactless_level1_cmd_.request_for_ats_;
    clear_has_contactless_level1_cmd();
  }
}
ContactlessLevel1::ContactlessLevel1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContactlessLevel1)
}
ContactlessLevel1::ContactlessLevel1(const ContactlessLevel1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_contactless_level1_cmd();
  switch (from.contactless_level1_cmd_case()) {
    case kPollForToken: {
      _internal_mutable_poll_for_token()->::contactless::poll::PollForToken::MergeFrom(from._internal_poll_for_token());
      break;
    }
    case kEmvRemoval: {
      _internal_mutable_emv_removal()->::contactless::emv_removal::EmvRemoval::MergeFrom(from._internal_emv_removal());
      break;
    }
    case kTsvBitArray: {
      _internal_mutable_tsv_bit_array()->::contactless::transceive::TransceiveBitArray::MergeFrom(from._internal_tsv_bit_array());
      break;
    }
    case kIso144434Command: {
      _internal_mutable_iso14443_4_command()->::contactless::iso14443_4::Command::MergeFrom(from._internal_iso14443_4_command());
      break;
    }
    case kPowerOffField: {
      _internal_mutable_power_off_field()->::contactless::rf_field::PowerOffField::MergeFrom(from._internal_power_off_field());
      break;
    }
    case kRequestForAts: {
      _internal_mutable_request_for_ats()->::contactless::iso14443_4a::RequestForAnswerToSelect::MergeFrom(from._internal_request_for_ats());
      break;
    }
    case CONTACTLESS_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ContactlessLevel1)
}

void ContactlessLevel1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContactlessLevel1_commands7_2eproto.base);
  clear_has_contactless_level1_cmd();
}

ContactlessLevel1::~ContactlessLevel1() {
  // @@protoc_insertion_point(destructor:ContactlessLevel1)
  SharedDtor();
}

void ContactlessLevel1::SharedDtor() {
  if (has_contactless_level1_cmd()) {
    clear_contactless_level1_cmd();
  }
}

void ContactlessLevel1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContactlessLevel1& ContactlessLevel1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContactlessLevel1_commands7_2eproto.base);
  return *internal_default_instance();
}


void ContactlessLevel1::clear_contactless_level1_cmd() {
// @@protoc_insertion_point(one_of_clear_start:ContactlessLevel1)
  switch (contactless_level1_cmd_case()) {
    case kPollForToken: {
      delete contactless_level1_cmd_.poll_for_token_;
      break;
    }
    case kEmvRemoval: {
      delete contactless_level1_cmd_.emv_removal_;
      break;
    }
    case kTsvBitArray: {
      delete contactless_level1_cmd_.tsv_bit_array_;
      break;
    }
    case kIso144434Command: {
      delete contactless_level1_cmd_.iso14443_4_command_;
      break;
    }
    case kPowerOffField: {
      delete contactless_level1_cmd_.power_off_field_;
      break;
    }
    case kRequestForAts: {
      delete contactless_level1_cmd_.request_for_ats_;
      break;
    }
    case CONTACTLESS_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTACTLESS_LEVEL1_CMD_NOT_SET;
}


void ContactlessLevel1::Clear() {
// @@protoc_insertion_point(message_clear_start:ContactlessLevel1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_contactless_level1_cmd();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContactlessLevel1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .contactless.poll.PollForToken poll_for_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_poll_for_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contactless.emv_removal.EmvRemoval emv_removal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_emv_removal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contactless.transceive.TransceiveBitArray tsv_bit_array = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tsv_bit_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contactless.iso14443_4.Command iso14443_4_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_iso14443_4_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contactless.rf_field.PowerOffField power_off_field = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_power_off_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contactless.iso14443_4a.RequestForAnswerToSelect request_for_ats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_for_ats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContactlessLevel1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContactlessLevel1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (contactless_level1_cmd_case()) {
    case kPollForToken: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::poll_for_token(this), target, stream);
      break;
    }
    case kEmvRemoval: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::emv_removal(this), target, stream);
      break;
    }
    case kTsvBitArray: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::tsv_bit_array(this), target, stream);
      break;
    }
    case kIso144434Command: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::iso14443_4_command(this), target, stream);
      break;
    }
    case kPowerOffField: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::power_off_field(this), target, stream);
      break;
    }
    case kRequestForAts: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::request_for_ats(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContactlessLevel1)
  return target;
}

size_t ContactlessLevel1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContactlessLevel1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (contactless_level1_cmd_case()) {
    // optional .contactless.poll.PollForToken poll_for_token = 1;
    case kPollForToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contactless_level1_cmd_.poll_for_token_);
      break;
    }
    // optional .contactless.emv_removal.EmvRemoval emv_removal = 2;
    case kEmvRemoval: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contactless_level1_cmd_.emv_removal_);
      break;
    }
    // optional .contactless.transceive.TransceiveBitArray tsv_bit_array = 3;
    case kTsvBitArray: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contactless_level1_cmd_.tsv_bit_array_);
      break;
    }
    // optional .contactless.iso14443_4.Command iso14443_4_command = 4;
    case kIso144434Command: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contactless_level1_cmd_.iso14443_4_command_);
      break;
    }
    // optional .contactless.rf_field.PowerOffField power_off_field = 5;
    case kPowerOffField: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contactless_level1_cmd_.power_off_field_);
      break;
    }
    // optional .contactless.iso14443_4a.RequestForAnswerToSelect request_for_ats = 6;
    case kRequestForAts: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contactless_level1_cmd_.request_for_ats_);
      break;
    }
    case CONTACTLESS_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContactlessLevel1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContactlessLevel1)
  GOOGLE_DCHECK_NE(&from, this);
  const ContactlessLevel1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContactlessLevel1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContactlessLevel1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContactlessLevel1)
    MergeFrom(*source);
  }
}

void ContactlessLevel1::MergeFrom(const ContactlessLevel1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContactlessLevel1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.contactless_level1_cmd_case()) {
    case kPollForToken: {
      _internal_mutable_poll_for_token()->::contactless::poll::PollForToken::MergeFrom(from._internal_poll_for_token());
      break;
    }
    case kEmvRemoval: {
      _internal_mutable_emv_removal()->::contactless::emv_removal::EmvRemoval::MergeFrom(from._internal_emv_removal());
      break;
    }
    case kTsvBitArray: {
      _internal_mutable_tsv_bit_array()->::contactless::transceive::TransceiveBitArray::MergeFrom(from._internal_tsv_bit_array());
      break;
    }
    case kIso144434Command: {
      _internal_mutable_iso14443_4_command()->::contactless::iso14443_4::Command::MergeFrom(from._internal_iso14443_4_command());
      break;
    }
    case kPowerOffField: {
      _internal_mutable_power_off_field()->::contactless::rf_field::PowerOffField::MergeFrom(from._internal_power_off_field());
      break;
    }
    case kRequestForAts: {
      _internal_mutable_request_for_ats()->::contactless::iso14443_4a::RequestForAnswerToSelect::MergeFrom(from._internal_request_for_ats());
      break;
    }
    case CONTACTLESS_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
}

void ContactlessLevel1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContactlessLevel1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactlessLevel1::CopyFrom(const ContactlessLevel1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContactlessLevel1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactlessLevel1::IsInitialized() const {
  switch (contactless_level1_cmd_case()) {
    case kPollForToken: {
      break;
    }
    case kEmvRemoval: {
      break;
    }
    case kTsvBitArray: {
      if (has_tsv_bit_array()) {
        if (!this->tsv_bit_array().IsInitialized()) return false;
      }
      break;
    }
    case kIso144434Command: {
      if (has_iso14443_4_command()) {
        if (!this->iso14443_4_command().IsInitialized()) return false;
      }
      break;
    }
    case kPowerOffField: {
      break;
    }
    case kRequestForAts: {
      break;
    }
    case CONTACTLESS_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
  return true;
}

void ContactlessLevel1::InternalSwap(ContactlessLevel1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(contactless_level1_cmd_, other->contactless_level1_cmd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContactlessLevel1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContactlessLevel2::InitAsDefaultInstance() {
  ::_ContactlessLevel2_default_instance_.perform_transaction_ = const_cast< ::contactless::transaction::PerformTransaction*>(
      ::contactless::transaction::PerformTransaction::internal_default_instance());
}
class ContactlessLevel2::_Internal {
 public:
  using HasBits = decltype(std::declval<ContactlessLevel2>()._has_bits_);
  static const ::contactless::transaction::PerformTransaction& perform_transaction(const ContactlessLevel2* msg);
};

const ::contactless::transaction::PerformTransaction&
ContactlessLevel2::_Internal::perform_transaction(const ContactlessLevel2* msg) {
  return *msg->contactless_level2_cmd_.perform_transaction_;
}
void ContactlessLevel2::set_allocated_perform_transaction(::contactless::transaction::PerformTransaction* perform_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contactless_level2_cmd();
  if (perform_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      perform_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perform_transaction, submessage_arena);
    }
    set_has_perform_transaction();
    contactless_level2_cmd_.perform_transaction_ = perform_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactlessLevel2.perform_transaction)
}
void ContactlessLevel2::clear_perform_transaction() {
  if (_internal_has_perform_transaction()) {
    delete contactless_level2_cmd_.perform_transaction_;
    clear_has_contactless_level2_cmd();
  }
}
ContactlessLevel2::ContactlessLevel2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContactlessLevel2)
}
ContactlessLevel2::ContactlessLevel2(const ContactlessLevel2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_contactless_level2_cmd();
  switch (from.contactless_level2_cmd_case()) {
    case kPerformTransaction: {
      _internal_mutable_perform_transaction()->::contactless::transaction::PerformTransaction::MergeFrom(from._internal_perform_transaction());
      break;
    }
    case CONTACTLESS_LEVEL2_CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ContactlessLevel2)
}

void ContactlessLevel2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContactlessLevel2_commands7_2eproto.base);
  clear_has_contactless_level2_cmd();
}

ContactlessLevel2::~ContactlessLevel2() {
  // @@protoc_insertion_point(destructor:ContactlessLevel2)
  SharedDtor();
}

void ContactlessLevel2::SharedDtor() {
  if (has_contactless_level2_cmd()) {
    clear_contactless_level2_cmd();
  }
}

void ContactlessLevel2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContactlessLevel2& ContactlessLevel2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContactlessLevel2_commands7_2eproto.base);
  return *internal_default_instance();
}


void ContactlessLevel2::clear_contactless_level2_cmd() {
// @@protoc_insertion_point(one_of_clear_start:ContactlessLevel2)
  switch (contactless_level2_cmd_case()) {
    case kPerformTransaction: {
      delete contactless_level2_cmd_.perform_transaction_;
      break;
    }
    case CONTACTLESS_LEVEL2_CMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTACTLESS_LEVEL2_CMD_NOT_SET;
}


void ContactlessLevel2::Clear() {
// @@protoc_insertion_point(message_clear_start:ContactlessLevel2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_contactless_level2_cmd();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContactlessLevel2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .contactless.transaction.PerformTransaction perform_transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_perform_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContactlessLevel2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContactlessLevel2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .contactless.transaction.PerformTransaction perform_transaction = 1;
  if (_internal_has_perform_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::perform_transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContactlessLevel2)
  return target;
}

size_t ContactlessLevel2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContactlessLevel2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (contactless_level2_cmd_case()) {
    // optional .contactless.transaction.PerformTransaction perform_transaction = 1;
    case kPerformTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contactless_level2_cmd_.perform_transaction_);
      break;
    }
    case CONTACTLESS_LEVEL2_CMD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContactlessLevel2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContactlessLevel2)
  GOOGLE_DCHECK_NE(&from, this);
  const ContactlessLevel2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContactlessLevel2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContactlessLevel2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContactlessLevel2)
    MergeFrom(*source);
  }
}

void ContactlessLevel2::MergeFrom(const ContactlessLevel2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContactlessLevel2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.contactless_level2_cmd_case()) {
    case kPerformTransaction: {
      _internal_mutable_perform_transaction()->::contactless::transaction::PerformTransaction::MergeFrom(from._internal_perform_transaction());
      break;
    }
    case CONTACTLESS_LEVEL2_CMD_NOT_SET: {
      break;
    }
  }
}

void ContactlessLevel2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContactlessLevel2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactlessLevel2::CopyFrom(const ContactlessLevel2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContactlessLevel2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactlessLevel2::IsInitialized() const {
  switch (contactless_level2_cmd_case()) {
    case kPerformTransaction: {
      if (has_perform_transaction()) {
        if (!this->perform_transaction().IsInitialized()) return false;
      }
      break;
    }
    case CONTACTLESS_LEVEL2_CMD_NOT_SET: {
      break;
    }
  }
  return true;
}

void ContactlessLevel2::InternalSwap(ContactlessLevel2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(contactless_level2_cmd_, other->contactless_level2_cmd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContactlessLevel2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mifare::InitAsDefaultInstance() {
  ::_Mifare_default_instance_.mfr_classic_auth_on_clear_key_ = const_cast< ::mifare::classic::auth::ClearKey*>(
      ::mifare::classic::auth::ClearKey::internal_default_instance());
  ::_Mifare_default_instance_.mfr_classic_auth_on_sam_key_ = const_cast< ::mifare::classic::auth::SamKey*>(
      ::mifare::classic::auth::SamKey::internal_default_instance());
  ::_Mifare_default_instance_.mfr_classic_read_blocks_ = const_cast< ::mifare::classic::read::ReadBlocks*>(
      ::mifare::classic::read::ReadBlocks::internal_default_instance());
  ::_Mifare_default_instance_.mfr_classic_write_blocks_ = const_cast< ::mifare::classic::write::WriteBlocks*>(
      ::mifare::classic::write::WriteBlocks::internal_default_instance());
  ::_Mifare_default_instance_.mfr_classic_bulk_operation_ = const_cast< ::mifare::classic::bulk::BulkOperation*>(
      ::mifare::classic::bulk::BulkOperation::internal_default_instance());
  ::_Mifare_default_instance_.mfr_classic_get_counter_ = const_cast< ::mifare::classic::counter::get::GetCounter*>(
      ::mifare::classic::counter::get::GetCounter::internal_default_instance());
  ::_Mifare_default_instance_.mfr_classic_set_counter_ = const_cast< ::mifare::classic::counter::set::SetCounter*>(
      ::mifare::classic::counter::set::SetCounter::internal_default_instance());
  ::_Mifare_default_instance_.mfr_classic_modify_counter_ = const_cast< ::mifare::classic::counter::modify::ModifyCounter*>(
      ::mifare::classic::counter::modify::ModifyCounter::internal_default_instance());
  ::_Mifare_default_instance_.mfr_classic_copy_counter_ = const_cast< ::mifare::classic::counter::copy::CopyCounter*>(
      ::mifare::classic::counter::copy::CopyCounter::internal_default_instance());
  ::_Mifare_default_instance_.mfr_classic_commit_counter_ = const_cast< ::mifare::classic::counter::commit::CommitCounter*>(
      ::mifare::classic::counter::commit::CommitCounter::internal_default_instance());
  ::_Mifare_default_instance_.mfr_plus_auth_on_clear_key_ = const_cast< ::mifare::plus::auth::ClearKey*>(
      ::mifare::plus::auth::ClearKey::internal_default_instance());
  ::_Mifare_default_instance_.mfr_plus_read_blocks_ = const_cast< ::mifare::plus::read::ReadBlocks*>(
      ::mifare::plus::read::ReadBlocks::internal_default_instance());
  ::_Mifare_default_instance_.mfr_plus_write_blocks_ = const_cast< ::mifare::plus::write::WriteBlocks*>(
      ::mifare::plus::write::WriteBlocks::internal_default_instance());
  ::_Mifare_default_instance_.mfr_plus_bulk_operation_ = const_cast< ::mifare::plus::bulk::BulkOperation*>(
      ::mifare::plus::bulk::BulkOperation::internal_default_instance());
  ::_Mifare_default_instance_.mfr_plus_get_counter_ = const_cast< ::mifare::plus::counter::get::GetCounter*>(
      ::mifare::plus::counter::get::GetCounter::internal_default_instance());
  ::_Mifare_default_instance_.mfr_plus_set_counter_ = const_cast< ::mifare::plus::counter::set::SetCounter*>(
      ::mifare::plus::counter::set::SetCounter::internal_default_instance());
  ::_Mifare_default_instance_.mfr_plus_modify_counter_ = const_cast< ::mifare::plus::counter::modify::ModifyCounter*>(
      ::mifare::plus::counter::modify::ModifyCounter::internal_default_instance());
  ::_Mifare_default_instance_.mfr_plus_copy_counter_ = const_cast< ::mifare::plus::counter::copy::CopyCounter*>(
      ::mifare::plus::counter::copy::CopyCounter::internal_default_instance());
  ::_Mifare_default_instance_.mfr_plus_commit_counter_ = const_cast< ::mifare::plus::counter::commit::CommitCounter*>(
      ::mifare::plus::counter::commit::CommitCounter::internal_default_instance());
  ::_Mifare_default_instance_.mfr_plus_auth_on_sam_key_ = const_cast< ::mifare::plus::auth::SamKey*>(
      ::mifare::plus::auth::SamKey::internal_default_instance());
  ::_Mifare_default_instance_.av2_authenticate_host_ = const_cast< ::mifare::av2::host_auth::AuthenticateHost*>(
      ::mifare::av2::host_auth::AuthenticateHost::internal_default_instance());
  ::_Mifare_default_instance_.av2_change_keyentry_ = const_cast< ::mifare::av2::change_keyentry::ChangeKeyEntry*>(
      ::mifare::av2::change_keyentry::ChangeKeyEntry::internal_default_instance());
  ::_Mifare_default_instance_.av2_unlock_ = const_cast< ::mifare::av2::unlock::Unlock*>(
      ::mifare::av2::unlock::Unlock::internal_default_instance());
  ::_Mifare_default_instance_.mfr_ul_read_pages_ = const_cast< ::mifare::ultralight::read::ReadPages*>(
      ::mifare::ultralight::read::ReadPages::internal_default_instance());
  ::_Mifare_default_instance_.mfr_ul_write_pages_ = const_cast< ::mifare::ultralight::write::WritePages*>(
      ::mifare::ultralight::write::WritePages::internal_default_instance());
  ::_Mifare_default_instance_.mfr_ul_get_version_ = const_cast< ::mifare::ultralight::version::GetVersion*>(
      ::mifare::ultralight::version::GetVersion::internal_default_instance());
  ::_Mifare_default_instance_.mfr_ul_get_counter_ = const_cast< ::mifare::ultralight::counter::get::GetCounter*>(
      ::mifare::ultralight::counter::get::GetCounter::internal_default_instance());
  ::_Mifare_default_instance_.mfr_ul_increment_counter_ = const_cast< ::mifare::ultralight::counter::increment::IncrementCounter*>(
      ::mifare::ultralight::counter::increment::IncrementCounter::internal_default_instance());
  ::_Mifare_default_instance_.mfr_ul_bulk_operation_ = const_cast< ::mifare::ultralight::bulk::BulkOperation*>(
      ::mifare::ultralight::bulk::BulkOperation::internal_default_instance());
  ::_Mifare_default_instance_.mfr_ul_auth_on_clear_key_ = const_cast< ::mifare::ultralight::auth::ClearKey*>(
      ::mifare::ultralight::auth::ClearKey::internal_default_instance());
  ::_Mifare_default_instance_.mfr_ul_auth_on_sam_key_ = const_cast< ::mifare::ultralight::auth::SamKey*>(
      ::mifare::ultralight::auth::SamKey::internal_default_instance());
  ::_Mifare_default_instance_.mfr_ul_auth_clear_password_ = const_cast< ::mifare::ultralight::password::ClearPassword*>(
      ::mifare::ultralight::password::ClearPassword::internal_default_instance());
  ::_Mifare_default_instance_.mfr_ul_auth_sam_password_ = const_cast< ::mifare::ultralight::password::SamPassword*>(
      ::mifare::ultralight::password::SamPassword::internal_default_instance());
}
class Mifare::_Internal {
 public:
  using HasBits = decltype(std::declval<Mifare>()._has_bits_);
  static const ::mifare::classic::auth::ClearKey& mfr_classic_auth_on_clear_key(const Mifare* msg);
  static const ::mifare::classic::auth::SamKey& mfr_classic_auth_on_sam_key(const Mifare* msg);
  static const ::mifare::classic::read::ReadBlocks& mfr_classic_read_blocks(const Mifare* msg);
  static const ::mifare::classic::write::WriteBlocks& mfr_classic_write_blocks(const Mifare* msg);
  static const ::mifare::classic::bulk::BulkOperation& mfr_classic_bulk_operation(const Mifare* msg);
  static const ::mifare::classic::counter::get::GetCounter& mfr_classic_get_counter(const Mifare* msg);
  static const ::mifare::classic::counter::set::SetCounter& mfr_classic_set_counter(const Mifare* msg);
  static const ::mifare::classic::counter::modify::ModifyCounter& mfr_classic_modify_counter(const Mifare* msg);
  static const ::mifare::classic::counter::copy::CopyCounter& mfr_classic_copy_counter(const Mifare* msg);
  static const ::mifare::classic::counter::commit::CommitCounter& mfr_classic_commit_counter(const Mifare* msg);
  static const ::mifare::plus::auth::ClearKey& mfr_plus_auth_on_clear_key(const Mifare* msg);
  static const ::mifare::plus::read::ReadBlocks& mfr_plus_read_blocks(const Mifare* msg);
  static const ::mifare::plus::write::WriteBlocks& mfr_plus_write_blocks(const Mifare* msg);
  static const ::mifare::plus::bulk::BulkOperation& mfr_plus_bulk_operation(const Mifare* msg);
  static const ::mifare::plus::counter::get::GetCounter& mfr_plus_get_counter(const Mifare* msg);
  static const ::mifare::plus::counter::set::SetCounter& mfr_plus_set_counter(const Mifare* msg);
  static const ::mifare::plus::counter::modify::ModifyCounter& mfr_plus_modify_counter(const Mifare* msg);
  static const ::mifare::plus::counter::copy::CopyCounter& mfr_plus_copy_counter(const Mifare* msg);
  static const ::mifare::plus::counter::commit::CommitCounter& mfr_plus_commit_counter(const Mifare* msg);
  static const ::mifare::plus::auth::SamKey& mfr_plus_auth_on_sam_key(const Mifare* msg);
  static const ::mifare::av2::host_auth::AuthenticateHost& av2_authenticate_host(const Mifare* msg);
  static const ::mifare::av2::change_keyentry::ChangeKeyEntry& av2_change_keyentry(const Mifare* msg);
  static const ::mifare::av2::unlock::Unlock& av2_unlock(const Mifare* msg);
  static const ::mifare::ultralight::read::ReadPages& mfr_ul_read_pages(const Mifare* msg);
  static const ::mifare::ultralight::write::WritePages& mfr_ul_write_pages(const Mifare* msg);
  static const ::mifare::ultralight::version::GetVersion& mfr_ul_get_version(const Mifare* msg);
  static const ::mifare::ultralight::counter::get::GetCounter& mfr_ul_get_counter(const Mifare* msg);
  static const ::mifare::ultralight::counter::increment::IncrementCounter& mfr_ul_increment_counter(const Mifare* msg);
  static const ::mifare::ultralight::bulk::BulkOperation& mfr_ul_bulk_operation(const Mifare* msg);
  static const ::mifare::ultralight::auth::ClearKey& mfr_ul_auth_on_clear_key(const Mifare* msg);
  static const ::mifare::ultralight::auth::SamKey& mfr_ul_auth_on_sam_key(const Mifare* msg);
  static const ::mifare::ultralight::password::ClearPassword& mfr_ul_auth_clear_password(const Mifare* msg);
  static const ::mifare::ultralight::password::SamPassword& mfr_ul_auth_sam_password(const Mifare* msg);
};

const ::mifare::classic::auth::ClearKey&
Mifare::_Internal::mfr_classic_auth_on_clear_key(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_classic_auth_on_clear_key_;
}
const ::mifare::classic::auth::SamKey&
Mifare::_Internal::mfr_classic_auth_on_sam_key(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_classic_auth_on_sam_key_;
}
const ::mifare::classic::read::ReadBlocks&
Mifare::_Internal::mfr_classic_read_blocks(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_classic_read_blocks_;
}
const ::mifare::classic::write::WriteBlocks&
Mifare::_Internal::mfr_classic_write_blocks(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_classic_write_blocks_;
}
const ::mifare::classic::bulk::BulkOperation&
Mifare::_Internal::mfr_classic_bulk_operation(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_classic_bulk_operation_;
}
const ::mifare::classic::counter::get::GetCounter&
Mifare::_Internal::mfr_classic_get_counter(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_classic_get_counter_;
}
const ::mifare::classic::counter::set::SetCounter&
Mifare::_Internal::mfr_classic_set_counter(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_classic_set_counter_;
}
const ::mifare::classic::counter::modify::ModifyCounter&
Mifare::_Internal::mfr_classic_modify_counter(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_classic_modify_counter_;
}
const ::mifare::classic::counter::copy::CopyCounter&
Mifare::_Internal::mfr_classic_copy_counter(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_classic_copy_counter_;
}
const ::mifare::classic::counter::commit::CommitCounter&
Mifare::_Internal::mfr_classic_commit_counter(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_classic_commit_counter_;
}
const ::mifare::plus::auth::ClearKey&
Mifare::_Internal::mfr_plus_auth_on_clear_key(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_plus_auth_on_clear_key_;
}
const ::mifare::plus::read::ReadBlocks&
Mifare::_Internal::mfr_plus_read_blocks(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_plus_read_blocks_;
}
const ::mifare::plus::write::WriteBlocks&
Mifare::_Internal::mfr_plus_write_blocks(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_plus_write_blocks_;
}
const ::mifare::plus::bulk::BulkOperation&
Mifare::_Internal::mfr_plus_bulk_operation(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_plus_bulk_operation_;
}
const ::mifare::plus::counter::get::GetCounter&
Mifare::_Internal::mfr_plus_get_counter(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_plus_get_counter_;
}
const ::mifare::plus::counter::set::SetCounter&
Mifare::_Internal::mfr_plus_set_counter(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_plus_set_counter_;
}
const ::mifare::plus::counter::modify::ModifyCounter&
Mifare::_Internal::mfr_plus_modify_counter(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_plus_modify_counter_;
}
const ::mifare::plus::counter::copy::CopyCounter&
Mifare::_Internal::mfr_plus_copy_counter(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_plus_copy_counter_;
}
const ::mifare::plus::counter::commit::CommitCounter&
Mifare::_Internal::mfr_plus_commit_counter(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_plus_commit_counter_;
}
const ::mifare::plus::auth::SamKey&
Mifare::_Internal::mfr_plus_auth_on_sam_key(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_plus_auth_on_sam_key_;
}
const ::mifare::av2::host_auth::AuthenticateHost&
Mifare::_Internal::av2_authenticate_host(const Mifare* msg) {
  return *msg->mifare_cmd_.av2_authenticate_host_;
}
const ::mifare::av2::change_keyentry::ChangeKeyEntry&
Mifare::_Internal::av2_change_keyentry(const Mifare* msg) {
  return *msg->mifare_cmd_.av2_change_keyentry_;
}
const ::mifare::av2::unlock::Unlock&
Mifare::_Internal::av2_unlock(const Mifare* msg) {
  return *msg->mifare_cmd_.av2_unlock_;
}
const ::mifare::ultralight::read::ReadPages&
Mifare::_Internal::mfr_ul_read_pages(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_ul_read_pages_;
}
const ::mifare::ultralight::write::WritePages&
Mifare::_Internal::mfr_ul_write_pages(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_ul_write_pages_;
}
const ::mifare::ultralight::version::GetVersion&
Mifare::_Internal::mfr_ul_get_version(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_ul_get_version_;
}
const ::mifare::ultralight::counter::get::GetCounter&
Mifare::_Internal::mfr_ul_get_counter(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_ul_get_counter_;
}
const ::mifare::ultralight::counter::increment::IncrementCounter&
Mifare::_Internal::mfr_ul_increment_counter(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_ul_increment_counter_;
}
const ::mifare::ultralight::bulk::BulkOperation&
Mifare::_Internal::mfr_ul_bulk_operation(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_ul_bulk_operation_;
}
const ::mifare::ultralight::auth::ClearKey&
Mifare::_Internal::mfr_ul_auth_on_clear_key(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_ul_auth_on_clear_key_;
}
const ::mifare::ultralight::auth::SamKey&
Mifare::_Internal::mfr_ul_auth_on_sam_key(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_ul_auth_on_sam_key_;
}
const ::mifare::ultralight::password::ClearPassword&
Mifare::_Internal::mfr_ul_auth_clear_password(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_ul_auth_clear_password_;
}
const ::mifare::ultralight::password::SamPassword&
Mifare::_Internal::mfr_ul_auth_sam_password(const Mifare* msg) {
  return *msg->mifare_cmd_.mfr_ul_auth_sam_password_;
}
void Mifare::set_allocated_mfr_classic_auth_on_clear_key(::mifare::classic::auth::ClearKey* mfr_classic_auth_on_clear_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_classic_auth_on_clear_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_classic_auth_on_clear_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_classic_auth_on_clear_key, submessage_arena);
    }
    set_has_mfr_classic_auth_on_clear_key();
    mifare_cmd_.mfr_classic_auth_on_clear_key_ = mfr_classic_auth_on_clear_key;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_classic_auth_on_clear_key)
}
void Mifare::clear_mfr_classic_auth_on_clear_key() {
  if (_internal_has_mfr_classic_auth_on_clear_key()) {
    delete mifare_cmd_.mfr_classic_auth_on_clear_key_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_classic_auth_on_sam_key(::mifare::classic::auth::SamKey* mfr_classic_auth_on_sam_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_classic_auth_on_sam_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_classic_auth_on_sam_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_classic_auth_on_sam_key, submessage_arena);
    }
    set_has_mfr_classic_auth_on_sam_key();
    mifare_cmd_.mfr_classic_auth_on_sam_key_ = mfr_classic_auth_on_sam_key;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_classic_auth_on_sam_key)
}
void Mifare::clear_mfr_classic_auth_on_sam_key() {
  if (_internal_has_mfr_classic_auth_on_sam_key()) {
    delete mifare_cmd_.mfr_classic_auth_on_sam_key_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_classic_read_blocks(::mifare::classic::read::ReadBlocks* mfr_classic_read_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_classic_read_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_classic_read_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_classic_read_blocks, submessage_arena);
    }
    set_has_mfr_classic_read_blocks();
    mifare_cmd_.mfr_classic_read_blocks_ = mfr_classic_read_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_classic_read_blocks)
}
void Mifare::clear_mfr_classic_read_blocks() {
  if (_internal_has_mfr_classic_read_blocks()) {
    delete mifare_cmd_.mfr_classic_read_blocks_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_classic_write_blocks(::mifare::classic::write::WriteBlocks* mfr_classic_write_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_classic_write_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_classic_write_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_classic_write_blocks, submessage_arena);
    }
    set_has_mfr_classic_write_blocks();
    mifare_cmd_.mfr_classic_write_blocks_ = mfr_classic_write_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_classic_write_blocks)
}
void Mifare::clear_mfr_classic_write_blocks() {
  if (_internal_has_mfr_classic_write_blocks()) {
    delete mifare_cmd_.mfr_classic_write_blocks_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_classic_bulk_operation(::mifare::classic::bulk::BulkOperation* mfr_classic_bulk_operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_classic_bulk_operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_classic_bulk_operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_classic_bulk_operation, submessage_arena);
    }
    set_has_mfr_classic_bulk_operation();
    mifare_cmd_.mfr_classic_bulk_operation_ = mfr_classic_bulk_operation;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_classic_bulk_operation)
}
void Mifare::clear_mfr_classic_bulk_operation() {
  if (_internal_has_mfr_classic_bulk_operation()) {
    delete mifare_cmd_.mfr_classic_bulk_operation_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_classic_get_counter(::mifare::classic::counter::get::GetCounter* mfr_classic_get_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_classic_get_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_classic_get_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_classic_get_counter, submessage_arena);
    }
    set_has_mfr_classic_get_counter();
    mifare_cmd_.mfr_classic_get_counter_ = mfr_classic_get_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_classic_get_counter)
}
void Mifare::clear_mfr_classic_get_counter() {
  if (_internal_has_mfr_classic_get_counter()) {
    delete mifare_cmd_.mfr_classic_get_counter_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_classic_set_counter(::mifare::classic::counter::set::SetCounter* mfr_classic_set_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_classic_set_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_classic_set_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_classic_set_counter, submessage_arena);
    }
    set_has_mfr_classic_set_counter();
    mifare_cmd_.mfr_classic_set_counter_ = mfr_classic_set_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_classic_set_counter)
}
void Mifare::clear_mfr_classic_set_counter() {
  if (_internal_has_mfr_classic_set_counter()) {
    delete mifare_cmd_.mfr_classic_set_counter_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_classic_modify_counter(::mifare::classic::counter::modify::ModifyCounter* mfr_classic_modify_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_classic_modify_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_classic_modify_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_classic_modify_counter, submessage_arena);
    }
    set_has_mfr_classic_modify_counter();
    mifare_cmd_.mfr_classic_modify_counter_ = mfr_classic_modify_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_classic_modify_counter)
}
void Mifare::clear_mfr_classic_modify_counter() {
  if (_internal_has_mfr_classic_modify_counter()) {
    delete mifare_cmd_.mfr_classic_modify_counter_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_classic_copy_counter(::mifare::classic::counter::copy::CopyCounter* mfr_classic_copy_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_classic_copy_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_classic_copy_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_classic_copy_counter, submessage_arena);
    }
    set_has_mfr_classic_copy_counter();
    mifare_cmd_.mfr_classic_copy_counter_ = mfr_classic_copy_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_classic_copy_counter)
}
void Mifare::clear_mfr_classic_copy_counter() {
  if (_internal_has_mfr_classic_copy_counter()) {
    delete mifare_cmd_.mfr_classic_copy_counter_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_classic_commit_counter(::mifare::classic::counter::commit::CommitCounter* mfr_classic_commit_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_classic_commit_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_classic_commit_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_classic_commit_counter, submessage_arena);
    }
    set_has_mfr_classic_commit_counter();
    mifare_cmd_.mfr_classic_commit_counter_ = mfr_classic_commit_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_classic_commit_counter)
}
void Mifare::clear_mfr_classic_commit_counter() {
  if (_internal_has_mfr_classic_commit_counter()) {
    delete mifare_cmd_.mfr_classic_commit_counter_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_plus_auth_on_clear_key(::mifare::plus::auth::ClearKey* mfr_plus_auth_on_clear_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_plus_auth_on_clear_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_plus_auth_on_clear_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_plus_auth_on_clear_key, submessage_arena);
    }
    set_has_mfr_plus_auth_on_clear_key();
    mifare_cmd_.mfr_plus_auth_on_clear_key_ = mfr_plus_auth_on_clear_key;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_plus_auth_on_clear_key)
}
void Mifare::clear_mfr_plus_auth_on_clear_key() {
  if (_internal_has_mfr_plus_auth_on_clear_key()) {
    delete mifare_cmd_.mfr_plus_auth_on_clear_key_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_plus_read_blocks(::mifare::plus::read::ReadBlocks* mfr_plus_read_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_plus_read_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_plus_read_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_plus_read_blocks, submessage_arena);
    }
    set_has_mfr_plus_read_blocks();
    mifare_cmd_.mfr_plus_read_blocks_ = mfr_plus_read_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_plus_read_blocks)
}
void Mifare::clear_mfr_plus_read_blocks() {
  if (_internal_has_mfr_plus_read_blocks()) {
    delete mifare_cmd_.mfr_plus_read_blocks_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_plus_write_blocks(::mifare::plus::write::WriteBlocks* mfr_plus_write_blocks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_plus_write_blocks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_plus_write_blocks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_plus_write_blocks, submessage_arena);
    }
    set_has_mfr_plus_write_blocks();
    mifare_cmd_.mfr_plus_write_blocks_ = mfr_plus_write_blocks;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_plus_write_blocks)
}
void Mifare::clear_mfr_plus_write_blocks() {
  if (_internal_has_mfr_plus_write_blocks()) {
    delete mifare_cmd_.mfr_plus_write_blocks_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_plus_bulk_operation(::mifare::plus::bulk::BulkOperation* mfr_plus_bulk_operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_plus_bulk_operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_plus_bulk_operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_plus_bulk_operation, submessage_arena);
    }
    set_has_mfr_plus_bulk_operation();
    mifare_cmd_.mfr_plus_bulk_operation_ = mfr_plus_bulk_operation;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_plus_bulk_operation)
}
void Mifare::clear_mfr_plus_bulk_operation() {
  if (_internal_has_mfr_plus_bulk_operation()) {
    delete mifare_cmd_.mfr_plus_bulk_operation_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_plus_get_counter(::mifare::plus::counter::get::GetCounter* mfr_plus_get_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_plus_get_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_plus_get_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_plus_get_counter, submessage_arena);
    }
    set_has_mfr_plus_get_counter();
    mifare_cmd_.mfr_plus_get_counter_ = mfr_plus_get_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_plus_get_counter)
}
void Mifare::clear_mfr_plus_get_counter() {
  if (_internal_has_mfr_plus_get_counter()) {
    delete mifare_cmd_.mfr_plus_get_counter_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_plus_set_counter(::mifare::plus::counter::set::SetCounter* mfr_plus_set_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_plus_set_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_plus_set_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_plus_set_counter, submessage_arena);
    }
    set_has_mfr_plus_set_counter();
    mifare_cmd_.mfr_plus_set_counter_ = mfr_plus_set_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_plus_set_counter)
}
void Mifare::clear_mfr_plus_set_counter() {
  if (_internal_has_mfr_plus_set_counter()) {
    delete mifare_cmd_.mfr_plus_set_counter_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_plus_modify_counter(::mifare::plus::counter::modify::ModifyCounter* mfr_plus_modify_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_plus_modify_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_plus_modify_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_plus_modify_counter, submessage_arena);
    }
    set_has_mfr_plus_modify_counter();
    mifare_cmd_.mfr_plus_modify_counter_ = mfr_plus_modify_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_plus_modify_counter)
}
void Mifare::clear_mfr_plus_modify_counter() {
  if (_internal_has_mfr_plus_modify_counter()) {
    delete mifare_cmd_.mfr_plus_modify_counter_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_plus_copy_counter(::mifare::plus::counter::copy::CopyCounter* mfr_plus_copy_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_plus_copy_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_plus_copy_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_plus_copy_counter, submessage_arena);
    }
    set_has_mfr_plus_copy_counter();
    mifare_cmd_.mfr_plus_copy_counter_ = mfr_plus_copy_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_plus_copy_counter)
}
void Mifare::clear_mfr_plus_copy_counter() {
  if (_internal_has_mfr_plus_copy_counter()) {
    delete mifare_cmd_.mfr_plus_copy_counter_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_plus_commit_counter(::mifare::plus::counter::commit::CommitCounter* mfr_plus_commit_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_plus_commit_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_plus_commit_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_plus_commit_counter, submessage_arena);
    }
    set_has_mfr_plus_commit_counter();
    mifare_cmd_.mfr_plus_commit_counter_ = mfr_plus_commit_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_plus_commit_counter)
}
void Mifare::clear_mfr_plus_commit_counter() {
  if (_internal_has_mfr_plus_commit_counter()) {
    delete mifare_cmd_.mfr_plus_commit_counter_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_plus_auth_on_sam_key(::mifare::plus::auth::SamKey* mfr_plus_auth_on_sam_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_plus_auth_on_sam_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_plus_auth_on_sam_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_plus_auth_on_sam_key, submessage_arena);
    }
    set_has_mfr_plus_auth_on_sam_key();
    mifare_cmd_.mfr_plus_auth_on_sam_key_ = mfr_plus_auth_on_sam_key;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_plus_auth_on_sam_key)
}
void Mifare::clear_mfr_plus_auth_on_sam_key() {
  if (_internal_has_mfr_plus_auth_on_sam_key()) {
    delete mifare_cmd_.mfr_plus_auth_on_sam_key_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_av2_authenticate_host(::mifare::av2::host_auth::AuthenticateHost* av2_authenticate_host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (av2_authenticate_host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      av2_authenticate_host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, av2_authenticate_host, submessage_arena);
    }
    set_has_av2_authenticate_host();
    mifare_cmd_.av2_authenticate_host_ = av2_authenticate_host;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.av2_authenticate_host)
}
void Mifare::clear_av2_authenticate_host() {
  if (_internal_has_av2_authenticate_host()) {
    delete mifare_cmd_.av2_authenticate_host_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_av2_change_keyentry(::mifare::av2::change_keyentry::ChangeKeyEntry* av2_change_keyentry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (av2_change_keyentry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      av2_change_keyentry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, av2_change_keyentry, submessage_arena);
    }
    set_has_av2_change_keyentry();
    mifare_cmd_.av2_change_keyentry_ = av2_change_keyentry;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.av2_change_keyentry)
}
void Mifare::clear_av2_change_keyentry() {
  if (_internal_has_av2_change_keyentry()) {
    delete mifare_cmd_.av2_change_keyentry_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_av2_unlock(::mifare::av2::unlock::Unlock* av2_unlock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (av2_unlock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      av2_unlock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, av2_unlock, submessage_arena);
    }
    set_has_av2_unlock();
    mifare_cmd_.av2_unlock_ = av2_unlock;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.av2_unlock)
}
void Mifare::clear_av2_unlock() {
  if (_internal_has_av2_unlock()) {
    delete mifare_cmd_.av2_unlock_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_ul_read_pages(::mifare::ultralight::read::ReadPages* mfr_ul_read_pages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_ul_read_pages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_ul_read_pages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_ul_read_pages, submessage_arena);
    }
    set_has_mfr_ul_read_pages();
    mifare_cmd_.mfr_ul_read_pages_ = mfr_ul_read_pages;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_ul_read_pages)
}
void Mifare::clear_mfr_ul_read_pages() {
  if (_internal_has_mfr_ul_read_pages()) {
    delete mifare_cmd_.mfr_ul_read_pages_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_ul_write_pages(::mifare::ultralight::write::WritePages* mfr_ul_write_pages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_ul_write_pages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_ul_write_pages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_ul_write_pages, submessage_arena);
    }
    set_has_mfr_ul_write_pages();
    mifare_cmd_.mfr_ul_write_pages_ = mfr_ul_write_pages;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_ul_write_pages)
}
void Mifare::clear_mfr_ul_write_pages() {
  if (_internal_has_mfr_ul_write_pages()) {
    delete mifare_cmd_.mfr_ul_write_pages_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_ul_get_version(::mifare::ultralight::version::GetVersion* mfr_ul_get_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_ul_get_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_ul_get_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_ul_get_version, submessage_arena);
    }
    set_has_mfr_ul_get_version();
    mifare_cmd_.mfr_ul_get_version_ = mfr_ul_get_version;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_ul_get_version)
}
void Mifare::clear_mfr_ul_get_version() {
  if (_internal_has_mfr_ul_get_version()) {
    delete mifare_cmd_.mfr_ul_get_version_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_ul_get_counter(::mifare::ultralight::counter::get::GetCounter* mfr_ul_get_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_ul_get_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_ul_get_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_ul_get_counter, submessage_arena);
    }
    set_has_mfr_ul_get_counter();
    mifare_cmd_.mfr_ul_get_counter_ = mfr_ul_get_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_ul_get_counter)
}
void Mifare::clear_mfr_ul_get_counter() {
  if (_internal_has_mfr_ul_get_counter()) {
    delete mifare_cmd_.mfr_ul_get_counter_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_ul_increment_counter(::mifare::ultralight::counter::increment::IncrementCounter* mfr_ul_increment_counter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_ul_increment_counter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_ul_increment_counter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_ul_increment_counter, submessage_arena);
    }
    set_has_mfr_ul_increment_counter();
    mifare_cmd_.mfr_ul_increment_counter_ = mfr_ul_increment_counter;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_ul_increment_counter)
}
void Mifare::clear_mfr_ul_increment_counter() {
  if (_internal_has_mfr_ul_increment_counter()) {
    delete mifare_cmd_.mfr_ul_increment_counter_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_ul_bulk_operation(::mifare::ultralight::bulk::BulkOperation* mfr_ul_bulk_operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_ul_bulk_operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_ul_bulk_operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_ul_bulk_operation, submessage_arena);
    }
    set_has_mfr_ul_bulk_operation();
    mifare_cmd_.mfr_ul_bulk_operation_ = mfr_ul_bulk_operation;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_ul_bulk_operation)
}
void Mifare::clear_mfr_ul_bulk_operation() {
  if (_internal_has_mfr_ul_bulk_operation()) {
    delete mifare_cmd_.mfr_ul_bulk_operation_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_ul_auth_on_clear_key(::mifare::ultralight::auth::ClearKey* mfr_ul_auth_on_clear_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_ul_auth_on_clear_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_ul_auth_on_clear_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_ul_auth_on_clear_key, submessage_arena);
    }
    set_has_mfr_ul_auth_on_clear_key();
    mifare_cmd_.mfr_ul_auth_on_clear_key_ = mfr_ul_auth_on_clear_key;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_ul_auth_on_clear_key)
}
void Mifare::clear_mfr_ul_auth_on_clear_key() {
  if (_internal_has_mfr_ul_auth_on_clear_key()) {
    delete mifare_cmd_.mfr_ul_auth_on_clear_key_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_ul_auth_on_sam_key(::mifare::ultralight::auth::SamKey* mfr_ul_auth_on_sam_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_ul_auth_on_sam_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_ul_auth_on_sam_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_ul_auth_on_sam_key, submessage_arena);
    }
    set_has_mfr_ul_auth_on_sam_key();
    mifare_cmd_.mfr_ul_auth_on_sam_key_ = mfr_ul_auth_on_sam_key;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_ul_auth_on_sam_key)
}
void Mifare::clear_mfr_ul_auth_on_sam_key() {
  if (_internal_has_mfr_ul_auth_on_sam_key()) {
    delete mifare_cmd_.mfr_ul_auth_on_sam_key_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_ul_auth_clear_password(::mifare::ultralight::password::ClearPassword* mfr_ul_auth_clear_password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_ul_auth_clear_password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_ul_auth_clear_password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_ul_auth_clear_password, submessage_arena);
    }
    set_has_mfr_ul_auth_clear_password();
    mifare_cmd_.mfr_ul_auth_clear_password_ = mfr_ul_auth_clear_password;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_ul_auth_clear_password)
}
void Mifare::clear_mfr_ul_auth_clear_password() {
  if (_internal_has_mfr_ul_auth_clear_password()) {
    delete mifare_cmd_.mfr_ul_auth_clear_password_;
    clear_has_mifare_cmd();
  }
}
void Mifare::set_allocated_mfr_ul_auth_sam_password(::mifare::ultralight::password::SamPassword* mfr_ul_auth_sam_password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_ul_auth_sam_password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_ul_auth_sam_password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_ul_auth_sam_password, submessage_arena);
    }
    set_has_mfr_ul_auth_sam_password();
    mifare_cmd_.mfr_ul_auth_sam_password_ = mfr_ul_auth_sam_password;
  }
  // @@protoc_insertion_point(field_set_allocated:Mifare.mfr_ul_auth_sam_password)
}
void Mifare::clear_mfr_ul_auth_sam_password() {
  if (_internal_has_mfr_ul_auth_sam_password()) {
    delete mifare_cmd_.mfr_ul_auth_sam_password_;
    clear_has_mifare_cmd();
  }
}
Mifare::Mifare()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mifare)
}
Mifare::Mifare(const Mifare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_mifare_cmd();
  switch (from.mifare_cmd_case()) {
    case kMfrClassicAuthOnClearKey: {
      _internal_mutable_mfr_classic_auth_on_clear_key()->::mifare::classic::auth::ClearKey::MergeFrom(from._internal_mfr_classic_auth_on_clear_key());
      break;
    }
    case kMfrClassicAuthOnSamKey: {
      _internal_mutable_mfr_classic_auth_on_sam_key()->::mifare::classic::auth::SamKey::MergeFrom(from._internal_mfr_classic_auth_on_sam_key());
      break;
    }
    case kMfrClassicReadBlocks: {
      _internal_mutable_mfr_classic_read_blocks()->::mifare::classic::read::ReadBlocks::MergeFrom(from._internal_mfr_classic_read_blocks());
      break;
    }
    case kMfrClassicWriteBlocks: {
      _internal_mutable_mfr_classic_write_blocks()->::mifare::classic::write::WriteBlocks::MergeFrom(from._internal_mfr_classic_write_blocks());
      break;
    }
    case kMfrClassicBulkOperation: {
      _internal_mutable_mfr_classic_bulk_operation()->::mifare::classic::bulk::BulkOperation::MergeFrom(from._internal_mfr_classic_bulk_operation());
      break;
    }
    case kMfrClassicGetCounter: {
      _internal_mutable_mfr_classic_get_counter()->::mifare::classic::counter::get::GetCounter::MergeFrom(from._internal_mfr_classic_get_counter());
      break;
    }
    case kMfrClassicSetCounter: {
      _internal_mutable_mfr_classic_set_counter()->::mifare::classic::counter::set::SetCounter::MergeFrom(from._internal_mfr_classic_set_counter());
      break;
    }
    case kMfrClassicModifyCounter: {
      _internal_mutable_mfr_classic_modify_counter()->::mifare::classic::counter::modify::ModifyCounter::MergeFrom(from._internal_mfr_classic_modify_counter());
      break;
    }
    case kMfrClassicCopyCounter: {
      _internal_mutable_mfr_classic_copy_counter()->::mifare::classic::counter::copy::CopyCounter::MergeFrom(from._internal_mfr_classic_copy_counter());
      break;
    }
    case kMfrClassicCommitCounter: {
      _internal_mutable_mfr_classic_commit_counter()->::mifare::classic::counter::commit::CommitCounter::MergeFrom(from._internal_mfr_classic_commit_counter());
      break;
    }
    case kMfrPlusAuthOnClearKey: {
      _internal_mutable_mfr_plus_auth_on_clear_key()->::mifare::plus::auth::ClearKey::MergeFrom(from._internal_mfr_plus_auth_on_clear_key());
      break;
    }
    case kMfrPlusReadBlocks: {
      _internal_mutable_mfr_plus_read_blocks()->::mifare::plus::read::ReadBlocks::MergeFrom(from._internal_mfr_plus_read_blocks());
      break;
    }
    case kMfrPlusWriteBlocks: {
      _internal_mutable_mfr_plus_write_blocks()->::mifare::plus::write::WriteBlocks::MergeFrom(from._internal_mfr_plus_write_blocks());
      break;
    }
    case kMfrPlusBulkOperation: {
      _internal_mutable_mfr_plus_bulk_operation()->::mifare::plus::bulk::BulkOperation::MergeFrom(from._internal_mfr_plus_bulk_operation());
      break;
    }
    case kMfrPlusGetCounter: {
      _internal_mutable_mfr_plus_get_counter()->::mifare::plus::counter::get::GetCounter::MergeFrom(from._internal_mfr_plus_get_counter());
      break;
    }
    case kMfrPlusSetCounter: {
      _internal_mutable_mfr_plus_set_counter()->::mifare::plus::counter::set::SetCounter::MergeFrom(from._internal_mfr_plus_set_counter());
      break;
    }
    case kMfrPlusModifyCounter: {
      _internal_mutable_mfr_plus_modify_counter()->::mifare::plus::counter::modify::ModifyCounter::MergeFrom(from._internal_mfr_plus_modify_counter());
      break;
    }
    case kMfrPlusCopyCounter: {
      _internal_mutable_mfr_plus_copy_counter()->::mifare::plus::counter::copy::CopyCounter::MergeFrom(from._internal_mfr_plus_copy_counter());
      break;
    }
    case kMfrPlusCommitCounter: {
      _internal_mutable_mfr_plus_commit_counter()->::mifare::plus::counter::commit::CommitCounter::MergeFrom(from._internal_mfr_plus_commit_counter());
      break;
    }
    case kMfrPlusAuthOnSamKey: {
      _internal_mutable_mfr_plus_auth_on_sam_key()->::mifare::plus::auth::SamKey::MergeFrom(from._internal_mfr_plus_auth_on_sam_key());
      break;
    }
    case kAv2AuthenticateHost: {
      _internal_mutable_av2_authenticate_host()->::mifare::av2::host_auth::AuthenticateHost::MergeFrom(from._internal_av2_authenticate_host());
      break;
    }
    case kAv2ChangeKeyentry: {
      _internal_mutable_av2_change_keyentry()->::mifare::av2::change_keyentry::ChangeKeyEntry::MergeFrom(from._internal_av2_change_keyentry());
      break;
    }
    case kAv2Unlock: {
      _internal_mutable_av2_unlock()->::mifare::av2::unlock::Unlock::MergeFrom(from._internal_av2_unlock());
      break;
    }
    case kMfrUlReadPages: {
      _internal_mutable_mfr_ul_read_pages()->::mifare::ultralight::read::ReadPages::MergeFrom(from._internal_mfr_ul_read_pages());
      break;
    }
    case kMfrUlWritePages: {
      _internal_mutable_mfr_ul_write_pages()->::mifare::ultralight::write::WritePages::MergeFrom(from._internal_mfr_ul_write_pages());
      break;
    }
    case kMfrUlGetVersion: {
      _internal_mutable_mfr_ul_get_version()->::mifare::ultralight::version::GetVersion::MergeFrom(from._internal_mfr_ul_get_version());
      break;
    }
    case kMfrUlGetCounter: {
      _internal_mutable_mfr_ul_get_counter()->::mifare::ultralight::counter::get::GetCounter::MergeFrom(from._internal_mfr_ul_get_counter());
      break;
    }
    case kMfrUlIncrementCounter: {
      _internal_mutable_mfr_ul_increment_counter()->::mifare::ultralight::counter::increment::IncrementCounter::MergeFrom(from._internal_mfr_ul_increment_counter());
      break;
    }
    case kMfrUlBulkOperation: {
      _internal_mutable_mfr_ul_bulk_operation()->::mifare::ultralight::bulk::BulkOperation::MergeFrom(from._internal_mfr_ul_bulk_operation());
      break;
    }
    case kMfrUlAuthOnClearKey: {
      _internal_mutable_mfr_ul_auth_on_clear_key()->::mifare::ultralight::auth::ClearKey::MergeFrom(from._internal_mfr_ul_auth_on_clear_key());
      break;
    }
    case kMfrUlAuthOnSamKey: {
      _internal_mutable_mfr_ul_auth_on_sam_key()->::mifare::ultralight::auth::SamKey::MergeFrom(from._internal_mfr_ul_auth_on_sam_key());
      break;
    }
    case kMfrUlAuthClearPassword: {
      _internal_mutable_mfr_ul_auth_clear_password()->::mifare::ultralight::password::ClearPassword::MergeFrom(from._internal_mfr_ul_auth_clear_password());
      break;
    }
    case kMfrUlAuthSamPassword: {
      _internal_mutable_mfr_ul_auth_sam_password()->::mifare::ultralight::password::SamPassword::MergeFrom(from._internal_mfr_ul_auth_sam_password());
      break;
    }
    case MIFARE_CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Mifare)
}

void Mifare::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mifare_commands7_2eproto.base);
  clear_has_mifare_cmd();
}

Mifare::~Mifare() {
  // @@protoc_insertion_point(destructor:Mifare)
  SharedDtor();
}

void Mifare::SharedDtor() {
  if (has_mifare_cmd()) {
    clear_mifare_cmd();
  }
}

void Mifare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mifare& Mifare::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mifare_commands7_2eproto.base);
  return *internal_default_instance();
}


void Mifare::clear_mifare_cmd() {
// @@protoc_insertion_point(one_of_clear_start:Mifare)
  switch (mifare_cmd_case()) {
    case kMfrClassicAuthOnClearKey: {
      delete mifare_cmd_.mfr_classic_auth_on_clear_key_;
      break;
    }
    case kMfrClassicAuthOnSamKey: {
      delete mifare_cmd_.mfr_classic_auth_on_sam_key_;
      break;
    }
    case kMfrClassicReadBlocks: {
      delete mifare_cmd_.mfr_classic_read_blocks_;
      break;
    }
    case kMfrClassicWriteBlocks: {
      delete mifare_cmd_.mfr_classic_write_blocks_;
      break;
    }
    case kMfrClassicBulkOperation: {
      delete mifare_cmd_.mfr_classic_bulk_operation_;
      break;
    }
    case kMfrClassicGetCounter: {
      delete mifare_cmd_.mfr_classic_get_counter_;
      break;
    }
    case kMfrClassicSetCounter: {
      delete mifare_cmd_.mfr_classic_set_counter_;
      break;
    }
    case kMfrClassicModifyCounter: {
      delete mifare_cmd_.mfr_classic_modify_counter_;
      break;
    }
    case kMfrClassicCopyCounter: {
      delete mifare_cmd_.mfr_classic_copy_counter_;
      break;
    }
    case kMfrClassicCommitCounter: {
      delete mifare_cmd_.mfr_classic_commit_counter_;
      break;
    }
    case kMfrPlusAuthOnClearKey: {
      delete mifare_cmd_.mfr_plus_auth_on_clear_key_;
      break;
    }
    case kMfrPlusReadBlocks: {
      delete mifare_cmd_.mfr_plus_read_blocks_;
      break;
    }
    case kMfrPlusWriteBlocks: {
      delete mifare_cmd_.mfr_plus_write_blocks_;
      break;
    }
    case kMfrPlusBulkOperation: {
      delete mifare_cmd_.mfr_plus_bulk_operation_;
      break;
    }
    case kMfrPlusGetCounter: {
      delete mifare_cmd_.mfr_plus_get_counter_;
      break;
    }
    case kMfrPlusSetCounter: {
      delete mifare_cmd_.mfr_plus_set_counter_;
      break;
    }
    case kMfrPlusModifyCounter: {
      delete mifare_cmd_.mfr_plus_modify_counter_;
      break;
    }
    case kMfrPlusCopyCounter: {
      delete mifare_cmd_.mfr_plus_copy_counter_;
      break;
    }
    case kMfrPlusCommitCounter: {
      delete mifare_cmd_.mfr_plus_commit_counter_;
      break;
    }
    case kMfrPlusAuthOnSamKey: {
      delete mifare_cmd_.mfr_plus_auth_on_sam_key_;
      break;
    }
    case kAv2AuthenticateHost: {
      delete mifare_cmd_.av2_authenticate_host_;
      break;
    }
    case kAv2ChangeKeyentry: {
      delete mifare_cmd_.av2_change_keyentry_;
      break;
    }
    case kAv2Unlock: {
      delete mifare_cmd_.av2_unlock_;
      break;
    }
    case kMfrUlReadPages: {
      delete mifare_cmd_.mfr_ul_read_pages_;
      break;
    }
    case kMfrUlWritePages: {
      delete mifare_cmd_.mfr_ul_write_pages_;
      break;
    }
    case kMfrUlGetVersion: {
      delete mifare_cmd_.mfr_ul_get_version_;
      break;
    }
    case kMfrUlGetCounter: {
      delete mifare_cmd_.mfr_ul_get_counter_;
      break;
    }
    case kMfrUlIncrementCounter: {
      delete mifare_cmd_.mfr_ul_increment_counter_;
      break;
    }
    case kMfrUlBulkOperation: {
      delete mifare_cmd_.mfr_ul_bulk_operation_;
      break;
    }
    case kMfrUlAuthOnClearKey: {
      delete mifare_cmd_.mfr_ul_auth_on_clear_key_;
      break;
    }
    case kMfrUlAuthOnSamKey: {
      delete mifare_cmd_.mfr_ul_auth_on_sam_key_;
      break;
    }
    case kMfrUlAuthClearPassword: {
      delete mifare_cmd_.mfr_ul_auth_clear_password_;
      break;
    }
    case kMfrUlAuthSamPassword: {
      delete mifare_cmd_.mfr_ul_auth_sam_password_;
      break;
    }
    case MIFARE_CMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MIFARE_CMD_NOT_SET;
}


void Mifare::Clear() {
// @@protoc_insertion_point(message_clear_start:Mifare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_mifare_cmd();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Mifare::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mifare.classic.auth.ClearKey mfr_classic_auth_on_clear_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_classic_auth_on_clear_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.auth.SamKey mfr_classic_auth_on_sam_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_classic_auth_on_sam_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.read.ReadBlocks mfr_classic_read_blocks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_classic_read_blocks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.write.WriteBlocks mfr_classic_write_blocks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_classic_write_blocks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.bulk.BulkOperation mfr_classic_bulk_operation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_classic_bulk_operation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.counter.get.GetCounter mfr_classic_get_counter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_classic_get_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.counter.set.SetCounter mfr_classic_set_counter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_classic_set_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.counter.modify.ModifyCounter mfr_classic_modify_counter = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_classic_modify_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.counter.copy.CopyCounter mfr_classic_copy_counter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_classic_copy_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.counter.commit.CommitCounter mfr_classic_commit_counter = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_classic_commit_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.plus.auth.ClearKey mfr_plus_auth_on_clear_key = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_plus_auth_on_clear_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.plus.read.ReadBlocks mfr_plus_read_blocks = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_plus_read_blocks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.plus.write.WriteBlocks mfr_plus_write_blocks = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_plus_write_blocks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.plus.bulk.BulkOperation mfr_plus_bulk_operation = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_plus_bulk_operation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.plus.counter.get.GetCounter mfr_plus_get_counter = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_plus_get_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.plus.counter.set.SetCounter mfr_plus_set_counter = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_plus_set_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.plus.counter.modify.ModifyCounter mfr_plus_modify_counter = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_plus_modify_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.plus.counter.copy.CopyCounter mfr_plus_copy_counter = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_plus_copy_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.plus.counter.commit.CommitCounter mfr_plus_commit_counter = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_plus_commit_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.plus.auth.SamKey mfr_plus_auth_on_sam_key = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_plus_auth_on_sam_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.av2.host_auth.AuthenticateHost av2_authenticate_host = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_av2_authenticate_host(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.av2.change_keyentry.ChangeKeyEntry av2_change_keyentry = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_av2_change_keyentry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.av2.unlock.Unlock av2_unlock = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_av2_unlock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.read.ReadPages mfr_ul_read_pages = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_ul_read_pages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.write.WritePages mfr_ul_write_pages = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_ul_write_pages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.version.GetVersion mfr_ul_get_version = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_ul_get_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.counter.get.GetCounter mfr_ul_get_counter = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_ul_get_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.counter.increment.IncrementCounter mfr_ul_increment_counter = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_ul_increment_counter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.bulk.BulkOperation mfr_ul_bulk_operation = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_ul_bulk_operation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.auth.ClearKey mfr_ul_auth_on_clear_key = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_ul_auth_on_clear_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.auth.SamKey mfr_ul_auth_on_sam_key = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_ul_auth_on_sam_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.password.ClearPassword mfr_ul_auth_clear_password = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_ul_auth_clear_password(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.ultralight.password.SamPassword mfr_ul_auth_sam_password = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_ul_auth_sam_password(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mifare::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mifare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (mifare_cmd_case()) {
    case kMfrClassicAuthOnClearKey: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::mfr_classic_auth_on_clear_key(this), target, stream);
      break;
    }
    case kMfrClassicAuthOnSamKey: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::mfr_classic_auth_on_sam_key(this), target, stream);
      break;
    }
    case kMfrClassicReadBlocks: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::mfr_classic_read_blocks(this), target, stream);
      break;
    }
    case kMfrClassicWriteBlocks: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::mfr_classic_write_blocks(this), target, stream);
      break;
    }
    case kMfrClassicBulkOperation: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::mfr_classic_bulk_operation(this), target, stream);
      break;
    }
    case kMfrClassicGetCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::mfr_classic_get_counter(this), target, stream);
      break;
    }
    case kMfrClassicSetCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::mfr_classic_set_counter(this), target, stream);
      break;
    }
    case kMfrClassicModifyCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::mfr_classic_modify_counter(this), target, stream);
      break;
    }
    case kMfrClassicCopyCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::mfr_classic_copy_counter(this), target, stream);
      break;
    }
    case kMfrClassicCommitCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::mfr_classic_commit_counter(this), target, stream);
      break;
    }
    case kMfrPlusAuthOnClearKey: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          16, _Internal::mfr_plus_auth_on_clear_key(this), target, stream);
      break;
    }
    case kMfrPlusReadBlocks: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          17, _Internal::mfr_plus_read_blocks(this), target, stream);
      break;
    }
    case kMfrPlusWriteBlocks: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          18, _Internal::mfr_plus_write_blocks(this), target, stream);
      break;
    }
    case kMfrPlusBulkOperation: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          19, _Internal::mfr_plus_bulk_operation(this), target, stream);
      break;
    }
    case kMfrPlusGetCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          20, _Internal::mfr_plus_get_counter(this), target, stream);
      break;
    }
    case kMfrPlusSetCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          21, _Internal::mfr_plus_set_counter(this), target, stream);
      break;
    }
    case kMfrPlusModifyCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          22, _Internal::mfr_plus_modify_counter(this), target, stream);
      break;
    }
    case kMfrPlusCopyCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          23, _Internal::mfr_plus_copy_counter(this), target, stream);
      break;
    }
    case kMfrPlusCommitCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          24, _Internal::mfr_plus_commit_counter(this), target, stream);
      break;
    }
    case kMfrPlusAuthOnSamKey: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          25, _Internal::mfr_plus_auth_on_sam_key(this), target, stream);
      break;
    }
    case kAv2AuthenticateHost: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          30, _Internal::av2_authenticate_host(this), target, stream);
      break;
    }
    case kAv2ChangeKeyentry: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          31, _Internal::av2_change_keyentry(this), target, stream);
      break;
    }
    case kAv2Unlock: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          32, _Internal::av2_unlock(this), target, stream);
      break;
    }
    case kMfrUlReadPages: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          36, _Internal::mfr_ul_read_pages(this), target, stream);
      break;
    }
    case kMfrUlWritePages: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          37, _Internal::mfr_ul_write_pages(this), target, stream);
      break;
    }
    case kMfrUlGetVersion: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          38, _Internal::mfr_ul_get_version(this), target, stream);
      break;
    }
    case kMfrUlGetCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          39, _Internal::mfr_ul_get_counter(this), target, stream);
      break;
    }
    case kMfrUlIncrementCounter: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          40, _Internal::mfr_ul_increment_counter(this), target, stream);
      break;
    }
    case kMfrUlBulkOperation: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          41, _Internal::mfr_ul_bulk_operation(this), target, stream);
      break;
    }
    case kMfrUlAuthOnClearKey: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          42, _Internal::mfr_ul_auth_on_clear_key(this), target, stream);
      break;
    }
    case kMfrUlAuthOnSamKey: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          43, _Internal::mfr_ul_auth_on_sam_key(this), target, stream);
      break;
    }
    case kMfrUlAuthClearPassword: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          44, _Internal::mfr_ul_auth_clear_password(this), target, stream);
      break;
    }
    case kMfrUlAuthSamPassword: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          45, _Internal::mfr_ul_auth_sam_password(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mifare)
  return target;
}

size_t Mifare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mifare)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (mifare_cmd_case()) {
    // optional .mifare.classic.auth.ClearKey mfr_classic_auth_on_clear_key = 1;
    case kMfrClassicAuthOnClearKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_classic_auth_on_clear_key_);
      break;
    }
    // optional .mifare.classic.auth.SamKey mfr_classic_auth_on_sam_key = 2;
    case kMfrClassicAuthOnSamKey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_classic_auth_on_sam_key_);
      break;
    }
    // optional .mifare.classic.read.ReadBlocks mfr_classic_read_blocks = 3;
    case kMfrClassicReadBlocks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_classic_read_blocks_);
      break;
    }
    // optional .mifare.classic.write.WriteBlocks mfr_classic_write_blocks = 4;
    case kMfrClassicWriteBlocks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_classic_write_blocks_);
      break;
    }
    // optional .mifare.classic.bulk.BulkOperation mfr_classic_bulk_operation = 5;
    case kMfrClassicBulkOperation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_classic_bulk_operation_);
      break;
    }
    // optional .mifare.classic.counter.get.GetCounter mfr_classic_get_counter = 6;
    case kMfrClassicGetCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_classic_get_counter_);
      break;
    }
    // optional .mifare.classic.counter.set.SetCounter mfr_classic_set_counter = 7;
    case kMfrClassicSetCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_classic_set_counter_);
      break;
    }
    // optional .mifare.classic.counter.modify.ModifyCounter mfr_classic_modify_counter = 8;
    case kMfrClassicModifyCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_classic_modify_counter_);
      break;
    }
    // optional .mifare.classic.counter.copy.CopyCounter mfr_classic_copy_counter = 9;
    case kMfrClassicCopyCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_classic_copy_counter_);
      break;
    }
    // optional .mifare.classic.counter.commit.CommitCounter mfr_classic_commit_counter = 10;
    case kMfrClassicCommitCounter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_classic_commit_counter_);
      break;
    }
    // optional .mifare.plus.auth.ClearKey mfr_plus_auth_on_clear_key = 16;
    case kMfrPlusAuthOnClearKey: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_plus_auth_on_clear_key_);
      break;
    }
    // optional .mifare.plus.read.ReadBlocks mfr_plus_read_blocks = 17;
    case kMfrPlusReadBlocks: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_plus_read_blocks_);
      break;
    }
    // optional .mifare.plus.write.WriteBlocks mfr_plus_write_blocks = 18;
    case kMfrPlusWriteBlocks: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_plus_write_blocks_);
      break;
    }
    // optional .mifare.plus.bulk.BulkOperation mfr_plus_bulk_operation = 19;
    case kMfrPlusBulkOperation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_plus_bulk_operation_);
      break;
    }
    // optional .mifare.plus.counter.get.GetCounter mfr_plus_get_counter = 20;
    case kMfrPlusGetCounter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_plus_get_counter_);
      break;
    }
    // optional .mifare.plus.counter.set.SetCounter mfr_plus_set_counter = 21;
    case kMfrPlusSetCounter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_plus_set_counter_);
      break;
    }
    // optional .mifare.plus.counter.modify.ModifyCounter mfr_plus_modify_counter = 22;
    case kMfrPlusModifyCounter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_plus_modify_counter_);
      break;
    }
    // optional .mifare.plus.counter.copy.CopyCounter mfr_plus_copy_counter = 23;
    case kMfrPlusCopyCounter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_plus_copy_counter_);
      break;
    }
    // optional .mifare.plus.counter.commit.CommitCounter mfr_plus_commit_counter = 24;
    case kMfrPlusCommitCounter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_plus_commit_counter_);
      break;
    }
    // optional .mifare.plus.auth.SamKey mfr_plus_auth_on_sam_key = 25;
    case kMfrPlusAuthOnSamKey: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_plus_auth_on_sam_key_);
      break;
    }
    // optional .mifare.av2.host_auth.AuthenticateHost av2_authenticate_host = 30;
    case kAv2AuthenticateHost: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.av2_authenticate_host_);
      break;
    }
    // optional .mifare.av2.change_keyentry.ChangeKeyEntry av2_change_keyentry = 31;
    case kAv2ChangeKeyentry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.av2_change_keyentry_);
      break;
    }
    // optional .mifare.av2.unlock.Unlock av2_unlock = 32;
    case kAv2Unlock: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.av2_unlock_);
      break;
    }
    // optional .mifare.ultralight.read.ReadPages mfr_ul_read_pages = 36;
    case kMfrUlReadPages: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_ul_read_pages_);
      break;
    }
    // optional .mifare.ultralight.write.WritePages mfr_ul_write_pages = 37;
    case kMfrUlWritePages: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_ul_write_pages_);
      break;
    }
    // optional .mifare.ultralight.version.GetVersion mfr_ul_get_version = 38;
    case kMfrUlGetVersion: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_ul_get_version_);
      break;
    }
    // optional .mifare.ultralight.counter.get.GetCounter mfr_ul_get_counter = 39;
    case kMfrUlGetCounter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_ul_get_counter_);
      break;
    }
    // optional .mifare.ultralight.counter.increment.IncrementCounter mfr_ul_increment_counter = 40;
    case kMfrUlIncrementCounter: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_ul_increment_counter_);
      break;
    }
    // optional .mifare.ultralight.bulk.BulkOperation mfr_ul_bulk_operation = 41;
    case kMfrUlBulkOperation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_ul_bulk_operation_);
      break;
    }
    // optional .mifare.ultralight.auth.ClearKey mfr_ul_auth_on_clear_key = 42;
    case kMfrUlAuthOnClearKey: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_ul_auth_on_clear_key_);
      break;
    }
    // optional .mifare.ultralight.auth.SamKey mfr_ul_auth_on_sam_key = 43;
    case kMfrUlAuthOnSamKey: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_ul_auth_on_sam_key_);
      break;
    }
    // optional .mifare.ultralight.password.ClearPassword mfr_ul_auth_clear_password = 44;
    case kMfrUlAuthClearPassword: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_ul_auth_clear_password_);
      break;
    }
    // optional .mifare.ultralight.password.SamPassword mfr_ul_auth_sam_password = 45;
    case kMfrUlAuthSamPassword: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_ul_auth_sam_password_);
      break;
    }
    case MIFARE_CMD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mifare::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mifare)
  GOOGLE_DCHECK_NE(&from, this);
  const Mifare* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mifare>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mifare)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mifare)
    MergeFrom(*source);
  }
}

void Mifare::MergeFrom(const Mifare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mifare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.mifare_cmd_case()) {
    case kMfrClassicAuthOnClearKey: {
      _internal_mutable_mfr_classic_auth_on_clear_key()->::mifare::classic::auth::ClearKey::MergeFrom(from._internal_mfr_classic_auth_on_clear_key());
      break;
    }
    case kMfrClassicAuthOnSamKey: {
      _internal_mutable_mfr_classic_auth_on_sam_key()->::mifare::classic::auth::SamKey::MergeFrom(from._internal_mfr_classic_auth_on_sam_key());
      break;
    }
    case kMfrClassicReadBlocks: {
      _internal_mutable_mfr_classic_read_blocks()->::mifare::classic::read::ReadBlocks::MergeFrom(from._internal_mfr_classic_read_blocks());
      break;
    }
    case kMfrClassicWriteBlocks: {
      _internal_mutable_mfr_classic_write_blocks()->::mifare::classic::write::WriteBlocks::MergeFrom(from._internal_mfr_classic_write_blocks());
      break;
    }
    case kMfrClassicBulkOperation: {
      _internal_mutable_mfr_classic_bulk_operation()->::mifare::classic::bulk::BulkOperation::MergeFrom(from._internal_mfr_classic_bulk_operation());
      break;
    }
    case kMfrClassicGetCounter: {
      _internal_mutable_mfr_classic_get_counter()->::mifare::classic::counter::get::GetCounter::MergeFrom(from._internal_mfr_classic_get_counter());
      break;
    }
    case kMfrClassicSetCounter: {
      _internal_mutable_mfr_classic_set_counter()->::mifare::classic::counter::set::SetCounter::MergeFrom(from._internal_mfr_classic_set_counter());
      break;
    }
    case kMfrClassicModifyCounter: {
      _internal_mutable_mfr_classic_modify_counter()->::mifare::classic::counter::modify::ModifyCounter::MergeFrom(from._internal_mfr_classic_modify_counter());
      break;
    }
    case kMfrClassicCopyCounter: {
      _internal_mutable_mfr_classic_copy_counter()->::mifare::classic::counter::copy::CopyCounter::MergeFrom(from._internal_mfr_classic_copy_counter());
      break;
    }
    case kMfrClassicCommitCounter: {
      _internal_mutable_mfr_classic_commit_counter()->::mifare::classic::counter::commit::CommitCounter::MergeFrom(from._internal_mfr_classic_commit_counter());
      break;
    }
    case kMfrPlusAuthOnClearKey: {
      _internal_mutable_mfr_plus_auth_on_clear_key()->::mifare::plus::auth::ClearKey::MergeFrom(from._internal_mfr_plus_auth_on_clear_key());
      break;
    }
    case kMfrPlusReadBlocks: {
      _internal_mutable_mfr_plus_read_blocks()->::mifare::plus::read::ReadBlocks::MergeFrom(from._internal_mfr_plus_read_blocks());
      break;
    }
    case kMfrPlusWriteBlocks: {
      _internal_mutable_mfr_plus_write_blocks()->::mifare::plus::write::WriteBlocks::MergeFrom(from._internal_mfr_plus_write_blocks());
      break;
    }
    case kMfrPlusBulkOperation: {
      _internal_mutable_mfr_plus_bulk_operation()->::mifare::plus::bulk::BulkOperation::MergeFrom(from._internal_mfr_plus_bulk_operation());
      break;
    }
    case kMfrPlusGetCounter: {
      _internal_mutable_mfr_plus_get_counter()->::mifare::plus::counter::get::GetCounter::MergeFrom(from._internal_mfr_plus_get_counter());
      break;
    }
    case kMfrPlusSetCounter: {
      _internal_mutable_mfr_plus_set_counter()->::mifare::plus::counter::set::SetCounter::MergeFrom(from._internal_mfr_plus_set_counter());
      break;
    }
    case kMfrPlusModifyCounter: {
      _internal_mutable_mfr_plus_modify_counter()->::mifare::plus::counter::modify::ModifyCounter::MergeFrom(from._internal_mfr_plus_modify_counter());
      break;
    }
    case kMfrPlusCopyCounter: {
      _internal_mutable_mfr_plus_copy_counter()->::mifare::plus::counter::copy::CopyCounter::MergeFrom(from._internal_mfr_plus_copy_counter());
      break;
    }
    case kMfrPlusCommitCounter: {
      _internal_mutable_mfr_plus_commit_counter()->::mifare::plus::counter::commit::CommitCounter::MergeFrom(from._internal_mfr_plus_commit_counter());
      break;
    }
    case kMfrPlusAuthOnSamKey: {
      _internal_mutable_mfr_plus_auth_on_sam_key()->::mifare::plus::auth::SamKey::MergeFrom(from._internal_mfr_plus_auth_on_sam_key());
      break;
    }
    case kAv2AuthenticateHost: {
      _internal_mutable_av2_authenticate_host()->::mifare::av2::host_auth::AuthenticateHost::MergeFrom(from._internal_av2_authenticate_host());
      break;
    }
    case kAv2ChangeKeyentry: {
      _internal_mutable_av2_change_keyentry()->::mifare::av2::change_keyentry::ChangeKeyEntry::MergeFrom(from._internal_av2_change_keyentry());
      break;
    }
    case kAv2Unlock: {
      _internal_mutable_av2_unlock()->::mifare::av2::unlock::Unlock::MergeFrom(from._internal_av2_unlock());
      break;
    }
    case kMfrUlReadPages: {
      _internal_mutable_mfr_ul_read_pages()->::mifare::ultralight::read::ReadPages::MergeFrom(from._internal_mfr_ul_read_pages());
      break;
    }
    case kMfrUlWritePages: {
      _internal_mutable_mfr_ul_write_pages()->::mifare::ultralight::write::WritePages::MergeFrom(from._internal_mfr_ul_write_pages());
      break;
    }
    case kMfrUlGetVersion: {
      _internal_mutable_mfr_ul_get_version()->::mifare::ultralight::version::GetVersion::MergeFrom(from._internal_mfr_ul_get_version());
      break;
    }
    case kMfrUlGetCounter: {
      _internal_mutable_mfr_ul_get_counter()->::mifare::ultralight::counter::get::GetCounter::MergeFrom(from._internal_mfr_ul_get_counter());
      break;
    }
    case kMfrUlIncrementCounter: {
      _internal_mutable_mfr_ul_increment_counter()->::mifare::ultralight::counter::increment::IncrementCounter::MergeFrom(from._internal_mfr_ul_increment_counter());
      break;
    }
    case kMfrUlBulkOperation: {
      _internal_mutable_mfr_ul_bulk_operation()->::mifare::ultralight::bulk::BulkOperation::MergeFrom(from._internal_mfr_ul_bulk_operation());
      break;
    }
    case kMfrUlAuthOnClearKey: {
      _internal_mutable_mfr_ul_auth_on_clear_key()->::mifare::ultralight::auth::ClearKey::MergeFrom(from._internal_mfr_ul_auth_on_clear_key());
      break;
    }
    case kMfrUlAuthOnSamKey: {
      _internal_mutable_mfr_ul_auth_on_sam_key()->::mifare::ultralight::auth::SamKey::MergeFrom(from._internal_mfr_ul_auth_on_sam_key());
      break;
    }
    case kMfrUlAuthClearPassword: {
      _internal_mutable_mfr_ul_auth_clear_password()->::mifare::ultralight::password::ClearPassword::MergeFrom(from._internal_mfr_ul_auth_clear_password());
      break;
    }
    case kMfrUlAuthSamPassword: {
      _internal_mutable_mfr_ul_auth_sam_password()->::mifare::ultralight::password::SamPassword::MergeFrom(from._internal_mfr_ul_auth_sam_password());
      break;
    }
    case MIFARE_CMD_NOT_SET: {
      break;
    }
  }
}

void Mifare::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mifare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mifare::CopyFrom(const Mifare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mifare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mifare::IsInitialized() const {
  switch (mifare_cmd_case()) {
    case kMfrClassicAuthOnClearKey: {
      if (has_mfr_classic_auth_on_clear_key()) {
        if (!this->mfr_classic_auth_on_clear_key().IsInitialized()) return false;
      }
      break;
    }
    case kMfrClassicAuthOnSamKey: {
      if (has_mfr_classic_auth_on_sam_key()) {
        if (!this->mfr_classic_auth_on_sam_key().IsInitialized()) return false;
      }
      break;
    }
    case kMfrClassicReadBlocks: {
      if (has_mfr_classic_read_blocks()) {
        if (!this->mfr_classic_read_blocks().IsInitialized()) return false;
      }
      break;
    }
    case kMfrClassicWriteBlocks: {
      if (has_mfr_classic_write_blocks()) {
        if (!this->mfr_classic_write_blocks().IsInitialized()) return false;
      }
      break;
    }
    case kMfrClassicBulkOperation: {
      if (has_mfr_classic_bulk_operation()) {
        if (!this->mfr_classic_bulk_operation().IsInitialized()) return false;
      }
      break;
    }
    case kMfrClassicGetCounter: {
      if (has_mfr_classic_get_counter()) {
        if (!this->mfr_classic_get_counter().IsInitialized()) return false;
      }
      break;
    }
    case kMfrClassicSetCounter: {
      if (has_mfr_classic_set_counter()) {
        if (!this->mfr_classic_set_counter().IsInitialized()) return false;
      }
      break;
    }
    case kMfrClassicModifyCounter: {
      if (has_mfr_classic_modify_counter()) {
        if (!this->mfr_classic_modify_counter().IsInitialized()) return false;
      }
      break;
    }
    case kMfrClassicCopyCounter: {
      if (has_mfr_classic_copy_counter()) {
        if (!this->mfr_classic_copy_counter().IsInitialized()) return false;
      }
      break;
    }
    case kMfrClassicCommitCounter: {
      if (has_mfr_classic_commit_counter()) {
        if (!this->mfr_classic_commit_counter().IsInitialized()) return false;
      }
      break;
    }
    case kMfrPlusAuthOnClearKey: {
      if (has_mfr_plus_auth_on_clear_key()) {
        if (!this->mfr_plus_auth_on_clear_key().IsInitialized()) return false;
      }
      break;
    }
    case kMfrPlusReadBlocks: {
      if (has_mfr_plus_read_blocks()) {
        if (!this->mfr_plus_read_blocks().IsInitialized()) return false;
      }
      break;
    }
    case kMfrPlusWriteBlocks: {
      if (has_mfr_plus_write_blocks()) {
        if (!this->mfr_plus_write_blocks().IsInitialized()) return false;
      }
      break;
    }
    case kMfrPlusBulkOperation: {
      if (has_mfr_plus_bulk_operation()) {
        if (!this->mfr_plus_bulk_operation().IsInitialized()) return false;
      }
      break;
    }
    case kMfrPlusGetCounter: {
      if (has_mfr_plus_get_counter()) {
        if (!this->mfr_plus_get_counter().IsInitialized()) return false;
      }
      break;
    }
    case kMfrPlusSetCounter: {
      if (has_mfr_plus_set_counter()) {
        if (!this->mfr_plus_set_counter().IsInitialized()) return false;
      }
      break;
    }
    case kMfrPlusModifyCounter: {
      if (has_mfr_plus_modify_counter()) {
        if (!this->mfr_plus_modify_counter().IsInitialized()) return false;
      }
      break;
    }
    case kMfrPlusCopyCounter: {
      if (has_mfr_plus_copy_counter()) {
        if (!this->mfr_plus_copy_counter().IsInitialized()) return false;
      }
      break;
    }
    case kMfrPlusCommitCounter: {
      if (has_mfr_plus_commit_counter()) {
        if (!this->mfr_plus_commit_counter().IsInitialized()) return false;
      }
      break;
    }
    case kMfrPlusAuthOnSamKey: {
      if (has_mfr_plus_auth_on_sam_key()) {
        if (!this->mfr_plus_auth_on_sam_key().IsInitialized()) return false;
      }
      break;
    }
    case kAv2AuthenticateHost: {
      if (has_av2_authenticate_host()) {
        if (!this->av2_authenticate_host().IsInitialized()) return false;
      }
      break;
    }
    case kAv2ChangeKeyentry: {
      if (has_av2_change_keyentry()) {
        if (!this->av2_change_keyentry().IsInitialized()) return false;
      }
      break;
    }
    case kAv2Unlock: {
      if (has_av2_unlock()) {
        if (!this->av2_unlock().IsInitialized()) return false;
      }
      break;
    }
    case kMfrUlReadPages: {
      if (has_mfr_ul_read_pages()) {
        if (!this->mfr_ul_read_pages().IsInitialized()) return false;
      }
      break;
    }
    case kMfrUlWritePages: {
      if (has_mfr_ul_write_pages()) {
        if (!this->mfr_ul_write_pages().IsInitialized()) return false;
      }
      break;
    }
    case kMfrUlGetVersion: {
      break;
    }
    case kMfrUlGetCounter: {
      if (has_mfr_ul_get_counter()) {
        if (!this->mfr_ul_get_counter().IsInitialized()) return false;
      }
      break;
    }
    case kMfrUlIncrementCounter: {
      if (has_mfr_ul_increment_counter()) {
        if (!this->mfr_ul_increment_counter().IsInitialized()) return false;
      }
      break;
    }
    case kMfrUlBulkOperation: {
      if (has_mfr_ul_bulk_operation()) {
        if (!this->mfr_ul_bulk_operation().IsInitialized()) return false;
      }
      break;
    }
    case kMfrUlAuthOnClearKey: {
      if (has_mfr_ul_auth_on_clear_key()) {
        if (!this->mfr_ul_auth_on_clear_key().IsInitialized()) return false;
      }
      break;
    }
    case kMfrUlAuthOnSamKey: {
      if (has_mfr_ul_auth_on_sam_key()) {
        if (!this->mfr_ul_auth_on_sam_key().IsInitialized()) return false;
      }
      break;
    }
    case kMfrUlAuthClearPassword: {
      if (has_mfr_ul_auth_clear_password()) {
        if (!this->mfr_ul_auth_clear_password().IsInitialized()) return false;
      }
      break;
    }
    case kMfrUlAuthSamPassword: {
      if (has_mfr_ul_auth_sam_password()) {
        if (!this->mfr_ul_auth_sam_password().IsInitialized()) return false;
      }
      break;
    }
    case MIFARE_CMD_NOT_SET: {
      break;
    }
  }
  return true;
}

void Mifare::InternalSwap(Mifare* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mifare_cmd_, other->mifare_cmd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mifare::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContactLevel1::InitAsDefaultInstance() {
  ::_ContactLevel1_default_instance_.power_on_card_ = const_cast< ::contact::power_on::PowerOnCard*>(
      ::contact::power_on::PowerOnCard::internal_default_instance());
  ::_ContactLevel1_default_instance_.power_off_card_ = const_cast< ::contact::power_off::PowerOffCard*>(
      ::contact::power_off::PowerOffCard::internal_default_instance());
  ::_ContactLevel1_default_instance_.transmit_apdu_ = const_cast< ::contact::iso7816_4::TransmitApdu*>(
      ::contact::iso7816_4::TransmitApdu::internal_default_instance());
}
class ContactLevel1::_Internal {
 public:
  using HasBits = decltype(std::declval<ContactLevel1>()._has_bits_);
  static const ::contact::power_on::PowerOnCard& power_on_card(const ContactLevel1* msg);
  static const ::contact::power_off::PowerOffCard& power_off_card(const ContactLevel1* msg);
  static const ::contact::iso7816_4::TransmitApdu& transmit_apdu(const ContactLevel1* msg);
};

const ::contact::power_on::PowerOnCard&
ContactLevel1::_Internal::power_on_card(const ContactLevel1* msg) {
  return *msg->contact_level1_cmd_.power_on_card_;
}
const ::contact::power_off::PowerOffCard&
ContactLevel1::_Internal::power_off_card(const ContactLevel1* msg) {
  return *msg->contact_level1_cmd_.power_off_card_;
}
const ::contact::iso7816_4::TransmitApdu&
ContactLevel1::_Internal::transmit_apdu(const ContactLevel1* msg) {
  return *msg->contact_level1_cmd_.transmit_apdu_;
}
void ContactLevel1::set_allocated_power_on_card(::contact::power_on::PowerOnCard* power_on_card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contact_level1_cmd();
  if (power_on_card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      power_on_card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_on_card, submessage_arena);
    }
    set_has_power_on_card();
    contact_level1_cmd_.power_on_card_ = power_on_card;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactLevel1.power_on_card)
}
void ContactLevel1::clear_power_on_card() {
  if (_internal_has_power_on_card()) {
    delete contact_level1_cmd_.power_on_card_;
    clear_has_contact_level1_cmd();
  }
}
void ContactLevel1::set_allocated_power_off_card(::contact::power_off::PowerOffCard* power_off_card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contact_level1_cmd();
  if (power_off_card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      power_off_card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_off_card, submessage_arena);
    }
    set_has_power_off_card();
    contact_level1_cmd_.power_off_card_ = power_off_card;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactLevel1.power_off_card)
}
void ContactLevel1::clear_power_off_card() {
  if (_internal_has_power_off_card()) {
    delete contact_level1_cmd_.power_off_card_;
    clear_has_contact_level1_cmd();
  }
}
void ContactLevel1::set_allocated_transmit_apdu(::contact::iso7816_4::TransmitApdu* transmit_apdu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contact_level1_cmd();
  if (transmit_apdu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transmit_apdu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transmit_apdu, submessage_arena);
    }
    set_has_transmit_apdu();
    contact_level1_cmd_.transmit_apdu_ = transmit_apdu;
  }
  // @@protoc_insertion_point(field_set_allocated:ContactLevel1.transmit_apdu)
}
void ContactLevel1::clear_transmit_apdu() {
  if (_internal_has_transmit_apdu()) {
    delete contact_level1_cmd_.transmit_apdu_;
    clear_has_contact_level1_cmd();
  }
}
ContactLevel1::ContactLevel1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContactLevel1)
}
ContactLevel1::ContactLevel1(const ContactLevel1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_contact_level1_cmd();
  switch (from.contact_level1_cmd_case()) {
    case kPowerOnCard: {
      _internal_mutable_power_on_card()->::contact::power_on::PowerOnCard::MergeFrom(from._internal_power_on_card());
      break;
    }
    case kPowerOffCard: {
      _internal_mutable_power_off_card()->::contact::power_off::PowerOffCard::MergeFrom(from._internal_power_off_card());
      break;
    }
    case kTransmitApdu: {
      _internal_mutable_transmit_apdu()->::contact::iso7816_4::TransmitApdu::MergeFrom(from._internal_transmit_apdu());
      break;
    }
    case CONTACT_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ContactLevel1)
}

void ContactLevel1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContactLevel1_commands7_2eproto.base);
  clear_has_contact_level1_cmd();
}

ContactLevel1::~ContactLevel1() {
  // @@protoc_insertion_point(destructor:ContactLevel1)
  SharedDtor();
}

void ContactLevel1::SharedDtor() {
  if (has_contact_level1_cmd()) {
    clear_contact_level1_cmd();
  }
}

void ContactLevel1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContactLevel1& ContactLevel1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContactLevel1_commands7_2eproto.base);
  return *internal_default_instance();
}


void ContactLevel1::clear_contact_level1_cmd() {
// @@protoc_insertion_point(one_of_clear_start:ContactLevel1)
  switch (contact_level1_cmd_case()) {
    case kPowerOnCard: {
      delete contact_level1_cmd_.power_on_card_;
      break;
    }
    case kPowerOffCard: {
      delete contact_level1_cmd_.power_off_card_;
      break;
    }
    case kTransmitApdu: {
      delete contact_level1_cmd_.transmit_apdu_;
      break;
    }
    case CONTACT_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTACT_LEVEL1_CMD_NOT_SET;
}


void ContactLevel1::Clear() {
// @@protoc_insertion_point(message_clear_start:ContactLevel1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_contact_level1_cmd();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContactLevel1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .contact.power_on.PowerOnCard power_on_card = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_power_on_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contact.power_off.PowerOffCard power_off_card = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_power_off_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contact.iso7816_4.TransmitApdu transmit_apdu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transmit_apdu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContactLevel1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContactLevel1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (contact_level1_cmd_case()) {
    case kPowerOnCard: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::power_on_card(this), target, stream);
      break;
    }
    case kPowerOffCard: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::power_off_card(this), target, stream);
      break;
    }
    case kTransmitApdu: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::transmit_apdu(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContactLevel1)
  return target;
}

size_t ContactLevel1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContactLevel1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (contact_level1_cmd_case()) {
    // optional .contact.power_on.PowerOnCard power_on_card = 1;
    case kPowerOnCard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contact_level1_cmd_.power_on_card_);
      break;
    }
    // optional .contact.power_off.PowerOffCard power_off_card = 2;
    case kPowerOffCard: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contact_level1_cmd_.power_off_card_);
      break;
    }
    // optional .contact.iso7816_4.TransmitApdu transmit_apdu = 3;
    case kTransmitApdu: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contact_level1_cmd_.transmit_apdu_);
      break;
    }
    case CONTACT_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContactLevel1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ContactLevel1)
  GOOGLE_DCHECK_NE(&from, this);
  const ContactLevel1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContactLevel1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ContactLevel1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ContactLevel1)
    MergeFrom(*source);
  }
}

void ContactLevel1::MergeFrom(const ContactLevel1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ContactLevel1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.contact_level1_cmd_case()) {
    case kPowerOnCard: {
      _internal_mutable_power_on_card()->::contact::power_on::PowerOnCard::MergeFrom(from._internal_power_on_card());
      break;
    }
    case kPowerOffCard: {
      _internal_mutable_power_off_card()->::contact::power_off::PowerOffCard::MergeFrom(from._internal_power_off_card());
      break;
    }
    case kTransmitApdu: {
      _internal_mutable_transmit_apdu()->::contact::iso7816_4::TransmitApdu::MergeFrom(from._internal_transmit_apdu());
      break;
    }
    case CONTACT_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
}

void ContactLevel1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ContactLevel1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactLevel1::CopyFrom(const ContactLevel1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContactLevel1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactLevel1::IsInitialized() const {
  switch (contact_level1_cmd_case()) {
    case kPowerOnCard: {
      if (has_power_on_card()) {
        if (!this->power_on_card().IsInitialized()) return false;
      }
      break;
    }
    case kPowerOffCard: {
      if (has_power_off_card()) {
        if (!this->power_off_card().IsInitialized()) return false;
      }
      break;
    }
    case kTransmitApdu: {
      if (has_transmit_apdu()) {
        if (!this->transmit_apdu().IsInitialized()) return false;
      }
      break;
    }
    case CONTACT_LEVEL1_CMD_NOT_SET: {
      break;
    }
  }
  return true;
}

void ContactLevel1::InternalSwap(ContactLevel1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(contact_level1_cmd_, other->contact_level1_cmd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContactLevel1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Service::InitAsDefaultInstance() {
  ::_Service_default_instance_.get_challenge_ = const_cast< ::srv::challenge::GetChallenge*>(
      ::srv::challenge::GetChallenge::internal_default_instance());
  ::_Service_default_instance_.activate_protection_ = const_cast< ::srv::protection::Activate*>(
      ::srv::protection::Activate::internal_default_instance());
  ::_Service_default_instance_.deactivate_protection_ = const_cast< ::srv::protection::Deactivate*>(
      ::srv::protection::Deactivate::internal_default_instance());
  ::_Service_default_instance_.prepare_update_ = const_cast< ::srv::firmware_update::Prepare*>(
      ::srv::firmware_update::Prepare::internal_default_instance());
  ::_Service_default_instance_.update_block_ = const_cast< ::srv::firmware_update::UpdateBlock*>(
      ::srv::firmware_update::UpdateBlock::internal_default_instance());
  ::_Service_default_instance_.apply_update_ = const_cast< ::srv::firmware_update::Apply*>(
      ::srv::firmware_update::Apply::internal_default_instance());
  ::_Service_default_instance_.rollback_update_ = const_cast< ::srv::firmware_update::Rollback*>(
      ::srv::firmware_update::Rollback::internal_default_instance());
  ::_Service_default_instance_.get_diagnostic_ = const_cast< ::srv::diagnostic::GetDiagnostic*>(
      ::srv::diagnostic::GetDiagnostic::internal_default_instance());
  ::_Service_default_instance_.prepare_for_config_ = const_cast< ::srv::upload_config::Prepare*>(
      ::srv::upload_config::Prepare::internal_default_instance());
  ::_Service_default_instance_.upload_block_of_config_ = const_cast< ::srv::upload_config::UploadBlock*>(
      ::srv::upload_config::UploadBlock::internal_default_instance());
  ::_Service_default_instance_.check_configuration_ = const_cast< ::srv::upload_config::CheckConfiguration*>(
      ::srv::upload_config::CheckConfiguration::internal_default_instance());
}
class Service::_Internal {
 public:
  using HasBits = decltype(std::declval<Service>()._has_bits_);
  static const ::srv::challenge::GetChallenge& get_challenge(const Service* msg);
  static const ::srv::protection::Activate& activate_protection(const Service* msg);
  static const ::srv::protection::Deactivate& deactivate_protection(const Service* msg);
  static const ::srv::firmware_update::Prepare& prepare_update(const Service* msg);
  static const ::srv::firmware_update::UpdateBlock& update_block(const Service* msg);
  static const ::srv::firmware_update::Apply& apply_update(const Service* msg);
  static const ::srv::firmware_update::Rollback& rollback_update(const Service* msg);
  static const ::srv::diagnostic::GetDiagnostic& get_diagnostic(const Service* msg);
  static const ::srv::upload_config::Prepare& prepare_for_config(const Service* msg);
  static const ::srv::upload_config::UploadBlock& upload_block_of_config(const Service* msg);
  static const ::srv::upload_config::CheckConfiguration& check_configuration(const Service* msg);
};

const ::srv::challenge::GetChallenge&
Service::_Internal::get_challenge(const Service* msg) {
  return *msg->srv_cmd_.get_challenge_;
}
const ::srv::protection::Activate&
Service::_Internal::activate_protection(const Service* msg) {
  return *msg->srv_cmd_.activate_protection_;
}
const ::srv::protection::Deactivate&
Service::_Internal::deactivate_protection(const Service* msg) {
  return *msg->srv_cmd_.deactivate_protection_;
}
const ::srv::firmware_update::Prepare&
Service::_Internal::prepare_update(const Service* msg) {
  return *msg->srv_cmd_.prepare_update_;
}
const ::srv::firmware_update::UpdateBlock&
Service::_Internal::update_block(const Service* msg) {
  return *msg->srv_cmd_.update_block_;
}
const ::srv::firmware_update::Apply&
Service::_Internal::apply_update(const Service* msg) {
  return *msg->srv_cmd_.apply_update_;
}
const ::srv::firmware_update::Rollback&
Service::_Internal::rollback_update(const Service* msg) {
  return *msg->srv_cmd_.rollback_update_;
}
const ::srv::diagnostic::GetDiagnostic&
Service::_Internal::get_diagnostic(const Service* msg) {
  return *msg->srv_cmd_.get_diagnostic_;
}
const ::srv::upload_config::Prepare&
Service::_Internal::prepare_for_config(const Service* msg) {
  return *msg->srv_cmd_.prepare_for_config_;
}
const ::srv::upload_config::UploadBlock&
Service::_Internal::upload_block_of_config(const Service* msg) {
  return *msg->srv_cmd_.upload_block_of_config_;
}
const ::srv::upload_config::CheckConfiguration&
Service::_Internal::check_configuration(const Service* msg) {
  return *msg->srv_cmd_.check_configuration_;
}
void Service::set_allocated_get_challenge(::srv::challenge::GetChallenge* get_challenge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_srv_cmd();
  if (get_challenge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_challenge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_challenge, submessage_arena);
    }
    set_has_get_challenge();
    srv_cmd_.get_challenge_ = get_challenge;
  }
  // @@protoc_insertion_point(field_set_allocated:Service.get_challenge)
}
void Service::clear_get_challenge() {
  if (_internal_has_get_challenge()) {
    delete srv_cmd_.get_challenge_;
    clear_has_srv_cmd();
  }
}
void Service::set_allocated_activate_protection(::srv::protection::Activate* activate_protection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_srv_cmd();
  if (activate_protection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activate_protection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activate_protection, submessage_arena);
    }
    set_has_activate_protection();
    srv_cmd_.activate_protection_ = activate_protection;
  }
  // @@protoc_insertion_point(field_set_allocated:Service.activate_protection)
}
void Service::clear_activate_protection() {
  if (_internal_has_activate_protection()) {
    delete srv_cmd_.activate_protection_;
    clear_has_srv_cmd();
  }
}
void Service::set_allocated_deactivate_protection(::srv::protection::Deactivate* deactivate_protection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_srv_cmd();
  if (deactivate_protection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deactivate_protection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deactivate_protection, submessage_arena);
    }
    set_has_deactivate_protection();
    srv_cmd_.deactivate_protection_ = deactivate_protection;
  }
  // @@protoc_insertion_point(field_set_allocated:Service.deactivate_protection)
}
void Service::clear_deactivate_protection() {
  if (_internal_has_deactivate_protection()) {
    delete srv_cmd_.deactivate_protection_;
    clear_has_srv_cmd();
  }
}
void Service::set_allocated_prepare_update(::srv::firmware_update::Prepare* prepare_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_srv_cmd();
  if (prepare_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prepare_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prepare_update, submessage_arena);
    }
    set_has_prepare_update();
    srv_cmd_.prepare_update_ = prepare_update;
  }
  // @@protoc_insertion_point(field_set_allocated:Service.prepare_update)
}
void Service::clear_prepare_update() {
  if (_internal_has_prepare_update()) {
    delete srv_cmd_.prepare_update_;
    clear_has_srv_cmd();
  }
}
void Service::set_allocated_update_block(::srv::firmware_update::UpdateBlock* update_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_srv_cmd();
  if (update_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_block, submessage_arena);
    }
    set_has_update_block();
    srv_cmd_.update_block_ = update_block;
  }
  // @@protoc_insertion_point(field_set_allocated:Service.update_block)
}
void Service::clear_update_block() {
  if (_internal_has_update_block()) {
    delete srv_cmd_.update_block_;
    clear_has_srv_cmd();
  }
}
void Service::set_allocated_apply_update(::srv::firmware_update::Apply* apply_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_srv_cmd();
  if (apply_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      apply_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply_update, submessage_arena);
    }
    set_has_apply_update();
    srv_cmd_.apply_update_ = apply_update;
  }
  // @@protoc_insertion_point(field_set_allocated:Service.apply_update)
}
void Service::clear_apply_update() {
  if (_internal_has_apply_update()) {
    delete srv_cmd_.apply_update_;
    clear_has_srv_cmd();
  }
}
void Service::set_allocated_rollback_update(::srv::firmware_update::Rollback* rollback_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_srv_cmd();
  if (rollback_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rollback_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollback_update, submessage_arena);
    }
    set_has_rollback_update();
    srv_cmd_.rollback_update_ = rollback_update;
  }
  // @@protoc_insertion_point(field_set_allocated:Service.rollback_update)
}
void Service::clear_rollback_update() {
  if (_internal_has_rollback_update()) {
    delete srv_cmd_.rollback_update_;
    clear_has_srv_cmd();
  }
}
void Service::set_allocated_get_diagnostic(::srv::diagnostic::GetDiagnostic* get_diagnostic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_srv_cmd();
  if (get_diagnostic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_diagnostic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_diagnostic, submessage_arena);
    }
    set_has_get_diagnostic();
    srv_cmd_.get_diagnostic_ = get_diagnostic;
  }
  // @@protoc_insertion_point(field_set_allocated:Service.get_diagnostic)
}
void Service::clear_get_diagnostic() {
  if (_internal_has_get_diagnostic()) {
    delete srv_cmd_.get_diagnostic_;
    clear_has_srv_cmd();
  }
}
void Service::set_allocated_prepare_for_config(::srv::upload_config::Prepare* prepare_for_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_srv_cmd();
  if (prepare_for_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prepare_for_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prepare_for_config, submessage_arena);
    }
    set_has_prepare_for_config();
    srv_cmd_.prepare_for_config_ = prepare_for_config;
  }
  // @@protoc_insertion_point(field_set_allocated:Service.prepare_for_config)
}
void Service::clear_prepare_for_config() {
  if (_internal_has_prepare_for_config()) {
    delete srv_cmd_.prepare_for_config_;
    clear_has_srv_cmd();
  }
}
void Service::set_allocated_upload_block_of_config(::srv::upload_config::UploadBlock* upload_block_of_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_srv_cmd();
  if (upload_block_of_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      upload_block_of_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upload_block_of_config, submessage_arena);
    }
    set_has_upload_block_of_config();
    srv_cmd_.upload_block_of_config_ = upload_block_of_config;
  }
  // @@protoc_insertion_point(field_set_allocated:Service.upload_block_of_config)
}
void Service::clear_upload_block_of_config() {
  if (_internal_has_upload_block_of_config()) {
    delete srv_cmd_.upload_block_of_config_;
    clear_has_srv_cmd();
  }
}
void Service::set_allocated_check_configuration(::srv::upload_config::CheckConfiguration* check_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_srv_cmd();
  if (check_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      check_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_configuration, submessage_arena);
    }
    set_has_check_configuration();
    srv_cmd_.check_configuration_ = check_configuration;
  }
  // @@protoc_insertion_point(field_set_allocated:Service.check_configuration)
}
void Service::clear_check_configuration() {
  if (_internal_has_check_configuration()) {
    delete srv_cmd_.check_configuration_;
    clear_has_srv_cmd();
  }
}
Service::Service()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Service)
}
Service::Service(const Service& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_srv_cmd();
  switch (from.srv_cmd_case()) {
    case kGetChallenge: {
      _internal_mutable_get_challenge()->::srv::challenge::GetChallenge::MergeFrom(from._internal_get_challenge());
      break;
    }
    case kActivateProtection: {
      _internal_mutable_activate_protection()->::srv::protection::Activate::MergeFrom(from._internal_activate_protection());
      break;
    }
    case kDeactivateProtection: {
      _internal_mutable_deactivate_protection()->::srv::protection::Deactivate::MergeFrom(from._internal_deactivate_protection());
      break;
    }
    case kPrepareUpdate: {
      _internal_mutable_prepare_update()->::srv::firmware_update::Prepare::MergeFrom(from._internal_prepare_update());
      break;
    }
    case kUpdateBlock: {
      _internal_mutable_update_block()->::srv::firmware_update::UpdateBlock::MergeFrom(from._internal_update_block());
      break;
    }
    case kApplyUpdate: {
      _internal_mutable_apply_update()->::srv::firmware_update::Apply::MergeFrom(from._internal_apply_update());
      break;
    }
    case kRollbackUpdate: {
      _internal_mutable_rollback_update()->::srv::firmware_update::Rollback::MergeFrom(from._internal_rollback_update());
      break;
    }
    case kGetDiagnostic: {
      _internal_mutable_get_diagnostic()->::srv::diagnostic::GetDiagnostic::MergeFrom(from._internal_get_diagnostic());
      break;
    }
    case kPrepareForConfig: {
      _internal_mutable_prepare_for_config()->::srv::upload_config::Prepare::MergeFrom(from._internal_prepare_for_config());
      break;
    }
    case kUploadBlockOfConfig: {
      _internal_mutable_upload_block_of_config()->::srv::upload_config::UploadBlock::MergeFrom(from._internal_upload_block_of_config());
      break;
    }
    case kCheckConfiguration: {
      _internal_mutable_check_configuration()->::srv::upload_config::CheckConfiguration::MergeFrom(from._internal_check_configuration());
      break;
    }
    case SRV_CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Service)
}

void Service::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Service_commands7_2eproto.base);
  clear_has_srv_cmd();
}

Service::~Service() {
  // @@protoc_insertion_point(destructor:Service)
  SharedDtor();
}

void Service::SharedDtor() {
  if (has_srv_cmd()) {
    clear_srv_cmd();
  }
}

void Service::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Service& Service::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Service_commands7_2eproto.base);
  return *internal_default_instance();
}


void Service::clear_srv_cmd() {
// @@protoc_insertion_point(one_of_clear_start:Service)
  switch (srv_cmd_case()) {
    case kGetChallenge: {
      delete srv_cmd_.get_challenge_;
      break;
    }
    case kActivateProtection: {
      delete srv_cmd_.activate_protection_;
      break;
    }
    case kDeactivateProtection: {
      delete srv_cmd_.deactivate_protection_;
      break;
    }
    case kPrepareUpdate: {
      delete srv_cmd_.prepare_update_;
      break;
    }
    case kUpdateBlock: {
      delete srv_cmd_.update_block_;
      break;
    }
    case kApplyUpdate: {
      delete srv_cmd_.apply_update_;
      break;
    }
    case kRollbackUpdate: {
      delete srv_cmd_.rollback_update_;
      break;
    }
    case kGetDiagnostic: {
      delete srv_cmd_.get_diagnostic_;
      break;
    }
    case kPrepareForConfig: {
      delete srv_cmd_.prepare_for_config_;
      break;
    }
    case kUploadBlockOfConfig: {
      delete srv_cmd_.upload_block_of_config_;
      break;
    }
    case kCheckConfiguration: {
      delete srv_cmd_.check_configuration_;
      break;
    }
    case SRV_CMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SRV_CMD_NOT_SET;
}


void Service::Clear() {
// @@protoc_insertion_point(message_clear_start:Service)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_srv_cmd();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Service::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .srv.challenge.GetChallenge get_challenge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_challenge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .srv.protection.Activate activate_protection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_activate_protection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .srv.protection.Deactivate deactivate_protection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deactivate_protection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .srv.firmware_update.Prepare prepare_update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_prepare_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .srv.firmware_update.UpdateBlock update_block = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .srv.firmware_update.Apply apply_update = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .srv.firmware_update.Rollback rollback_update = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .srv.diagnostic.GetDiagnostic get_diagnostic = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_diagnostic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .srv.upload_config.Prepare prepare_for_config = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_prepare_for_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .srv.upload_config.UploadBlock upload_block_of_config = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_upload_block_of_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .srv.upload_config.CheckConfiguration check_configuration = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Service::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Service)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (srv_cmd_case()) {
    case kGetChallenge: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::get_challenge(this), target, stream);
      break;
    }
    case kActivateProtection: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::activate_protection(this), target, stream);
      break;
    }
    case kDeactivateProtection: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::deactivate_protection(this), target, stream);
      break;
    }
    case kPrepareUpdate: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::prepare_update(this), target, stream);
      break;
    }
    case kUpdateBlock: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::update_block(this), target, stream);
      break;
    }
    case kApplyUpdate: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::apply_update(this), target, stream);
      break;
    }
    case kRollbackUpdate: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::rollback_update(this), target, stream);
      break;
    }
    case kGetDiagnostic: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::get_diagnostic(this), target, stream);
      break;
    }
    case kPrepareForConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::prepare_for_config(this), target, stream);
      break;
    }
    case kUploadBlockOfConfig: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::upload_block_of_config(this), target, stream);
      break;
    }
    case kCheckConfiguration: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          11, _Internal::check_configuration(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Service)
  return target;
}

size_t Service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Service)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (srv_cmd_case()) {
    // optional .srv.challenge.GetChallenge get_challenge = 1;
    case kGetChallenge: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *srv_cmd_.get_challenge_);
      break;
    }
    // optional .srv.protection.Activate activate_protection = 2;
    case kActivateProtection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *srv_cmd_.activate_protection_);
      break;
    }
    // optional .srv.protection.Deactivate deactivate_protection = 3;
    case kDeactivateProtection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *srv_cmd_.deactivate_protection_);
      break;
    }
    // optional .srv.firmware_update.Prepare prepare_update = 4;
    case kPrepareUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *srv_cmd_.prepare_update_);
      break;
    }
    // optional .srv.firmware_update.UpdateBlock update_block = 5;
    case kUpdateBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *srv_cmd_.update_block_);
      break;
    }
    // optional .srv.firmware_update.Apply apply_update = 6;
    case kApplyUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *srv_cmd_.apply_update_);
      break;
    }
    // optional .srv.firmware_update.Rollback rollback_update = 7;
    case kRollbackUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *srv_cmd_.rollback_update_);
      break;
    }
    // optional .srv.diagnostic.GetDiagnostic get_diagnostic = 8;
    case kGetDiagnostic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *srv_cmd_.get_diagnostic_);
      break;
    }
    // optional .srv.upload_config.Prepare prepare_for_config = 9;
    case kPrepareForConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *srv_cmd_.prepare_for_config_);
      break;
    }
    // optional .srv.upload_config.UploadBlock upload_block_of_config = 10;
    case kUploadBlockOfConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *srv_cmd_.upload_block_of_config_);
      break;
    }
    // optional .srv.upload_config.CheckConfiguration check_configuration = 11;
    case kCheckConfiguration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *srv_cmd_.check_configuration_);
      break;
    }
    case SRV_CMD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Service::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Service)
  GOOGLE_DCHECK_NE(&from, this);
  const Service* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Service>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Service)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Service)
    MergeFrom(*source);
  }
}

void Service::MergeFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Service)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.srv_cmd_case()) {
    case kGetChallenge: {
      _internal_mutable_get_challenge()->::srv::challenge::GetChallenge::MergeFrom(from._internal_get_challenge());
      break;
    }
    case kActivateProtection: {
      _internal_mutable_activate_protection()->::srv::protection::Activate::MergeFrom(from._internal_activate_protection());
      break;
    }
    case kDeactivateProtection: {
      _internal_mutable_deactivate_protection()->::srv::protection::Deactivate::MergeFrom(from._internal_deactivate_protection());
      break;
    }
    case kPrepareUpdate: {
      _internal_mutable_prepare_update()->::srv::firmware_update::Prepare::MergeFrom(from._internal_prepare_update());
      break;
    }
    case kUpdateBlock: {
      _internal_mutable_update_block()->::srv::firmware_update::UpdateBlock::MergeFrom(from._internal_update_block());
      break;
    }
    case kApplyUpdate: {
      _internal_mutable_apply_update()->::srv::firmware_update::Apply::MergeFrom(from._internal_apply_update());
      break;
    }
    case kRollbackUpdate: {
      _internal_mutable_rollback_update()->::srv::firmware_update::Rollback::MergeFrom(from._internal_rollback_update());
      break;
    }
    case kGetDiagnostic: {
      _internal_mutable_get_diagnostic()->::srv::diagnostic::GetDiagnostic::MergeFrom(from._internal_get_diagnostic());
      break;
    }
    case kPrepareForConfig: {
      _internal_mutable_prepare_for_config()->::srv::upload_config::Prepare::MergeFrom(from._internal_prepare_for_config());
      break;
    }
    case kUploadBlockOfConfig: {
      _internal_mutable_upload_block_of_config()->::srv::upload_config::UploadBlock::MergeFrom(from._internal_upload_block_of_config());
      break;
    }
    case kCheckConfiguration: {
      _internal_mutable_check_configuration()->::srv::upload_config::CheckConfiguration::MergeFrom(from._internal_check_configuration());
      break;
    }
    case SRV_CMD_NOT_SET: {
      break;
    }
  }
}

void Service::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Service::CopyFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service::IsInitialized() const {
  switch (srv_cmd_case()) {
    case kGetChallenge: {
      if (has_get_challenge()) {
        if (!this->get_challenge().IsInitialized()) return false;
      }
      break;
    }
    case kActivateProtection: {
      if (has_activate_protection()) {
        if (!this->activate_protection().IsInitialized()) return false;
      }
      break;
    }
    case kDeactivateProtection: {
      break;
    }
    case kPrepareUpdate: {
      break;
    }
    case kUpdateBlock: {
      if (has_update_block()) {
        if (!this->update_block().IsInitialized()) return false;
      }
      break;
    }
    case kApplyUpdate: {
      break;
    }
    case kRollbackUpdate: {
      break;
    }
    case kGetDiagnostic: {
      break;
    }
    case kPrepareForConfig: {
      if (has_prepare_for_config()) {
        if (!this->prepare_for_config().IsInitialized()) return false;
      }
      break;
    }
    case kUploadBlockOfConfig: {
      if (has_upload_block_of_config()) {
        if (!this->upload_block_of_config().IsInitialized()) return false;
      }
      break;
    }
    case kCheckConfiguration: {
      break;
    }
    case SRV_CMD_NOT_SET: {
      break;
    }
  }
  return true;
}

void Service::InternalSwap(Service* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(srv_cmd_, other->srv_cmd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Service::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Gui::InitAsDefaultInstance() {
  ::_Gui_default_instance_.show_screen_ = const_cast< ::gui::screen::ShowScreen*>(
      ::gui::screen::ShowScreen::internal_default_instance());
  ::_Gui_default_instance_.input_dialog_ = const_cast< ::gui::input_dialog::InputDialog*>(
      ::gui::input_dialog::InputDialog::internal_default_instance());
  ::_Gui_default_instance_.menu_dialog_ = const_cast< ::gui::menu_dialog::MenuDialog*>(
      ::gui::menu_dialog::MenuDialog::internal_default_instance());
  ::_Gui_default_instance_.draw_bitmap_ = const_cast< ::gui::draw_bitmap::DrawBitmap*>(
      ::gui::draw_bitmap::DrawBitmap::internal_default_instance());
  ::_Gui_default_instance_.slideshow_ = const_cast< ::gui::slideshow::Slideshow*>(
      ::gui::slideshow::Slideshow::internal_default_instance());
}
class Gui::_Internal {
 public:
  using HasBits = decltype(std::declval<Gui>()._has_bits_);
  static const ::gui::screen::ShowScreen& show_screen(const Gui* msg);
  static const ::gui::input_dialog::InputDialog& input_dialog(const Gui* msg);
  static const ::gui::menu_dialog::MenuDialog& menu_dialog(const Gui* msg);
  static const ::gui::draw_bitmap::DrawBitmap& draw_bitmap(const Gui* msg);
  static const ::gui::slideshow::Slideshow& slideshow(const Gui* msg);
};

const ::gui::screen::ShowScreen&
Gui::_Internal::show_screen(const Gui* msg) {
  return *msg->gui_cmd_.show_screen_;
}
const ::gui::input_dialog::InputDialog&
Gui::_Internal::input_dialog(const Gui* msg) {
  return *msg->gui_cmd_.input_dialog_;
}
const ::gui::menu_dialog::MenuDialog&
Gui::_Internal::menu_dialog(const Gui* msg) {
  return *msg->gui_cmd_.menu_dialog_;
}
const ::gui::draw_bitmap::DrawBitmap&
Gui::_Internal::draw_bitmap(const Gui* msg) {
  return *msg->gui_cmd_.draw_bitmap_;
}
const ::gui::slideshow::Slideshow&
Gui::_Internal::slideshow(const Gui* msg) {
  return *msg->gui_cmd_.slideshow_;
}
void Gui::set_allocated_show_screen(::gui::screen::ShowScreen* show_screen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_gui_cmd();
  if (show_screen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_screen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_screen, submessage_arena);
    }
    set_has_show_screen();
    gui_cmd_.show_screen_ = show_screen;
  }
  // @@protoc_insertion_point(field_set_allocated:Gui.show_screen)
}
void Gui::clear_show_screen() {
  if (_internal_has_show_screen()) {
    delete gui_cmd_.show_screen_;
    clear_has_gui_cmd();
  }
}
void Gui::set_allocated_input_dialog(::gui::input_dialog::InputDialog* input_dialog) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_gui_cmd();
  if (input_dialog) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_dialog = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_dialog, submessage_arena);
    }
    set_has_input_dialog();
    gui_cmd_.input_dialog_ = input_dialog;
  }
  // @@protoc_insertion_point(field_set_allocated:Gui.input_dialog)
}
void Gui::clear_input_dialog() {
  if (_internal_has_input_dialog()) {
    delete gui_cmd_.input_dialog_;
    clear_has_gui_cmd();
  }
}
void Gui::set_allocated_menu_dialog(::gui::menu_dialog::MenuDialog* menu_dialog) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_gui_cmd();
  if (menu_dialog) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      menu_dialog = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, menu_dialog, submessage_arena);
    }
    set_has_menu_dialog();
    gui_cmd_.menu_dialog_ = menu_dialog;
  }
  // @@protoc_insertion_point(field_set_allocated:Gui.menu_dialog)
}
void Gui::clear_menu_dialog() {
  if (_internal_has_menu_dialog()) {
    delete gui_cmd_.menu_dialog_;
    clear_has_gui_cmd();
  }
}
void Gui::set_allocated_draw_bitmap(::gui::draw_bitmap::DrawBitmap* draw_bitmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_gui_cmd();
  if (draw_bitmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      draw_bitmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, draw_bitmap, submessage_arena);
    }
    set_has_draw_bitmap();
    gui_cmd_.draw_bitmap_ = draw_bitmap;
  }
  // @@protoc_insertion_point(field_set_allocated:Gui.draw_bitmap)
}
void Gui::clear_draw_bitmap() {
  if (_internal_has_draw_bitmap()) {
    delete gui_cmd_.draw_bitmap_;
    clear_has_gui_cmd();
  }
}
void Gui::set_allocated_slideshow(::gui::slideshow::Slideshow* slideshow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_gui_cmd();
  if (slideshow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      slideshow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slideshow, submessage_arena);
    }
    set_has_slideshow();
    gui_cmd_.slideshow_ = slideshow;
  }
  // @@protoc_insertion_point(field_set_allocated:Gui.slideshow)
}
void Gui::clear_slideshow() {
  if (_internal_has_slideshow()) {
    delete gui_cmd_.slideshow_;
    clear_has_gui_cmd();
  }
}
Gui::Gui()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gui)
}
Gui::Gui(const Gui& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_gui_cmd();
  switch (from.gui_cmd_case()) {
    case kShowScreen: {
      _internal_mutable_show_screen()->::gui::screen::ShowScreen::MergeFrom(from._internal_show_screen());
      break;
    }
    case kInputDialog: {
      _internal_mutable_input_dialog()->::gui::input_dialog::InputDialog::MergeFrom(from._internal_input_dialog());
      break;
    }
    case kMenuDialog: {
      _internal_mutable_menu_dialog()->::gui::menu_dialog::MenuDialog::MergeFrom(from._internal_menu_dialog());
      break;
    }
    case kDrawBitmap: {
      _internal_mutable_draw_bitmap()->::gui::draw_bitmap::DrawBitmap::MergeFrom(from._internal_draw_bitmap());
      break;
    }
    case kSlideshow: {
      _internal_mutable_slideshow()->::gui::slideshow::Slideshow::MergeFrom(from._internal_slideshow());
      break;
    }
    case GUI_CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Gui)
}

void Gui::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Gui_commands7_2eproto.base);
  clear_has_gui_cmd();
}

Gui::~Gui() {
  // @@protoc_insertion_point(destructor:Gui)
  SharedDtor();
}

void Gui::SharedDtor() {
  if (has_gui_cmd()) {
    clear_gui_cmd();
  }
}

void Gui::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gui& Gui::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gui_commands7_2eproto.base);
  return *internal_default_instance();
}


void Gui::clear_gui_cmd() {
// @@protoc_insertion_point(one_of_clear_start:Gui)
  switch (gui_cmd_case()) {
    case kShowScreen: {
      delete gui_cmd_.show_screen_;
      break;
    }
    case kInputDialog: {
      delete gui_cmd_.input_dialog_;
      break;
    }
    case kMenuDialog: {
      delete gui_cmd_.menu_dialog_;
      break;
    }
    case kDrawBitmap: {
      delete gui_cmd_.draw_bitmap_;
      break;
    }
    case kSlideshow: {
      delete gui_cmd_.slideshow_;
      break;
    }
    case GUI_CMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GUI_CMD_NOT_SET;
}


void Gui::Clear() {
// @@protoc_insertion_point(message_clear_start:Gui)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_gui_cmd();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Gui::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .gui.screen.ShowScreen show_screen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_show_screen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.input_dialog.InputDialog input_dialog = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input_dialog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.menu_dialog.MenuDialog menu_dialog = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_menu_dialog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.draw_bitmap.DrawBitmap draw_bitmap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_draw_bitmap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gui.slideshow.Slideshow slideshow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_slideshow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gui::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Gui)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (gui_cmd_case()) {
    case kShowScreen: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::show_screen(this), target, stream);
      break;
    }
    case kInputDialog: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::input_dialog(this), target, stream);
      break;
    }
    case kMenuDialog: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::menu_dialog(this), target, stream);
      break;
    }
    case kDrawBitmap: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::draw_bitmap(this), target, stream);
      break;
    }
    case kSlideshow: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::slideshow(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gui)
  return target;
}

size_t Gui::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gui)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (gui_cmd_case()) {
    // optional .gui.screen.ShowScreen show_screen = 1;
    case kShowScreen: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gui_cmd_.show_screen_);
      break;
    }
    // optional .gui.input_dialog.InputDialog input_dialog = 2;
    case kInputDialog: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gui_cmd_.input_dialog_);
      break;
    }
    // optional .gui.menu_dialog.MenuDialog menu_dialog = 3;
    case kMenuDialog: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gui_cmd_.menu_dialog_);
      break;
    }
    // optional .gui.draw_bitmap.DrawBitmap draw_bitmap = 4;
    case kDrawBitmap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gui_cmd_.draw_bitmap_);
      break;
    }
    // optional .gui.slideshow.Slideshow slideshow = 5;
    case kSlideshow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gui_cmd_.slideshow_);
      break;
    }
    case GUI_CMD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gui::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gui)
  GOOGLE_DCHECK_NE(&from, this);
  const Gui* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gui>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gui)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gui)
    MergeFrom(*source);
  }
}

void Gui::MergeFrom(const Gui& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gui)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.gui_cmd_case()) {
    case kShowScreen: {
      _internal_mutable_show_screen()->::gui::screen::ShowScreen::MergeFrom(from._internal_show_screen());
      break;
    }
    case kInputDialog: {
      _internal_mutable_input_dialog()->::gui::input_dialog::InputDialog::MergeFrom(from._internal_input_dialog());
      break;
    }
    case kMenuDialog: {
      _internal_mutable_menu_dialog()->::gui::menu_dialog::MenuDialog::MergeFrom(from._internal_menu_dialog());
      break;
    }
    case kDrawBitmap: {
      _internal_mutable_draw_bitmap()->::gui::draw_bitmap::DrawBitmap::MergeFrom(from._internal_draw_bitmap());
      break;
    }
    case kSlideshow: {
      _internal_mutable_slideshow()->::gui::slideshow::Slideshow::MergeFrom(from._internal_slideshow());
      break;
    }
    case GUI_CMD_NOT_SET: {
      break;
    }
  }
}

void Gui::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gui)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gui::CopyFrom(const Gui& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gui)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gui::IsInitialized() const {
  switch (gui_cmd_case()) {
    case kShowScreen: {
      if (has_show_screen()) {
        if (!this->show_screen().IsInitialized()) return false;
      }
      break;
    }
    case kInputDialog: {
      if (has_input_dialog()) {
        if (!this->input_dialog().IsInitialized()) return false;
      }
      break;
    }
    case kMenuDialog: {
      if (has_menu_dialog()) {
        if (!this->menu_dialog().IsInitialized()) return false;
      }
      break;
    }
    case kDrawBitmap: {
      if (has_draw_bitmap()) {
        if (!this->draw_bitmap().IsInitialized()) return false;
      }
      break;
    }
    case kSlideshow: {
      if (has_slideshow()) {
        if (!this->slideshow().IsInitialized()) return false;
      }
      break;
    }
    case GUI_CMD_NOT_SET: {
      break;
    }
  }
  return true;
}

void Gui::InternalSwap(Gui* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gui_cmd_, other->gui_cmd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gui::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MifareExtended::InitAsDefaultInstance() {
  ::_MifareExtended_default_instance_.mfr_classic_read_sectors_ = const_cast< ::mifare::classic::sector::read::ReadSectors*>(
      ::mifare::classic::sector::read::ReadSectors::internal_default_instance());
  ::_MifareExtended_default_instance_.mfr_classic_write_sectors_ = const_cast< ::mifare::classic::sector::write::WriteSectors*>(
      ::mifare::classic::sector::write::WriteSectors::internal_default_instance());
  ::_MifareExtended_default_instance_.mfr_get_version_ = const_cast< ::mifare::generic::get_version::GetVersion*>(
      ::mifare::generic::get_version::GetVersion::internal_default_instance());
}
class MifareExtended::_Internal {
 public:
  using HasBits = decltype(std::declval<MifareExtended>()._has_bits_);
  static const ::mifare::classic::sector::read::ReadSectors& mfr_classic_read_sectors(const MifareExtended* msg);
  static const ::mifare::classic::sector::write::WriteSectors& mfr_classic_write_sectors(const MifareExtended* msg);
  static const ::mifare::generic::get_version::GetVersion& mfr_get_version(const MifareExtended* msg);
};

const ::mifare::classic::sector::read::ReadSectors&
MifareExtended::_Internal::mfr_classic_read_sectors(const MifareExtended* msg) {
  return *msg->mifare_cmd_.mfr_classic_read_sectors_;
}
const ::mifare::classic::sector::write::WriteSectors&
MifareExtended::_Internal::mfr_classic_write_sectors(const MifareExtended* msg) {
  return *msg->mifare_cmd_.mfr_classic_write_sectors_;
}
const ::mifare::generic::get_version::GetVersion&
MifareExtended::_Internal::mfr_get_version(const MifareExtended* msg) {
  return *msg->mifare_cmd_.mfr_get_version_;
}
void MifareExtended::set_allocated_mfr_classic_read_sectors(::mifare::classic::sector::read::ReadSectors* mfr_classic_read_sectors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_classic_read_sectors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_classic_read_sectors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_classic_read_sectors, submessage_arena);
    }
    set_has_mfr_classic_read_sectors();
    mifare_cmd_.mfr_classic_read_sectors_ = mfr_classic_read_sectors;
  }
  // @@protoc_insertion_point(field_set_allocated:MifareExtended.mfr_classic_read_sectors)
}
void MifareExtended::clear_mfr_classic_read_sectors() {
  if (_internal_has_mfr_classic_read_sectors()) {
    delete mifare_cmd_.mfr_classic_read_sectors_;
    clear_has_mifare_cmd();
  }
}
void MifareExtended::set_allocated_mfr_classic_write_sectors(::mifare::classic::sector::write::WriteSectors* mfr_classic_write_sectors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_classic_write_sectors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_classic_write_sectors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_classic_write_sectors, submessage_arena);
    }
    set_has_mfr_classic_write_sectors();
    mifare_cmd_.mfr_classic_write_sectors_ = mfr_classic_write_sectors;
  }
  // @@protoc_insertion_point(field_set_allocated:MifareExtended.mfr_classic_write_sectors)
}
void MifareExtended::clear_mfr_classic_write_sectors() {
  if (_internal_has_mfr_classic_write_sectors()) {
    delete mifare_cmd_.mfr_classic_write_sectors_;
    clear_has_mifare_cmd();
  }
}
void MifareExtended::set_allocated_mfr_get_version(::mifare::generic::get_version::GetVersion* mfr_get_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_mifare_cmd();
  if (mfr_get_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mfr_get_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mfr_get_version, submessage_arena);
    }
    set_has_mfr_get_version();
    mifare_cmd_.mfr_get_version_ = mfr_get_version;
  }
  // @@protoc_insertion_point(field_set_allocated:MifareExtended.mfr_get_version)
}
void MifareExtended::clear_mfr_get_version() {
  if (_internal_has_mfr_get_version()) {
    delete mifare_cmd_.mfr_get_version_;
    clear_has_mifare_cmd();
  }
}
MifareExtended::MifareExtended()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MifareExtended)
}
MifareExtended::MifareExtended(const MifareExtended& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_mifare_cmd();
  switch (from.mifare_cmd_case()) {
    case kMfrClassicReadSectors: {
      _internal_mutable_mfr_classic_read_sectors()->::mifare::classic::sector::read::ReadSectors::MergeFrom(from._internal_mfr_classic_read_sectors());
      break;
    }
    case kMfrClassicWriteSectors: {
      _internal_mutable_mfr_classic_write_sectors()->::mifare::classic::sector::write::WriteSectors::MergeFrom(from._internal_mfr_classic_write_sectors());
      break;
    }
    case kMfrGetVersion: {
      _internal_mutable_mfr_get_version()->::mifare::generic::get_version::GetVersion::MergeFrom(from._internal_mfr_get_version());
      break;
    }
    case MIFARE_CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:MifareExtended)
}

void MifareExtended::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MifareExtended_commands7_2eproto.base);
  clear_has_mifare_cmd();
}

MifareExtended::~MifareExtended() {
  // @@protoc_insertion_point(destructor:MifareExtended)
  SharedDtor();
}

void MifareExtended::SharedDtor() {
  if (has_mifare_cmd()) {
    clear_mifare_cmd();
  }
}

void MifareExtended::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MifareExtended& MifareExtended::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MifareExtended_commands7_2eproto.base);
  return *internal_default_instance();
}


void MifareExtended::clear_mifare_cmd() {
// @@protoc_insertion_point(one_of_clear_start:MifareExtended)
  switch (mifare_cmd_case()) {
    case kMfrClassicReadSectors: {
      delete mifare_cmd_.mfr_classic_read_sectors_;
      break;
    }
    case kMfrClassicWriteSectors: {
      delete mifare_cmd_.mfr_classic_write_sectors_;
      break;
    }
    case kMfrGetVersion: {
      delete mifare_cmd_.mfr_get_version_;
      break;
    }
    case MIFARE_CMD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MIFARE_CMD_NOT_SET;
}


void MifareExtended::Clear() {
// @@protoc_insertion_point(message_clear_start:MifareExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_mifare_cmd();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MifareExtended::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mifare.classic.sector.read.ReadSectors mfr_classic_read_sectors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_classic_read_sectors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.classic.sector.write.WriteSectors mfr_classic_write_sectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_classic_write_sectors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mifare.generic.get_version.GetVersion mfr_get_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mfr_get_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MifareExtended::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MifareExtended)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (mifare_cmd_case()) {
    case kMfrClassicReadSectors: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::mfr_classic_read_sectors(this), target, stream);
      break;
    }
    case kMfrClassicWriteSectors: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::mfr_classic_write_sectors(this), target, stream);
      break;
    }
    case kMfrGetVersion: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::mfr_get_version(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MifareExtended)
  return target;
}

size_t MifareExtended::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MifareExtended)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (mifare_cmd_case()) {
    // optional .mifare.classic.sector.read.ReadSectors mfr_classic_read_sectors = 1;
    case kMfrClassicReadSectors: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_classic_read_sectors_);
      break;
    }
    // optional .mifare.classic.sector.write.WriteSectors mfr_classic_write_sectors = 2;
    case kMfrClassicWriteSectors: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_classic_write_sectors_);
      break;
    }
    // optional .mifare.generic.get_version.GetVersion mfr_get_version = 3;
    case kMfrGetVersion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mifare_cmd_.mfr_get_version_);
      break;
    }
    case MIFARE_CMD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MifareExtended::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MifareExtended)
  GOOGLE_DCHECK_NE(&from, this);
  const MifareExtended* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MifareExtended>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MifareExtended)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MifareExtended)
    MergeFrom(*source);
  }
}

void MifareExtended::MergeFrom(const MifareExtended& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MifareExtended)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.mifare_cmd_case()) {
    case kMfrClassicReadSectors: {
      _internal_mutable_mfr_classic_read_sectors()->::mifare::classic::sector::read::ReadSectors::MergeFrom(from._internal_mfr_classic_read_sectors());
      break;
    }
    case kMfrClassicWriteSectors: {
      _internal_mutable_mfr_classic_write_sectors()->::mifare::classic::sector::write::WriteSectors::MergeFrom(from._internal_mfr_classic_write_sectors());
      break;
    }
    case kMfrGetVersion: {
      _internal_mutable_mfr_get_version()->::mifare::generic::get_version::GetVersion::MergeFrom(from._internal_mfr_get_version());
      break;
    }
    case MIFARE_CMD_NOT_SET: {
      break;
    }
  }
}

void MifareExtended::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MifareExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MifareExtended::CopyFrom(const MifareExtended& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MifareExtended)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MifareExtended::IsInitialized() const {
  switch (mifare_cmd_case()) {
    case kMfrClassicReadSectors: {
      if (has_mfr_classic_read_sectors()) {
        if (!this->mfr_classic_read_sectors().IsInitialized()) return false;
      }
      break;
    }
    case kMfrClassicWriteSectors: {
      if (has_mfr_classic_write_sectors()) {
        if (!this->mfr_classic_write_sectors().IsInitialized()) return false;
      }
      break;
    }
    case kMfrGetVersion: {
      break;
    }
    case MIFARE_CMD_NOT_SET: {
      break;
    }
  }
  return true;
}

void MifareExtended::InternalSwap(MifareExtended* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mifare_cmd_, other->mifare_cmd_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MifareExtended::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Miscellaneous* Arena::CreateMaybeMessage< ::Miscellaneous >(Arena* arena) {
  return Arena::CreateInternal< ::Miscellaneous >(arena);
}
template<> PROTOBUF_NOINLINE ::ContactlessLevel1* Arena::CreateMaybeMessage< ::ContactlessLevel1 >(Arena* arena) {
  return Arena::CreateInternal< ::ContactlessLevel1 >(arena);
}
template<> PROTOBUF_NOINLINE ::ContactlessLevel2* Arena::CreateMaybeMessage< ::ContactlessLevel2 >(Arena* arena) {
  return Arena::CreateInternal< ::ContactlessLevel2 >(arena);
}
template<> PROTOBUF_NOINLINE ::Mifare* Arena::CreateMaybeMessage< ::Mifare >(Arena* arena) {
  return Arena::CreateInternal< ::Mifare >(arena);
}
template<> PROTOBUF_NOINLINE ::ContactLevel1* Arena::CreateMaybeMessage< ::ContactLevel1 >(Arena* arena) {
  return Arena::CreateInternal< ::ContactLevel1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Service* Arena::CreateMaybeMessage< ::Service >(Arena* arena) {
  return Arena::CreateInternal< ::Service >(arena);
}
template<> PROTOBUF_NOINLINE ::Gui* Arena::CreateMaybeMessage< ::Gui >(Arena* arena) {
  return Arena::CreateInternal< ::Gui >(arena);
}
template<> PROTOBUF_NOINLINE ::MifareExtended* Arena::CreateMaybeMessage< ::MifareExtended >(Arena* arena) {
  return Arena::CreateInternal< ::MifareExtended >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
