// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contactless/transaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_contactless_2ftransaction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_contactless_2ftransaction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "contactless/poll_for_token.pb.h"
#include "contactless/token.pb.h"
#include "contactless/emv_tag.pb.h"
#include "contactless/token_carrier_type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_contactless_2ftransaction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_contactless_2ftransaction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contactless_2ftransaction_2eproto;
namespace contactless {
namespace transaction {
class PerformTransaction;
class PerformTransactionDefaultTypeInternal;
extern PerformTransactionDefaultTypeInternal _PerformTransaction_default_instance_;
class SensitiveData;
class SensitiveDataDefaultTypeInternal;
extern SensitiveDataDefaultTypeInternal _SensitiveData_default_instance_;
class TransactionResult;
class TransactionResultDefaultTypeInternal;
extern TransactionResultDefaultTypeInternal _TransactionResult_default_instance_;
}  // namespace transaction
}  // namespace contactless
PROTOBUF_NAMESPACE_OPEN
template<> ::contactless::transaction::PerformTransaction* Arena::CreateMaybeMessage<::contactless::transaction::PerformTransaction>(Arena*);
template<> ::contactless::transaction::SensitiveData* Arena::CreateMaybeMessage<::contactless::transaction::SensitiveData>(Arena*);
template<> ::contactless::transaction::TransactionResult* Arena::CreateMaybeMessage<::contactless::transaction::TransactionResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace contactless {
namespace transaction {

enum TransactionStatus : int {
  ONLINE_AUTHORIZATION_REQUIRED = 0,
  OFFLINE_APPROVED = 1,
  OFFLINE_DECLINED = 2,
  USE_CONTACT_INTERFACE = 3,
  UNABLE_PERFORM_TRANSACTION = 4,
  NON_EMV_CARD = 5,
  CARD_EXPIRED = 6,
  AUTHORIZATION_ON_CARDHOLDER_DEVICE_REQUIRED = 7
};
bool TransactionStatus_IsValid(int value);
constexpr TransactionStatus TransactionStatus_MIN = ONLINE_AUTHORIZATION_REQUIRED;
constexpr TransactionStatus TransactionStatus_MAX = AUTHORIZATION_ON_CARDHOLDER_DEVICE_REQUIRED;
constexpr int TransactionStatus_ARRAYSIZE = TransactionStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionStatus_descriptor();
template<typename T>
inline const std::string& TransactionStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransactionStatus_descriptor(), enum_t_value);
}
inline bool TransactionStatus_Parse(
    const std::string& name, TransactionStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransactionStatus>(
    TransactionStatus_descriptor(), name, value);
}
// ===================================================================

class PerformTransaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contactless.transaction.PerformTransaction) */ {
 public:
  PerformTransaction();
  virtual ~PerformTransaction();

  PerformTransaction(const PerformTransaction& from);
  PerformTransaction(PerformTransaction&& from) noexcept
    : PerformTransaction() {
    *this = ::std::move(from);
  }

  inline PerformTransaction& operator=(const PerformTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerformTransaction& operator=(PerformTransaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PerformTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerformTransaction* internal_default_instance() {
    return reinterpret_cast<const PerformTransaction*>(
               &_PerformTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerformTransaction& a, PerformTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(PerformTransaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerformTransaction* New() const final {
    return CreateMaybeMessage<PerformTransaction>(nullptr);
  }

  PerformTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerformTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PerformTransaction& from);
  void MergeFrom(const PerformTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerformTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contactless.transaction.PerformTransaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contactless_2ftransaction_2eproto);
    return ::descriptor_table_contactless_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionDateFieldNumber = 3,
    kTransactionTypeFieldNumber = 4,
    kTerminalCountryCodeFieldNumber = 5,
    kTransactionTimeFieldNumber = 6,
    kTransactionCurrencyCodeFieldNumber = 7,
    kMerchantNameAndLocationFieldNumber = 16,
    kMerchantCategoryCodeFieldNumber = 17,
    kTerminalIdentificationFieldNumber = 18,
    kPollForTokenFieldNumber = 1,
    kAmountAuthorizedFieldNumber = 2,
    kMastercardAmountFieldNumber = 8,
    kMaestroAmountFieldNumber = 9,
    kMirAmountFieldNumber = 10,
    kTroikaAmountFieldNumber = 11,
    kUnionpayAmountFieldNumber = 12,
    kDebugFieldNumber = 19,
  };
  // required bytes transaction_date = 3;
  bool has_transaction_date() const;
  private:
  bool _internal_has_transaction_date() const;
  public:
  void clear_transaction_date();
  const std::string& transaction_date() const;
  void set_transaction_date(const std::string& value);
  void set_transaction_date(std::string&& value);
  void set_transaction_date(const char* value);
  void set_transaction_date(const void* value, size_t size);
  std::string* mutable_transaction_date();
  std::string* release_transaction_date();
  void set_allocated_transaction_date(std::string* transaction_date);
  private:
  const std::string& _internal_transaction_date() const;
  void _internal_set_transaction_date(const std::string& value);
  std::string* _internal_mutable_transaction_date();
  public:

  // required bytes transaction_type = 4;
  bool has_transaction_type() const;
  private:
  bool _internal_has_transaction_type() const;
  public:
  void clear_transaction_type();
  const std::string& transaction_type() const;
  void set_transaction_type(const std::string& value);
  void set_transaction_type(std::string&& value);
  void set_transaction_type(const char* value);
  void set_transaction_type(const void* value, size_t size);
  std::string* mutable_transaction_type();
  std::string* release_transaction_type();
  void set_allocated_transaction_type(std::string* transaction_type);
  private:
  const std::string& _internal_transaction_type() const;
  void _internal_set_transaction_type(const std::string& value);
  std::string* _internal_mutable_transaction_type();
  public:

  // required bytes terminal_country_code = 5;
  bool has_terminal_country_code() const;
  private:
  bool _internal_has_terminal_country_code() const;
  public:
  void clear_terminal_country_code();
  const std::string& terminal_country_code() const;
  void set_terminal_country_code(const std::string& value);
  void set_terminal_country_code(std::string&& value);
  void set_terminal_country_code(const char* value);
  void set_terminal_country_code(const void* value, size_t size);
  std::string* mutable_terminal_country_code();
  std::string* release_terminal_country_code();
  void set_allocated_terminal_country_code(std::string* terminal_country_code);
  private:
  const std::string& _internal_terminal_country_code() const;
  void _internal_set_terminal_country_code(const std::string& value);
  std::string* _internal_mutable_terminal_country_code();
  public:

  // required bytes transaction_time = 6;
  bool has_transaction_time() const;
  private:
  bool _internal_has_transaction_time() const;
  public:
  void clear_transaction_time();
  const std::string& transaction_time() const;
  void set_transaction_time(const std::string& value);
  void set_transaction_time(std::string&& value);
  void set_transaction_time(const char* value);
  void set_transaction_time(const void* value, size_t size);
  std::string* mutable_transaction_time();
  std::string* release_transaction_time();
  void set_allocated_transaction_time(std::string* transaction_time);
  private:
  const std::string& _internal_transaction_time() const;
  void _internal_set_transaction_time(const std::string& value);
  std::string* _internal_mutable_transaction_time();
  public:

  // required bytes transaction_currency_code = 7;
  bool has_transaction_currency_code() const;
  private:
  bool _internal_has_transaction_currency_code() const;
  public:
  void clear_transaction_currency_code();
  const std::string& transaction_currency_code() const;
  void set_transaction_currency_code(const std::string& value);
  void set_transaction_currency_code(std::string&& value);
  void set_transaction_currency_code(const char* value);
  void set_transaction_currency_code(const void* value, size_t size);
  std::string* mutable_transaction_currency_code();
  std::string* release_transaction_currency_code();
  void set_allocated_transaction_currency_code(std::string* transaction_currency_code);
  private:
  const std::string& _internal_transaction_currency_code() const;
  void _internal_set_transaction_currency_code(const std::string& value);
  std::string* _internal_mutable_transaction_currency_code();
  public:

  // optional bytes merchant_name_and_location = 16;
  bool has_merchant_name_and_location() const;
  private:
  bool _internal_has_merchant_name_and_location() const;
  public:
  void clear_merchant_name_and_location();
  const std::string& merchant_name_and_location() const;
  void set_merchant_name_and_location(const std::string& value);
  void set_merchant_name_and_location(std::string&& value);
  void set_merchant_name_and_location(const char* value);
  void set_merchant_name_and_location(const void* value, size_t size);
  std::string* mutable_merchant_name_and_location();
  std::string* release_merchant_name_and_location();
  void set_allocated_merchant_name_and_location(std::string* merchant_name_and_location);
  private:
  const std::string& _internal_merchant_name_and_location() const;
  void _internal_set_merchant_name_and_location(const std::string& value);
  std::string* _internal_mutable_merchant_name_and_location();
  public:

  // optional bytes merchant_category_code = 17;
  bool has_merchant_category_code() const;
  private:
  bool _internal_has_merchant_category_code() const;
  public:
  void clear_merchant_category_code();
  const std::string& merchant_category_code() const;
  void set_merchant_category_code(const std::string& value);
  void set_merchant_category_code(std::string&& value);
  void set_merchant_category_code(const char* value);
  void set_merchant_category_code(const void* value, size_t size);
  std::string* mutable_merchant_category_code();
  std::string* release_merchant_category_code();
  void set_allocated_merchant_category_code(std::string* merchant_category_code);
  private:
  const std::string& _internal_merchant_category_code() const;
  void _internal_set_merchant_category_code(const std::string& value);
  std::string* _internal_mutable_merchant_category_code();
  public:

  // optional bytes terminal_identification = 18;
  bool has_terminal_identification() const;
  private:
  bool _internal_has_terminal_identification() const;
  public:
  void clear_terminal_identification();
  const std::string& terminal_identification() const;
  void set_terminal_identification(const std::string& value);
  void set_terminal_identification(std::string&& value);
  void set_terminal_identification(const char* value);
  void set_terminal_identification(const void* value, size_t size);
  std::string* mutable_terminal_identification();
  std::string* release_terminal_identification();
  void set_allocated_terminal_identification(std::string* terminal_identification);
  private:
  const std::string& _internal_terminal_identification() const;
  void _internal_set_terminal_identification(const std::string& value);
  std::string* _internal_mutable_terminal_identification();
  public:

  // required .contactless.poll.PollForToken poll_for_token = 1;
  bool has_poll_for_token() const;
  private:
  bool _internal_has_poll_for_token() const;
  public:
  void clear_poll_for_token();
  const ::contactless::poll::PollForToken& poll_for_token() const;
  ::contactless::poll::PollForToken* release_poll_for_token();
  ::contactless::poll::PollForToken* mutable_poll_for_token();
  void set_allocated_poll_for_token(::contactless::poll::PollForToken* poll_for_token);
  private:
  const ::contactless::poll::PollForToken& _internal_poll_for_token() const;
  ::contactless::poll::PollForToken* _internal_mutable_poll_for_token();
  public:

  // required uint64 amount_authorized = 2;
  bool has_amount_authorized() const;
  private:
  bool _internal_has_amount_authorized() const;
  public:
  void clear_amount_authorized();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_authorized() const;
  void set_amount_authorized(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount_authorized() const;
  void _internal_set_amount_authorized(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 mastercard_amount = 8;
  bool has_mastercard_amount() const;
  private:
  bool _internal_has_mastercard_amount() const;
  public:
  void clear_mastercard_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 mastercard_amount() const;
  void set_mastercard_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mastercard_amount() const;
  void _internal_set_mastercard_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 maestro_amount = 9;
  bool has_maestro_amount() const;
  private:
  bool _internal_has_maestro_amount() const;
  public:
  void clear_maestro_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 maestro_amount() const;
  void set_maestro_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maestro_amount() const;
  void _internal_set_maestro_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 mir_amount = 10;
  bool has_mir_amount() const;
  private:
  bool _internal_has_mir_amount() const;
  public:
  void clear_mir_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 mir_amount() const;
  void set_mir_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mir_amount() const;
  void _internal_set_mir_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 troika_amount = 11;
  bool has_troika_amount() const;
  private:
  bool _internal_has_troika_amount() const;
  public:
  void clear_troika_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 troika_amount() const;
  void set_troika_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_troika_amount() const;
  void _internal_set_troika_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 unionpay_amount = 12;
  bool has_unionpay_amount() const;
  private:
  bool _internal_has_unionpay_amount() const;
  public:
  void clear_unionpay_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 unionpay_amount() const;
  void set_unionpay_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_unionpay_amount() const;
  void _internal_set_unionpay_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool debug = 19 [default = false];
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  bool debug() const;
  void set_debug(bool value);
  private:
  bool _internal_debug() const;
  void _internal_set_debug(bool value);
  public:

  // @@protoc_insertion_point(class_scope:contactless.transaction.PerformTransaction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terminal_country_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_currency_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_name_and_location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merchant_category_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr terminal_identification_;
  ::contactless::poll::PollForToken* poll_for_token_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_authorized_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mastercard_amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maestro_amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mir_amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 troika_amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 unionpay_amount_;
  bool debug_;
  friend struct ::TableStruct_contactless_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class TransactionResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contactless.transaction.TransactionResult) */ {
 public:
  TransactionResult();
  virtual ~TransactionResult();

  TransactionResult(const TransactionResult& from);
  TransactionResult(TransactionResult&& from) noexcept
    : TransactionResult() {
    *this = ::std::move(from);
  }

  inline TransactionResult& operator=(const TransactionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionResult& operator=(TransactionResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionResult* internal_default_instance() {
    return reinterpret_cast<const TransactionResult*>(
               &_TransactionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TransactionResult& a, TransactionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionResult* New() const final {
    return CreateMaybeMessage<TransactionResult>(nullptr);
  }

  TransactionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionResult& from);
  void MergeFrom(const TransactionResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contactless.transaction.TransactionResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contactless_2ftransaction_2eproto);
    return ::descriptor_table_contactless_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmvTagsFieldNumber = 3,
    kLastCmdFieldNumber = 4,
    kLastSwBytesFieldNumber = 5,
    kErrorReasonFieldNumber = 6,
    kEncryptedSensitiveDataFieldNumber = 8,
    kTokenFieldNumber = 2,
    kStatusFieldNumber = 1,
    kTokenCarrierTypeFieldNumber = 7,
  };
  // repeated .contactless.emv_tag.EmvTag emv_tags = 3;
  int emv_tags_size() const;
  private:
  int _internal_emv_tags_size() const;
  public:
  void clear_emv_tags();
  ::contactless::emv_tag::EmvTag* mutable_emv_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contactless::emv_tag::EmvTag >*
      mutable_emv_tags();
  private:
  const ::contactless::emv_tag::EmvTag& _internal_emv_tags(int index) const;
  ::contactless::emv_tag::EmvTag* _internal_add_emv_tags();
  public:
  const ::contactless::emv_tag::EmvTag& emv_tags(int index) const;
  ::contactless::emv_tag::EmvTag* add_emv_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contactless::emv_tag::EmvTag >&
      emv_tags() const;

  // optional bytes last_cmd = 4;
  bool has_last_cmd() const;
  private:
  bool _internal_has_last_cmd() const;
  public:
  void clear_last_cmd();
  const std::string& last_cmd() const;
  void set_last_cmd(const std::string& value);
  void set_last_cmd(std::string&& value);
  void set_last_cmd(const char* value);
  void set_last_cmd(const void* value, size_t size);
  std::string* mutable_last_cmd();
  std::string* release_last_cmd();
  void set_allocated_last_cmd(std::string* last_cmd);
  private:
  const std::string& _internal_last_cmd() const;
  void _internal_set_last_cmd(const std::string& value);
  std::string* _internal_mutable_last_cmd();
  public:

  // optional bytes last_sw_bytes = 5;
  bool has_last_sw_bytes() const;
  private:
  bool _internal_has_last_sw_bytes() const;
  public:
  void clear_last_sw_bytes();
  const std::string& last_sw_bytes() const;
  void set_last_sw_bytes(const std::string& value);
  void set_last_sw_bytes(std::string&& value);
  void set_last_sw_bytes(const char* value);
  void set_last_sw_bytes(const void* value, size_t size);
  std::string* mutable_last_sw_bytes();
  std::string* release_last_sw_bytes();
  void set_allocated_last_sw_bytes(std::string* last_sw_bytes);
  private:
  const std::string& _internal_last_sw_bytes() const;
  void _internal_set_last_sw_bytes(const std::string& value);
  std::string* _internal_mutable_last_sw_bytes();
  public:

  // optional string error_reason = 6;
  bool has_error_reason() const;
  private:
  bool _internal_has_error_reason() const;
  public:
  void clear_error_reason();
  const std::string& error_reason() const;
  void set_error_reason(const std::string& value);
  void set_error_reason(std::string&& value);
  void set_error_reason(const char* value);
  void set_error_reason(const char* value, size_t size);
  std::string* mutable_error_reason();
  std::string* release_error_reason();
  void set_allocated_error_reason(std::string* error_reason);
  private:
  const std::string& _internal_error_reason() const;
  void _internal_set_error_reason(const std::string& value);
  std::string* _internal_mutable_error_reason();
  public:

  // optional bytes encrypted_sensitive_data = 8;
  bool has_encrypted_sensitive_data() const;
  private:
  bool _internal_has_encrypted_sensitive_data() const;
  public:
  void clear_encrypted_sensitive_data();
  const std::string& encrypted_sensitive_data() const;
  void set_encrypted_sensitive_data(const std::string& value);
  void set_encrypted_sensitive_data(std::string&& value);
  void set_encrypted_sensitive_data(const char* value);
  void set_encrypted_sensitive_data(const void* value, size_t size);
  std::string* mutable_encrypted_sensitive_data();
  std::string* release_encrypted_sensitive_data();
  void set_allocated_encrypted_sensitive_data(std::string* encrypted_sensitive_data);
  private:
  const std::string& _internal_encrypted_sensitive_data() const;
  void _internal_set_encrypted_sensitive_data(const std::string& value);
  std::string* _internal_mutable_encrypted_sensitive_data();
  public:

  // required .contactless.token.Token token = 2;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const ::contactless::token::Token& token() const;
  ::contactless::token::Token* release_token();
  ::contactless::token::Token* mutable_token();
  void set_allocated_token(::contactless::token::Token* token);
  private:
  const ::contactless::token::Token& _internal_token() const;
  ::contactless::token::Token* _internal_mutable_token();
  public:

  // required .contactless.transaction.TransactionStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::contactless::transaction::TransactionStatus status() const;
  void set_status(::contactless::transaction::TransactionStatus value);
  private:
  ::contactless::transaction::TransactionStatus _internal_status() const;
  void _internal_set_status(::contactless::transaction::TransactionStatus value);
  public:

  // optional .contactless.token_carrier_type.TokenCarrierType token_carrier_type = 7;
  bool has_token_carrier_type() const;
  private:
  bool _internal_has_token_carrier_type() const;
  public:
  void clear_token_carrier_type();
  ::contactless::token_carrier_type::TokenCarrierType token_carrier_type() const;
  void set_token_carrier_type(::contactless::token_carrier_type::TokenCarrierType value);
  private:
  ::contactless::token_carrier_type::TokenCarrierType _internal_token_carrier_type() const;
  void _internal_set_token_carrier_type(::contactless::token_carrier_type::TokenCarrierType value);
  public:

  // @@protoc_insertion_point(class_scope:contactless.transaction.TransactionResult)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contactless::emv_tag::EmvTag > emv_tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_cmd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_sw_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_sensitive_data_;
  ::contactless::token::Token* token_;
  int status_;
  int token_carrier_type_;
  friend struct ::TableStruct_contactless_2ftransaction_2eproto;
};
// -------------------------------------------------------------------

class SensitiveData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contactless.transaction.SensitiveData) */ {
 public:
  SensitiveData();
  virtual ~SensitiveData();

  SensitiveData(const SensitiveData& from);
  SensitiveData(SensitiveData&& from) noexcept
    : SensitiveData() {
    *this = ::std::move(from);
  }

  inline SensitiveData& operator=(const SensitiveData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensitiveData& operator=(SensitiveData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensitiveData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensitiveData* internal_default_instance() {
    return reinterpret_cast<const SensitiveData*>(
               &_SensitiveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SensitiveData& a, SensitiveData& b) {
    a.Swap(&b);
  }
  inline void Swap(SensitiveData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensitiveData* New() const final {
    return CreateMaybeMessage<SensitiveData>(nullptr);
  }

  SensitiveData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensitiveData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensitiveData& from);
  void MergeFrom(const SensitiveData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensitiveData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contactless.transaction.SensitiveData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contactless_2ftransaction_2eproto);
    return ::descriptor_table_contactless_2ftransaction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmvTagsFieldNumber = 1,
  };
  // repeated .contactless.emv_tag.EmvTag emv_tags = 1;
  int emv_tags_size() const;
  private:
  int _internal_emv_tags_size() const;
  public:
  void clear_emv_tags();
  ::contactless::emv_tag::EmvTag* mutable_emv_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contactless::emv_tag::EmvTag >*
      mutable_emv_tags();
  private:
  const ::contactless::emv_tag::EmvTag& _internal_emv_tags(int index) const;
  ::contactless::emv_tag::EmvTag* _internal_add_emv_tags();
  public:
  const ::contactless::emv_tag::EmvTag& emv_tags(int index) const;
  ::contactless::emv_tag::EmvTag* add_emv_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contactless::emv_tag::EmvTag >&
      emv_tags() const;

  // @@protoc_insertion_point(class_scope:contactless.transaction.SensitiveData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contactless::emv_tag::EmvTag > emv_tags_;
  friend struct ::TableStruct_contactless_2ftransaction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerformTransaction

// required .contactless.poll.PollForToken poll_for_token = 1;
inline bool PerformTransaction::_internal_has_poll_for_token() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || poll_for_token_ != nullptr);
  return value;
}
inline bool PerformTransaction::has_poll_for_token() const {
  return _internal_has_poll_for_token();
}
inline const ::contactless::poll::PollForToken& PerformTransaction::_internal_poll_for_token() const {
  const ::contactless::poll::PollForToken* p = poll_for_token_;
  return p != nullptr ? *p : *reinterpret_cast<const ::contactless::poll::PollForToken*>(
      &::contactless::poll::_PollForToken_default_instance_);
}
inline const ::contactless::poll::PollForToken& PerformTransaction::poll_for_token() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.PerformTransaction.poll_for_token)
  return _internal_poll_for_token();
}
inline ::contactless::poll::PollForToken* PerformTransaction::release_poll_for_token() {
  // @@protoc_insertion_point(field_release:contactless.transaction.PerformTransaction.poll_for_token)
  _has_bits_[0] &= ~0x00000100u;
  ::contactless::poll::PollForToken* temp = poll_for_token_;
  poll_for_token_ = nullptr;
  return temp;
}
inline ::contactless::poll::PollForToken* PerformTransaction::_internal_mutable_poll_for_token() {
  _has_bits_[0] |= 0x00000100u;
  if (poll_for_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::contactless::poll::PollForToken>(GetArenaNoVirtual());
    poll_for_token_ = p;
  }
  return poll_for_token_;
}
inline ::contactless::poll::PollForToken* PerformTransaction::mutable_poll_for_token() {
  // @@protoc_insertion_point(field_mutable:contactless.transaction.PerformTransaction.poll_for_token)
  return _internal_mutable_poll_for_token();
}
inline void PerformTransaction::set_allocated_poll_for_token(::contactless::poll::PollForToken* poll_for_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(poll_for_token_);
  }
  if (poll_for_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      poll_for_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poll_for_token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  poll_for_token_ = poll_for_token;
  // @@protoc_insertion_point(field_set_allocated:contactless.transaction.PerformTransaction.poll_for_token)
}

// required uint64 amount_authorized = 2;
inline bool PerformTransaction::_internal_has_amount_authorized() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PerformTransaction::has_amount_authorized() const {
  return _internal_has_amount_authorized();
}
inline void PerformTransaction::clear_amount_authorized() {
  amount_authorized_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerformTransaction::_internal_amount_authorized() const {
  return amount_authorized_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerformTransaction::amount_authorized() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.PerformTransaction.amount_authorized)
  return _internal_amount_authorized();
}
inline void PerformTransaction::_internal_set_amount_authorized(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  amount_authorized_ = value;
}
inline void PerformTransaction::set_amount_authorized(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount_authorized(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.PerformTransaction.amount_authorized)
}

// required bytes transaction_date = 3;
inline bool PerformTransaction::_internal_has_transaction_date() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerformTransaction::has_transaction_date() const {
  return _internal_has_transaction_date();
}
inline void PerformTransaction::clear_transaction_date() {
  transaction_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PerformTransaction::transaction_date() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.PerformTransaction.transaction_date)
  return _internal_transaction_date();
}
inline void PerformTransaction::set_transaction_date(const std::string& value) {
  _internal_set_transaction_date(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.PerformTransaction.transaction_date)
}
inline std::string* PerformTransaction::mutable_transaction_date() {
  // @@protoc_insertion_point(field_mutable:contactless.transaction.PerformTransaction.transaction_date)
  return _internal_mutable_transaction_date();
}
inline const std::string& PerformTransaction::_internal_transaction_date() const {
  return transaction_date_.GetNoArena();
}
inline void PerformTransaction::_internal_set_transaction_date(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  transaction_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PerformTransaction::set_transaction_date(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  transaction_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contactless.transaction.PerformTransaction.transaction_date)
}
inline void PerformTransaction::set_transaction_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  transaction_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contactless.transaction.PerformTransaction.transaction_date)
}
inline void PerformTransaction::set_transaction_date(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  transaction_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contactless.transaction.PerformTransaction.transaction_date)
}
inline std::string* PerformTransaction::_internal_mutable_transaction_date() {
  _has_bits_[0] |= 0x00000001u;
  return transaction_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerformTransaction::release_transaction_date() {
  // @@protoc_insertion_point(field_release:contactless.transaction.PerformTransaction.transaction_date)
  if (!_internal_has_transaction_date()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return transaction_date_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerformTransaction::set_allocated_transaction_date(std::string* transaction_date) {
  if (transaction_date != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  transaction_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_date);
  // @@protoc_insertion_point(field_set_allocated:contactless.transaction.PerformTransaction.transaction_date)
}

// required bytes transaction_type = 4;
inline bool PerformTransaction::_internal_has_transaction_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PerformTransaction::has_transaction_type() const {
  return _internal_has_transaction_type();
}
inline void PerformTransaction::clear_transaction_type() {
  transaction_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PerformTransaction::transaction_type() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.PerformTransaction.transaction_type)
  return _internal_transaction_type();
}
inline void PerformTransaction::set_transaction_type(const std::string& value) {
  _internal_set_transaction_type(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.PerformTransaction.transaction_type)
}
inline std::string* PerformTransaction::mutable_transaction_type() {
  // @@protoc_insertion_point(field_mutable:contactless.transaction.PerformTransaction.transaction_type)
  return _internal_mutable_transaction_type();
}
inline const std::string& PerformTransaction::_internal_transaction_type() const {
  return transaction_type_.GetNoArena();
}
inline void PerformTransaction::_internal_set_transaction_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  transaction_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PerformTransaction::set_transaction_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  transaction_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contactless.transaction.PerformTransaction.transaction_type)
}
inline void PerformTransaction::set_transaction_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  transaction_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contactless.transaction.PerformTransaction.transaction_type)
}
inline void PerformTransaction::set_transaction_type(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  transaction_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contactless.transaction.PerformTransaction.transaction_type)
}
inline std::string* PerformTransaction::_internal_mutable_transaction_type() {
  _has_bits_[0] |= 0x00000002u;
  return transaction_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerformTransaction::release_transaction_type() {
  // @@protoc_insertion_point(field_release:contactless.transaction.PerformTransaction.transaction_type)
  if (!_internal_has_transaction_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return transaction_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerformTransaction::set_allocated_transaction_type(std::string* transaction_type) {
  if (transaction_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  transaction_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_type);
  // @@protoc_insertion_point(field_set_allocated:contactless.transaction.PerformTransaction.transaction_type)
}

// required bytes terminal_country_code = 5;
inline bool PerformTransaction::_internal_has_terminal_country_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PerformTransaction::has_terminal_country_code() const {
  return _internal_has_terminal_country_code();
}
inline void PerformTransaction::clear_terminal_country_code() {
  terminal_country_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PerformTransaction::terminal_country_code() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.PerformTransaction.terminal_country_code)
  return _internal_terminal_country_code();
}
inline void PerformTransaction::set_terminal_country_code(const std::string& value) {
  _internal_set_terminal_country_code(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.PerformTransaction.terminal_country_code)
}
inline std::string* PerformTransaction::mutable_terminal_country_code() {
  // @@protoc_insertion_point(field_mutable:contactless.transaction.PerformTransaction.terminal_country_code)
  return _internal_mutable_terminal_country_code();
}
inline const std::string& PerformTransaction::_internal_terminal_country_code() const {
  return terminal_country_code_.GetNoArena();
}
inline void PerformTransaction::_internal_set_terminal_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  terminal_country_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PerformTransaction::set_terminal_country_code(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  terminal_country_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contactless.transaction.PerformTransaction.terminal_country_code)
}
inline void PerformTransaction::set_terminal_country_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  terminal_country_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contactless.transaction.PerformTransaction.terminal_country_code)
}
inline void PerformTransaction::set_terminal_country_code(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  terminal_country_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contactless.transaction.PerformTransaction.terminal_country_code)
}
inline std::string* PerformTransaction::_internal_mutable_terminal_country_code() {
  _has_bits_[0] |= 0x00000004u;
  return terminal_country_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerformTransaction::release_terminal_country_code() {
  // @@protoc_insertion_point(field_release:contactless.transaction.PerformTransaction.terminal_country_code)
  if (!_internal_has_terminal_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return terminal_country_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerformTransaction::set_allocated_terminal_country_code(std::string* terminal_country_code) {
  if (terminal_country_code != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  terminal_country_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terminal_country_code);
  // @@protoc_insertion_point(field_set_allocated:contactless.transaction.PerformTransaction.terminal_country_code)
}

// required bytes transaction_time = 6;
inline bool PerformTransaction::_internal_has_transaction_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerformTransaction::has_transaction_time() const {
  return _internal_has_transaction_time();
}
inline void PerformTransaction::clear_transaction_time() {
  transaction_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PerformTransaction::transaction_time() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.PerformTransaction.transaction_time)
  return _internal_transaction_time();
}
inline void PerformTransaction::set_transaction_time(const std::string& value) {
  _internal_set_transaction_time(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.PerformTransaction.transaction_time)
}
inline std::string* PerformTransaction::mutable_transaction_time() {
  // @@protoc_insertion_point(field_mutable:contactless.transaction.PerformTransaction.transaction_time)
  return _internal_mutable_transaction_time();
}
inline const std::string& PerformTransaction::_internal_transaction_time() const {
  return transaction_time_.GetNoArena();
}
inline void PerformTransaction::_internal_set_transaction_time(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  transaction_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PerformTransaction::set_transaction_time(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  transaction_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contactless.transaction.PerformTransaction.transaction_time)
}
inline void PerformTransaction::set_transaction_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  transaction_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contactless.transaction.PerformTransaction.transaction_time)
}
inline void PerformTransaction::set_transaction_time(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  transaction_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contactless.transaction.PerformTransaction.transaction_time)
}
inline std::string* PerformTransaction::_internal_mutable_transaction_time() {
  _has_bits_[0] |= 0x00000008u;
  return transaction_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerformTransaction::release_transaction_time() {
  // @@protoc_insertion_point(field_release:contactless.transaction.PerformTransaction.transaction_time)
  if (!_internal_has_transaction_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return transaction_time_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerformTransaction::set_allocated_transaction_time(std::string* transaction_time) {
  if (transaction_time != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  transaction_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_time);
  // @@protoc_insertion_point(field_set_allocated:contactless.transaction.PerformTransaction.transaction_time)
}

// required bytes transaction_currency_code = 7;
inline bool PerformTransaction::_internal_has_transaction_currency_code() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PerformTransaction::has_transaction_currency_code() const {
  return _internal_has_transaction_currency_code();
}
inline void PerformTransaction::clear_transaction_currency_code() {
  transaction_currency_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PerformTransaction::transaction_currency_code() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.PerformTransaction.transaction_currency_code)
  return _internal_transaction_currency_code();
}
inline void PerformTransaction::set_transaction_currency_code(const std::string& value) {
  _internal_set_transaction_currency_code(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.PerformTransaction.transaction_currency_code)
}
inline std::string* PerformTransaction::mutable_transaction_currency_code() {
  // @@protoc_insertion_point(field_mutable:contactless.transaction.PerformTransaction.transaction_currency_code)
  return _internal_mutable_transaction_currency_code();
}
inline const std::string& PerformTransaction::_internal_transaction_currency_code() const {
  return transaction_currency_code_.GetNoArena();
}
inline void PerformTransaction::_internal_set_transaction_currency_code(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  transaction_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PerformTransaction::set_transaction_currency_code(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  transaction_currency_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contactless.transaction.PerformTransaction.transaction_currency_code)
}
inline void PerformTransaction::set_transaction_currency_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  transaction_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contactless.transaction.PerformTransaction.transaction_currency_code)
}
inline void PerformTransaction::set_transaction_currency_code(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  transaction_currency_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contactless.transaction.PerformTransaction.transaction_currency_code)
}
inline std::string* PerformTransaction::_internal_mutable_transaction_currency_code() {
  _has_bits_[0] |= 0x00000010u;
  return transaction_currency_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerformTransaction::release_transaction_currency_code() {
  // @@protoc_insertion_point(field_release:contactless.transaction.PerformTransaction.transaction_currency_code)
  if (!_internal_has_transaction_currency_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return transaction_currency_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerformTransaction::set_allocated_transaction_currency_code(std::string* transaction_currency_code) {
  if (transaction_currency_code != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  transaction_currency_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_currency_code);
  // @@protoc_insertion_point(field_set_allocated:contactless.transaction.PerformTransaction.transaction_currency_code)
}

// optional uint64 mastercard_amount = 8;
inline bool PerformTransaction::_internal_has_mastercard_amount() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PerformTransaction::has_mastercard_amount() const {
  return _internal_has_mastercard_amount();
}
inline void PerformTransaction::clear_mastercard_amount() {
  mastercard_amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerformTransaction::_internal_mastercard_amount() const {
  return mastercard_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerformTransaction::mastercard_amount() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.PerformTransaction.mastercard_amount)
  return _internal_mastercard_amount();
}
inline void PerformTransaction::_internal_set_mastercard_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  mastercard_amount_ = value;
}
inline void PerformTransaction::set_mastercard_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mastercard_amount(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.PerformTransaction.mastercard_amount)
}

// optional uint64 maestro_amount = 9;
inline bool PerformTransaction::_internal_has_maestro_amount() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PerformTransaction::has_maestro_amount() const {
  return _internal_has_maestro_amount();
}
inline void PerformTransaction::clear_maestro_amount() {
  maestro_amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerformTransaction::_internal_maestro_amount() const {
  return maestro_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerformTransaction::maestro_amount() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.PerformTransaction.maestro_amount)
  return _internal_maestro_amount();
}
inline void PerformTransaction::_internal_set_maestro_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  maestro_amount_ = value;
}
inline void PerformTransaction::set_maestro_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maestro_amount(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.PerformTransaction.maestro_amount)
}

// optional uint64 mir_amount = 10;
inline bool PerformTransaction::_internal_has_mir_amount() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PerformTransaction::has_mir_amount() const {
  return _internal_has_mir_amount();
}
inline void PerformTransaction::clear_mir_amount() {
  mir_amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerformTransaction::_internal_mir_amount() const {
  return mir_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerformTransaction::mir_amount() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.PerformTransaction.mir_amount)
  return _internal_mir_amount();
}
inline void PerformTransaction::_internal_set_mir_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  mir_amount_ = value;
}
inline void PerformTransaction::set_mir_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mir_amount(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.PerformTransaction.mir_amount)
}

// optional uint64 troika_amount = 11;
inline bool PerformTransaction::_internal_has_troika_amount() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool PerformTransaction::has_troika_amount() const {
  return _internal_has_troika_amount();
}
inline void PerformTransaction::clear_troika_amount() {
  troika_amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerformTransaction::_internal_troika_amount() const {
  return troika_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerformTransaction::troika_amount() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.PerformTransaction.troika_amount)
  return _internal_troika_amount();
}
inline void PerformTransaction::_internal_set_troika_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  troika_amount_ = value;
}
inline void PerformTransaction::set_troika_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_troika_amount(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.PerformTransaction.troika_amount)
}

// optional uint64 unionpay_amount = 12;
inline bool PerformTransaction::_internal_has_unionpay_amount() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool PerformTransaction::has_unionpay_amount() const {
  return _internal_has_unionpay_amount();
}
inline void PerformTransaction::clear_unionpay_amount() {
  unionpay_amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerformTransaction::_internal_unionpay_amount() const {
  return unionpay_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PerformTransaction::unionpay_amount() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.PerformTransaction.unionpay_amount)
  return _internal_unionpay_amount();
}
inline void PerformTransaction::_internal_set_unionpay_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00004000u;
  unionpay_amount_ = value;
}
inline void PerformTransaction::set_unionpay_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_unionpay_amount(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.PerformTransaction.unionpay_amount)
}

// optional bytes merchant_name_and_location = 16;
inline bool PerformTransaction::_internal_has_merchant_name_and_location() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PerformTransaction::has_merchant_name_and_location() const {
  return _internal_has_merchant_name_and_location();
}
inline void PerformTransaction::clear_merchant_name_and_location() {
  merchant_name_and_location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PerformTransaction::merchant_name_and_location() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.PerformTransaction.merchant_name_and_location)
  return _internal_merchant_name_and_location();
}
inline void PerformTransaction::set_merchant_name_and_location(const std::string& value) {
  _internal_set_merchant_name_and_location(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.PerformTransaction.merchant_name_and_location)
}
inline std::string* PerformTransaction::mutable_merchant_name_and_location() {
  // @@protoc_insertion_point(field_mutable:contactless.transaction.PerformTransaction.merchant_name_and_location)
  return _internal_mutable_merchant_name_and_location();
}
inline const std::string& PerformTransaction::_internal_merchant_name_and_location() const {
  return merchant_name_and_location_.GetNoArena();
}
inline void PerformTransaction::_internal_set_merchant_name_and_location(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  merchant_name_and_location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PerformTransaction::set_merchant_name_and_location(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  merchant_name_and_location_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contactless.transaction.PerformTransaction.merchant_name_and_location)
}
inline void PerformTransaction::set_merchant_name_and_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  merchant_name_and_location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contactless.transaction.PerformTransaction.merchant_name_and_location)
}
inline void PerformTransaction::set_merchant_name_and_location(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  merchant_name_and_location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contactless.transaction.PerformTransaction.merchant_name_and_location)
}
inline std::string* PerformTransaction::_internal_mutable_merchant_name_and_location() {
  _has_bits_[0] |= 0x00000020u;
  return merchant_name_and_location_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerformTransaction::release_merchant_name_and_location() {
  // @@protoc_insertion_point(field_release:contactless.transaction.PerformTransaction.merchant_name_and_location)
  if (!_internal_has_merchant_name_and_location()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return merchant_name_and_location_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerformTransaction::set_allocated_merchant_name_and_location(std::string* merchant_name_and_location) {
  if (merchant_name_and_location != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  merchant_name_and_location_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_name_and_location);
  // @@protoc_insertion_point(field_set_allocated:contactless.transaction.PerformTransaction.merchant_name_and_location)
}

// optional bytes merchant_category_code = 17;
inline bool PerformTransaction::_internal_has_merchant_category_code() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PerformTransaction::has_merchant_category_code() const {
  return _internal_has_merchant_category_code();
}
inline void PerformTransaction::clear_merchant_category_code() {
  merchant_category_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& PerformTransaction::merchant_category_code() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.PerformTransaction.merchant_category_code)
  return _internal_merchant_category_code();
}
inline void PerformTransaction::set_merchant_category_code(const std::string& value) {
  _internal_set_merchant_category_code(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.PerformTransaction.merchant_category_code)
}
inline std::string* PerformTransaction::mutable_merchant_category_code() {
  // @@protoc_insertion_point(field_mutable:contactless.transaction.PerformTransaction.merchant_category_code)
  return _internal_mutable_merchant_category_code();
}
inline const std::string& PerformTransaction::_internal_merchant_category_code() const {
  return merchant_category_code_.GetNoArena();
}
inline void PerformTransaction::_internal_set_merchant_category_code(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  merchant_category_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PerformTransaction::set_merchant_category_code(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  merchant_category_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contactless.transaction.PerformTransaction.merchant_category_code)
}
inline void PerformTransaction::set_merchant_category_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  merchant_category_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contactless.transaction.PerformTransaction.merchant_category_code)
}
inline void PerformTransaction::set_merchant_category_code(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  merchant_category_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contactless.transaction.PerformTransaction.merchant_category_code)
}
inline std::string* PerformTransaction::_internal_mutable_merchant_category_code() {
  _has_bits_[0] |= 0x00000040u;
  return merchant_category_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerformTransaction::release_merchant_category_code() {
  // @@protoc_insertion_point(field_release:contactless.transaction.PerformTransaction.merchant_category_code)
  if (!_internal_has_merchant_category_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return merchant_category_code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerformTransaction::set_allocated_merchant_category_code(std::string* merchant_category_code) {
  if (merchant_category_code != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  merchant_category_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merchant_category_code);
  // @@protoc_insertion_point(field_set_allocated:contactless.transaction.PerformTransaction.merchant_category_code)
}

// optional bytes terminal_identification = 18;
inline bool PerformTransaction::_internal_has_terminal_identification() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PerformTransaction::has_terminal_identification() const {
  return _internal_has_terminal_identification();
}
inline void PerformTransaction::clear_terminal_identification() {
  terminal_identification_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& PerformTransaction::terminal_identification() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.PerformTransaction.terminal_identification)
  return _internal_terminal_identification();
}
inline void PerformTransaction::set_terminal_identification(const std::string& value) {
  _internal_set_terminal_identification(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.PerformTransaction.terminal_identification)
}
inline std::string* PerformTransaction::mutable_terminal_identification() {
  // @@protoc_insertion_point(field_mutable:contactless.transaction.PerformTransaction.terminal_identification)
  return _internal_mutable_terminal_identification();
}
inline const std::string& PerformTransaction::_internal_terminal_identification() const {
  return terminal_identification_.GetNoArena();
}
inline void PerformTransaction::_internal_set_terminal_identification(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  terminal_identification_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PerformTransaction::set_terminal_identification(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  terminal_identification_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contactless.transaction.PerformTransaction.terminal_identification)
}
inline void PerformTransaction::set_terminal_identification(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  terminal_identification_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contactless.transaction.PerformTransaction.terminal_identification)
}
inline void PerformTransaction::set_terminal_identification(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  terminal_identification_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contactless.transaction.PerformTransaction.terminal_identification)
}
inline std::string* PerformTransaction::_internal_mutable_terminal_identification() {
  _has_bits_[0] |= 0x00000080u;
  return terminal_identification_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerformTransaction::release_terminal_identification() {
  // @@protoc_insertion_point(field_release:contactless.transaction.PerformTransaction.terminal_identification)
  if (!_internal_has_terminal_identification()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return terminal_identification_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerformTransaction::set_allocated_terminal_identification(std::string* terminal_identification) {
  if (terminal_identification != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  terminal_identification_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), terminal_identification);
  // @@protoc_insertion_point(field_set_allocated:contactless.transaction.PerformTransaction.terminal_identification)
}

// optional bool debug = 19 [default = false];
inline bool PerformTransaction::_internal_has_debug() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool PerformTransaction::has_debug() const {
  return _internal_has_debug();
}
inline void PerformTransaction::clear_debug() {
  debug_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool PerformTransaction::_internal_debug() const {
  return debug_;
}
inline bool PerformTransaction::debug() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.PerformTransaction.debug)
  return _internal_debug();
}
inline void PerformTransaction::_internal_set_debug(bool value) {
  _has_bits_[0] |= 0x00008000u;
  debug_ = value;
}
inline void PerformTransaction::set_debug(bool value) {
  _internal_set_debug(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.PerformTransaction.debug)
}

// -------------------------------------------------------------------

// TransactionResult

// required .contactless.transaction.TransactionStatus status = 1;
inline bool TransactionResult::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TransactionResult::has_status() const {
  return _internal_has_status();
}
inline void TransactionResult::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::contactless::transaction::TransactionStatus TransactionResult::_internal_status() const {
  return static_cast< ::contactless::transaction::TransactionStatus >(status_);
}
inline ::contactless::transaction::TransactionStatus TransactionResult::status() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.TransactionResult.status)
  return _internal_status();
}
inline void TransactionResult::_internal_set_status(::contactless::transaction::TransactionStatus value) {
  assert(::contactless::transaction::TransactionStatus_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  status_ = value;
}
inline void TransactionResult::set_status(::contactless::transaction::TransactionStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.TransactionResult.status)
}

// required .contactless.token.Token token = 2;
inline bool TransactionResult::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || token_ != nullptr);
  return value;
}
inline bool TransactionResult::has_token() const {
  return _internal_has_token();
}
inline const ::contactless::token::Token& TransactionResult::_internal_token() const {
  const ::contactless::token::Token* p = token_;
  return p != nullptr ? *p : *reinterpret_cast<const ::contactless::token::Token*>(
      &::contactless::token::_Token_default_instance_);
}
inline const ::contactless::token::Token& TransactionResult::token() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.TransactionResult.token)
  return _internal_token();
}
inline ::contactless::token::Token* TransactionResult::release_token() {
  // @@protoc_insertion_point(field_release:contactless.transaction.TransactionResult.token)
  _has_bits_[0] &= ~0x00000010u;
  ::contactless::token::Token* temp = token_;
  token_ = nullptr;
  return temp;
}
inline ::contactless::token::Token* TransactionResult::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000010u;
  if (token_ == nullptr) {
    auto* p = CreateMaybeMessage<::contactless::token::Token>(GetArenaNoVirtual());
    token_ = p;
  }
  return token_;
}
inline ::contactless::token::Token* TransactionResult::mutable_token() {
  // @@protoc_insertion_point(field_mutable:contactless.transaction.TransactionResult.token)
  return _internal_mutable_token();
}
inline void TransactionResult::set_allocated_token(::contactless::token::Token* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_);
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:contactless.transaction.TransactionResult.token)
}

// repeated .contactless.emv_tag.EmvTag emv_tags = 3;
inline int TransactionResult::_internal_emv_tags_size() const {
  return emv_tags_.size();
}
inline int TransactionResult::emv_tags_size() const {
  return _internal_emv_tags_size();
}
inline ::contactless::emv_tag::EmvTag* TransactionResult::mutable_emv_tags(int index) {
  // @@protoc_insertion_point(field_mutable:contactless.transaction.TransactionResult.emv_tags)
  return emv_tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contactless::emv_tag::EmvTag >*
TransactionResult::mutable_emv_tags() {
  // @@protoc_insertion_point(field_mutable_list:contactless.transaction.TransactionResult.emv_tags)
  return &emv_tags_;
}
inline const ::contactless::emv_tag::EmvTag& TransactionResult::_internal_emv_tags(int index) const {
  return emv_tags_.Get(index);
}
inline const ::contactless::emv_tag::EmvTag& TransactionResult::emv_tags(int index) const {
  // @@protoc_insertion_point(field_get:contactless.transaction.TransactionResult.emv_tags)
  return _internal_emv_tags(index);
}
inline ::contactless::emv_tag::EmvTag* TransactionResult::_internal_add_emv_tags() {
  return emv_tags_.Add();
}
inline ::contactless::emv_tag::EmvTag* TransactionResult::add_emv_tags() {
  // @@protoc_insertion_point(field_add:contactless.transaction.TransactionResult.emv_tags)
  return _internal_add_emv_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contactless::emv_tag::EmvTag >&
TransactionResult::emv_tags() const {
  // @@protoc_insertion_point(field_list:contactless.transaction.TransactionResult.emv_tags)
  return emv_tags_;
}

// optional bytes last_cmd = 4;
inline bool TransactionResult::_internal_has_last_cmd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TransactionResult::has_last_cmd() const {
  return _internal_has_last_cmd();
}
inline void TransactionResult::clear_last_cmd() {
  last_cmd_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TransactionResult::last_cmd() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.TransactionResult.last_cmd)
  return _internal_last_cmd();
}
inline void TransactionResult::set_last_cmd(const std::string& value) {
  _internal_set_last_cmd(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.TransactionResult.last_cmd)
}
inline std::string* TransactionResult::mutable_last_cmd() {
  // @@protoc_insertion_point(field_mutable:contactless.transaction.TransactionResult.last_cmd)
  return _internal_mutable_last_cmd();
}
inline const std::string& TransactionResult::_internal_last_cmd() const {
  return last_cmd_.GetNoArena();
}
inline void TransactionResult::_internal_set_last_cmd(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  last_cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactionResult::set_last_cmd(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  last_cmd_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contactless.transaction.TransactionResult.last_cmd)
}
inline void TransactionResult::set_last_cmd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  last_cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contactless.transaction.TransactionResult.last_cmd)
}
inline void TransactionResult::set_last_cmd(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  last_cmd_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contactless.transaction.TransactionResult.last_cmd)
}
inline std::string* TransactionResult::_internal_mutable_last_cmd() {
  _has_bits_[0] |= 0x00000001u;
  return last_cmd_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionResult::release_last_cmd() {
  // @@protoc_insertion_point(field_release:contactless.transaction.TransactionResult.last_cmd)
  if (!_internal_has_last_cmd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return last_cmd_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionResult::set_allocated_last_cmd(std::string* last_cmd) {
  if (last_cmd != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  last_cmd_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_cmd);
  // @@protoc_insertion_point(field_set_allocated:contactless.transaction.TransactionResult.last_cmd)
}

// optional bytes last_sw_bytes = 5;
inline bool TransactionResult::_internal_has_last_sw_bytes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TransactionResult::has_last_sw_bytes() const {
  return _internal_has_last_sw_bytes();
}
inline void TransactionResult::clear_last_sw_bytes() {
  last_sw_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TransactionResult::last_sw_bytes() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.TransactionResult.last_sw_bytes)
  return _internal_last_sw_bytes();
}
inline void TransactionResult::set_last_sw_bytes(const std::string& value) {
  _internal_set_last_sw_bytes(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.TransactionResult.last_sw_bytes)
}
inline std::string* TransactionResult::mutable_last_sw_bytes() {
  // @@protoc_insertion_point(field_mutable:contactless.transaction.TransactionResult.last_sw_bytes)
  return _internal_mutable_last_sw_bytes();
}
inline const std::string& TransactionResult::_internal_last_sw_bytes() const {
  return last_sw_bytes_.GetNoArena();
}
inline void TransactionResult::_internal_set_last_sw_bytes(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  last_sw_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactionResult::set_last_sw_bytes(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  last_sw_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contactless.transaction.TransactionResult.last_sw_bytes)
}
inline void TransactionResult::set_last_sw_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  last_sw_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contactless.transaction.TransactionResult.last_sw_bytes)
}
inline void TransactionResult::set_last_sw_bytes(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  last_sw_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contactless.transaction.TransactionResult.last_sw_bytes)
}
inline std::string* TransactionResult::_internal_mutable_last_sw_bytes() {
  _has_bits_[0] |= 0x00000002u;
  return last_sw_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionResult::release_last_sw_bytes() {
  // @@protoc_insertion_point(field_release:contactless.transaction.TransactionResult.last_sw_bytes)
  if (!_internal_has_last_sw_bytes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return last_sw_bytes_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionResult::set_allocated_last_sw_bytes(std::string* last_sw_bytes) {
  if (last_sw_bytes != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  last_sw_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_sw_bytes);
  // @@protoc_insertion_point(field_set_allocated:contactless.transaction.TransactionResult.last_sw_bytes)
}

// optional string error_reason = 6;
inline bool TransactionResult::_internal_has_error_reason() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TransactionResult::has_error_reason() const {
  return _internal_has_error_reason();
}
inline void TransactionResult::clear_error_reason() {
  error_reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TransactionResult::error_reason() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.TransactionResult.error_reason)
  return _internal_error_reason();
}
inline void TransactionResult::set_error_reason(const std::string& value) {
  _internal_set_error_reason(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.TransactionResult.error_reason)
}
inline std::string* TransactionResult::mutable_error_reason() {
  // @@protoc_insertion_point(field_mutable:contactless.transaction.TransactionResult.error_reason)
  return _internal_mutable_error_reason();
}
inline const std::string& TransactionResult::_internal_error_reason() const {
  return error_reason_.GetNoArena();
}
inline void TransactionResult::_internal_set_error_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  error_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactionResult::set_error_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  error_reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contactless.transaction.TransactionResult.error_reason)
}
inline void TransactionResult::set_error_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  error_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contactless.transaction.TransactionResult.error_reason)
}
inline void TransactionResult::set_error_reason(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  error_reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contactless.transaction.TransactionResult.error_reason)
}
inline std::string* TransactionResult::_internal_mutable_error_reason() {
  _has_bits_[0] |= 0x00000004u;
  return error_reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionResult::release_error_reason() {
  // @@protoc_insertion_point(field_release:contactless.transaction.TransactionResult.error_reason)
  if (!_internal_has_error_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return error_reason_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionResult::set_allocated_error_reason(std::string* error_reason) {
  if (error_reason != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  error_reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_reason);
  // @@protoc_insertion_point(field_set_allocated:contactless.transaction.TransactionResult.error_reason)
}

// optional .contactless.token_carrier_type.TokenCarrierType token_carrier_type = 7;
inline bool TransactionResult::_internal_has_token_carrier_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TransactionResult::has_token_carrier_type() const {
  return _internal_has_token_carrier_type();
}
inline void TransactionResult::clear_token_carrier_type() {
  token_carrier_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::contactless::token_carrier_type::TokenCarrierType TransactionResult::_internal_token_carrier_type() const {
  return static_cast< ::contactless::token_carrier_type::TokenCarrierType >(token_carrier_type_);
}
inline ::contactless::token_carrier_type::TokenCarrierType TransactionResult::token_carrier_type() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.TransactionResult.token_carrier_type)
  return _internal_token_carrier_type();
}
inline void TransactionResult::_internal_set_token_carrier_type(::contactless::token_carrier_type::TokenCarrierType value) {
  assert(::contactless::token_carrier_type::TokenCarrierType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  token_carrier_type_ = value;
}
inline void TransactionResult::set_token_carrier_type(::contactless::token_carrier_type::TokenCarrierType value) {
  _internal_set_token_carrier_type(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.TransactionResult.token_carrier_type)
}

// optional bytes encrypted_sensitive_data = 8;
inline bool TransactionResult::_internal_has_encrypted_sensitive_data() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TransactionResult::has_encrypted_sensitive_data() const {
  return _internal_has_encrypted_sensitive_data();
}
inline void TransactionResult::clear_encrypted_sensitive_data() {
  encrypted_sensitive_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TransactionResult::encrypted_sensitive_data() const {
  // @@protoc_insertion_point(field_get:contactless.transaction.TransactionResult.encrypted_sensitive_data)
  return _internal_encrypted_sensitive_data();
}
inline void TransactionResult::set_encrypted_sensitive_data(const std::string& value) {
  _internal_set_encrypted_sensitive_data(value);
  // @@protoc_insertion_point(field_set:contactless.transaction.TransactionResult.encrypted_sensitive_data)
}
inline std::string* TransactionResult::mutable_encrypted_sensitive_data() {
  // @@protoc_insertion_point(field_mutable:contactless.transaction.TransactionResult.encrypted_sensitive_data)
  return _internal_mutable_encrypted_sensitive_data();
}
inline const std::string& TransactionResult::_internal_encrypted_sensitive_data() const {
  return encrypted_sensitive_data_.GetNoArena();
}
inline void TransactionResult::_internal_set_encrypted_sensitive_data(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  encrypted_sensitive_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactionResult::set_encrypted_sensitive_data(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  encrypted_sensitive_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contactless.transaction.TransactionResult.encrypted_sensitive_data)
}
inline void TransactionResult::set_encrypted_sensitive_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  encrypted_sensitive_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contactless.transaction.TransactionResult.encrypted_sensitive_data)
}
inline void TransactionResult::set_encrypted_sensitive_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  encrypted_sensitive_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contactless.transaction.TransactionResult.encrypted_sensitive_data)
}
inline std::string* TransactionResult::_internal_mutable_encrypted_sensitive_data() {
  _has_bits_[0] |= 0x00000008u;
  return encrypted_sensitive_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionResult::release_encrypted_sensitive_data() {
  // @@protoc_insertion_point(field_release:contactless.transaction.TransactionResult.encrypted_sensitive_data)
  if (!_internal_has_encrypted_sensitive_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return encrypted_sensitive_data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionResult::set_allocated_encrypted_sensitive_data(std::string* encrypted_sensitive_data) {
  if (encrypted_sensitive_data != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  encrypted_sensitive_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_sensitive_data);
  // @@protoc_insertion_point(field_set_allocated:contactless.transaction.TransactionResult.encrypted_sensitive_data)
}

// -------------------------------------------------------------------

// SensitiveData

// repeated .contactless.emv_tag.EmvTag emv_tags = 1;
inline int SensitiveData::_internal_emv_tags_size() const {
  return emv_tags_.size();
}
inline int SensitiveData::emv_tags_size() const {
  return _internal_emv_tags_size();
}
inline ::contactless::emv_tag::EmvTag* SensitiveData::mutable_emv_tags(int index) {
  // @@protoc_insertion_point(field_mutable:contactless.transaction.SensitiveData.emv_tags)
  return emv_tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contactless::emv_tag::EmvTag >*
SensitiveData::mutable_emv_tags() {
  // @@protoc_insertion_point(field_mutable_list:contactless.transaction.SensitiveData.emv_tags)
  return &emv_tags_;
}
inline const ::contactless::emv_tag::EmvTag& SensitiveData::_internal_emv_tags(int index) const {
  return emv_tags_.Get(index);
}
inline const ::contactless::emv_tag::EmvTag& SensitiveData::emv_tags(int index) const {
  // @@protoc_insertion_point(field_get:contactless.transaction.SensitiveData.emv_tags)
  return _internal_emv_tags(index);
}
inline ::contactless::emv_tag::EmvTag* SensitiveData::_internal_add_emv_tags() {
  return emv_tags_.Add();
}
inline ::contactless::emv_tag::EmvTag* SensitiveData::add_emv_tags() {
  // @@protoc_insertion_point(field_add:contactless.transaction.SensitiveData.emv_tags)
  return _internal_add_emv_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contactless::emv_tag::EmvTag >&
SensitiveData::emv_tags() const {
  // @@protoc_insertion_point(field_list:contactless.transaction.SensitiveData.emv_tags)
  return emv_tags_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transaction
}  // namespace contactless

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::contactless::transaction::TransactionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::contactless::transaction::TransactionStatus>() {
  return ::contactless::transaction::TransactionStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_contactless_2ftransaction_2eproto
