// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contactless/transceive.proto

#include "contactless/transceive.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_contactless_2ftransceive_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BitArray_contactless_2ftransceive_2eproto;
namespace contactless {
namespace transceive {
class TransceiveBitArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransceiveBitArray> _instance;
} _TransceiveBitArray_default_instance_;
class BitArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BitArray> _instance;
} _BitArray_default_instance_;
}  // namespace transceive
}  // namespace contactless
static void InitDefaultsscc_info_BitArray_contactless_2ftransceive_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contactless::transceive::_BitArray_default_instance_;
    new (ptr) ::contactless::transceive::BitArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contactless::transceive::BitArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BitArray_contactless_2ftransceive_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BitArray_contactless_2ftransceive_2eproto}, {}};

static void InitDefaultsscc_info_TransceiveBitArray_contactless_2ftransceive_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contactless::transceive::_TransceiveBitArray_default_instance_;
    new (ptr) ::contactless::transceive::TransceiveBitArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contactless::transceive::TransceiveBitArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransceiveBitArray_contactless_2ftransceive_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransceiveBitArray_contactless_2ftransceive_2eproto}, {
      &scc_info_BitArray_contactless_2ftransceive_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_contactless_2ftransceive_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_contactless_2ftransceive_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_contactless_2ftransceive_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_contactless_2ftransceive_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::contactless::transceive::TransceiveBitArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contactless::transceive::TransceiveBitArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contactless::transceive::TransceiveBitArray, bit_array_),
  PROTOBUF_FIELD_OFFSET(::contactless::transceive::TransceiveBitArray, response_timeout_us_),
  PROTOBUF_FIELD_OFFSET(::contactless::transceive::TransceiveBitArray, tx_crc_),
  PROTOBUF_FIELD_OFFSET(::contactless::transceive::TransceiveBitArray, rx_crc_),
  PROTOBUF_FIELD_OFFSET(::contactless::transceive::TransceiveBitArray, parity_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::contactless::transceive::BitArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contactless::transceive::BitArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contactless::transceive::BitArray, data_),
  PROTOBUF_FIELD_OFFSET(::contactless::transceive::BitArray, count_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::contactless::transceive::TransceiveBitArray)},
  { 15, 22, sizeof(::contactless::transceive::BitArray)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contactless::transceive::_TransceiveBitArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contactless::transceive::_BitArray_default_instance_),
};

const char descriptor_table_protodef_contactless_2ftransceive_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034contactless/transceive.proto\022\026contactl"
  "ess.transceive\"\253\001\n\022TransceiveBitArray\0223\n"
  "\tbit_array\030\001 \002(\0132 .contactless.transceiv"
  "e.BitArray\022\033\n\023response_timeout_us\030\002 \002(\r\022"
  "\025\n\006tx_crc\030\003 \001(\010:\005false\022\025\n\006rx_crc\030\004 \001(\010:\005"
  "false\022\025\n\006parity\030\005 \001(\010:\005false\"\'\n\010BitArray"
  "\022\014\n\004data\030\001 \002(\014\022\r\n\005count\030\002 \002(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_contactless_2ftransceive_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_contactless_2ftransceive_2eproto_sccs[2] = {
  &scc_info_BitArray_contactless_2ftransceive_2eproto.base,
  &scc_info_TransceiveBitArray_contactless_2ftransceive_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_contactless_2ftransceive_2eproto_once;
static bool descriptor_table_contactless_2ftransceive_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contactless_2ftransceive_2eproto = {
  &descriptor_table_contactless_2ftransceive_2eproto_initialized, descriptor_table_protodef_contactless_2ftransceive_2eproto, "contactless/transceive.proto", 269,
  &descriptor_table_contactless_2ftransceive_2eproto_once, descriptor_table_contactless_2ftransceive_2eproto_sccs, descriptor_table_contactless_2ftransceive_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_contactless_2ftransceive_2eproto::offsets,
  file_level_metadata_contactless_2ftransceive_2eproto, 2, file_level_enum_descriptors_contactless_2ftransceive_2eproto, file_level_service_descriptors_contactless_2ftransceive_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_contactless_2ftransceive_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_contactless_2ftransceive_2eproto), true);
namespace contactless {
namespace transceive {

// ===================================================================

void TransceiveBitArray::InitAsDefaultInstance() {
  ::contactless::transceive::_TransceiveBitArray_default_instance_._instance.get_mutable()->bit_array_ = const_cast< ::contactless::transceive::BitArray*>(
      ::contactless::transceive::BitArray::internal_default_instance());
}
class TransceiveBitArray::_Internal {
 public:
  using HasBits = decltype(std::declval<TransceiveBitArray>()._has_bits_);
  static const ::contactless::transceive::BitArray& bit_array(const TransceiveBitArray* msg);
  static void set_has_bit_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_response_timeout_us(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tx_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rx_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_parity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::contactless::transceive::BitArray&
TransceiveBitArray::_Internal::bit_array(const TransceiveBitArray* msg) {
  return *msg->bit_array_;
}
TransceiveBitArray::TransceiveBitArray()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contactless.transceive.TransceiveBitArray)
}
TransceiveBitArray::TransceiveBitArray(const TransceiveBitArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_bit_array()) {
    bit_array_ = new ::contactless::transceive::BitArray(*from.bit_array_);
  } else {
    bit_array_ = nullptr;
  }
  ::memcpy(&response_timeout_us_, &from.response_timeout_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&parity_) -
    reinterpret_cast<char*>(&response_timeout_us_)) + sizeof(parity_));
  // @@protoc_insertion_point(copy_constructor:contactless.transceive.TransceiveBitArray)
}

void TransceiveBitArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransceiveBitArray_contactless_2ftransceive_2eproto.base);
  ::memset(&bit_array_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parity_) -
      reinterpret_cast<char*>(&bit_array_)) + sizeof(parity_));
}

TransceiveBitArray::~TransceiveBitArray() {
  // @@protoc_insertion_point(destructor:contactless.transceive.TransceiveBitArray)
  SharedDtor();
}

void TransceiveBitArray::SharedDtor() {
  if (this != internal_default_instance()) delete bit_array_;
}

void TransceiveBitArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransceiveBitArray& TransceiveBitArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransceiveBitArray_contactless_2ftransceive_2eproto.base);
  return *internal_default_instance();
}


void TransceiveBitArray::Clear() {
// @@protoc_insertion_point(message_clear_start:contactless.transceive.TransceiveBitArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(bit_array_ != nullptr);
    bit_array_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&response_timeout_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parity_) -
        reinterpret_cast<char*>(&response_timeout_us_)) + sizeof(parity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TransceiveBitArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .contactless.transceive.BitArray bit_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bit_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 response_timeout_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_response_timeout_us(&has_bits);
          response_timeout_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tx_crc = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tx_crc(&has_bits);
          tx_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rx_crc = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rx_crc(&has_bits);
          rx_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool parity = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_parity(&has_bits);
          parity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransceiveBitArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contactless.transceive.TransceiveBitArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .contactless.transceive.BitArray bit_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bit_array(this), target, stream);
  }

  // required uint32 response_timeout_us = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_response_timeout_us(), target);
  }

  // optional bool tx_crc = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_tx_crc(), target);
  }

  // optional bool rx_crc = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_rx_crc(), target);
  }

  // optional bool parity = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_parity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contactless.transceive.TransceiveBitArray)
  return target;
}

size_t TransceiveBitArray::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:contactless.transceive.TransceiveBitArray)
  size_t total_size = 0;

  if (_internal_has_bit_array()) {
    // required .contactless.transceive.BitArray bit_array = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bit_array_);
  }

  if (_internal_has_response_timeout_us()) {
    // required uint32 response_timeout_us = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_response_timeout_us());
  }

  return total_size;
}
size_t TransceiveBitArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contactless.transceive.TransceiveBitArray)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .contactless.transceive.BitArray bit_array = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bit_array_);

    // required uint32 response_timeout_us = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_response_timeout_us());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional bool tx_crc = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool rx_crc = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool parity = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransceiveBitArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contactless.transceive.TransceiveBitArray)
  GOOGLE_DCHECK_NE(&from, this);
  const TransceiveBitArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransceiveBitArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contactless.transceive.TransceiveBitArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contactless.transceive.TransceiveBitArray)
    MergeFrom(*source);
  }
}

void TransceiveBitArray::MergeFrom(const TransceiveBitArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contactless.transceive.TransceiveBitArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_bit_array()->::contactless::transceive::BitArray::MergeFrom(from._internal_bit_array());
    }
    if (cached_has_bits & 0x00000002u) {
      response_timeout_us_ = from.response_timeout_us_;
    }
    if (cached_has_bits & 0x00000004u) {
      tx_crc_ = from.tx_crc_;
    }
    if (cached_has_bits & 0x00000008u) {
      rx_crc_ = from.rx_crc_;
    }
    if (cached_has_bits & 0x00000010u) {
      parity_ = from.parity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransceiveBitArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contactless.transceive.TransceiveBitArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransceiveBitArray::CopyFrom(const TransceiveBitArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contactless.transceive.TransceiveBitArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransceiveBitArray::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_bit_array()) {
    if (!bit_array_->IsInitialized()) return false;
  }
  return true;
}

void TransceiveBitArray::InternalSwap(TransceiveBitArray* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bit_array_, other->bit_array_);
  swap(response_timeout_us_, other->response_timeout_us_);
  swap(tx_crc_, other->tx_crc_);
  swap(rx_crc_, other->rx_crc_);
  swap(parity_, other->parity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransceiveBitArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BitArray::InitAsDefaultInstance() {
}
class BitArray::_Internal {
 public:
  using HasBits = decltype(std::declval<BitArray>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BitArray::BitArray()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contactless.transceive.BitArray)
}
BitArray::BitArray(const BitArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:contactless.transceive.BitArray)
}

void BitArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BitArray_contactless_2ftransceive_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = 0u;
}

BitArray::~BitArray() {
  // @@protoc_insertion_point(destructor:contactless.transceive.BitArray)
  SharedDtor();
}

void BitArray::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BitArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitArray& BitArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BitArray_contactless_2ftransceive_2eproto.base);
  return *internal_default_instance();
}


void BitArray::Clear() {
// @@protoc_insertion_point(message_clear_start:contactless.transceive.BitArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BitArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BitArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contactless.transceive.BitArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // required uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contactless.transceive.BitArray)
  return target;
}

size_t BitArray::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:contactless.transceive.BitArray)
  size_t total_size = 0;

  if (_internal_has_data()) {
    // required bytes data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (_internal_has_count()) {
    // required uint32 count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  return total_size;
}
size_t BitArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contactless.transceive.BitArray)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());

    // required uint32 count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contactless.transceive.BitArray)
  GOOGLE_DCHECK_NE(&from, this);
  const BitArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BitArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contactless.transceive.BitArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contactless.transceive.BitArray)
    MergeFrom(*source);
  }
}

void BitArray::MergeFrom(const BitArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contactless.transceive.BitArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BitArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contactless.transceive.BitArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitArray::CopyFrom(const BitArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contactless.transceive.BitArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitArray::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void BitArray::InternalSwap(BitArray* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BitArray::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace transceive
}  // namespace contactless
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::contactless::transceive::TransceiveBitArray* Arena::CreateMaybeMessage< ::contactless::transceive::TransceiveBitArray >(Arena* arena) {
  return Arena::CreateInternal< ::contactless::transceive::TransceiveBitArray >(arena);
}
template<> PROTOBUF_NOINLINE ::contactless::transceive::BitArray* Arena::CreateMaybeMessage< ::contactless::transceive::BitArray >(Arena* arena) {
  return Arena::CreateInternal< ::contactless::transceive::BitArray >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
