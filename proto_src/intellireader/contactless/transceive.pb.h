// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contactless/transceive.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_contactless_2ftransceive_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_contactless_2ftransceive_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_contactless_2ftransceive_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_contactless_2ftransceive_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contactless_2ftransceive_2eproto;
namespace contactless {
namespace transceive {
class BitArray;
class BitArrayDefaultTypeInternal;
extern BitArrayDefaultTypeInternal _BitArray_default_instance_;
class TransceiveBitArray;
class TransceiveBitArrayDefaultTypeInternal;
extern TransceiveBitArrayDefaultTypeInternal _TransceiveBitArray_default_instance_;
}  // namespace transceive
}  // namespace contactless
PROTOBUF_NAMESPACE_OPEN
template<> ::contactless::transceive::BitArray* Arena::CreateMaybeMessage<::contactless::transceive::BitArray>(Arena*);
template<> ::contactless::transceive::TransceiveBitArray* Arena::CreateMaybeMessage<::contactless::transceive::TransceiveBitArray>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace contactless {
namespace transceive {

// ===================================================================

class TransceiveBitArray :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contactless.transceive.TransceiveBitArray) */ {
 public:
  TransceiveBitArray();
  virtual ~TransceiveBitArray();

  TransceiveBitArray(const TransceiveBitArray& from);
  TransceiveBitArray(TransceiveBitArray&& from) noexcept
    : TransceiveBitArray() {
    *this = ::std::move(from);
  }

  inline TransceiveBitArray& operator=(const TransceiveBitArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransceiveBitArray& operator=(TransceiveBitArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransceiveBitArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransceiveBitArray* internal_default_instance() {
    return reinterpret_cast<const TransceiveBitArray*>(
               &_TransceiveBitArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransceiveBitArray& a, TransceiveBitArray& b) {
    a.Swap(&b);
  }
  inline void Swap(TransceiveBitArray* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransceiveBitArray* New() const final {
    return CreateMaybeMessage<TransceiveBitArray>(nullptr);
  }

  TransceiveBitArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransceiveBitArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransceiveBitArray& from);
  void MergeFrom(const TransceiveBitArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransceiveBitArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contactless.transceive.TransceiveBitArray";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contactless_2ftransceive_2eproto);
    return ::descriptor_table_contactless_2ftransceive_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitArrayFieldNumber = 1,
    kResponseTimeoutUsFieldNumber = 2,
    kTxCrcFieldNumber = 3,
    kRxCrcFieldNumber = 4,
    kParityFieldNumber = 5,
  };
  // required .contactless.transceive.BitArray bit_array = 1;
  bool has_bit_array() const;
  private:
  bool _internal_has_bit_array() const;
  public:
  void clear_bit_array();
  const ::contactless::transceive::BitArray& bit_array() const;
  ::contactless::transceive::BitArray* release_bit_array();
  ::contactless::transceive::BitArray* mutable_bit_array();
  void set_allocated_bit_array(::contactless::transceive::BitArray* bit_array);
  private:
  const ::contactless::transceive::BitArray& _internal_bit_array() const;
  ::contactless::transceive::BitArray* _internal_mutable_bit_array();
  public:

  // required uint32 response_timeout_us = 2;
  bool has_response_timeout_us() const;
  private:
  bool _internal_has_response_timeout_us() const;
  public:
  void clear_response_timeout_us();
  ::PROTOBUF_NAMESPACE_ID::uint32 response_timeout_us() const;
  void set_response_timeout_us(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_response_timeout_us() const;
  void _internal_set_response_timeout_us(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool tx_crc = 3 [default = false];
  bool has_tx_crc() const;
  private:
  bool _internal_has_tx_crc() const;
  public:
  void clear_tx_crc();
  bool tx_crc() const;
  void set_tx_crc(bool value);
  private:
  bool _internal_tx_crc() const;
  void _internal_set_tx_crc(bool value);
  public:

  // optional bool rx_crc = 4 [default = false];
  bool has_rx_crc() const;
  private:
  bool _internal_has_rx_crc() const;
  public:
  void clear_rx_crc();
  bool rx_crc() const;
  void set_rx_crc(bool value);
  private:
  bool _internal_rx_crc() const;
  void _internal_set_rx_crc(bool value);
  public:

  // optional bool parity = 5 [default = false];
  bool has_parity() const;
  private:
  bool _internal_has_parity() const;
  public:
  void clear_parity();
  bool parity() const;
  void set_parity(bool value);
  private:
  bool _internal_parity() const;
  void _internal_set_parity(bool value);
  public:

  // @@protoc_insertion_point(class_scope:contactless.transceive.TransceiveBitArray)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::contactless::transceive::BitArray* bit_array_;
  ::PROTOBUF_NAMESPACE_ID::uint32 response_timeout_us_;
  bool tx_crc_;
  bool rx_crc_;
  bool parity_;
  friend struct ::TableStruct_contactless_2ftransceive_2eproto;
};
// -------------------------------------------------------------------

class BitArray :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contactless.transceive.BitArray) */ {
 public:
  BitArray();
  virtual ~BitArray();

  BitArray(const BitArray& from);
  BitArray(BitArray&& from) noexcept
    : BitArray() {
    *this = ::std::move(from);
  }

  inline BitArray& operator=(const BitArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline BitArray& operator=(BitArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BitArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BitArray* internal_default_instance() {
    return reinterpret_cast<const BitArray*>(
               &_BitArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BitArray& a, BitArray& b) {
    a.Swap(&b);
  }
  inline void Swap(BitArray* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BitArray* New() const final {
    return CreateMaybeMessage<BitArray>(nullptr);
  }

  BitArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BitArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BitArray& from);
  void MergeFrom(const BitArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BitArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contactless.transceive.BitArray";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contactless_2ftransceive_2eproto);
    return ::descriptor_table_contactless_2ftransceive_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // required bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:contactless.transceive.BitArray)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_contactless_2ftransceive_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransceiveBitArray

// required .contactless.transceive.BitArray bit_array = 1;
inline bool TransceiveBitArray::_internal_has_bit_array() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || bit_array_ != nullptr);
  return value;
}
inline bool TransceiveBitArray::has_bit_array() const {
  return _internal_has_bit_array();
}
inline void TransceiveBitArray::clear_bit_array() {
  if (bit_array_ != nullptr) bit_array_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::contactless::transceive::BitArray& TransceiveBitArray::_internal_bit_array() const {
  const ::contactless::transceive::BitArray* p = bit_array_;
  return p != nullptr ? *p : *reinterpret_cast<const ::contactless::transceive::BitArray*>(
      &::contactless::transceive::_BitArray_default_instance_);
}
inline const ::contactless::transceive::BitArray& TransceiveBitArray::bit_array() const {
  // @@protoc_insertion_point(field_get:contactless.transceive.TransceiveBitArray.bit_array)
  return _internal_bit_array();
}
inline ::contactless::transceive::BitArray* TransceiveBitArray::release_bit_array() {
  // @@protoc_insertion_point(field_release:contactless.transceive.TransceiveBitArray.bit_array)
  _has_bits_[0] &= ~0x00000001u;
  ::contactless::transceive::BitArray* temp = bit_array_;
  bit_array_ = nullptr;
  return temp;
}
inline ::contactless::transceive::BitArray* TransceiveBitArray::_internal_mutable_bit_array() {
  _has_bits_[0] |= 0x00000001u;
  if (bit_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::contactless::transceive::BitArray>(GetArenaNoVirtual());
    bit_array_ = p;
  }
  return bit_array_;
}
inline ::contactless::transceive::BitArray* TransceiveBitArray::mutable_bit_array() {
  // @@protoc_insertion_point(field_mutable:contactless.transceive.TransceiveBitArray.bit_array)
  return _internal_mutable_bit_array();
}
inline void TransceiveBitArray::set_allocated_bit_array(::contactless::transceive::BitArray* bit_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bit_array_;
  }
  if (bit_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bit_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bit_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bit_array_ = bit_array;
  // @@protoc_insertion_point(field_set_allocated:contactless.transceive.TransceiveBitArray.bit_array)
}

// required uint32 response_timeout_us = 2;
inline bool TransceiveBitArray::_internal_has_response_timeout_us() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TransceiveBitArray::has_response_timeout_us() const {
  return _internal_has_response_timeout_us();
}
inline void TransceiveBitArray::clear_response_timeout_us() {
  response_timeout_us_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransceiveBitArray::_internal_response_timeout_us() const {
  return response_timeout_us_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransceiveBitArray::response_timeout_us() const {
  // @@protoc_insertion_point(field_get:contactless.transceive.TransceiveBitArray.response_timeout_us)
  return _internal_response_timeout_us();
}
inline void TransceiveBitArray::_internal_set_response_timeout_us(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  response_timeout_us_ = value;
}
inline void TransceiveBitArray::set_response_timeout_us(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_response_timeout_us(value);
  // @@protoc_insertion_point(field_set:contactless.transceive.TransceiveBitArray.response_timeout_us)
}

// optional bool tx_crc = 3 [default = false];
inline bool TransceiveBitArray::_internal_has_tx_crc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TransceiveBitArray::has_tx_crc() const {
  return _internal_has_tx_crc();
}
inline void TransceiveBitArray::clear_tx_crc() {
  tx_crc_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TransceiveBitArray::_internal_tx_crc() const {
  return tx_crc_;
}
inline bool TransceiveBitArray::tx_crc() const {
  // @@protoc_insertion_point(field_get:contactless.transceive.TransceiveBitArray.tx_crc)
  return _internal_tx_crc();
}
inline void TransceiveBitArray::_internal_set_tx_crc(bool value) {
  _has_bits_[0] |= 0x00000004u;
  tx_crc_ = value;
}
inline void TransceiveBitArray::set_tx_crc(bool value) {
  _internal_set_tx_crc(value);
  // @@protoc_insertion_point(field_set:contactless.transceive.TransceiveBitArray.tx_crc)
}

// optional bool rx_crc = 4 [default = false];
inline bool TransceiveBitArray::_internal_has_rx_crc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TransceiveBitArray::has_rx_crc() const {
  return _internal_has_rx_crc();
}
inline void TransceiveBitArray::clear_rx_crc() {
  rx_crc_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TransceiveBitArray::_internal_rx_crc() const {
  return rx_crc_;
}
inline bool TransceiveBitArray::rx_crc() const {
  // @@protoc_insertion_point(field_get:contactless.transceive.TransceiveBitArray.rx_crc)
  return _internal_rx_crc();
}
inline void TransceiveBitArray::_internal_set_rx_crc(bool value) {
  _has_bits_[0] |= 0x00000008u;
  rx_crc_ = value;
}
inline void TransceiveBitArray::set_rx_crc(bool value) {
  _internal_set_rx_crc(value);
  // @@protoc_insertion_point(field_set:contactless.transceive.TransceiveBitArray.rx_crc)
}

// optional bool parity = 5 [default = false];
inline bool TransceiveBitArray::_internal_has_parity() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TransceiveBitArray::has_parity() const {
  return _internal_has_parity();
}
inline void TransceiveBitArray::clear_parity() {
  parity_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool TransceiveBitArray::_internal_parity() const {
  return parity_;
}
inline bool TransceiveBitArray::parity() const {
  // @@protoc_insertion_point(field_get:contactless.transceive.TransceiveBitArray.parity)
  return _internal_parity();
}
inline void TransceiveBitArray::_internal_set_parity(bool value) {
  _has_bits_[0] |= 0x00000010u;
  parity_ = value;
}
inline void TransceiveBitArray::set_parity(bool value) {
  _internal_set_parity(value);
  // @@protoc_insertion_point(field_set:contactless.transceive.TransceiveBitArray.parity)
}

// -------------------------------------------------------------------

// BitArray

// required bytes data = 1;
inline bool BitArray::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BitArray::has_data() const {
  return _internal_has_data();
}
inline void BitArray::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BitArray::data() const {
  // @@protoc_insertion_point(field_get:contactless.transceive.BitArray.data)
  return _internal_data();
}
inline void BitArray::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:contactless.transceive.BitArray.data)
}
inline std::string* BitArray::mutable_data() {
  // @@protoc_insertion_point(field_mutable:contactless.transceive.BitArray.data)
  return _internal_mutable_data();
}
inline const std::string& BitArray::_internal_data() const {
  return data_.GetNoArena();
}
inline void BitArray::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BitArray::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contactless.transceive.BitArray.data)
}
inline void BitArray::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contactless.transceive.BitArray.data)
}
inline void BitArray::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contactless.transceive.BitArray.data)
}
inline std::string* BitArray::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BitArray::release_data() {
  // @@protoc_insertion_point(field_release:contactless.transceive.BitArray.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BitArray::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:contactless.transceive.BitArray.data)
}

// required uint32 count = 2;
inline bool BitArray::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BitArray::has_count() const {
  return _internal_has_count();
}
inline void BitArray::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BitArray::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BitArray::count() const {
  // @@protoc_insertion_point(field_get:contactless.transceive.BitArray.count)
  return _internal_count();
}
inline void BitArray::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void BitArray::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:contactless.transceive.BitArray.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transceive
}  // namespace contactless

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_contactless_2ftransceive_2eproto
