// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contactless/poll_for_token.proto

#include "contactless/poll_for_token.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace contactless {
namespace poll {
class PollForTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PollForToken> _instance;
} _PollForToken_default_instance_;
}  // namespace poll
}  // namespace contactless
static void InitDefaultsscc_info_PollForToken_contactless_2fpoll_5ffor_5ftoken_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contactless::poll::_PollForToken_default_instance_;
    new (ptr) ::contactless::poll::PollForToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contactless::poll::PollForToken::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PollForToken_contactless_2fpoll_5ffor_5ftoken_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PollForToken_contactless_2fpoll_5ffor_5ftoken_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_contactless_2fpoll_5ffor_5ftoken_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_contactless_2fpoll_5ffor_5ftoken_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_contactless_2fpoll_5ffor_5ftoken_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_contactless_2fpoll_5ffor_5ftoken_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::contactless::poll::PollForToken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contactless::poll::PollForToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contactless::poll::PollForToken, timeout_),
  PROTOBUF_FIELD_OFFSET(::contactless::poll::PollForToken, prefer_mifare_),
  PROTOBUF_FIELD_OFFSET(::contactless::poll::PollForToken, poll_stm_sri512_),
  PROTOBUF_FIELD_OFFSET(::contactless::poll::PollForToken, polling_mode_),
  PROTOBUF_FIELD_OFFSET(::contactless::poll::PollForToken, enable_ecp_),
  PROTOBUF_FIELD_OFFSET(::contactless::poll::PollForToken, light_up_led_),
  PROTOBUF_FIELD_OFFSET(::contactless::poll::PollForToken, poll_iso15693_),
  PROTOBUF_FIELD_OFFSET(::contactless::poll::PollForToken, poll_ask_cts_),
  0,
  1,
  2,
  7,
  5,
  3,
  4,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::contactless::poll::PollForToken)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contactless::poll::_PollForToken_default_instance_),
};

const char descriptor_table_protodef_contactless_2fpoll_5ffor_5ftoken_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n contactless/poll_for_token.proto\022\020cont"
  "actless.poll\"\257\002\n\014PollForToken\022\017\n\007timeout"
  "\030\001 \001(\r\022\034\n\rprefer_mifare\030\002 \001(\010:\005false\022\036\n\017"
  "poll_stm_sri512\030\003 \001(\010:\005false\022H\n\014polling_"
  "mode\030\004 \001(\0162\035.contactless.poll.PollingMod"
  "e:\023POLLING_WITH_PAUSES\022.\n\nenable_ecp\030\005 \001"
  "(\0162\032.contactless.poll.AppleEcp\022\033\n\014light_"
  "up_led\030\006 \001(\010:\005false\022\034\n\rpoll_iso15693\030\007 \001"
  "(\010:\005false\022\033\n\014poll_ask_cts\030\010 \001(\010:\005false*T"
  "\n\013PollingMode\022\027\n\023POLLING_WITH_PAUSES\020\001\022\025"
  "\n\021CONTINOUS_POLLING\020\002\022\025\n\021LOW_POWER_POLLI"
  "NG\020\003*\035\n\010AppleEcp\022\021\n\rRUSSIA_MOSCOW\020\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto_sccs[1] = {
  &scc_info_PollForToken_contactless_2fpoll_5ffor_5ftoken_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto_once;
static bool descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto = {
  &descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto_initialized, descriptor_table_protodef_contactless_2fpoll_5ffor_5ftoken_2eproto, "contactless/poll_for_token.proto", 475,
  &descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto_once, descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto_sccs, descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_contactless_2fpoll_5ffor_5ftoken_2eproto::offsets,
  file_level_metadata_contactless_2fpoll_5ffor_5ftoken_2eproto, 1, file_level_enum_descriptors_contactless_2fpoll_5ffor_5ftoken_2eproto, file_level_service_descriptors_contactless_2fpoll_5ffor_5ftoken_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_contactless_2fpoll_5ffor_5ftoken_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto), true);
namespace contactless {
namespace poll {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PollingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto);
  return file_level_enum_descriptors_contactless_2fpoll_5ffor_5ftoken_2eproto[0];
}
bool PollingMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppleEcp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto);
  return file_level_enum_descriptors_contactless_2fpoll_5ffor_5ftoken_2eproto[1];
}
bool AppleEcp_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PollForToken::InitAsDefaultInstance() {
}
class PollForToken::_Internal {
 public:
  using HasBits = decltype(std::declval<PollForToken>()._has_bits_);
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prefer_mifare(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_poll_stm_sri512(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_polling_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_enable_ecp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_light_up_led(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_poll_iso15693(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_poll_ask_cts(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

PollForToken::PollForToken()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contactless.poll.PollForToken)
}
PollForToken::PollForToken(const PollForToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timeout_, &from.timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&polling_mode_) -
    reinterpret_cast<char*>(&timeout_)) + sizeof(polling_mode_));
  // @@protoc_insertion_point(copy_constructor:contactless.poll.PollForToken)
}

void PollForToken::SharedCtor() {
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poll_ask_cts_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(poll_ask_cts_));
  polling_mode_ = 1;
}

PollForToken::~PollForToken() {
  // @@protoc_insertion_point(destructor:contactless.poll.PollForToken)
  SharedDtor();
}

void PollForToken::SharedDtor() {
}

void PollForToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PollForToken& PollForToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PollForToken_contactless_2fpoll_5ffor_5ftoken_2eproto.base);
  return *internal_default_instance();
}


void PollForToken::Clear() {
// @@protoc_insertion_point(message_clear_start:contactless.poll.PollForToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&timeout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&poll_ask_cts_) -
        reinterpret_cast<char*>(&timeout_)) + sizeof(poll_ask_cts_));
    polling_mode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PollForToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 timeout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool prefer_mifare = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_prefer_mifare(&has_bits);
          prefer_mifare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool poll_stm_sri512 = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_poll_stm_sri512(&has_bits);
          poll_stm_sri512_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contactless.poll.PollingMode polling_mode = 4 [default = POLLING_WITH_PAUSES];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::contactless::poll::PollingMode_IsValid(val))) {
            _internal_set_polling_mode(static_cast<::contactless::poll::PollingMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .contactless.poll.AppleEcp enable_ecp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::contactless::poll::AppleEcp_IsValid(val))) {
            _internal_set_enable_ecp(static_cast<::contactless::poll::AppleEcp>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool light_up_led = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_light_up_led(&has_bits);
          light_up_led_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool poll_iso15693 = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_poll_iso15693(&has_bits);
          poll_iso15693_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool poll_ask_cts = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_poll_ask_cts(&has_bits);
          poll_ask_cts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PollForToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contactless.poll.PollForToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timeout = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timeout(), target);
  }

  // optional bool prefer_mifare = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_prefer_mifare(), target);
  }

  // optional bool poll_stm_sri512 = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_poll_stm_sri512(), target);
  }

  // optional .contactless.poll.PollingMode polling_mode = 4 [default = POLLING_WITH_PAUSES];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_polling_mode(), target);
  }

  // optional .contactless.poll.AppleEcp enable_ecp = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_enable_ecp(), target);
  }

  // optional bool light_up_led = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_light_up_led(), target);
  }

  // optional bool poll_iso15693 = 7 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_poll_iso15693(), target);
  }

  // optional bool poll_ask_cts = 8 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_poll_ask_cts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contactless.poll.PollForToken)
  return target;
}

size_t PollForToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contactless.poll.PollForToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 timeout = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timeout());
    }

    // optional bool prefer_mifare = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool poll_stm_sri512 = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool light_up_led = 6 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool poll_iso15693 = 7 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .contactless.poll.AppleEcp enable_ecp = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enable_ecp());
    }

    // optional bool poll_ask_cts = 8 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .contactless.poll.PollingMode polling_mode = 4 [default = POLLING_WITH_PAUSES];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_polling_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PollForToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contactless.poll.PollForToken)
  GOOGLE_DCHECK_NE(&from, this);
  const PollForToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PollForToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contactless.poll.PollForToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contactless.poll.PollForToken)
    MergeFrom(*source);
  }
}

void PollForToken::MergeFrom(const PollForToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contactless.poll.PollForToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      timeout_ = from.timeout_;
    }
    if (cached_has_bits & 0x00000002u) {
      prefer_mifare_ = from.prefer_mifare_;
    }
    if (cached_has_bits & 0x00000004u) {
      poll_stm_sri512_ = from.poll_stm_sri512_;
    }
    if (cached_has_bits & 0x00000008u) {
      light_up_led_ = from.light_up_led_;
    }
    if (cached_has_bits & 0x00000010u) {
      poll_iso15693_ = from.poll_iso15693_;
    }
    if (cached_has_bits & 0x00000020u) {
      enable_ecp_ = from.enable_ecp_;
    }
    if (cached_has_bits & 0x00000040u) {
      poll_ask_cts_ = from.poll_ask_cts_;
    }
    if (cached_has_bits & 0x00000080u) {
      polling_mode_ = from.polling_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PollForToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contactless.poll.PollForToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PollForToken::CopyFrom(const PollForToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contactless.poll.PollForToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollForToken::IsInitialized() const {
  return true;
}

void PollForToken::InternalSwap(PollForToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timeout_, other->timeout_);
  swap(prefer_mifare_, other->prefer_mifare_);
  swap(poll_stm_sri512_, other->poll_stm_sri512_);
  swap(light_up_led_, other->light_up_led_);
  swap(poll_iso15693_, other->poll_iso15693_);
  swap(enable_ecp_, other->enable_ecp_);
  swap(poll_ask_cts_, other->poll_ask_cts_);
  swap(polling_mode_, other->polling_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PollForToken::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace poll
}  // namespace contactless
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::contactless::poll::PollForToken* Arena::CreateMaybeMessage< ::contactless::poll::PollForToken >(Arena* arena) {
  return Arena::CreateInternal< ::contactless::poll::PollForToken >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
