// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contactless/transaction.proto

#include "contactless/transaction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_contactless_2femv_5ftag_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmvTag_contactless_2femv_5ftag_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2fpoll_5ffor_5ftoken_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PollForToken_contactless_2fpoll_5ffor_5ftoken_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contactless_2ftoken_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Token_contactless_2ftoken_2eproto;
namespace contactless {
namespace transaction {
class PerformTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerformTransaction> _instance;
} _PerformTransaction_default_instance_;
class TransactionResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionResult> _instance;
} _TransactionResult_default_instance_;
class SensitiveDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensitiveData> _instance;
} _SensitiveData_default_instance_;
}  // namespace transaction
}  // namespace contactless
static void InitDefaultsscc_info_PerformTransaction_contactless_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contactless::transaction::_PerformTransaction_default_instance_;
    new (ptr) ::contactless::transaction::PerformTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contactless::transaction::PerformTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerformTransaction_contactless_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PerformTransaction_contactless_2ftransaction_2eproto}, {
      &scc_info_PollForToken_contactless_2fpoll_5ffor_5ftoken_2eproto.base,}};

static void InitDefaultsscc_info_SensitiveData_contactless_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contactless::transaction::_SensitiveData_default_instance_;
    new (ptr) ::contactless::transaction::SensitiveData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contactless::transaction::SensitiveData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensitiveData_contactless_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SensitiveData_contactless_2ftransaction_2eproto}, {
      &scc_info_EmvTag_contactless_2femv_5ftag_2eproto.base,}};

static void InitDefaultsscc_info_TransactionResult_contactless_2ftransaction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contactless::transaction::_TransactionResult_default_instance_;
    new (ptr) ::contactless::transaction::TransactionResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contactless::transaction::TransactionResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TransactionResult_contactless_2ftransaction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TransactionResult_contactless_2ftransaction_2eproto}, {
      &scc_info_Token_contactless_2ftoken_2eproto.base,
      &scc_info_EmvTag_contactless_2femv_5ftag_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_contactless_2ftransaction_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_contactless_2ftransaction_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_contactless_2ftransaction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_contactless_2ftransaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, poll_for_token_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, amount_authorized_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, transaction_date_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, transaction_type_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, terminal_country_code_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, transaction_time_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, transaction_currency_code_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, mastercard_amount_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, maestro_amount_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, mir_amount_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, troika_amount_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, unionpay_amount_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, merchant_name_and_location_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, merchant_category_code_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, terminal_identification_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::PerformTransaction, debug_),
  8,
  9,
  0,
  1,
  2,
  3,
  4,
  10,
  11,
  12,
  13,
  14,
  5,
  6,
  7,
  15,
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::TransactionResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::TransactionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::TransactionResult, status_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::TransactionResult, token_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::TransactionResult, emv_tags_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::TransactionResult, last_cmd_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::TransactionResult, last_sw_bytes_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::TransactionResult, error_reason_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::TransactionResult, token_carrier_type_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::TransactionResult, encrypted_sensitive_data_),
  5,
  4,
  ~0u,
  0,
  1,
  2,
  6,
  3,
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::SensitiveData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::SensitiveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contactless::transaction::SensitiveData, emv_tags_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::contactless::transaction::PerformTransaction)},
  { 37, 50, sizeof(::contactless::transaction::TransactionResult)},
  { 58, 64, sizeof(::contactless::transaction::SensitiveData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contactless::transaction::_PerformTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contactless::transaction::_TransactionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contactless::transaction::_SensitiveData_default_instance_),
};

const char descriptor_table_protodef_contactless_2ftransaction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035contactless/transaction.proto\022\027contact"
  "less.transaction\032 contactless/poll_for_t"
  "oken.proto\032\027contactless/token.proto\032\031con"
  "tactless/emv_tag.proto\032$contactless/toke"
  "n_carrier_type.proto\"\351\003\n\022PerformTransact"
  "ion\0226\n\016poll_for_token\030\001 \002(\0132\036.contactles"
  "s.poll.PollForToken\022\031\n\021amount_authorized"
  "\030\002 \002(\004\022\030\n\020transaction_date\030\003 \002(\014\022\030\n\020tran"
  "saction_type\030\004 \002(\014\022\035\n\025terminal_country_c"
  "ode\030\005 \002(\014\022\030\n\020transaction_time\030\006 \002(\014\022!\n\031t"
  "ransaction_currency_code\030\007 \002(\014\022\031\n\021master"
  "card_amount\030\010 \001(\004\022\026\n\016maestro_amount\030\t \001("
  "\004\022\022\n\nmir_amount\030\n \001(\004\022\025\n\rtroika_amount\030\013"
  " \001(\004\022\027\n\017unionpay_amount\030\014 \001(\004\022\"\n\032merchan"
  "t_name_and_location\030\020 \001(\014\022\036\n\026merchant_ca"
  "tegory_code\030\021 \001(\014\022\037\n\027terminal_identifica"
  "tion\030\022 \001(\014\022\024\n\005debug\030\023 \001(\010:\005false\"\326\002\n\021Tra"
  "nsactionResult\022:\n\006status\030\001 \002(\0162*.contact"
  "less.transaction.TransactionStatus\022\'\n\005to"
  "ken\030\002 \002(\0132\030.contactless.token.Token\022-\n\010e"
  "mv_tags\030\003 \003(\0132\033.contactless.emv_tag.EmvT"
  "ag\022\020\n\010last_cmd\030\004 \001(\014\022\025\n\rlast_sw_bytes\030\005 "
  "\001(\014\022\024\n\014error_reason\030\006 \001(\t\022L\n\022token_carri"
  "er_type\030\007 \001(\01620.contactless.token_carrie"
  "r_type.TokenCarrierType\022 \n\030encrypted_sen"
  "sitive_data\030\010 \001(\014\">\n\rSensitiveData\022-\n\010em"
  "v_tags\030\001 \003(\0132\033.contactless.emv_tag.EmvTa"
  "g*\362\001\n\021TransactionStatus\022!\n\035ONLINE_AUTHOR"
  "IZATION_REQUIRED\020\000\022\024\n\020OFFLINE_APPROVED\020\001"
  "\022\024\n\020OFFLINE_DECLINED\020\002\022\031\n\025USE_CONTACT_IN"
  "TERFACE\020\003\022\036\n\032UNABLE_PERFORM_TRANSACTION\020"
  "\004\022\020\n\014NON_EMV_CARD\020\005\022\020\n\014CARD_EXPIRED\020\006\022/\n"
  "+AUTHORIZATION_ON_CARDHOLDER_DEVICE_REQU"
  "IRED\020\007"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_contactless_2ftransaction_2eproto_deps[4] = {
  &::descriptor_table_contactless_2femv_5ftag_2eproto,
  &::descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto,
  &::descriptor_table_contactless_2ftoken_2eproto,
  &::descriptor_table_contactless_2ftoken_5fcarrier_5ftype_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_contactless_2ftransaction_2eproto_sccs[3] = {
  &scc_info_PerformTransaction_contactless_2ftransaction_2eproto.base,
  &scc_info_SensitiveData_contactless_2ftransaction_2eproto.base,
  &scc_info_TransactionResult_contactless_2ftransaction_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_contactless_2ftransaction_2eproto_once;
static bool descriptor_table_contactless_2ftransaction_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contactless_2ftransaction_2eproto = {
  &descriptor_table_contactless_2ftransaction_2eproto_initialized, descriptor_table_protodef_contactless_2ftransaction_2eproto, "contactless/transaction.proto", 1326,
  &descriptor_table_contactless_2ftransaction_2eproto_once, descriptor_table_contactless_2ftransaction_2eproto_sccs, descriptor_table_contactless_2ftransaction_2eproto_deps, 3, 4,
  schemas, file_default_instances, TableStruct_contactless_2ftransaction_2eproto::offsets,
  file_level_metadata_contactless_2ftransaction_2eproto, 3, file_level_enum_descriptors_contactless_2ftransaction_2eproto, file_level_service_descriptors_contactless_2ftransaction_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_contactless_2ftransaction_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_contactless_2ftransaction_2eproto), true);
namespace contactless {
namespace transaction {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_contactless_2ftransaction_2eproto);
  return file_level_enum_descriptors_contactless_2ftransaction_2eproto[0];
}
bool TransactionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PerformTransaction::InitAsDefaultInstance() {
  ::contactless::transaction::_PerformTransaction_default_instance_._instance.get_mutable()->poll_for_token_ = const_cast< ::contactless::poll::PollForToken*>(
      ::contactless::poll::PollForToken::internal_default_instance());
}
class PerformTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<PerformTransaction>()._has_bits_);
  static const ::contactless::poll::PollForToken& poll_for_token(const PerformTransaction* msg);
  static void set_has_poll_for_token(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_amount_authorized(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_transaction_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transaction_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_terminal_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_transaction_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_transaction_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mastercard_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_maestro_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_mir_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_troika_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_unionpay_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_merchant_name_and_location(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_merchant_category_code(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_terminal_identification(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::contactless::poll::PollForToken&
PerformTransaction::_Internal::poll_for_token(const PerformTransaction* msg) {
  return *msg->poll_for_token_;
}
void PerformTransaction::clear_poll_for_token() {
  if (poll_for_token_ != nullptr) poll_for_token_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
PerformTransaction::PerformTransaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contactless.transaction.PerformTransaction)
}
PerformTransaction::PerformTransaction(const PerformTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transaction_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_transaction_date()) {
    transaction_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_date_);
  }
  transaction_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_transaction_type()) {
    transaction_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_type_);
  }
  terminal_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_terminal_country_code()) {
    terminal_country_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.terminal_country_code_);
  }
  transaction_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_transaction_time()) {
    transaction_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_time_);
  }
  transaction_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_transaction_currency_code()) {
    transaction_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_currency_code_);
  }
  merchant_name_and_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_merchant_name_and_location()) {
    merchant_name_and_location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merchant_name_and_location_);
  }
  merchant_category_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_merchant_category_code()) {
    merchant_category_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merchant_category_code_);
  }
  terminal_identification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_terminal_identification()) {
    terminal_identification_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.terminal_identification_);
  }
  if (from._internal_has_poll_for_token()) {
    poll_for_token_ = new ::contactless::poll::PollForToken(*from.poll_for_token_);
  } else {
    poll_for_token_ = nullptr;
  }
  ::memcpy(&amount_authorized_, &from.amount_authorized_,
    static_cast<size_t>(reinterpret_cast<char*>(&debug_) -
    reinterpret_cast<char*>(&amount_authorized_)) + sizeof(debug_));
  // @@protoc_insertion_point(copy_constructor:contactless.transaction.PerformTransaction)
}

void PerformTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerformTransaction_contactless_2ftransaction_2eproto.base);
  transaction_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merchant_name_and_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merchant_category_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_identification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&poll_for_token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_) -
      reinterpret_cast<char*>(&poll_for_token_)) + sizeof(debug_));
}

PerformTransaction::~PerformTransaction() {
  // @@protoc_insertion_point(destructor:contactless.transaction.PerformTransaction)
  SharedDtor();
}

void PerformTransaction::SharedDtor() {
  transaction_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merchant_name_and_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  merchant_category_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  terminal_identification_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete poll_for_token_;
}

void PerformTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerformTransaction& PerformTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerformTransaction_contactless_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void PerformTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:contactless.transaction.PerformTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      transaction_date_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      transaction_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      terminal_country_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      transaction_time_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      transaction_currency_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      merchant_name_and_location_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      merchant_category_code_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      terminal_identification_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(poll_for_token_ != nullptr);
    poll_for_token_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&amount_authorized_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&debug_) -
        reinterpret_cast<char*>(&amount_authorized_)) + sizeof(debug_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PerformTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .contactless.poll.PollForToken poll_for_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_poll_for_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 amount_authorized = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_amount_authorized(&has_bits);
          amount_authorized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes transaction_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_transaction_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes transaction_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_transaction_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes terminal_country_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_terminal_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes transaction_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_transaction_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes transaction_currency_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_transaction_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 mastercard_amount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_mastercard_amount(&has_bits);
          mastercard_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 maestro_amount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_maestro_amount(&has_bits);
          maestro_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 mir_amount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_mir_amount(&has_bits);
          mir_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 troika_amount = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_troika_amount(&has_bits);
          troika_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 unionpay_amount = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_unionpay_amount(&has_bits);
          unionpay_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes merchant_name_and_location = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_merchant_name_and_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes merchant_category_code = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_merchant_category_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes terminal_identification = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_terminal_identification();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool debug = 19 [default = false];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_debug(&has_bits);
          debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerformTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contactless.transaction.PerformTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .contactless.poll.PollForToken poll_for_token = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::poll_for_token(this), target, stream);
  }

  // required uint64 amount_authorized = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amount_authorized(), target);
  }

  // required bytes transaction_date = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_transaction_date(), target);
  }

  // required bytes transaction_type = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_transaction_type(), target);
  }

  // required bytes terminal_country_code = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_terminal_country_code(), target);
  }

  // required bytes transaction_time = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_transaction_time(), target);
  }

  // required bytes transaction_currency_code = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_transaction_currency_code(), target);
  }

  // optional uint64 mastercard_amount = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_mastercard_amount(), target);
  }

  // optional uint64 maestro_amount = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_maestro_amount(), target);
  }

  // optional uint64 mir_amount = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_mir_amount(), target);
  }

  // optional uint64 troika_amount = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_troika_amount(), target);
  }

  // optional uint64 unionpay_amount = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_unionpay_amount(), target);
  }

  // optional bytes merchant_name_and_location = 16;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_merchant_name_and_location(), target);
  }

  // optional bytes merchant_category_code = 17;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_merchant_category_code(), target);
  }

  // optional bytes terminal_identification = 18;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_terminal_identification(), target);
  }

  // optional bool debug = 19 [default = false];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_debug(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contactless.transaction.PerformTransaction)
  return target;
}

size_t PerformTransaction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:contactless.transaction.PerformTransaction)
  size_t total_size = 0;

  if (_internal_has_transaction_date()) {
    // required bytes transaction_date = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_date());
  }

  if (_internal_has_transaction_type()) {
    // required bytes transaction_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_type());
  }

  if (_internal_has_terminal_country_code()) {
    // required bytes terminal_country_code = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_terminal_country_code());
  }

  if (_internal_has_transaction_time()) {
    // required bytes transaction_time = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_time());
  }

  if (_internal_has_transaction_currency_code()) {
    // required bytes transaction_currency_code = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_currency_code());
  }

  if (_internal_has_poll_for_token()) {
    // required .contactless.poll.PollForToken poll_for_token = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *poll_for_token_);
  }

  if (_internal_has_amount_authorized()) {
    // required uint64 amount_authorized = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount_authorized());
  }

  return total_size;
}
size_t PerformTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contactless.transaction.PerformTransaction)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000031f) ^ 0x0000031f) == 0) {  // All required fields are present.
    // required bytes transaction_date = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_date());

    // required bytes transaction_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_type());

    // required bytes terminal_country_code = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_terminal_country_code());

    // required bytes transaction_time = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_time());

    // required bytes transaction_currency_code = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction_currency_code());

    // required .contactless.poll.PollForToken poll_for_token = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *poll_for_token_);

    // required uint64 amount_authorized = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount_authorized());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000e0u) {
    // optional bytes merchant_name_and_location = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_merchant_name_and_location());
    }

    // optional bytes merchant_category_code = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_merchant_category_code());
    }

    // optional bytes terminal_identification = 18;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_terminal_identification());
    }

  }
  if (cached_has_bits & 0x0000fc00u) {
    // optional uint64 mastercard_amount = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_mastercard_amount());
    }

    // optional uint64 maestro_amount = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_maestro_amount());
    }

    // optional uint64 mir_amount = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_mir_amount());
    }

    // optional uint64 troika_amount = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_troika_amount());
    }

    // optional uint64 unionpay_amount = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_unionpay_amount());
    }

    // optional bool debug = 19 [default = false];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerformTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contactless.transaction.PerformTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const PerformTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerformTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contactless.transaction.PerformTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contactless.transaction.PerformTransaction)
    MergeFrom(*source);
  }
}

void PerformTransaction::MergeFrom(const PerformTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contactless.transaction.PerformTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      transaction_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_date_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      transaction_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      terminal_country_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.terminal_country_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      transaction_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_time_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      transaction_currency_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transaction_currency_code_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      merchant_name_and_location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merchant_name_and_location_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      merchant_category_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.merchant_category_code_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      terminal_identification_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.terminal_identification_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_poll_for_token()->::contactless::poll::PollForToken::MergeFrom(from._internal_poll_for_token());
    }
    if (cached_has_bits & 0x00000200u) {
      amount_authorized_ = from.amount_authorized_;
    }
    if (cached_has_bits & 0x00000400u) {
      mastercard_amount_ = from.mastercard_amount_;
    }
    if (cached_has_bits & 0x00000800u) {
      maestro_amount_ = from.maestro_amount_;
    }
    if (cached_has_bits & 0x00001000u) {
      mir_amount_ = from.mir_amount_;
    }
    if (cached_has_bits & 0x00002000u) {
      troika_amount_ = from.troika_amount_;
    }
    if (cached_has_bits & 0x00004000u) {
      unionpay_amount_ = from.unionpay_amount_;
    }
    if (cached_has_bits & 0x00008000u) {
      debug_ = from.debug_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerformTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contactless.transaction.PerformTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerformTransaction::CopyFrom(const PerformTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contactless.transaction.PerformTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformTransaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000031f) != 0x0000031f) return false;
  return true;
}

void PerformTransaction::InternalSwap(PerformTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  transaction_date_.Swap(&other->transaction_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transaction_type_.Swap(&other->transaction_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  terminal_country_code_.Swap(&other->terminal_country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transaction_time_.Swap(&other->transaction_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transaction_currency_code_.Swap(&other->transaction_currency_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  merchant_name_and_location_.Swap(&other->merchant_name_and_location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  merchant_category_code_.Swap(&other->merchant_category_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  terminal_identification_.Swap(&other->terminal_identification_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(poll_for_token_, other->poll_for_token_);
  swap(amount_authorized_, other->amount_authorized_);
  swap(mastercard_amount_, other->mastercard_amount_);
  swap(maestro_amount_, other->maestro_amount_);
  swap(mir_amount_, other->mir_amount_);
  swap(troika_amount_, other->troika_amount_);
  swap(unionpay_amount_, other->unionpay_amount_);
  swap(debug_, other->debug_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerformTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionResult::InitAsDefaultInstance() {
  ::contactless::transaction::_TransactionResult_default_instance_._instance.get_mutable()->token_ = const_cast< ::contactless::token::Token*>(
      ::contactless::token::Token::internal_default_instance());
}
class TransactionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<TransactionResult>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::contactless::token::Token& token(const TransactionResult* msg);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_sw_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_token_carrier_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_encrypted_sensitive_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::contactless::token::Token&
TransactionResult::_Internal::token(const TransactionResult* msg) {
  return *msg->token_;
}
void TransactionResult::clear_token() {
  if (token_ != nullptr) token_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void TransactionResult::clear_emv_tags() {
  emv_tags_.Clear();
}
TransactionResult::TransactionResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contactless.transaction.TransactionResult)
}
TransactionResult::TransactionResult(const TransactionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      emv_tags_(from.emv_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_last_cmd()) {
    last_cmd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_cmd_);
  }
  last_sw_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_last_sw_bytes()) {
    last_sw_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sw_bytes_);
  }
  error_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_error_reason()) {
    error_reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_reason_);
  }
  encrypted_sensitive_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_encrypted_sensitive_data()) {
    encrypted_sensitive_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_sensitive_data_);
  }
  if (from._internal_has_token()) {
    token_ = new ::contactless::token::Token(*from.token_);
  } else {
    token_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&token_carrier_type_) -
    reinterpret_cast<char*>(&status_)) + sizeof(token_carrier_type_));
  // @@protoc_insertion_point(copy_constructor:contactless.transaction.TransactionResult)
}

void TransactionResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionResult_contactless_2ftransaction_2eproto.base);
  last_cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sw_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_sensitive_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&token_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&token_carrier_type_) -
      reinterpret_cast<char*>(&token_)) + sizeof(token_carrier_type_));
}

TransactionResult::~TransactionResult() {
  // @@protoc_insertion_point(destructor:contactless.transaction.TransactionResult)
  SharedDtor();
}

void TransactionResult::SharedDtor() {
  last_cmd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_sw_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encrypted_sensitive_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete token_;
}

void TransactionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionResult& TransactionResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionResult_contactless_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void TransactionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:contactless.transaction.TransactionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emv_tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      last_cmd_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      last_sw_bytes_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      error_reason_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      encrypted_sensitive_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(token_ != nullptr);
      token_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&token_carrier_type_) -
        reinterpret_cast<char*>(&status_)) + sizeof(token_carrier_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TransactionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .contactless.transaction.TransactionStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::contactless::transaction::TransactionStatus_IsValid(val))) {
            _internal_set_status(static_cast<::contactless::transaction::TransactionStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .contactless.token.Token token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .contactless.emv_tag.EmvTag emv_tags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_emv_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes last_cmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_last_cmd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes last_sw_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_last_sw_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error_reason = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_error_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "contactless.transaction.TransactionResult.error_reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contactless.token_carrier_type.TokenCarrierType token_carrier_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::contactless::token_carrier_type::TokenCarrierType_IsValid(val))) {
            _internal_set_token_carrier_type(static_cast<::contactless::token_carrier_type::TokenCarrierType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes encrypted_sensitive_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_encrypted_sensitive_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contactless.transaction.TransactionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .contactless.transaction.TransactionStatus status = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // required .contactless.token.Token token = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::token(this), target, stream);
  }

  // repeated .contactless.emv_tag.EmvTag emv_tags = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_emv_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_emv_tags(i), target, stream);
  }

  // optional bytes last_cmd = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_last_cmd(), target);
  }

  // optional bytes last_sw_bytes = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_last_sw_bytes(), target);
  }

  // optional string error_reason = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_reason().data(), static_cast<int>(this->_internal_error_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "contactless.transaction.TransactionResult.error_reason");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_error_reason(), target);
  }

  // optional .contactless.token_carrier_type.TokenCarrierType token_carrier_type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_token_carrier_type(), target);
  }

  // optional bytes encrypted_sensitive_data = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_encrypted_sensitive_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contactless.transaction.TransactionResult)
  return target;
}

size_t TransactionResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:contactless.transaction.TransactionResult)
  size_t total_size = 0;

  if (_internal_has_token()) {
    // required .contactless.token.Token token = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *token_);
  }

  if (_internal_has_status()) {
    // required .contactless.transaction.TransactionStatus status = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return total_size;
}
size_t TransactionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contactless.transaction.TransactionResult)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000030) ^ 0x00000030) == 0) {  // All required fields are present.
    // required .contactless.token.Token token = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *token_);

    // required .contactless.transaction.TransactionStatus status = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .contactless.emv_tag.EmvTag emv_tags = 3;
  total_size += 1UL * this->_internal_emv_tags_size();
  for (const auto& msg : this->emv_tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes last_cmd = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_last_cmd());
    }

    // optional bytes last_sw_bytes = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_last_sw_bytes());
    }

    // optional string error_reason = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_reason());
    }

    // optional bytes encrypted_sensitive_data = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_encrypted_sensitive_data());
    }

  }
  // optional .contactless.token_carrier_type.TokenCarrierType token_carrier_type = 7;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_token_carrier_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contactless.transaction.TransactionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contactless.transaction.TransactionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contactless.transaction.TransactionResult)
    MergeFrom(*source);
  }
}

void TransactionResult::MergeFrom(const TransactionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contactless.transaction.TransactionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emv_tags_.MergeFrom(from.emv_tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      last_cmd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_cmd_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      last_sw_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_sw_bytes_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      error_reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_reason_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      encrypted_sensitive_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.encrypted_sensitive_data_);
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_token()->::contactless::token::Token::MergeFrom(from._internal_token());
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000040u) {
      token_carrier_type_ = from.token_carrier_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contactless.transaction.TransactionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionResult::CopyFrom(const TransactionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contactless.transaction.TransactionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000030) != 0x00000030) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(emv_tags_)) return false;
  if (_internal_has_token()) {
    if (!token_->IsInitialized()) return false;
  }
  return true;
}

void TransactionResult::InternalSwap(TransactionResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  emv_tags_.InternalSwap(&other->emv_tags_);
  last_cmd_.Swap(&other->last_cmd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_sw_bytes_.Swap(&other->last_sw_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_reason_.Swap(&other->error_reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encrypted_sensitive_data_.Swap(&other->encrypted_sensitive_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(token_, other->token_);
  swap(status_, other->status_);
  swap(token_carrier_type_, other->token_carrier_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensitiveData::InitAsDefaultInstance() {
}
class SensitiveData::_Internal {
 public:
  using HasBits = decltype(std::declval<SensitiveData>()._has_bits_);
};

void SensitiveData::clear_emv_tags() {
  emv_tags_.Clear();
}
SensitiveData::SensitiveData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contactless.transaction.SensitiveData)
}
SensitiveData::SensitiveData(const SensitiveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      emv_tags_(from.emv_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:contactless.transaction.SensitiveData)
}

void SensitiveData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensitiveData_contactless_2ftransaction_2eproto.base);
}

SensitiveData::~SensitiveData() {
  // @@protoc_insertion_point(destructor:contactless.transaction.SensitiveData)
  SharedDtor();
}

void SensitiveData::SharedDtor() {
}

void SensitiveData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensitiveData& SensitiveData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensitiveData_contactless_2ftransaction_2eproto.base);
  return *internal_default_instance();
}


void SensitiveData::Clear() {
// @@protoc_insertion_point(message_clear_start:contactless.transaction.SensitiveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emv_tags_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SensitiveData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .contactless.emv_tag.EmvTag emv_tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_emv_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensitiveData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contactless.transaction.SensitiveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .contactless.emv_tag.EmvTag emv_tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_emv_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_emv_tags(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contactless.transaction.SensitiveData)
  return target;
}

size_t SensitiveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contactless.transaction.SensitiveData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .contactless.emv_tag.EmvTag emv_tags = 1;
  total_size += 1UL * this->_internal_emv_tags_size();
  for (const auto& msg : this->emv_tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensitiveData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contactless.transaction.SensitiveData)
  GOOGLE_DCHECK_NE(&from, this);
  const SensitiveData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensitiveData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contactless.transaction.SensitiveData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contactless.transaction.SensitiveData)
    MergeFrom(*source);
  }
}

void SensitiveData::MergeFrom(const SensitiveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contactless.transaction.SensitiveData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emv_tags_.MergeFrom(from.emv_tags_);
}

void SensitiveData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contactless.transaction.SensitiveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensitiveData::CopyFrom(const SensitiveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contactless.transaction.SensitiveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensitiveData::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(emv_tags_)) return false;
  return true;
}

void SensitiveData::InternalSwap(SensitiveData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  emv_tags_.InternalSwap(&other->emv_tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensitiveData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace transaction
}  // namespace contactless
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::contactless::transaction::PerformTransaction* Arena::CreateMaybeMessage< ::contactless::transaction::PerformTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::contactless::transaction::PerformTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::contactless::transaction::TransactionResult* Arena::CreateMaybeMessage< ::contactless::transaction::TransactionResult >(Arena* arena) {
  return Arena::CreateInternal< ::contactless::transaction::TransactionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::contactless::transaction::SensitiveData* Arena::CreateMaybeMessage< ::contactless::transaction::SensitiveData >(Arena* arena) {
  return Arena::CreateInternal< ::contactless::transaction::SensitiveData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
