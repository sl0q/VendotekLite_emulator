// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contactless/poll_for_token.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_contactless_2fpoll_5ffor_5ftoken_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_contactless_2fpoll_5ffor_5ftoken_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_contactless_2fpoll_5ffor_5ftoken_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_contactless_2fpoll_5ffor_5ftoken_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto;
namespace contactless {
namespace poll {
class PollForToken;
class PollForTokenDefaultTypeInternal;
extern PollForTokenDefaultTypeInternal _PollForToken_default_instance_;
}  // namespace poll
}  // namespace contactless
PROTOBUF_NAMESPACE_OPEN
template<> ::contactless::poll::PollForToken* Arena::CreateMaybeMessage<::contactless::poll::PollForToken>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace contactless {
namespace poll {

enum PollingMode : int {
  POLLING_WITH_PAUSES = 1,
  CONTINOUS_POLLING = 2,
  LOW_POWER_POLLING = 3
};
bool PollingMode_IsValid(int value);
constexpr PollingMode PollingMode_MIN = POLLING_WITH_PAUSES;
constexpr PollingMode PollingMode_MAX = LOW_POWER_POLLING;
constexpr int PollingMode_ARRAYSIZE = PollingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PollingMode_descriptor();
template<typename T>
inline const std::string& PollingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PollingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PollingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PollingMode_descriptor(), enum_t_value);
}
inline bool PollingMode_Parse(
    const std::string& name, PollingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PollingMode>(
    PollingMode_descriptor(), name, value);
}
enum AppleEcp : int {
  RUSSIA_MOSCOW = 0
};
bool AppleEcp_IsValid(int value);
constexpr AppleEcp AppleEcp_MIN = RUSSIA_MOSCOW;
constexpr AppleEcp AppleEcp_MAX = RUSSIA_MOSCOW;
constexpr int AppleEcp_ARRAYSIZE = AppleEcp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AppleEcp_descriptor();
template<typename T>
inline const std::string& AppleEcp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AppleEcp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AppleEcp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AppleEcp_descriptor(), enum_t_value);
}
inline bool AppleEcp_Parse(
    const std::string& name, AppleEcp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AppleEcp>(
    AppleEcp_descriptor(), name, value);
}
// ===================================================================

class PollForToken :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contactless.poll.PollForToken) */ {
 public:
  PollForToken();
  virtual ~PollForToken();

  PollForToken(const PollForToken& from);
  PollForToken(PollForToken&& from) noexcept
    : PollForToken() {
    *this = ::std::move(from);
  }

  inline PollForToken& operator=(const PollForToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline PollForToken& operator=(PollForToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PollForToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PollForToken* internal_default_instance() {
    return reinterpret_cast<const PollForToken*>(
               &_PollForToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PollForToken& a, PollForToken& b) {
    a.Swap(&b);
  }
  inline void Swap(PollForToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PollForToken* New() const final {
    return CreateMaybeMessage<PollForToken>(nullptr);
  }

  PollForToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PollForToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PollForToken& from);
  void MergeFrom(const PollForToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PollForToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contactless.poll.PollForToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto);
    return ::descriptor_table_contactless_2fpoll_5ffor_5ftoken_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeoutFieldNumber = 1,
    kPreferMifareFieldNumber = 2,
    kPollStmSri512FieldNumber = 3,
    kLightUpLedFieldNumber = 6,
    kPollIso15693FieldNumber = 7,
    kEnableEcpFieldNumber = 5,
    kPollAskCtsFieldNumber = 8,
    kPollingModeFieldNumber = 4,
  };
  // optional uint32 timeout = 1;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool prefer_mifare = 2 [default = false];
  bool has_prefer_mifare() const;
  private:
  bool _internal_has_prefer_mifare() const;
  public:
  void clear_prefer_mifare();
  bool prefer_mifare() const;
  void set_prefer_mifare(bool value);
  private:
  bool _internal_prefer_mifare() const;
  void _internal_set_prefer_mifare(bool value);
  public:

  // optional bool poll_stm_sri512 = 3 [default = false];
  bool has_poll_stm_sri512() const;
  private:
  bool _internal_has_poll_stm_sri512() const;
  public:
  void clear_poll_stm_sri512();
  bool poll_stm_sri512() const;
  void set_poll_stm_sri512(bool value);
  private:
  bool _internal_poll_stm_sri512() const;
  void _internal_set_poll_stm_sri512(bool value);
  public:

  // optional bool light_up_led = 6 [default = false];
  bool has_light_up_led() const;
  private:
  bool _internal_has_light_up_led() const;
  public:
  void clear_light_up_led();
  bool light_up_led() const;
  void set_light_up_led(bool value);
  private:
  bool _internal_light_up_led() const;
  void _internal_set_light_up_led(bool value);
  public:

  // optional bool poll_iso15693 = 7 [default = false];
  bool has_poll_iso15693() const;
  private:
  bool _internal_has_poll_iso15693() const;
  public:
  void clear_poll_iso15693();
  bool poll_iso15693() const;
  void set_poll_iso15693(bool value);
  private:
  bool _internal_poll_iso15693() const;
  void _internal_set_poll_iso15693(bool value);
  public:

  // optional .contactless.poll.AppleEcp enable_ecp = 5;
  bool has_enable_ecp() const;
  private:
  bool _internal_has_enable_ecp() const;
  public:
  void clear_enable_ecp();
  ::contactless::poll::AppleEcp enable_ecp() const;
  void set_enable_ecp(::contactless::poll::AppleEcp value);
  private:
  ::contactless::poll::AppleEcp _internal_enable_ecp() const;
  void _internal_set_enable_ecp(::contactless::poll::AppleEcp value);
  public:

  // optional bool poll_ask_cts = 8 [default = false];
  bool has_poll_ask_cts() const;
  private:
  bool _internal_has_poll_ask_cts() const;
  public:
  void clear_poll_ask_cts();
  bool poll_ask_cts() const;
  void set_poll_ask_cts(bool value);
  private:
  bool _internal_poll_ask_cts() const;
  void _internal_set_poll_ask_cts(bool value);
  public:

  // optional .contactless.poll.PollingMode polling_mode = 4 [default = POLLING_WITH_PAUSES];
  bool has_polling_mode() const;
  private:
  bool _internal_has_polling_mode() const;
  public:
  void clear_polling_mode();
  ::contactless::poll::PollingMode polling_mode() const;
  void set_polling_mode(::contactless::poll::PollingMode value);
  private:
  ::contactless::poll::PollingMode _internal_polling_mode() const;
  void _internal_set_polling_mode(::contactless::poll::PollingMode value);
  public:

  // @@protoc_insertion_point(class_scope:contactless.poll.PollForToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  bool prefer_mifare_;
  bool poll_stm_sri512_;
  bool light_up_led_;
  bool poll_iso15693_;
  int enable_ecp_;
  bool poll_ask_cts_;
  int polling_mode_;
  friend struct ::TableStruct_contactless_2fpoll_5ffor_5ftoken_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PollForToken

// optional uint32 timeout = 1;
inline bool PollForToken::_internal_has_timeout() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PollForToken::has_timeout() const {
  return _internal_has_timeout();
}
inline void PollForToken::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PollForToken::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PollForToken::timeout() const {
  // @@protoc_insertion_point(field_get:contactless.poll.PollForToken.timeout)
  return _internal_timeout();
}
inline void PollForToken::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  timeout_ = value;
}
inline void PollForToken::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:contactless.poll.PollForToken.timeout)
}

// optional bool prefer_mifare = 2 [default = false];
inline bool PollForToken::_internal_has_prefer_mifare() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PollForToken::has_prefer_mifare() const {
  return _internal_has_prefer_mifare();
}
inline void PollForToken::clear_prefer_mifare() {
  prefer_mifare_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PollForToken::_internal_prefer_mifare() const {
  return prefer_mifare_;
}
inline bool PollForToken::prefer_mifare() const {
  // @@protoc_insertion_point(field_get:contactless.poll.PollForToken.prefer_mifare)
  return _internal_prefer_mifare();
}
inline void PollForToken::_internal_set_prefer_mifare(bool value) {
  _has_bits_[0] |= 0x00000002u;
  prefer_mifare_ = value;
}
inline void PollForToken::set_prefer_mifare(bool value) {
  _internal_set_prefer_mifare(value);
  // @@protoc_insertion_point(field_set:contactless.poll.PollForToken.prefer_mifare)
}

// optional bool poll_stm_sri512 = 3 [default = false];
inline bool PollForToken::_internal_has_poll_stm_sri512() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PollForToken::has_poll_stm_sri512() const {
  return _internal_has_poll_stm_sri512();
}
inline void PollForToken::clear_poll_stm_sri512() {
  poll_stm_sri512_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PollForToken::_internal_poll_stm_sri512() const {
  return poll_stm_sri512_;
}
inline bool PollForToken::poll_stm_sri512() const {
  // @@protoc_insertion_point(field_get:contactless.poll.PollForToken.poll_stm_sri512)
  return _internal_poll_stm_sri512();
}
inline void PollForToken::_internal_set_poll_stm_sri512(bool value) {
  _has_bits_[0] |= 0x00000004u;
  poll_stm_sri512_ = value;
}
inline void PollForToken::set_poll_stm_sri512(bool value) {
  _internal_set_poll_stm_sri512(value);
  // @@protoc_insertion_point(field_set:contactless.poll.PollForToken.poll_stm_sri512)
}

// optional .contactless.poll.PollingMode polling_mode = 4 [default = POLLING_WITH_PAUSES];
inline bool PollForToken::_internal_has_polling_mode() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PollForToken::has_polling_mode() const {
  return _internal_has_polling_mode();
}
inline void PollForToken::clear_polling_mode() {
  polling_mode_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::contactless::poll::PollingMode PollForToken::_internal_polling_mode() const {
  return static_cast< ::contactless::poll::PollingMode >(polling_mode_);
}
inline ::contactless::poll::PollingMode PollForToken::polling_mode() const {
  // @@protoc_insertion_point(field_get:contactless.poll.PollForToken.polling_mode)
  return _internal_polling_mode();
}
inline void PollForToken::_internal_set_polling_mode(::contactless::poll::PollingMode value) {
  assert(::contactless::poll::PollingMode_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  polling_mode_ = value;
}
inline void PollForToken::set_polling_mode(::contactless::poll::PollingMode value) {
  _internal_set_polling_mode(value);
  // @@protoc_insertion_point(field_set:contactless.poll.PollForToken.polling_mode)
}

// optional .contactless.poll.AppleEcp enable_ecp = 5;
inline bool PollForToken::_internal_has_enable_ecp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PollForToken::has_enable_ecp() const {
  return _internal_has_enable_ecp();
}
inline void PollForToken::clear_enable_ecp() {
  enable_ecp_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::contactless::poll::AppleEcp PollForToken::_internal_enable_ecp() const {
  return static_cast< ::contactless::poll::AppleEcp >(enable_ecp_);
}
inline ::contactless::poll::AppleEcp PollForToken::enable_ecp() const {
  // @@protoc_insertion_point(field_get:contactless.poll.PollForToken.enable_ecp)
  return _internal_enable_ecp();
}
inline void PollForToken::_internal_set_enable_ecp(::contactless::poll::AppleEcp value) {
  assert(::contactless::poll::AppleEcp_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  enable_ecp_ = value;
}
inline void PollForToken::set_enable_ecp(::contactless::poll::AppleEcp value) {
  _internal_set_enable_ecp(value);
  // @@protoc_insertion_point(field_set:contactless.poll.PollForToken.enable_ecp)
}

// optional bool light_up_led = 6 [default = false];
inline bool PollForToken::_internal_has_light_up_led() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PollForToken::has_light_up_led() const {
  return _internal_has_light_up_led();
}
inline void PollForToken::clear_light_up_led() {
  light_up_led_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PollForToken::_internal_light_up_led() const {
  return light_up_led_;
}
inline bool PollForToken::light_up_led() const {
  // @@protoc_insertion_point(field_get:contactless.poll.PollForToken.light_up_led)
  return _internal_light_up_led();
}
inline void PollForToken::_internal_set_light_up_led(bool value) {
  _has_bits_[0] |= 0x00000008u;
  light_up_led_ = value;
}
inline void PollForToken::set_light_up_led(bool value) {
  _internal_set_light_up_led(value);
  // @@protoc_insertion_point(field_set:contactless.poll.PollForToken.light_up_led)
}

// optional bool poll_iso15693 = 7 [default = false];
inline bool PollForToken::_internal_has_poll_iso15693() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PollForToken::has_poll_iso15693() const {
  return _internal_has_poll_iso15693();
}
inline void PollForToken::clear_poll_iso15693() {
  poll_iso15693_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PollForToken::_internal_poll_iso15693() const {
  return poll_iso15693_;
}
inline bool PollForToken::poll_iso15693() const {
  // @@protoc_insertion_point(field_get:contactless.poll.PollForToken.poll_iso15693)
  return _internal_poll_iso15693();
}
inline void PollForToken::_internal_set_poll_iso15693(bool value) {
  _has_bits_[0] |= 0x00000010u;
  poll_iso15693_ = value;
}
inline void PollForToken::set_poll_iso15693(bool value) {
  _internal_set_poll_iso15693(value);
  // @@protoc_insertion_point(field_set:contactless.poll.PollForToken.poll_iso15693)
}

// optional bool poll_ask_cts = 8 [default = false];
inline bool PollForToken::_internal_has_poll_ask_cts() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PollForToken::has_poll_ask_cts() const {
  return _internal_has_poll_ask_cts();
}
inline void PollForToken::clear_poll_ask_cts() {
  poll_ask_cts_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PollForToken::_internal_poll_ask_cts() const {
  return poll_ask_cts_;
}
inline bool PollForToken::poll_ask_cts() const {
  // @@protoc_insertion_point(field_get:contactless.poll.PollForToken.poll_ask_cts)
  return _internal_poll_ask_cts();
}
inline void PollForToken::_internal_set_poll_ask_cts(bool value) {
  _has_bits_[0] |= 0x00000040u;
  poll_ask_cts_ = value;
}
inline void PollForToken::set_poll_ask_cts(bool value) {
  _internal_set_poll_ask_cts(value);
  // @@protoc_insertion_point(field_set:contactless.poll.PollForToken.poll_ask_cts)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace poll
}  // namespace contactless

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::contactless::poll::PollingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::contactless::poll::PollingMode>() {
  return ::contactless::poll::PollingMode_descriptor();
}
template <> struct is_proto_enum< ::contactless::poll::AppleEcp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::contactless::poll::AppleEcp>() {
  return ::contactless::poll::AppleEcp_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_contactless_2fpoll_5ffor_5ftoken_2eproto
