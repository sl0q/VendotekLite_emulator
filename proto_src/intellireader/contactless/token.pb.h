// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contactless/token.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_contactless_2ftoken_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_contactless_2ftoken_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "contactless/token_type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_contactless_2ftoken_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_contactless_2ftoken_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contactless_2ftoken_2eproto;
namespace contactless {
namespace token {
class Token;
class TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
}  // namespace token
}  // namespace contactless
PROTOBUF_NAMESPACE_OPEN
template<> ::contactless::token::Token* Arena::CreateMaybeMessage<::contactless::token::Token>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace contactless {
namespace token {

// ===================================================================

class Token :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contactless.token.Token) */ {
 public:
  Token();
  virtual ~Token();

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Token& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Token* New() const final {
    return CreateMaybeMessage<Token>(nullptr);
  }

  Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Token& from);
  void MergeFrom(const Token& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contactless.token.Token";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contactless_2ftoken_2eproto);
    return ::descriptor_table_contactless_2ftoken_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kAnswerToSelectFieldNumber = 3,
    kAtqaFieldNumber = 4,
    kSakFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // required bytes id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional bytes answer_to_select = 3;
  bool has_answer_to_select() const;
  private:
  bool _internal_has_answer_to_select() const;
  public:
  void clear_answer_to_select();
  const std::string& answer_to_select() const;
  void set_answer_to_select(const std::string& value);
  void set_answer_to_select(std::string&& value);
  void set_answer_to_select(const char* value);
  void set_answer_to_select(const void* value, size_t size);
  std::string* mutable_answer_to_select();
  std::string* release_answer_to_select();
  void set_allocated_answer_to_select(std::string* answer_to_select);
  private:
  const std::string& _internal_answer_to_select() const;
  void _internal_set_answer_to_select(const std::string& value);
  std::string* _internal_mutable_answer_to_select();
  public:

  // optional bytes atqa = 4;
  bool has_atqa() const;
  private:
  bool _internal_has_atqa() const;
  public:
  void clear_atqa();
  const std::string& atqa() const;
  void set_atqa(const std::string& value);
  void set_atqa(std::string&& value);
  void set_atqa(const char* value);
  void set_atqa(const void* value, size_t size);
  std::string* mutable_atqa();
  std::string* release_atqa();
  void set_allocated_atqa(std::string* atqa);
  private:
  const std::string& _internal_atqa() const;
  void _internal_set_atqa(const std::string& value);
  std::string* _internal_mutable_atqa();
  public:

  // optional bytes sak = 5;
  bool has_sak() const;
  private:
  bool _internal_has_sak() const;
  public:
  void clear_sak();
  const std::string& sak() const;
  void set_sak(const std::string& value);
  void set_sak(std::string&& value);
  void set_sak(const char* value);
  void set_sak(const void* value, size_t size);
  std::string* mutable_sak();
  std::string* release_sak();
  void set_allocated_sak(std::string* sak);
  private:
  const std::string& _internal_sak() const;
  void _internal_set_sak(const std::string& value);
  std::string* _internal_mutable_sak();
  public:

  // required .contactless.token_type.TokenType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::contactless::token_type::TokenType type() const;
  void set_type(::contactless::token_type::TokenType value);
  private:
  ::contactless::token_type::TokenType _internal_type() const;
  void _internal_set_type(::contactless::token_type::TokenType value);
  public:

  // @@protoc_insertion_point(class_scope:contactless.token.Token)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_to_select_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atqa_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sak_;
  int type_;
  friend struct ::TableStruct_contactless_2ftoken_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Token

// required .contactless.token_type.TokenType type = 1;
inline bool Token::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Token::has_type() const {
  return _internal_has_type();
}
inline void Token::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::contactless::token_type::TokenType Token::_internal_type() const {
  return static_cast< ::contactless::token_type::TokenType >(type_);
}
inline ::contactless::token_type::TokenType Token::type() const {
  // @@protoc_insertion_point(field_get:contactless.token.Token.type)
  return _internal_type();
}
inline void Token::_internal_set_type(::contactless::token_type::TokenType value) {
  assert(::contactless::token_type::TokenType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void Token::set_type(::contactless::token_type::TokenType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:contactless.token.Token.type)
}

// required bytes id = 2;
inline bool Token::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Token::has_id() const {
  return _internal_has_id();
}
inline void Token::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Token::id() const {
  // @@protoc_insertion_point(field_get:contactless.token.Token.id)
  return _internal_id();
}
inline void Token::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:contactless.token.Token.id)
}
inline std::string* Token::mutable_id() {
  // @@protoc_insertion_point(field_mutable:contactless.token.Token.id)
  return _internal_mutable_id();
}
inline const std::string& Token::_internal_id() const {
  return id_.GetNoArena();
}
inline void Token::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Token::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contactless.token.Token.id)
}
inline void Token::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contactless.token.Token.id)
}
inline void Token::set_id(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contactless.token.Token.id)
}
inline std::string* Token::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Token::release_id() {
  // @@protoc_insertion_point(field_release:contactless.token.Token.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Token::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:contactless.token.Token.id)
}

// optional bytes answer_to_select = 3;
inline bool Token::_internal_has_answer_to_select() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Token::has_answer_to_select() const {
  return _internal_has_answer_to_select();
}
inline void Token::clear_answer_to_select() {
  answer_to_select_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Token::answer_to_select() const {
  // @@protoc_insertion_point(field_get:contactless.token.Token.answer_to_select)
  return _internal_answer_to_select();
}
inline void Token::set_answer_to_select(const std::string& value) {
  _internal_set_answer_to_select(value);
  // @@protoc_insertion_point(field_set:contactless.token.Token.answer_to_select)
}
inline std::string* Token::mutable_answer_to_select() {
  // @@protoc_insertion_point(field_mutable:contactless.token.Token.answer_to_select)
  return _internal_mutable_answer_to_select();
}
inline const std::string& Token::_internal_answer_to_select() const {
  return answer_to_select_.GetNoArena();
}
inline void Token::_internal_set_answer_to_select(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  answer_to_select_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Token::set_answer_to_select(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  answer_to_select_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contactless.token.Token.answer_to_select)
}
inline void Token::set_answer_to_select(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  answer_to_select_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contactless.token.Token.answer_to_select)
}
inline void Token::set_answer_to_select(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  answer_to_select_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contactless.token.Token.answer_to_select)
}
inline std::string* Token::_internal_mutable_answer_to_select() {
  _has_bits_[0] |= 0x00000002u;
  return answer_to_select_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Token::release_answer_to_select() {
  // @@protoc_insertion_point(field_release:contactless.token.Token.answer_to_select)
  if (!_internal_has_answer_to_select()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return answer_to_select_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Token::set_allocated_answer_to_select(std::string* answer_to_select) {
  if (answer_to_select != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  answer_to_select_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), answer_to_select);
  // @@protoc_insertion_point(field_set_allocated:contactless.token.Token.answer_to_select)
}

// optional bytes atqa = 4;
inline bool Token::_internal_has_atqa() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Token::has_atqa() const {
  return _internal_has_atqa();
}
inline void Token::clear_atqa() {
  atqa_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Token::atqa() const {
  // @@protoc_insertion_point(field_get:contactless.token.Token.atqa)
  return _internal_atqa();
}
inline void Token::set_atqa(const std::string& value) {
  _internal_set_atqa(value);
  // @@protoc_insertion_point(field_set:contactless.token.Token.atqa)
}
inline std::string* Token::mutable_atqa() {
  // @@protoc_insertion_point(field_mutable:contactless.token.Token.atqa)
  return _internal_mutable_atqa();
}
inline const std::string& Token::_internal_atqa() const {
  return atqa_.GetNoArena();
}
inline void Token::_internal_set_atqa(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  atqa_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Token::set_atqa(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  atqa_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contactless.token.Token.atqa)
}
inline void Token::set_atqa(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  atqa_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contactless.token.Token.atqa)
}
inline void Token::set_atqa(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  atqa_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contactless.token.Token.atqa)
}
inline std::string* Token::_internal_mutable_atqa() {
  _has_bits_[0] |= 0x00000004u;
  return atqa_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Token::release_atqa() {
  // @@protoc_insertion_point(field_release:contactless.token.Token.atqa)
  if (!_internal_has_atqa()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return atqa_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Token::set_allocated_atqa(std::string* atqa) {
  if (atqa != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  atqa_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), atqa);
  // @@protoc_insertion_point(field_set_allocated:contactless.token.Token.atqa)
}

// optional bytes sak = 5;
inline bool Token::_internal_has_sak() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Token::has_sak() const {
  return _internal_has_sak();
}
inline void Token::clear_sak() {
  sak_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Token::sak() const {
  // @@protoc_insertion_point(field_get:contactless.token.Token.sak)
  return _internal_sak();
}
inline void Token::set_sak(const std::string& value) {
  _internal_set_sak(value);
  // @@protoc_insertion_point(field_set:contactless.token.Token.sak)
}
inline std::string* Token::mutable_sak() {
  // @@protoc_insertion_point(field_mutable:contactless.token.Token.sak)
  return _internal_mutable_sak();
}
inline const std::string& Token::_internal_sak() const {
  return sak_.GetNoArena();
}
inline void Token::_internal_set_sak(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  sak_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Token::set_sak(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  sak_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contactless.token.Token.sak)
}
inline void Token::set_sak(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  sak_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contactless.token.Token.sak)
}
inline void Token::set_sak(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  sak_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contactless.token.Token.sak)
}
inline std::string* Token::_internal_mutable_sak() {
  _has_bits_[0] |= 0x00000008u;
  return sak_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Token::release_sak() {
  // @@protoc_insertion_point(field_release:contactless.token.Token.sak)
  if (!_internal_has_sak()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return sak_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Token::set_allocated_sak(std::string* sak) {
  if (sak != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sak_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sak);
  // @@protoc_insertion_point(field_set_allocated:contactless.token.Token.sak)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace token
}  // namespace contactless

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_contactless_2ftoken_2eproto
