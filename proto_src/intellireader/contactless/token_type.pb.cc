// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contactless/token_type.proto

#include "contactless/token_type.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace contactless {
namespace token_type {
}  // namespace token_type
}  // namespace contactless
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_contactless_2ftoken_5ftype_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_contactless_2ftoken_5ftype_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_contactless_2ftoken_5ftype_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_contactless_2ftoken_5ftype_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_contactless_2ftoken_5ftype_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034contactless/token_type.proto\022\026contactl"
  "ess.token_type*\225\003\n\tTokenType\022\013\n\007UNKNOWN\020"
  "\000\022\020\n\014ISO_14443_4A\020\001\022\020\n\014ISO_14443_4B\020\002\022\025\n"
  "\021MIFARE_CLASSIC_1K\020\003\022\025\n\021MIFARE_CLASSIC_2"
  "K\020\004\022\025\n\021MIFARE_CLASSIC_4K\020\005\022\027\n\023MIFARE_CLA"
  "SSIC_MINI\020\006\022\030\n\024MIFARE_PLUS_X_SL2_2K\020\007\022\030\n"
  "\024MIFARE_PLUS_X_SL2_4K\020\010\022\024\n\020MIFARE_UL_OR_"
  "ULC\020\t\022\033\n\027SMART_MX_WITH_MIFARE_1K\020\n\022\033\n\027SM"
  "ART_MX_WITH_MIFARE_4K\020\013\022\016\n\nTAG_N_PLAY\020\014\022"
  "\016\n\nSTM_SRI512\020\r\022\024\n\020GENERIC_ISO15693\020\016\022\r\n"
  "\tICODE_SLI\020\017\022\016\n\nICODE_SLIX\020\020\022\017\n\013ICODE_SL"
  "IX2\020\021\022\017\n\013ASK_CTS512B\020\022"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_contactless_2ftoken_5ftype_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_contactless_2ftoken_5ftype_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_contactless_2ftoken_5ftype_2eproto_once;
static bool descriptor_table_contactless_2ftoken_5ftype_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contactless_2ftoken_5ftype_2eproto = {
  &descriptor_table_contactless_2ftoken_5ftype_2eproto_initialized, descriptor_table_protodef_contactless_2ftoken_5ftype_2eproto, "contactless/token_type.proto", 462,
  &descriptor_table_contactless_2ftoken_5ftype_2eproto_once, descriptor_table_contactless_2ftoken_5ftype_2eproto_sccs, descriptor_table_contactless_2ftoken_5ftype_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_contactless_2ftoken_5ftype_2eproto::offsets,
  file_level_metadata_contactless_2ftoken_5ftype_2eproto, 0, file_level_enum_descriptors_contactless_2ftoken_5ftype_2eproto, file_level_service_descriptors_contactless_2ftoken_5ftype_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_contactless_2ftoken_5ftype_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_contactless_2ftoken_5ftype_2eproto), true);
namespace contactless {
namespace token_type {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TokenType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_contactless_2ftoken_5ftype_2eproto);
  return file_level_enum_descriptors_contactless_2ftoken_5ftype_2eproto[0];
}
bool TokenType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace token_type
}  // namespace contactless
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
