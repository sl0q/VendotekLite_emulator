// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: misc/leds.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_misc_2fleds_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_misc_2fleds_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_misc_2fleds_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_misc_2fleds_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_misc_2fleds_2eproto;
namespace misc {
namespace leds {
class Leds;
class LedsDefaultTypeInternal;
extern LedsDefaultTypeInternal _Leds_default_instance_;
}  // namespace leds
}  // namespace misc
PROTOBUF_NAMESPACE_OPEN
template<> ::misc::leds::Leds* Arena::CreateMaybeMessage<::misc::leds::Leds>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace misc {
namespace leds {

// ===================================================================

class Leds :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:misc.leds.Leds) */ {
 public:
  Leds();
  virtual ~Leds();

  Leds(const Leds& from);
  Leds(Leds&& from) noexcept
    : Leds() {
    *this = ::std::move(from);
  }

  inline Leds& operator=(const Leds& from) {
    CopyFrom(from);
    return *this;
  }
  inline Leds& operator=(Leds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Leds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Leds* internal_default_instance() {
    return reinterpret_cast<const Leds*>(
               &_Leds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Leds& a, Leds& b) {
    a.Swap(&b);
  }
  inline void Swap(Leds* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Leds* New() const final {
    return CreateMaybeMessage<Leds>(nullptr);
  }

  Leds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Leds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Leds& from);
  void MergeFrom(const Leds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Leds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "misc.leds.Leds";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_misc_2fleds_2eproto);
    return ::descriptor_table_misc_2fleds_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlueFieldNumber = 1,
    kYellowFieldNumber = 2,
    kGreenFieldNumber = 3,
    kRedFieldNumber = 4,
    kLcdBacklightFieldNumber = 5,
  };
  // optional bool blue = 1;
  bool has_blue() const;
  private:
  bool _internal_has_blue() const;
  public:
  void clear_blue();
  bool blue() const;
  void set_blue(bool value);
  private:
  bool _internal_blue() const;
  void _internal_set_blue(bool value);
  public:

  // optional bool yellow = 2;
  bool has_yellow() const;
  private:
  bool _internal_has_yellow() const;
  public:
  void clear_yellow();
  bool yellow() const;
  void set_yellow(bool value);
  private:
  bool _internal_yellow() const;
  void _internal_set_yellow(bool value);
  public:

  // optional bool green = 3;
  bool has_green() const;
  private:
  bool _internal_has_green() const;
  public:
  void clear_green();
  bool green() const;
  void set_green(bool value);
  private:
  bool _internal_green() const;
  void _internal_set_green(bool value);
  public:

  // optional bool red = 4;
  bool has_red() const;
  private:
  bool _internal_has_red() const;
  public:
  void clear_red();
  bool red() const;
  void set_red(bool value);
  private:
  bool _internal_red() const;
  void _internal_set_red(bool value);
  public:

  // optional bool lcd_backlight = 5;
  bool has_lcd_backlight() const;
  private:
  bool _internal_has_lcd_backlight() const;
  public:
  void clear_lcd_backlight();
  bool lcd_backlight() const;
  void set_lcd_backlight(bool value);
  private:
  bool _internal_lcd_backlight() const;
  void _internal_set_lcd_backlight(bool value);
  public:

  // @@protoc_insertion_point(class_scope:misc.leds.Leds)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool blue_;
  bool yellow_;
  bool green_;
  bool red_;
  bool lcd_backlight_;
  friend struct ::TableStruct_misc_2fleds_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Leds

// optional bool blue = 1;
inline bool Leds::_internal_has_blue() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Leds::has_blue() const {
  return _internal_has_blue();
}
inline void Leds::clear_blue() {
  blue_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Leds::_internal_blue() const {
  return blue_;
}
inline bool Leds::blue() const {
  // @@protoc_insertion_point(field_get:misc.leds.Leds.blue)
  return _internal_blue();
}
inline void Leds::_internal_set_blue(bool value) {
  _has_bits_[0] |= 0x00000001u;
  blue_ = value;
}
inline void Leds::set_blue(bool value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:misc.leds.Leds.blue)
}

// optional bool yellow = 2;
inline bool Leds::_internal_has_yellow() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Leds::has_yellow() const {
  return _internal_has_yellow();
}
inline void Leds::clear_yellow() {
  yellow_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Leds::_internal_yellow() const {
  return yellow_;
}
inline bool Leds::yellow() const {
  // @@protoc_insertion_point(field_get:misc.leds.Leds.yellow)
  return _internal_yellow();
}
inline void Leds::_internal_set_yellow(bool value) {
  _has_bits_[0] |= 0x00000002u;
  yellow_ = value;
}
inline void Leds::set_yellow(bool value) {
  _internal_set_yellow(value);
  // @@protoc_insertion_point(field_set:misc.leds.Leds.yellow)
}

// optional bool green = 3;
inline bool Leds::_internal_has_green() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Leds::has_green() const {
  return _internal_has_green();
}
inline void Leds::clear_green() {
  green_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Leds::_internal_green() const {
  return green_;
}
inline bool Leds::green() const {
  // @@protoc_insertion_point(field_get:misc.leds.Leds.green)
  return _internal_green();
}
inline void Leds::_internal_set_green(bool value) {
  _has_bits_[0] |= 0x00000004u;
  green_ = value;
}
inline void Leds::set_green(bool value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:misc.leds.Leds.green)
}

// optional bool red = 4;
inline bool Leds::_internal_has_red() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Leds::has_red() const {
  return _internal_has_red();
}
inline void Leds::clear_red() {
  red_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Leds::_internal_red() const {
  return red_;
}
inline bool Leds::red() const {
  // @@protoc_insertion_point(field_get:misc.leds.Leds.red)
  return _internal_red();
}
inline void Leds::_internal_set_red(bool value) {
  _has_bits_[0] |= 0x00000008u;
  red_ = value;
}
inline void Leds::set_red(bool value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:misc.leds.Leds.red)
}

// optional bool lcd_backlight = 5;
inline bool Leds::_internal_has_lcd_backlight() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Leds::has_lcd_backlight() const {
  return _internal_has_lcd_backlight();
}
inline void Leds::clear_lcd_backlight() {
  lcd_backlight_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Leds::_internal_lcd_backlight() const {
  return lcd_backlight_;
}
inline bool Leds::lcd_backlight() const {
  // @@protoc_insertion_point(field_get:misc.leds.Leds.lcd_backlight)
  return _internal_lcd_backlight();
}
inline void Leds::_internal_set_lcd_backlight(bool value) {
  _has_bits_[0] |= 0x00000010u;
  lcd_backlight_ = value;
}
inline void Leds::set_lcd_backlight(bool value) {
  _internal_set_lcd_backlight(value);
  // @@protoc_insertion_point(field_set:misc.leds.Leds.lcd_backlight)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace leds
}  // namespace misc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_misc_2fleds_2eproto
