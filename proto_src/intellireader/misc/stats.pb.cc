// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: misc/stats.proto

#include "misc/stats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_misc_2fethernet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Statistic_misc_2fethernet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Event_misc_2fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2flwip_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Statistic_misc_2flwip_2eproto;
namespace misc {
namespace stats {
class GetDeviceStatisticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceStatistic> _instance;
} _GetDeviceStatistic_default_instance_;
class DeviceStatisticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceStatistic> _instance;
} _DeviceStatistic_default_instance_;
}  // namespace stats
}  // namespace misc
static void InitDefaultsscc_info_DeviceStatistic_misc_2fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::misc::stats::_DeviceStatistic_default_instance_;
    new (ptr) ::misc::stats::DeviceStatistic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::misc::stats::DeviceStatistic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DeviceStatistic_misc_2fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DeviceStatistic_misc_2fstats_2eproto}, {
      &scc_info_Statistic_misc_2flwip_2eproto.base,
      &scc_info_Event_misc_2fevent_2eproto.base,
      &scc_info_Statistic_misc_2fethernet_2eproto.base,}};

static void InitDefaultsscc_info_GetDeviceStatistic_misc_2fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::misc::stats::_GetDeviceStatistic_default_instance_;
    new (ptr) ::misc::stats::GetDeviceStatistic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::misc::stats::GetDeviceStatistic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDeviceStatistic_misc_2fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDeviceStatistic_misc_2fstats_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_misc_2fstats_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_misc_2fstats_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_misc_2fstats_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_misc_2fstats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::misc::stats::GetDeviceStatistic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::misc::stats::GetDeviceStatistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::misc::stats::DeviceStatistic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::misc::stats::DeviceStatistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::misc::stats::DeviceStatistic, lwip_),
  PROTOBUF_FIELD_OFFSET(::misc::stats::DeviceStatistic, events_),
  PROTOBUF_FIELD_OFFSET(::misc::stats::DeviceStatistic, ethernet_),
  0,
  ~0u,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::misc::stats::GetDeviceStatistic)},
  { 5, 13, sizeof(::misc::stats::DeviceStatistic)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::misc::stats::_GetDeviceStatistic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::misc::stats::_DeviceStatistic_default_instance_),
};

const char descriptor_table_protodef_misc_2fstats_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020misc/stats.proto\022\nmisc.stats\032\017misc/lwi"
  "p.proto\032\020misc/event.proto\032\023misc/ethernet"
  ".proto\"\024\n\022GetDeviceStatistic\"\204\001\n\017DeviceS"
  "tatistic\022\"\n\004lwip\030\001 \001(\0132\024.misc.lwip.Stati"
  "stic\022!\n\006events\030\002 \003(\0132\021.misc.event.Event\022"
  "*\n\010ethernet\030\003 \001(\0132\030.misc.ethernet.Statis"
  "tic"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_misc_2fstats_2eproto_deps[3] = {
  &::descriptor_table_misc_2fethernet_2eproto,
  &::descriptor_table_misc_2fevent_2eproto,
  &::descriptor_table_misc_2flwip_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_misc_2fstats_2eproto_sccs[2] = {
  &scc_info_DeviceStatistic_misc_2fstats_2eproto.base,
  &scc_info_GetDeviceStatistic_misc_2fstats_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_misc_2fstats_2eproto_once;
static bool descriptor_table_misc_2fstats_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_misc_2fstats_2eproto = {
  &descriptor_table_misc_2fstats_2eproto_initialized, descriptor_table_protodef_misc_2fstats_2eproto, "misc/stats.proto", 243,
  &descriptor_table_misc_2fstats_2eproto_once, descriptor_table_misc_2fstats_2eproto_sccs, descriptor_table_misc_2fstats_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_misc_2fstats_2eproto::offsets,
  file_level_metadata_misc_2fstats_2eproto, 2, file_level_enum_descriptors_misc_2fstats_2eproto, file_level_service_descriptors_misc_2fstats_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_misc_2fstats_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_misc_2fstats_2eproto), true);
namespace misc {
namespace stats {

// ===================================================================

void GetDeviceStatistic::InitAsDefaultInstance() {
}
class GetDeviceStatistic::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDeviceStatistic>()._has_bits_);
};

GetDeviceStatistic::GetDeviceStatistic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:misc.stats.GetDeviceStatistic)
}
GetDeviceStatistic::GetDeviceStatistic(const GetDeviceStatistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:misc.stats.GetDeviceStatistic)
}

void GetDeviceStatistic::SharedCtor() {
}

GetDeviceStatistic::~GetDeviceStatistic() {
  // @@protoc_insertion_point(destructor:misc.stats.GetDeviceStatistic)
  SharedDtor();
}

void GetDeviceStatistic::SharedDtor() {
}

void GetDeviceStatistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceStatistic& GetDeviceStatistic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceStatistic_misc_2fstats_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:misc.stats.GetDeviceStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetDeviceStatistic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceStatistic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:misc.stats.GetDeviceStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:misc.stats.GetDeviceStatistic)
  return target;
}

size_t GetDeviceStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:misc.stats.GetDeviceStatistic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceStatistic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:misc.stats.GetDeviceStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceStatistic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceStatistic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:misc.stats.GetDeviceStatistic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:misc.stats.GetDeviceStatistic)
    MergeFrom(*source);
  }
}

void GetDeviceStatistic::MergeFrom(const GetDeviceStatistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:misc.stats.GetDeviceStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetDeviceStatistic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:misc.stats.GetDeviceStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceStatistic::CopyFrom(const GetDeviceStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:misc.stats.GetDeviceStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceStatistic::IsInitialized() const {
  return true;
}

void GetDeviceStatistic::InternalSwap(GetDeviceStatistic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceStatistic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceStatistic::InitAsDefaultInstance() {
  ::misc::stats::_DeviceStatistic_default_instance_._instance.get_mutable()->lwip_ = const_cast< ::misc::lwip::Statistic*>(
      ::misc::lwip::Statistic::internal_default_instance());
  ::misc::stats::_DeviceStatistic_default_instance_._instance.get_mutable()->ethernet_ = const_cast< ::misc::ethernet::Statistic*>(
      ::misc::ethernet::Statistic::internal_default_instance());
}
class DeviceStatistic::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceStatistic>()._has_bits_);
  static const ::misc::lwip::Statistic& lwip(const DeviceStatistic* msg);
  static void set_has_lwip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::misc::ethernet::Statistic& ethernet(const DeviceStatistic* msg);
  static void set_has_ethernet(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::misc::lwip::Statistic&
DeviceStatistic::_Internal::lwip(const DeviceStatistic* msg) {
  return *msg->lwip_;
}
const ::misc::ethernet::Statistic&
DeviceStatistic::_Internal::ethernet(const DeviceStatistic* msg) {
  return *msg->ethernet_;
}
void DeviceStatistic::clear_lwip() {
  if (lwip_ != nullptr) lwip_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceStatistic::clear_events() {
  events_.Clear();
}
void DeviceStatistic::clear_ethernet() {
  if (ethernet_ != nullptr) ethernet_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DeviceStatistic::DeviceStatistic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:misc.stats.DeviceStatistic)
}
DeviceStatistic::DeviceStatistic(const DeviceStatistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_lwip()) {
    lwip_ = new ::misc::lwip::Statistic(*from.lwip_);
  } else {
    lwip_ = nullptr;
  }
  if (from._internal_has_ethernet()) {
    ethernet_ = new ::misc::ethernet::Statistic(*from.ethernet_);
  } else {
    ethernet_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:misc.stats.DeviceStatistic)
}

void DeviceStatistic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceStatistic_misc_2fstats_2eproto.base);
  ::memset(&lwip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ethernet_) -
      reinterpret_cast<char*>(&lwip_)) + sizeof(ethernet_));
}

DeviceStatistic::~DeviceStatistic() {
  // @@protoc_insertion_point(destructor:misc.stats.DeviceStatistic)
  SharedDtor();
}

void DeviceStatistic::SharedDtor() {
  if (this != internal_default_instance()) delete lwip_;
  if (this != internal_default_instance()) delete ethernet_;
}

void DeviceStatistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceStatistic& DeviceStatistic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceStatistic_misc_2fstats_2eproto.base);
  return *internal_default_instance();
}


void DeviceStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:misc.stats.DeviceStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lwip_ != nullptr);
      lwip_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ethernet_ != nullptr);
      ethernet_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DeviceStatistic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .misc.lwip.Statistic lwip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lwip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .misc.event.Event events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .misc.ethernet.Statistic ethernet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ethernet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceStatistic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:misc.stats.DeviceStatistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .misc.lwip.Statistic lwip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lwip(this), target, stream);
  }

  // repeated .misc.event.Event events = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_events(i), target, stream);
  }

  // optional .misc.ethernet.Statistic ethernet = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ethernet(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:misc.stats.DeviceStatistic)
  return target;
}

size_t DeviceStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:misc.stats.DeviceStatistic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .misc.event.Event events = 2;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .misc.lwip.Statistic lwip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lwip_);
    }

    // optional .misc.ethernet.Statistic ethernet = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ethernet_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceStatistic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:misc.stats.DeviceStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceStatistic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceStatistic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:misc.stats.DeviceStatistic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:misc.stats.DeviceStatistic)
    MergeFrom(*source);
  }
}

void DeviceStatistic::MergeFrom(const DeviceStatistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:misc.stats.DeviceStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lwip()->::misc::lwip::Statistic::MergeFrom(from._internal_lwip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ethernet()->::misc::ethernet::Statistic::MergeFrom(from._internal_ethernet());
    }
  }
}

void DeviceStatistic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:misc.stats.DeviceStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceStatistic::CopyFrom(const DeviceStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:misc.stats.DeviceStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatistic::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(events_)) return false;
  if (_internal_has_lwip()) {
    if (!lwip_->IsInitialized()) return false;
  }
  if (_internal_has_ethernet()) {
    if (!ethernet_->IsInitialized()) return false;
  }
  return true;
}

void DeviceStatistic::InternalSwap(DeviceStatistic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  events_.InternalSwap(&other->events_);
  swap(lwip_, other->lwip_);
  swap(ethernet_, other->ethernet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceStatistic::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace stats
}  // namespace misc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::misc::stats::GetDeviceStatistic* Arena::CreateMaybeMessage< ::misc::stats::GetDeviceStatistic >(Arena* arena) {
  return Arena::CreateInternal< ::misc::stats::GetDeviceStatistic >(arena);
}
template<> PROTOBUF_NOINLINE ::misc::stats::DeviceStatistic* Arena::CreateMaybeMessage< ::misc::stats::DeviceStatistic >(Arena* arena) {
  return Arena::CreateInternal< ::misc::stats::DeviceStatistic >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
