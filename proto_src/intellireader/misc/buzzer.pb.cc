// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: misc/buzzer.proto

#include "misc/buzzer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_misc_2fbuzzer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Note_misc_2fbuzzer_2eproto;
namespace misc {
namespace buzzer {
class MakeSoundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MakeSound> _instance;
} _MakeSound_default_instance_;
class NoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Note> _instance;
} _Note_default_instance_;
}  // namespace buzzer
}  // namespace misc
static void InitDefaultsscc_info_MakeSound_misc_2fbuzzer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::misc::buzzer::_MakeSound_default_instance_;
    new (ptr) ::misc::buzzer::MakeSound();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::misc::buzzer::MakeSound::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MakeSound_misc_2fbuzzer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MakeSound_misc_2fbuzzer_2eproto}, {
      &scc_info_Note_misc_2fbuzzer_2eproto.base,}};

static void InitDefaultsscc_info_Note_misc_2fbuzzer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::misc::buzzer::_Note_default_instance_;
    new (ptr) ::misc::buzzer::Note();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::misc::buzzer::Note::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Note_misc_2fbuzzer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Note_misc_2fbuzzer_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_misc_2fbuzzer_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_misc_2fbuzzer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_misc_2fbuzzer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_misc_2fbuzzer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::misc::buzzer::MakeSound, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::misc::buzzer::MakeSound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::misc::buzzer::MakeSound, melody_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::misc::buzzer::Note, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::misc::buzzer::Note, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::misc::buzzer::Note, frequency_hz_),
  PROTOBUF_FIELD_OFFSET(::misc::buzzer::Note, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::misc::buzzer::Note, silence_duration_ms_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::misc::buzzer::MakeSound)},
  { 7, 15, sizeof(::misc::buzzer::Note)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::misc::buzzer::_MakeSound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::misc::buzzer::_Note_default_instance_),
};

const char descriptor_table_protodef_misc_2fbuzzer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021misc/buzzer.proto\022\013misc.buzzer\".\n\tMake"
  "Sound\022!\n\006melody\030\001 \003(\0132\021.misc.buzzer.Note"
  "\"N\n\004Note\022\024\n\014frequency_hz\030\001 \002(\r\022\023\n\013durati"
  "on_ms\030\002 \002(\r\022\033\n\023silence_duration_ms\030\003 \001(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_misc_2fbuzzer_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_misc_2fbuzzer_2eproto_sccs[2] = {
  &scc_info_MakeSound_misc_2fbuzzer_2eproto.base,
  &scc_info_Note_misc_2fbuzzer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_misc_2fbuzzer_2eproto_once;
static bool descriptor_table_misc_2fbuzzer_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_misc_2fbuzzer_2eproto = {
  &descriptor_table_misc_2fbuzzer_2eproto_initialized, descriptor_table_protodef_misc_2fbuzzer_2eproto, "misc/buzzer.proto", 160,
  &descriptor_table_misc_2fbuzzer_2eproto_once, descriptor_table_misc_2fbuzzer_2eproto_sccs, descriptor_table_misc_2fbuzzer_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_misc_2fbuzzer_2eproto::offsets,
  file_level_metadata_misc_2fbuzzer_2eproto, 2, file_level_enum_descriptors_misc_2fbuzzer_2eproto, file_level_service_descriptors_misc_2fbuzzer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_misc_2fbuzzer_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_misc_2fbuzzer_2eproto), true);
namespace misc {
namespace buzzer {

// ===================================================================

void MakeSound::InitAsDefaultInstance() {
}
class MakeSound::_Internal {
 public:
  using HasBits = decltype(std::declval<MakeSound>()._has_bits_);
};

MakeSound::MakeSound()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:misc.buzzer.MakeSound)
}
MakeSound::MakeSound(const MakeSound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      melody_(from.melody_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:misc.buzzer.MakeSound)
}

void MakeSound::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MakeSound_misc_2fbuzzer_2eproto.base);
}

MakeSound::~MakeSound() {
  // @@protoc_insertion_point(destructor:misc.buzzer.MakeSound)
  SharedDtor();
}

void MakeSound::SharedDtor() {
}

void MakeSound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MakeSound& MakeSound::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MakeSound_misc_2fbuzzer_2eproto.base);
  return *internal_default_instance();
}


void MakeSound::Clear() {
// @@protoc_insertion_point(message_clear_start:misc.buzzer.MakeSound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  melody_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MakeSound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .misc.buzzer.Note melody = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_melody(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MakeSound::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:misc.buzzer.MakeSound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .misc.buzzer.Note melody = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_melody_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_melody(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:misc.buzzer.MakeSound)
  return target;
}

size_t MakeSound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:misc.buzzer.MakeSound)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .misc.buzzer.Note melody = 1;
  total_size += 1UL * this->_internal_melody_size();
  for (const auto& msg : this->melody_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MakeSound::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:misc.buzzer.MakeSound)
  GOOGLE_DCHECK_NE(&from, this);
  const MakeSound* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MakeSound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:misc.buzzer.MakeSound)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:misc.buzzer.MakeSound)
    MergeFrom(*source);
  }
}

void MakeSound::MergeFrom(const MakeSound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:misc.buzzer.MakeSound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  melody_.MergeFrom(from.melody_);
}

void MakeSound::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:misc.buzzer.MakeSound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeSound::CopyFrom(const MakeSound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:misc.buzzer.MakeSound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeSound::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(melody_)) return false;
  return true;
}

void MakeSound::InternalSwap(MakeSound* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  melody_.InternalSwap(&other->melody_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MakeSound::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Note::InitAsDefaultInstance() {
}
class Note::_Internal {
 public:
  using HasBits = decltype(std::declval<Note>()._has_bits_);
  static void set_has_frequency_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_silence_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Note::Note()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:misc.buzzer.Note)
}
Note::Note(const Note& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frequency_hz_, &from.frequency_hz_,
    static_cast<size_t>(reinterpret_cast<char*>(&silence_duration_ms_) -
    reinterpret_cast<char*>(&frequency_hz_)) + sizeof(silence_duration_ms_));
  // @@protoc_insertion_point(copy_constructor:misc.buzzer.Note)
}

void Note::SharedCtor() {
  ::memset(&frequency_hz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&silence_duration_ms_) -
      reinterpret_cast<char*>(&frequency_hz_)) + sizeof(silence_duration_ms_));
}

Note::~Note() {
  // @@protoc_insertion_point(destructor:misc.buzzer.Note)
  SharedDtor();
}

void Note::SharedDtor() {
}

void Note::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Note& Note::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Note_misc_2fbuzzer_2eproto.base);
  return *internal_default_instance();
}


void Note::Clear() {
// @@protoc_insertion_point(message_clear_start:misc.buzzer.Note)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&frequency_hz_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&silence_duration_ms_) -
        reinterpret_cast<char*>(&frequency_hz_)) + sizeof(silence_duration_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Note::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 frequency_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_frequency_hz(&has_bits);
          frequency_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 silence_duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_silence_duration_ms(&has_bits);
          silence_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Note::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:misc.buzzer.Note)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 frequency_hz = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frequency_hz(), target);
  }

  // required uint32 duration_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration_ms(), target);
  }

  // optional uint32 silence_duration_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_silence_duration_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:misc.buzzer.Note)
  return target;
}

size_t Note::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:misc.buzzer.Note)
  size_t total_size = 0;

  if (_internal_has_frequency_hz()) {
    // required uint32 frequency_hz = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frequency_hz());
  }

  if (_internal_has_duration_ms()) {
    // required uint32 duration_ms = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration_ms());
  }

  return total_size;
}
size_t Note::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:misc.buzzer.Note)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 frequency_hz = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frequency_hz());

    // required uint32 duration_ms = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration_ms());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 silence_duration_ms = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_silence_duration_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Note::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:misc.buzzer.Note)
  GOOGLE_DCHECK_NE(&from, this);
  const Note* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Note>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:misc.buzzer.Note)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:misc.buzzer.Note)
    MergeFrom(*source);
  }
}

void Note::MergeFrom(const Note& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:misc.buzzer.Note)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      frequency_hz_ = from.frequency_hz_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      silence_duration_ms_ = from.silence_duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Note::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:misc.buzzer.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Note::CopyFrom(const Note& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:misc.buzzer.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Note::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Note::InternalSwap(Note* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(frequency_hz_, other->frequency_hz_);
  swap(duration_ms_, other->duration_ms_);
  swap(silence_duration_ms_, other->silence_duration_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Note::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace buzzer
}  // namespace misc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::misc::buzzer::MakeSound* Arena::CreateMaybeMessage< ::misc::buzzer::MakeSound >(Arena* arena) {
  return Arena::CreateInternal< ::misc::buzzer::MakeSound >(arena);
}
template<> PROTOBUF_NOINLINE ::misc::buzzer::Note* Arena::CreateMaybeMessage< ::misc::buzzer::Note >(Arena* arena) {
  return Arena::CreateInternal< ::misc::buzzer::Note >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
