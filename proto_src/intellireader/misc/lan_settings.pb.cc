// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: misc/lan_settings.proto

#include "misc/lan_settings.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_misc_2flan_5fsettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dhcp_misc_2flan_5fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2flan_5fsettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LanSettings_misc_2flan_5fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_misc_2flan_5fsettings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManualSettings_misc_2flan_5fsettings_2eproto;
namespace misc {
namespace lan_settings {
class ChangeLanSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangeLanSettings> _instance;
} _ChangeLanSettings_default_instance_;
class LanSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LanSettings> _instance;
  const ::misc::lan_settings::Dhcp* dhcp_;
  const ::misc::lan_settings::ManualSettings* manual_;
} _LanSettings_default_instance_;
class DhcpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dhcp> _instance;
} _Dhcp_default_instance_;
class ManualSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManualSettings> _instance;
} _ManualSettings_default_instance_;
}  // namespace lan_settings
}  // namespace misc
static void InitDefaultsscc_info_ChangeLanSettings_misc_2flan_5fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::misc::lan_settings::_ChangeLanSettings_default_instance_;
    new (ptr) ::misc::lan_settings::ChangeLanSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::misc::lan_settings::ChangeLanSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChangeLanSettings_misc_2flan_5fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChangeLanSettings_misc_2flan_5fsettings_2eproto}, {
      &scc_info_LanSettings_misc_2flan_5fsettings_2eproto.base,}};

static void InitDefaultsscc_info_Dhcp_misc_2flan_5fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::misc::lan_settings::_Dhcp_default_instance_;
    new (ptr) ::misc::lan_settings::Dhcp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::misc::lan_settings::Dhcp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dhcp_misc_2flan_5fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dhcp_misc_2flan_5fsettings_2eproto}, {}};

static void InitDefaultsscc_info_LanSettings_misc_2flan_5fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::misc::lan_settings::_LanSettings_default_instance_;
    new (ptr) ::misc::lan_settings::LanSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::misc::lan_settings::LanSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LanSettings_misc_2flan_5fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LanSettings_misc_2flan_5fsettings_2eproto}, {
      &scc_info_Dhcp_misc_2flan_5fsettings_2eproto.base,
      &scc_info_ManualSettings_misc_2flan_5fsettings_2eproto.base,}};

static void InitDefaultsscc_info_ManualSettings_misc_2flan_5fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::misc::lan_settings::_ManualSettings_default_instance_;
    new (ptr) ::misc::lan_settings::ManualSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::misc::lan_settings::ManualSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManualSettings_misc_2flan_5fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ManualSettings_misc_2flan_5fsettings_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_misc_2flan_5fsettings_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_misc_2flan_5fsettings_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_misc_2flan_5fsettings_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_misc_2flan_5fsettings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::misc::lan_settings::ChangeLanSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::misc::lan_settings::ChangeLanSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::misc::lan_settings::ChangeLanSettings, lan_settings_),
  0,
  PROTOBUF_FIELD_OFFSET(::misc::lan_settings::LanSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::misc::lan_settings::LanSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::misc::lan_settings::LanSettings, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::misc::lan_settings::LanSettingsDefaultTypeInternal, dhcp_),
  offsetof(::misc::lan_settings::LanSettingsDefaultTypeInternal, manual_),
  PROTOBUF_FIELD_OFFSET(::misc::lan_settings::LanSettings, ipv4_method_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::misc::lan_settings::Dhcp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::misc::lan_settings::Dhcp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::misc::lan_settings::ManualSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::misc::lan_settings::ManualSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::misc::lan_settings::ManualSettings, local_address_),
  PROTOBUF_FIELD_OFFSET(::misc::lan_settings::ManualSettings, netmask_),
  PROTOBUF_FIELD_OFFSET(::misc::lan_settings::ManualSettings, gateway_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::misc::lan_settings::ChangeLanSettings)},
  { 7, 15, sizeof(::misc::lan_settings::LanSettings)},
  { 17, 22, sizeof(::misc::lan_settings::Dhcp)},
  { 22, 30, sizeof(::misc::lan_settings::ManualSettings)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::misc::lan_settings::_ChangeLanSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::misc::lan_settings::_LanSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::misc::lan_settings::_Dhcp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::misc::lan_settings::_ManualSettings_default_instance_),
};

const char descriptor_table_protodef_misc_2flan_5fsettings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027misc/lan_settings.proto\022\021misc.lan_sett"
  "ings\"I\n\021ChangeLanSettings\0224\n\014lan_setting"
  "s\030\001 \002(\0132\036.misc.lan_settings.LanSettings\""
  "z\n\013LanSettings\022\'\n\004dhcp\030\001 \001(\0132\027.misc.lan_"
  "settings.DhcpH\000\0223\n\006manual\030\002 \001(\0132!.misc.l"
  "an_settings.ManualSettingsH\000B\r\n\013ipv4_met"
  "hod\"\006\n\004Dhcp\"I\n\016ManualSettings\022\025\n\rlocal_a"
  "ddress\030\001 \002(\t\022\017\n\007netmask\030\002 \002(\t\022\017\n\007gateway"
  "\030\003 \002(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_misc_2flan_5fsettings_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_misc_2flan_5fsettings_2eproto_sccs[4] = {
  &scc_info_ChangeLanSettings_misc_2flan_5fsettings_2eproto.base,
  &scc_info_Dhcp_misc_2flan_5fsettings_2eproto.base,
  &scc_info_LanSettings_misc_2flan_5fsettings_2eproto.base,
  &scc_info_ManualSettings_misc_2flan_5fsettings_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_misc_2flan_5fsettings_2eproto_once;
static bool descriptor_table_misc_2flan_5fsettings_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_misc_2flan_5fsettings_2eproto = {
  &descriptor_table_misc_2flan_5fsettings_2eproto_initialized, descriptor_table_protodef_misc_2flan_5fsettings_2eproto, "misc/lan_settings.proto", 326,
  &descriptor_table_misc_2flan_5fsettings_2eproto_once, descriptor_table_misc_2flan_5fsettings_2eproto_sccs, descriptor_table_misc_2flan_5fsettings_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_misc_2flan_5fsettings_2eproto::offsets,
  file_level_metadata_misc_2flan_5fsettings_2eproto, 4, file_level_enum_descriptors_misc_2flan_5fsettings_2eproto, file_level_service_descriptors_misc_2flan_5fsettings_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_misc_2flan_5fsettings_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_misc_2flan_5fsettings_2eproto), true);
namespace misc {
namespace lan_settings {

// ===================================================================

void ChangeLanSettings::InitAsDefaultInstance() {
  ::misc::lan_settings::_ChangeLanSettings_default_instance_._instance.get_mutable()->lan_settings_ = const_cast< ::misc::lan_settings::LanSettings*>(
      ::misc::lan_settings::LanSettings::internal_default_instance());
}
class ChangeLanSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeLanSettings>()._has_bits_);
  static const ::misc::lan_settings::LanSettings& lan_settings(const ChangeLanSettings* msg);
  static void set_has_lan_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::misc::lan_settings::LanSettings&
ChangeLanSettings::_Internal::lan_settings(const ChangeLanSettings* msg) {
  return *msg->lan_settings_;
}
ChangeLanSettings::ChangeLanSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:misc.lan_settings.ChangeLanSettings)
}
ChangeLanSettings::ChangeLanSettings(const ChangeLanSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_lan_settings()) {
    lan_settings_ = new ::misc::lan_settings::LanSettings(*from.lan_settings_);
  } else {
    lan_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:misc.lan_settings.ChangeLanSettings)
}

void ChangeLanSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangeLanSettings_misc_2flan_5fsettings_2eproto.base);
  lan_settings_ = nullptr;
}

ChangeLanSettings::~ChangeLanSettings() {
  // @@protoc_insertion_point(destructor:misc.lan_settings.ChangeLanSettings)
  SharedDtor();
}

void ChangeLanSettings::SharedDtor() {
  if (this != internal_default_instance()) delete lan_settings_;
}

void ChangeLanSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangeLanSettings& ChangeLanSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangeLanSettings_misc_2flan_5fsettings_2eproto.base);
  return *internal_default_instance();
}


void ChangeLanSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:misc.lan_settings.ChangeLanSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(lan_settings_ != nullptr);
    lan_settings_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChangeLanSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .misc.lan_settings.LanSettings lan_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lan_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeLanSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:misc.lan_settings.ChangeLanSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .misc.lan_settings.LanSettings lan_settings = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lan_settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:misc.lan_settings.ChangeLanSettings)
  return target;
}

size_t ChangeLanSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:misc.lan_settings.ChangeLanSettings)
  size_t total_size = 0;

  // required .misc.lan_settings.LanSettings lan_settings = 1;
  if (_internal_has_lan_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lan_settings_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeLanSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:misc.lan_settings.ChangeLanSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeLanSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangeLanSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:misc.lan_settings.ChangeLanSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:misc.lan_settings.ChangeLanSettings)
    MergeFrom(*source);
  }
}

void ChangeLanSettings::MergeFrom(const ChangeLanSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:misc.lan_settings.ChangeLanSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lan_settings()) {
    _internal_mutable_lan_settings()->::misc::lan_settings::LanSettings::MergeFrom(from._internal_lan_settings());
  }
}

void ChangeLanSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:misc.lan_settings.ChangeLanSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeLanSettings::CopyFrom(const ChangeLanSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:misc.lan_settings.ChangeLanSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeLanSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (_internal_has_lan_settings()) {
    if (!lan_settings_->IsInitialized()) return false;
  }
  return true;
}

void ChangeLanSettings::InternalSwap(ChangeLanSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lan_settings_, other->lan_settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeLanSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LanSettings::InitAsDefaultInstance() {
  ::misc::lan_settings::_LanSettings_default_instance_.dhcp_ = const_cast< ::misc::lan_settings::Dhcp*>(
      ::misc::lan_settings::Dhcp::internal_default_instance());
  ::misc::lan_settings::_LanSettings_default_instance_.manual_ = const_cast< ::misc::lan_settings::ManualSettings*>(
      ::misc::lan_settings::ManualSettings::internal_default_instance());
}
class LanSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<LanSettings>()._has_bits_);
  static const ::misc::lan_settings::Dhcp& dhcp(const LanSettings* msg);
  static const ::misc::lan_settings::ManualSettings& manual(const LanSettings* msg);
};

const ::misc::lan_settings::Dhcp&
LanSettings::_Internal::dhcp(const LanSettings* msg) {
  return *msg->ipv4_method_.dhcp_;
}
const ::misc::lan_settings::ManualSettings&
LanSettings::_Internal::manual(const LanSettings* msg) {
  return *msg->ipv4_method_.manual_;
}
void LanSettings::set_allocated_dhcp(::misc::lan_settings::Dhcp* dhcp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ipv4_method();
  if (dhcp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dhcp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dhcp, submessage_arena);
    }
    set_has_dhcp();
    ipv4_method_.dhcp_ = dhcp;
  }
  // @@protoc_insertion_point(field_set_allocated:misc.lan_settings.LanSettings.dhcp)
}
void LanSettings::set_allocated_manual(::misc::lan_settings::ManualSettings* manual) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ipv4_method();
  if (manual) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      manual = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, manual, submessage_arena);
    }
    set_has_manual();
    ipv4_method_.manual_ = manual;
  }
  // @@protoc_insertion_point(field_set_allocated:misc.lan_settings.LanSettings.manual)
}
LanSettings::LanSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:misc.lan_settings.LanSettings)
}
LanSettings::LanSettings(const LanSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_ipv4_method();
  switch (from.ipv4_method_case()) {
    case kDhcp: {
      _internal_mutable_dhcp()->::misc::lan_settings::Dhcp::MergeFrom(from._internal_dhcp());
      break;
    }
    case kManual: {
      _internal_mutable_manual()->::misc::lan_settings::ManualSettings::MergeFrom(from._internal_manual());
      break;
    }
    case IPV4_METHOD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:misc.lan_settings.LanSettings)
}

void LanSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LanSettings_misc_2flan_5fsettings_2eproto.base);
  clear_has_ipv4_method();
}

LanSettings::~LanSettings() {
  // @@protoc_insertion_point(destructor:misc.lan_settings.LanSettings)
  SharedDtor();
}

void LanSettings::SharedDtor() {
  if (has_ipv4_method()) {
    clear_ipv4_method();
  }
}

void LanSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LanSettings& LanSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LanSettings_misc_2flan_5fsettings_2eproto.base);
  return *internal_default_instance();
}


void LanSettings::clear_ipv4_method() {
// @@protoc_insertion_point(one_of_clear_start:misc.lan_settings.LanSettings)
  switch (ipv4_method_case()) {
    case kDhcp: {
      delete ipv4_method_.dhcp_;
      break;
    }
    case kManual: {
      delete ipv4_method_.manual_;
      break;
    }
    case IPV4_METHOD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IPV4_METHOD_NOT_SET;
}


void LanSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:misc.lan_settings.LanSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ipv4_method();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LanSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .misc.lan_settings.Dhcp dhcp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dhcp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.lan_settings.ManualSettings manual = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_manual(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LanSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:misc.lan_settings.LanSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (ipv4_method_case()) {
    case kDhcp: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::dhcp(this), target, stream);
      break;
    }
    case kManual: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::manual(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:misc.lan_settings.LanSettings)
  return target;
}

size_t LanSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:misc.lan_settings.LanSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ipv4_method_case()) {
    // optional .misc.lan_settings.Dhcp dhcp = 1;
    case kDhcp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ipv4_method_.dhcp_);
      break;
    }
    // optional .misc.lan_settings.ManualSettings manual = 2;
    case kManual: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ipv4_method_.manual_);
      break;
    }
    case IPV4_METHOD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LanSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:misc.lan_settings.LanSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const LanSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LanSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:misc.lan_settings.LanSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:misc.lan_settings.LanSettings)
    MergeFrom(*source);
  }
}

void LanSettings::MergeFrom(const LanSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:misc.lan_settings.LanSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ipv4_method_case()) {
    case kDhcp: {
      _internal_mutable_dhcp()->::misc::lan_settings::Dhcp::MergeFrom(from._internal_dhcp());
      break;
    }
    case kManual: {
      _internal_mutable_manual()->::misc::lan_settings::ManualSettings::MergeFrom(from._internal_manual());
      break;
    }
    case IPV4_METHOD_NOT_SET: {
      break;
    }
  }
}

void LanSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:misc.lan_settings.LanSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LanSettings::CopyFrom(const LanSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:misc.lan_settings.LanSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanSettings::IsInitialized() const {
  switch (ipv4_method_case()) {
    case kDhcp: {
      break;
    }
    case kManual: {
      if (has_manual()) {
        if (!this->manual().IsInitialized()) return false;
      }
      break;
    }
    case IPV4_METHOD_NOT_SET: {
      break;
    }
  }
  return true;
}

void LanSettings::InternalSwap(LanSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ipv4_method_, other->ipv4_method_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LanSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dhcp::InitAsDefaultInstance() {
}
class Dhcp::_Internal {
 public:
  using HasBits = decltype(std::declval<Dhcp>()._has_bits_);
};

Dhcp::Dhcp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:misc.lan_settings.Dhcp)
}
Dhcp::Dhcp(const Dhcp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:misc.lan_settings.Dhcp)
}

void Dhcp::SharedCtor() {
}

Dhcp::~Dhcp() {
  // @@protoc_insertion_point(destructor:misc.lan_settings.Dhcp)
  SharedDtor();
}

void Dhcp::SharedDtor() {
}

void Dhcp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dhcp& Dhcp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dhcp_misc_2flan_5fsettings_2eproto.base);
  return *internal_default_instance();
}


void Dhcp::Clear() {
// @@protoc_insertion_point(message_clear_start:misc.lan_settings.Dhcp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Dhcp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dhcp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:misc.lan_settings.Dhcp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:misc.lan_settings.Dhcp)
  return target;
}

size_t Dhcp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:misc.lan_settings.Dhcp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dhcp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:misc.lan_settings.Dhcp)
  GOOGLE_DCHECK_NE(&from, this);
  const Dhcp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dhcp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:misc.lan_settings.Dhcp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:misc.lan_settings.Dhcp)
    MergeFrom(*source);
  }
}

void Dhcp::MergeFrom(const Dhcp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:misc.lan_settings.Dhcp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Dhcp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:misc.lan_settings.Dhcp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dhcp::CopyFrom(const Dhcp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:misc.lan_settings.Dhcp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dhcp::IsInitialized() const {
  return true;
}

void Dhcp::InternalSwap(Dhcp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dhcp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManualSettings::InitAsDefaultInstance() {
}
class ManualSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<ManualSettings>()._has_bits_);
  static void set_has_local_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_netmask(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gateway(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ManualSettings::ManualSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:misc.lan_settings.ManualSettings)
}
ManualSettings::ManualSettings(const ManualSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  local_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_local_address()) {
    local_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_address_);
  }
  netmask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_netmask()) {
    netmask_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.netmask_);
  }
  gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gateway()) {
    gateway_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gateway_);
  }
  // @@protoc_insertion_point(copy_constructor:misc.lan_settings.ManualSettings)
}

void ManualSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ManualSettings_misc_2flan_5fsettings_2eproto.base);
  local_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  netmask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gateway_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ManualSettings::~ManualSettings() {
  // @@protoc_insertion_point(destructor:misc.lan_settings.ManualSettings)
  SharedDtor();
}

void ManualSettings::SharedDtor() {
  local_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  netmask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gateway_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ManualSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManualSettings& ManualSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManualSettings_misc_2flan_5fsettings_2eproto.base);
  return *internal_default_instance();
}


void ManualSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:misc.lan_settings.ManualSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      local_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      netmask_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      gateway_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ManualSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string local_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_local_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "misc.lan_settings.ManualSettings.local_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string netmask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_netmask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "misc.lan_settings.ManualSettings.netmask");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string gateway = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_gateway();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "misc.lan_settings.ManualSettings.gateway");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:misc.lan_settings.ManualSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string local_address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_local_address().data(), static_cast<int>(this->_internal_local_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "misc.lan_settings.ManualSettings.local_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_local_address(), target);
  }

  // required string netmask = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_netmask().data(), static_cast<int>(this->_internal_netmask().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "misc.lan_settings.ManualSettings.netmask");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_netmask(), target);
  }

  // required string gateway = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gateway().data(), static_cast<int>(this->_internal_gateway().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "misc.lan_settings.ManualSettings.gateway");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gateway(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:misc.lan_settings.ManualSettings)
  return target;
}

size_t ManualSettings::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:misc.lan_settings.ManualSettings)
  size_t total_size = 0;

  if (_internal_has_local_address()) {
    // required string local_address = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_address());
  }

  if (_internal_has_netmask()) {
    // required string netmask = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_netmask());
  }

  if (_internal_has_gateway()) {
    // required string gateway = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gateway());
  }

  return total_size;
}
size_t ManualSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:misc.lan_settings.ManualSettings)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string local_address = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_address());

    // required string netmask = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_netmask());

    // required string gateway = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gateway());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManualSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:misc.lan_settings.ManualSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManualSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:misc.lan_settings.ManualSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:misc.lan_settings.ManualSettings)
    MergeFrom(*source);
  }
}

void ManualSettings::MergeFrom(const ManualSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:misc.lan_settings.ManualSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      local_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      netmask_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.netmask_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      gateway_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gateway_);
    }
  }
}

void ManualSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:misc.lan_settings.ManualSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualSettings::CopyFrom(const ManualSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:misc.lan_settings.ManualSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ManualSettings::InternalSwap(ManualSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  local_address_.Swap(&other->local_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  netmask_.Swap(&other->netmask_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gateway_.Swap(&other->gateway_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lan_settings
}  // namespace misc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::misc::lan_settings::ChangeLanSettings* Arena::CreateMaybeMessage< ::misc::lan_settings::ChangeLanSettings >(Arena* arena) {
  return Arena::CreateInternal< ::misc::lan_settings::ChangeLanSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::misc::lan_settings::LanSettings* Arena::CreateMaybeMessage< ::misc::lan_settings::LanSettings >(Arena* arena) {
  return Arena::CreateInternal< ::misc::lan_settings::LanSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::misc::lan_settings::Dhcp* Arena::CreateMaybeMessage< ::misc::lan_settings::Dhcp >(Arena* arena) {
  return Arena::CreateInternal< ::misc::lan_settings::Dhcp >(arena);
}
template<> PROTOBUF_NOINLINE ::misc::lan_settings::ManualSettings* Arena::CreateMaybeMessage< ::misc::lan_settings::ManualSettings >(Arena* arena) {
  return Arena::CreateInternal< ::misc::lan_settings::ManualSettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
