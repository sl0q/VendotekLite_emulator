// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: misc/ethernet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_misc_2fethernet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_misc_2fethernet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_misc_2fethernet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_misc_2fethernet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_misc_2fethernet_2eproto;
namespace misc {
namespace ethernet {
class PortStats;
class PortStatsDefaultTypeInternal;
extern PortStatsDefaultTypeInternal _PortStats_default_instance_;
class Statistic;
class StatisticDefaultTypeInternal;
extern StatisticDefaultTypeInternal _Statistic_default_instance_;
}  // namespace ethernet
}  // namespace misc
PROTOBUF_NAMESPACE_OPEN
template<> ::misc::ethernet::PortStats* Arena::CreateMaybeMessage<::misc::ethernet::PortStats>(Arena*);
template<> ::misc::ethernet::Statistic* Arena::CreateMaybeMessage<::misc::ethernet::Statistic>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace misc {
namespace ethernet {

// ===================================================================

class Statistic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:misc.ethernet.Statistic) */ {
 public:
  Statistic();
  virtual ~Statistic();

  Statistic(const Statistic& from);
  Statistic(Statistic&& from) noexcept
    : Statistic() {
    *this = ::std::move(from);
  }

  inline Statistic& operator=(const Statistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Statistic& operator=(Statistic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Statistic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Statistic* internal_default_instance() {
    return reinterpret_cast<const Statistic*>(
               &_Statistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Statistic& a, Statistic& b) {
    a.Swap(&b);
  }
  inline void Swap(Statistic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Statistic* New() const final {
    return CreateMaybeMessage<Statistic>(nullptr);
  }

  Statistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Statistic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Statistic& from);
  void MergeFrom(const Statistic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Statistic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "misc.ethernet.Statistic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_misc_2fethernet_2eproto);
    return ::descriptor_table_misc_2fethernet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPort1FieldNumber = 1,
    kPort2FieldNumber = 2,
    kPort3FieldNumber = 3,
  };
  // optional .misc.ethernet.PortStats port1 = 1;
  bool has_port1() const;
  private:
  bool _internal_has_port1() const;
  public:
  void clear_port1();
  const ::misc::ethernet::PortStats& port1() const;
  ::misc::ethernet::PortStats* release_port1();
  ::misc::ethernet::PortStats* mutable_port1();
  void set_allocated_port1(::misc::ethernet::PortStats* port1);
  private:
  const ::misc::ethernet::PortStats& _internal_port1() const;
  ::misc::ethernet::PortStats* _internal_mutable_port1();
  public:

  // optional .misc.ethernet.PortStats port2 = 2;
  bool has_port2() const;
  private:
  bool _internal_has_port2() const;
  public:
  void clear_port2();
  const ::misc::ethernet::PortStats& port2() const;
  ::misc::ethernet::PortStats* release_port2();
  ::misc::ethernet::PortStats* mutable_port2();
  void set_allocated_port2(::misc::ethernet::PortStats* port2);
  private:
  const ::misc::ethernet::PortStats& _internal_port2() const;
  ::misc::ethernet::PortStats* _internal_mutable_port2();
  public:

  // optional .misc.ethernet.PortStats port3 = 3;
  bool has_port3() const;
  private:
  bool _internal_has_port3() const;
  public:
  void clear_port3();
  const ::misc::ethernet::PortStats& port3() const;
  ::misc::ethernet::PortStats* release_port3();
  ::misc::ethernet::PortStats* mutable_port3();
  void set_allocated_port3(::misc::ethernet::PortStats* port3);
  private:
  const ::misc::ethernet::PortStats& _internal_port3() const;
  ::misc::ethernet::PortStats* _internal_mutable_port3();
  public:

  // @@protoc_insertion_point(class_scope:misc.ethernet.Statistic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::misc::ethernet::PortStats* port1_;
  ::misc::ethernet::PortStats* port2_;
  ::misc::ethernet::PortStats* port3_;
  friend struct ::TableStruct_misc_2fethernet_2eproto;
};
// -------------------------------------------------------------------

class PortStats :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:misc.ethernet.PortStats) */ {
 public:
  PortStats();
  virtual ~PortStats();

  PortStats(const PortStats& from);
  PortStats(PortStats&& from) noexcept
    : PortStats() {
    *this = ::std::move(from);
  }

  inline PortStats& operator=(const PortStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortStats& operator=(PortStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PortStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PortStats* internal_default_instance() {
    return reinterpret_cast<const PortStats*>(
               &_PortStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PortStats& a, PortStats& b) {
    a.Swap(&b);
  }
  inline void Swap(PortStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PortStats* New() const final {
    return CreateMaybeMessage<PortStats>(nullptr);
  }

  PortStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PortStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PortStats& from);
  void MergeFrom(const PortStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "misc.ethernet.PortStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_misc_2fethernet_2eproto);
    return ::descriptor_table_misc_2fethernet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxPacketsFieldNumber = 1,
    kRxPacketsFieldNumber = 2,
    kRxErrorsFieldNumber = 3,
    kTxrxDroppedFieldNumber = 4,
  };
  // required uint32 tx_packets = 1;
  bool has_tx_packets() const;
  private:
  bool _internal_has_tx_packets() const;
  public:
  void clear_tx_packets();
  ::PROTOBUF_NAMESPACE_ID::uint32 tx_packets() const;
  void set_tx_packets(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tx_packets() const;
  void _internal_set_tx_packets(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 rx_packets = 2;
  bool has_rx_packets() const;
  private:
  bool _internal_has_rx_packets() const;
  public:
  void clear_rx_packets();
  ::PROTOBUF_NAMESPACE_ID::uint32 rx_packets() const;
  void set_rx_packets(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rx_packets() const;
  void _internal_set_rx_packets(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 rx_errors = 3;
  bool has_rx_errors() const;
  private:
  bool _internal_has_rx_errors() const;
  public:
  void clear_rx_errors();
  ::PROTOBUF_NAMESPACE_ID::uint32 rx_errors() const;
  void set_rx_errors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rx_errors() const;
  void _internal_set_rx_errors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 txrx_dropped = 4;
  bool has_txrx_dropped() const;
  private:
  bool _internal_has_txrx_dropped() const;
  public:
  void clear_txrx_dropped();
  ::PROTOBUF_NAMESPACE_ID::uint32 txrx_dropped() const;
  void set_txrx_dropped(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_txrx_dropped() const;
  void _internal_set_txrx_dropped(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:misc.ethernet.PortStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tx_packets_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rx_packets_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rx_errors_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txrx_dropped_;
  friend struct ::TableStruct_misc_2fethernet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Statistic

// optional .misc.ethernet.PortStats port1 = 1;
inline bool Statistic::_internal_has_port1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || port1_ != nullptr);
  return value;
}
inline bool Statistic::has_port1() const {
  return _internal_has_port1();
}
inline void Statistic::clear_port1() {
  if (port1_ != nullptr) port1_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::misc::ethernet::PortStats& Statistic::_internal_port1() const {
  const ::misc::ethernet::PortStats* p = port1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::misc::ethernet::PortStats*>(
      &::misc::ethernet::_PortStats_default_instance_);
}
inline const ::misc::ethernet::PortStats& Statistic::port1() const {
  // @@protoc_insertion_point(field_get:misc.ethernet.Statistic.port1)
  return _internal_port1();
}
inline ::misc::ethernet::PortStats* Statistic::release_port1() {
  // @@protoc_insertion_point(field_release:misc.ethernet.Statistic.port1)
  _has_bits_[0] &= ~0x00000001u;
  ::misc::ethernet::PortStats* temp = port1_;
  port1_ = nullptr;
  return temp;
}
inline ::misc::ethernet::PortStats* Statistic::_internal_mutable_port1() {
  _has_bits_[0] |= 0x00000001u;
  if (port1_ == nullptr) {
    auto* p = CreateMaybeMessage<::misc::ethernet::PortStats>(GetArenaNoVirtual());
    port1_ = p;
  }
  return port1_;
}
inline ::misc::ethernet::PortStats* Statistic::mutable_port1() {
  // @@protoc_insertion_point(field_mutable:misc.ethernet.Statistic.port1)
  return _internal_mutable_port1();
}
inline void Statistic::set_allocated_port1(::misc::ethernet::PortStats* port1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete port1_;
  }
  if (port1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      port1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, port1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  port1_ = port1;
  // @@protoc_insertion_point(field_set_allocated:misc.ethernet.Statistic.port1)
}

// optional .misc.ethernet.PortStats port2 = 2;
inline bool Statistic::_internal_has_port2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || port2_ != nullptr);
  return value;
}
inline bool Statistic::has_port2() const {
  return _internal_has_port2();
}
inline void Statistic::clear_port2() {
  if (port2_ != nullptr) port2_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::misc::ethernet::PortStats& Statistic::_internal_port2() const {
  const ::misc::ethernet::PortStats* p = port2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::misc::ethernet::PortStats*>(
      &::misc::ethernet::_PortStats_default_instance_);
}
inline const ::misc::ethernet::PortStats& Statistic::port2() const {
  // @@protoc_insertion_point(field_get:misc.ethernet.Statistic.port2)
  return _internal_port2();
}
inline ::misc::ethernet::PortStats* Statistic::release_port2() {
  // @@protoc_insertion_point(field_release:misc.ethernet.Statistic.port2)
  _has_bits_[0] &= ~0x00000002u;
  ::misc::ethernet::PortStats* temp = port2_;
  port2_ = nullptr;
  return temp;
}
inline ::misc::ethernet::PortStats* Statistic::_internal_mutable_port2() {
  _has_bits_[0] |= 0x00000002u;
  if (port2_ == nullptr) {
    auto* p = CreateMaybeMessage<::misc::ethernet::PortStats>(GetArenaNoVirtual());
    port2_ = p;
  }
  return port2_;
}
inline ::misc::ethernet::PortStats* Statistic::mutable_port2() {
  // @@protoc_insertion_point(field_mutable:misc.ethernet.Statistic.port2)
  return _internal_mutable_port2();
}
inline void Statistic::set_allocated_port2(::misc::ethernet::PortStats* port2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete port2_;
  }
  if (port2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      port2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, port2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  port2_ = port2;
  // @@protoc_insertion_point(field_set_allocated:misc.ethernet.Statistic.port2)
}

// optional .misc.ethernet.PortStats port3 = 3;
inline bool Statistic::_internal_has_port3() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || port3_ != nullptr);
  return value;
}
inline bool Statistic::has_port3() const {
  return _internal_has_port3();
}
inline void Statistic::clear_port3() {
  if (port3_ != nullptr) port3_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::misc::ethernet::PortStats& Statistic::_internal_port3() const {
  const ::misc::ethernet::PortStats* p = port3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::misc::ethernet::PortStats*>(
      &::misc::ethernet::_PortStats_default_instance_);
}
inline const ::misc::ethernet::PortStats& Statistic::port3() const {
  // @@protoc_insertion_point(field_get:misc.ethernet.Statistic.port3)
  return _internal_port3();
}
inline ::misc::ethernet::PortStats* Statistic::release_port3() {
  // @@protoc_insertion_point(field_release:misc.ethernet.Statistic.port3)
  _has_bits_[0] &= ~0x00000004u;
  ::misc::ethernet::PortStats* temp = port3_;
  port3_ = nullptr;
  return temp;
}
inline ::misc::ethernet::PortStats* Statistic::_internal_mutable_port3() {
  _has_bits_[0] |= 0x00000004u;
  if (port3_ == nullptr) {
    auto* p = CreateMaybeMessage<::misc::ethernet::PortStats>(GetArenaNoVirtual());
    port3_ = p;
  }
  return port3_;
}
inline ::misc::ethernet::PortStats* Statistic::mutable_port3() {
  // @@protoc_insertion_point(field_mutable:misc.ethernet.Statistic.port3)
  return _internal_mutable_port3();
}
inline void Statistic::set_allocated_port3(::misc::ethernet::PortStats* port3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete port3_;
  }
  if (port3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      port3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, port3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  port3_ = port3;
  // @@protoc_insertion_point(field_set_allocated:misc.ethernet.Statistic.port3)
}

// -------------------------------------------------------------------

// PortStats

// required uint32 tx_packets = 1;
inline bool PortStats::_internal_has_tx_packets() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PortStats::has_tx_packets() const {
  return _internal_has_tx_packets();
}
inline void PortStats::clear_tx_packets() {
  tx_packets_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PortStats::_internal_tx_packets() const {
  return tx_packets_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PortStats::tx_packets() const {
  // @@protoc_insertion_point(field_get:misc.ethernet.PortStats.tx_packets)
  return _internal_tx_packets();
}
inline void PortStats::_internal_set_tx_packets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  tx_packets_ = value;
}
inline void PortStats::set_tx_packets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tx_packets(value);
  // @@protoc_insertion_point(field_set:misc.ethernet.PortStats.tx_packets)
}

// required uint32 rx_packets = 2;
inline bool PortStats::_internal_has_rx_packets() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PortStats::has_rx_packets() const {
  return _internal_has_rx_packets();
}
inline void PortStats::clear_rx_packets() {
  rx_packets_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PortStats::_internal_rx_packets() const {
  return rx_packets_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PortStats::rx_packets() const {
  // @@protoc_insertion_point(field_get:misc.ethernet.PortStats.rx_packets)
  return _internal_rx_packets();
}
inline void PortStats::_internal_set_rx_packets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  rx_packets_ = value;
}
inline void PortStats::set_rx_packets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rx_packets(value);
  // @@protoc_insertion_point(field_set:misc.ethernet.PortStats.rx_packets)
}

// required uint32 rx_errors = 3;
inline bool PortStats::_internal_has_rx_errors() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PortStats::has_rx_errors() const {
  return _internal_has_rx_errors();
}
inline void PortStats::clear_rx_errors() {
  rx_errors_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PortStats::_internal_rx_errors() const {
  return rx_errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PortStats::rx_errors() const {
  // @@protoc_insertion_point(field_get:misc.ethernet.PortStats.rx_errors)
  return _internal_rx_errors();
}
inline void PortStats::_internal_set_rx_errors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  rx_errors_ = value;
}
inline void PortStats::set_rx_errors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rx_errors(value);
  // @@protoc_insertion_point(field_set:misc.ethernet.PortStats.rx_errors)
}

// required uint32 txrx_dropped = 4;
inline bool PortStats::_internal_has_txrx_dropped() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PortStats::has_txrx_dropped() const {
  return _internal_has_txrx_dropped();
}
inline void PortStats::clear_txrx_dropped() {
  txrx_dropped_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PortStats::_internal_txrx_dropped() const {
  return txrx_dropped_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PortStats::txrx_dropped() const {
  // @@protoc_insertion_point(field_get:misc.ethernet.PortStats.txrx_dropped)
  return _internal_txrx_dropped();
}
inline void PortStats::_internal_set_txrx_dropped(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  txrx_dropped_ = value;
}
inline void PortStats::set_txrx_dropped(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_txrx_dropped(value);
  // @@protoc_insertion_point(field_set:misc.ethernet.PortStats.txrx_dropped)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ethernet
}  // namespace misc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_misc_2fethernet_2eproto
