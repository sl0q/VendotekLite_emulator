// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: misc/leds.proto

#include "misc/leds.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace misc {
namespace leds {
class LedsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Leds> _instance;
} _Leds_default_instance_;
}  // namespace leds
}  // namespace misc
static void InitDefaultsscc_info_Leds_misc_2fleds_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::misc::leds::_Leds_default_instance_;
    new (ptr) ::misc::leds::Leds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::misc::leds::Leds::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Leds_misc_2fleds_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Leds_misc_2fleds_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_misc_2fleds_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_misc_2fleds_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_misc_2fleds_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_misc_2fleds_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::misc::leds::Leds, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::misc::leds::Leds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::misc::leds::Leds, blue_),
  PROTOBUF_FIELD_OFFSET(::misc::leds::Leds, yellow_),
  PROTOBUF_FIELD_OFFSET(::misc::leds::Leds, green_),
  PROTOBUF_FIELD_OFFSET(::misc::leds::Leds, red_),
  PROTOBUF_FIELD_OFFSET(::misc::leds::Leds, lcd_backlight_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::misc::leds::Leds)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::misc::leds::_Leds_default_instance_),
};

const char descriptor_table_protodef_misc_2fleds_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017misc/leds.proto\022\tmisc.leds\"W\n\004Leds\022\014\n\004"
  "blue\030\001 \001(\010\022\016\n\006yellow\030\002 \001(\010\022\r\n\005green\030\003 \001("
  "\010\022\013\n\003red\030\004 \001(\010\022\025\n\rlcd_backlight\030\005 \001(\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_misc_2fleds_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_misc_2fleds_2eproto_sccs[1] = {
  &scc_info_Leds_misc_2fleds_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_misc_2fleds_2eproto_once;
static bool descriptor_table_misc_2fleds_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_misc_2fleds_2eproto = {
  &descriptor_table_misc_2fleds_2eproto_initialized, descriptor_table_protodef_misc_2fleds_2eproto, "misc/leds.proto", 117,
  &descriptor_table_misc_2fleds_2eproto_once, descriptor_table_misc_2fleds_2eproto_sccs, descriptor_table_misc_2fleds_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_misc_2fleds_2eproto::offsets,
  file_level_metadata_misc_2fleds_2eproto, 1, file_level_enum_descriptors_misc_2fleds_2eproto, file_level_service_descriptors_misc_2fleds_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_misc_2fleds_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_misc_2fleds_2eproto), true);
namespace misc {
namespace leds {

// ===================================================================

void Leds::InitAsDefaultInstance() {
}
class Leds::_Internal {
 public:
  using HasBits = decltype(std::declval<Leds>()._has_bits_);
  static void set_has_blue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_yellow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_green(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_red(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lcd_backlight(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Leds::Leds()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:misc.leds.Leds)
}
Leds::Leds(const Leds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blue_, &from.blue_,
    static_cast<size_t>(reinterpret_cast<char*>(&lcd_backlight_) -
    reinterpret_cast<char*>(&blue_)) + sizeof(lcd_backlight_));
  // @@protoc_insertion_point(copy_constructor:misc.leds.Leds)
}

void Leds::SharedCtor() {
  ::memset(&blue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lcd_backlight_) -
      reinterpret_cast<char*>(&blue_)) + sizeof(lcd_backlight_));
}

Leds::~Leds() {
  // @@protoc_insertion_point(destructor:misc.leds.Leds)
  SharedDtor();
}

void Leds::SharedDtor() {
}

void Leds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Leds& Leds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Leds_misc_2fleds_2eproto.base);
  return *internal_default_instance();
}


void Leds::Clear() {
// @@protoc_insertion_point(message_clear_start:misc.leds.Leds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&blue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lcd_backlight_) -
        reinterpret_cast<char*>(&blue_)) + sizeof(lcd_backlight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Leds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool blue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_blue(&has_bits);
          blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool yellow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_yellow(&has_bits);
          yellow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool green = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_green(&has_bits);
          green_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool red = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_red(&has_bits);
          red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool lcd_backlight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_lcd_backlight(&has_bits);
          lcd_backlight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Leds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:misc.leds.Leds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool blue = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_blue(), target);
  }

  // optional bool yellow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_yellow(), target);
  }

  // optional bool green = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_green(), target);
  }

  // optional bool red = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_red(), target);
  }

  // optional bool lcd_backlight = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_lcd_backlight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:misc.leds.Leds)
  return target;
}

size_t Leds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:misc.leds.Leds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool blue = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool yellow = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool green = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool red = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool lcd_backlight = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Leds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:misc.leds.Leds)
  GOOGLE_DCHECK_NE(&from, this);
  const Leds* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Leds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:misc.leds.Leds)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:misc.leds.Leds)
    MergeFrom(*source);
  }
}

void Leds::MergeFrom(const Leds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:misc.leds.Leds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      blue_ = from.blue_;
    }
    if (cached_has_bits & 0x00000002u) {
      yellow_ = from.yellow_;
    }
    if (cached_has_bits & 0x00000004u) {
      green_ = from.green_;
    }
    if (cached_has_bits & 0x00000008u) {
      red_ = from.red_;
    }
    if (cached_has_bits & 0x00000010u) {
      lcd_backlight_ = from.lcd_backlight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Leds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:misc.leds.Leds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leds::CopyFrom(const Leds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:misc.leds.Leds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leds::IsInitialized() const {
  return true;
}

void Leds::InternalSwap(Leds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(blue_, other->blue_);
  swap(yellow_, other->yellow_);
  swap(green_, other->green_);
  swap(red_, other->red_);
  swap(lcd_backlight_, other->lcd_backlight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Leds::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace leds
}  // namespace misc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::misc::leds::Leds* Arena::CreateMaybeMessage< ::misc::leds::Leds >(Arena* arena) {
  return Arena::CreateInternal< ::misc::leds::Leds >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
