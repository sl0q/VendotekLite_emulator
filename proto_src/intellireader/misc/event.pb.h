// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: misc/event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_misc_2fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_misc_2fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_misc_2fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_misc_2fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_misc_2fevent_2eproto;
namespace misc {
namespace event {
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
}  // namespace event
}  // namespace misc
PROTOBUF_NAMESPACE_OPEN
template<> ::misc::event::Event* Arena::CreateMaybeMessage<::misc::event::Event>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace misc {
namespace event {

enum EventType : int {
  WIFI_CONNECTED = 0,
  WIFI_DISCONNECTED = 1,
  IP_ADDRESS_IS_OBTAINED = 2,
  CONNECTION_ESTABLISHED = 3,
  CONNECTION_CLOSED_BY_CONTROLLER = 4,
  CONNECTION_CLOSED_BY_READER = 5,
  CONTROLLER_BECAME_UNREACHABLE = 6,
  DEVICE_REBOOT = 7,
  SAM_POWERED_ON_BY_COMMAND = 8,
  SAM_POWERED_OFF_BY_COMMAND = 9,
  SAM_POWERED_ON_IMPLICITLY = 10,
  SAM_EXCHANGE_ERROR = 11
};
bool EventType_IsValid(int value);
constexpr EventType EventType_MIN = WIFI_CONNECTED;
constexpr EventType EventType_MAX = SAM_EXCHANGE_ERROR;
constexpr int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor();
template<typename T>
inline const std::string& EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventType_descriptor(), enum_t_value);
}
inline bool EventType_Parse(
    const std::string& name, EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
// ===================================================================

class Event :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:misc.event.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "misc.event.Event";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_misc_2fevent_2eproto);
    return ::descriptor_table_misc_2fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventInfoFieldNumber = 3,
    kEventTypeFieldNumber = 1,
    kEventTimeOffsetFieldNumber = 2,
  };
  // optional string event_info = 3;
  bool has_event_info() const;
  private:
  bool _internal_has_event_info() const;
  public:
  void clear_event_info();
  const std::string& event_info() const;
  void set_event_info(const std::string& value);
  void set_event_info(std::string&& value);
  void set_event_info(const char* value);
  void set_event_info(const char* value, size_t size);
  std::string* mutable_event_info();
  std::string* release_event_info();
  void set_allocated_event_info(std::string* event_info);
  private:
  const std::string& _internal_event_info() const;
  void _internal_set_event_info(const std::string& value);
  std::string* _internal_mutable_event_info();
  public:

  // required .misc.event.EventType event_type = 1;
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  ::misc::event::EventType event_type() const;
  void set_event_type(::misc::event::EventType value);
  private:
  ::misc::event::EventType _internal_event_type() const;
  void _internal_set_event_type(::misc::event::EventType value);
  public:

  // required uint32 event_time_offset = 2;
  bool has_event_time_offset() const;
  private:
  bool _internal_has_event_time_offset() const;
  public:
  void clear_event_time_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_time_offset() const;
  void set_event_time_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_time_offset() const;
  void _internal_set_event_time_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:misc.event.Event)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_info_;
  int event_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_time_offset_;
  friend struct ::TableStruct_misc_2fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event

// required .misc.event.EventType event_type = 1;
inline bool Event::_internal_has_event_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Event::has_event_type() const {
  return _internal_has_event_type();
}
inline void Event::clear_event_type() {
  event_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::misc::event::EventType Event::_internal_event_type() const {
  return static_cast< ::misc::event::EventType >(event_type_);
}
inline ::misc::event::EventType Event::event_type() const {
  // @@protoc_insertion_point(field_get:misc.event.Event.event_type)
  return _internal_event_type();
}
inline void Event::_internal_set_event_type(::misc::event::EventType value) {
  assert(::misc::event::EventType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  event_type_ = value;
}
inline void Event::set_event_type(::misc::event::EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:misc.event.Event.event_type)
}

// required uint32 event_time_offset = 2;
inline bool Event::_internal_has_event_time_offset() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Event::has_event_time_offset() const {
  return _internal_has_event_time_offset();
}
inline void Event::clear_event_time_offset() {
  event_time_offset_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Event::_internal_event_time_offset() const {
  return event_time_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Event::event_time_offset() const {
  // @@protoc_insertion_point(field_get:misc.event.Event.event_time_offset)
  return _internal_event_time_offset();
}
inline void Event::_internal_set_event_time_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  event_time_offset_ = value;
}
inline void Event::set_event_time_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_time_offset(value);
  // @@protoc_insertion_point(field_set:misc.event.Event.event_time_offset)
}

// optional string event_info = 3;
inline bool Event::_internal_has_event_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Event::has_event_info() const {
  return _internal_has_event_info();
}
inline void Event::clear_event_info() {
  event_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Event::event_info() const {
  // @@protoc_insertion_point(field_get:misc.event.Event.event_info)
  return _internal_event_info();
}
inline void Event::set_event_info(const std::string& value) {
  _internal_set_event_info(value);
  // @@protoc_insertion_point(field_set:misc.event.Event.event_info)
}
inline std::string* Event::mutable_event_info() {
  // @@protoc_insertion_point(field_mutable:misc.event.Event.event_info)
  return _internal_mutable_event_info();
}
inline const std::string& Event::_internal_event_info() const {
  return event_info_.GetNoArena();
}
inline void Event::_internal_set_event_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Event::set_event_info(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:misc.event.Event.event_info)
}
inline void Event::set_event_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:misc.event.Event.event_info)
}
inline void Event::set_event_info(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:misc.event.Event.event_info)
}
inline std::string* Event::_internal_mutable_event_info() {
  _has_bits_[0] |= 0x00000001u;
  return event_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Event::release_event_info() {
  // @@protoc_insertion_point(field_release:misc.event.Event.event_info)
  if (!_internal_has_event_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_info_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_event_info(std::string* event_info) {
  if (event_info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_info);
  // @@protoc_insertion_point(field_set_allocated:misc.event.Event.event_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace misc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::misc::event::EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::misc::event::EventType>() {
  return ::misc::event::EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_misc_2fevent_2eproto
