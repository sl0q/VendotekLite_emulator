// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: misc/lwip.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_misc_2flwip_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_misc_2flwip_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_misc_2flwip_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_misc_2flwip_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_misc_2flwip_2eproto;
namespace misc {
namespace lwip {
class ProtocolStats;
class ProtocolStatsDefaultTypeInternal;
extern ProtocolStatsDefaultTypeInternal _ProtocolStats_default_instance_;
class Statistic;
class StatisticDefaultTypeInternal;
extern StatisticDefaultTypeInternal _Statistic_default_instance_;
}  // namespace lwip
}  // namespace misc
PROTOBUF_NAMESPACE_OPEN
template<> ::misc::lwip::ProtocolStats* Arena::CreateMaybeMessage<::misc::lwip::ProtocolStats>(Arena*);
template<> ::misc::lwip::Statistic* Arena::CreateMaybeMessage<::misc::lwip::Statistic>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace misc {
namespace lwip {

// ===================================================================

class Statistic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:misc.lwip.Statistic) */ {
 public:
  Statistic();
  virtual ~Statistic();

  Statistic(const Statistic& from);
  Statistic(Statistic&& from) noexcept
    : Statistic() {
    *this = ::std::move(from);
  }

  inline Statistic& operator=(const Statistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Statistic& operator=(Statistic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Statistic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Statistic* internal_default_instance() {
    return reinterpret_cast<const Statistic*>(
               &_Statistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Statistic& a, Statistic& b) {
    a.Swap(&b);
  }
  inline void Swap(Statistic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Statistic* New() const final {
    return CreateMaybeMessage<Statistic>(nullptr);
  }

  Statistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Statistic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Statistic& from);
  void MergeFrom(const Statistic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Statistic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "misc.lwip.Statistic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_misc_2flwip_2eproto);
    return ::descriptor_table_misc_2flwip_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkFieldNumber = 1,
    kArpFieldNumber = 2,
    kIpFieldNumber = 3,
    kTcpFieldNumber = 4,
  };
  // required .misc.lwip.ProtocolStats link = 1;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::misc::lwip::ProtocolStats& link() const;
  ::misc::lwip::ProtocolStats* release_link();
  ::misc::lwip::ProtocolStats* mutable_link();
  void set_allocated_link(::misc::lwip::ProtocolStats* link);
  private:
  const ::misc::lwip::ProtocolStats& _internal_link() const;
  ::misc::lwip::ProtocolStats* _internal_mutable_link();
  public:

  // required .misc.lwip.ProtocolStats arp = 2;
  bool has_arp() const;
  private:
  bool _internal_has_arp() const;
  public:
  void clear_arp();
  const ::misc::lwip::ProtocolStats& arp() const;
  ::misc::lwip::ProtocolStats* release_arp();
  ::misc::lwip::ProtocolStats* mutable_arp();
  void set_allocated_arp(::misc::lwip::ProtocolStats* arp);
  private:
  const ::misc::lwip::ProtocolStats& _internal_arp() const;
  ::misc::lwip::ProtocolStats* _internal_mutable_arp();
  public:

  // required .misc.lwip.ProtocolStats ip = 3;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const ::misc::lwip::ProtocolStats& ip() const;
  ::misc::lwip::ProtocolStats* release_ip();
  ::misc::lwip::ProtocolStats* mutable_ip();
  void set_allocated_ip(::misc::lwip::ProtocolStats* ip);
  private:
  const ::misc::lwip::ProtocolStats& _internal_ip() const;
  ::misc::lwip::ProtocolStats* _internal_mutable_ip();
  public:

  // required .misc.lwip.ProtocolStats tcp = 4;
  bool has_tcp() const;
  private:
  bool _internal_has_tcp() const;
  public:
  void clear_tcp();
  const ::misc::lwip::ProtocolStats& tcp() const;
  ::misc::lwip::ProtocolStats* release_tcp();
  ::misc::lwip::ProtocolStats* mutable_tcp();
  void set_allocated_tcp(::misc::lwip::ProtocolStats* tcp);
  private:
  const ::misc::lwip::ProtocolStats& _internal_tcp() const;
  ::misc::lwip::ProtocolStats* _internal_mutable_tcp();
  public:

  // @@protoc_insertion_point(class_scope:misc.lwip.Statistic)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::misc::lwip::ProtocolStats* link_;
  ::misc::lwip::ProtocolStats* arp_;
  ::misc::lwip::ProtocolStats* ip_;
  ::misc::lwip::ProtocolStats* tcp_;
  friend struct ::TableStruct_misc_2flwip_2eproto;
};
// -------------------------------------------------------------------

class ProtocolStats :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:misc.lwip.ProtocolStats) */ {
 public:
  ProtocolStats();
  virtual ~ProtocolStats();

  ProtocolStats(const ProtocolStats& from);
  ProtocolStats(ProtocolStats&& from) noexcept
    : ProtocolStats() {
    *this = ::std::move(from);
  }

  inline ProtocolStats& operator=(const ProtocolStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolStats& operator=(ProtocolStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtocolStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtocolStats* internal_default_instance() {
    return reinterpret_cast<const ProtocolStats*>(
               &_ProtocolStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtocolStats& a, ProtocolStats& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtocolStats* New() const final {
    return CreateMaybeMessage<ProtocolStats>(nullptr);
  }

  ProtocolStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtocolStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtocolStats& from);
  void MergeFrom(const ProtocolStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "misc.lwip.ProtocolStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_misc_2flwip_2eproto);
    return ::descriptor_table_misc_2flwip_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXmitFieldNumber = 1,
    kRecvFieldNumber = 2,
    kFwFieldNumber = 3,
    kDropFieldNumber = 4,
    kChkerrFieldNumber = 5,
    kLenerrFieldNumber = 6,
    kMemerrFieldNumber = 7,
    kRterrFieldNumber = 8,
    kProterrFieldNumber = 9,
    kOpterrFieldNumber = 10,
    kErrFieldNumber = 11,
  };
  // required uint32 xmit = 1;
  bool has_xmit() const;
  private:
  bool _internal_has_xmit() const;
  public:
  void clear_xmit();
  ::PROTOBUF_NAMESPACE_ID::uint32 xmit() const;
  void set_xmit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_xmit() const;
  void _internal_set_xmit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 recv = 2;
  bool has_recv() const;
  private:
  bool _internal_has_recv() const;
  public:
  void clear_recv();
  ::PROTOBUF_NAMESPACE_ID::uint32 recv() const;
  void set_recv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recv() const;
  void _internal_set_recv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 fw = 3;
  bool has_fw() const;
  private:
  bool _internal_has_fw() const;
  public:
  void clear_fw();
  ::PROTOBUF_NAMESPACE_ID::uint32 fw() const;
  void set_fw(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fw() const;
  void _internal_set_fw(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 drop = 4;
  bool has_drop() const;
  private:
  bool _internal_has_drop() const;
  public:
  void clear_drop();
  ::PROTOBUF_NAMESPACE_ID::uint32 drop() const;
  void set_drop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_drop() const;
  void _internal_set_drop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 chkerr = 5;
  bool has_chkerr() const;
  private:
  bool _internal_has_chkerr() const;
  public:
  void clear_chkerr();
  ::PROTOBUF_NAMESPACE_ID::uint32 chkerr() const;
  void set_chkerr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chkerr() const;
  void _internal_set_chkerr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 lenerr = 6;
  bool has_lenerr() const;
  private:
  bool _internal_has_lenerr() const;
  public:
  void clear_lenerr();
  ::PROTOBUF_NAMESPACE_ID::uint32 lenerr() const;
  void set_lenerr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lenerr() const;
  void _internal_set_lenerr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 memerr = 7;
  bool has_memerr() const;
  private:
  bool _internal_has_memerr() const;
  public:
  void clear_memerr();
  ::PROTOBUF_NAMESPACE_ID::uint32 memerr() const;
  void set_memerr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_memerr() const;
  void _internal_set_memerr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 rterr = 8;
  bool has_rterr() const;
  private:
  bool _internal_has_rterr() const;
  public:
  void clear_rterr();
  ::PROTOBUF_NAMESPACE_ID::uint32 rterr() const;
  void set_rterr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rterr() const;
  void _internal_set_rterr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 proterr = 9;
  bool has_proterr() const;
  private:
  bool _internal_has_proterr() const;
  public:
  void clear_proterr();
  ::PROTOBUF_NAMESPACE_ID::uint32 proterr() const;
  void set_proterr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_proterr() const;
  void _internal_set_proterr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 opterr = 10;
  bool has_opterr() const;
  private:
  bool _internal_has_opterr() const;
  public:
  void clear_opterr();
  ::PROTOBUF_NAMESPACE_ID::uint32 opterr() const;
  void set_opterr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_opterr() const;
  void _internal_set_opterr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 err = 11;
  bool has_err() const;
  private:
  bool _internal_has_err() const;
  public:
  void clear_err();
  ::PROTOBUF_NAMESPACE_ID::uint32 err() const;
  void set_err(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_err() const;
  void _internal_set_err(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:misc.lwip.ProtocolStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 xmit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recv_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fw_;
  ::PROTOBUF_NAMESPACE_ID::uint32 drop_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chkerr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lenerr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 memerr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rterr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 proterr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 opterr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 err_;
  friend struct ::TableStruct_misc_2flwip_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Statistic

// required .misc.lwip.ProtocolStats link = 1;
inline bool Statistic::_internal_has_link() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || link_ != nullptr);
  return value;
}
inline bool Statistic::has_link() const {
  return _internal_has_link();
}
inline void Statistic::clear_link() {
  if (link_ != nullptr) link_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::misc::lwip::ProtocolStats& Statistic::_internal_link() const {
  const ::misc::lwip::ProtocolStats* p = link_;
  return p != nullptr ? *p : *reinterpret_cast<const ::misc::lwip::ProtocolStats*>(
      &::misc::lwip::_ProtocolStats_default_instance_);
}
inline const ::misc::lwip::ProtocolStats& Statistic::link() const {
  // @@protoc_insertion_point(field_get:misc.lwip.Statistic.link)
  return _internal_link();
}
inline ::misc::lwip::ProtocolStats* Statistic::release_link() {
  // @@protoc_insertion_point(field_release:misc.lwip.Statistic.link)
  _has_bits_[0] &= ~0x00000001u;
  ::misc::lwip::ProtocolStats* temp = link_;
  link_ = nullptr;
  return temp;
}
inline ::misc::lwip::ProtocolStats* Statistic::_internal_mutable_link() {
  _has_bits_[0] |= 0x00000001u;
  if (link_ == nullptr) {
    auto* p = CreateMaybeMessage<::misc::lwip::ProtocolStats>(GetArenaNoVirtual());
    link_ = p;
  }
  return link_;
}
inline ::misc::lwip::ProtocolStats* Statistic::mutable_link() {
  // @@protoc_insertion_point(field_mutable:misc.lwip.Statistic.link)
  return _internal_mutable_link();
}
inline void Statistic::set_allocated_link(::misc::lwip::ProtocolStats* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete link_;
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  link_ = link;
  // @@protoc_insertion_point(field_set_allocated:misc.lwip.Statistic.link)
}

// required .misc.lwip.ProtocolStats arp = 2;
inline bool Statistic::_internal_has_arp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || arp_ != nullptr);
  return value;
}
inline bool Statistic::has_arp() const {
  return _internal_has_arp();
}
inline void Statistic::clear_arp() {
  if (arp_ != nullptr) arp_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::misc::lwip::ProtocolStats& Statistic::_internal_arp() const {
  const ::misc::lwip::ProtocolStats* p = arp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::misc::lwip::ProtocolStats*>(
      &::misc::lwip::_ProtocolStats_default_instance_);
}
inline const ::misc::lwip::ProtocolStats& Statistic::arp() const {
  // @@protoc_insertion_point(field_get:misc.lwip.Statistic.arp)
  return _internal_arp();
}
inline ::misc::lwip::ProtocolStats* Statistic::release_arp() {
  // @@protoc_insertion_point(field_release:misc.lwip.Statistic.arp)
  _has_bits_[0] &= ~0x00000002u;
  ::misc::lwip::ProtocolStats* temp = arp_;
  arp_ = nullptr;
  return temp;
}
inline ::misc::lwip::ProtocolStats* Statistic::_internal_mutable_arp() {
  _has_bits_[0] |= 0x00000002u;
  if (arp_ == nullptr) {
    auto* p = CreateMaybeMessage<::misc::lwip::ProtocolStats>(GetArenaNoVirtual());
    arp_ = p;
  }
  return arp_;
}
inline ::misc::lwip::ProtocolStats* Statistic::mutable_arp() {
  // @@protoc_insertion_point(field_mutable:misc.lwip.Statistic.arp)
  return _internal_mutable_arp();
}
inline void Statistic::set_allocated_arp(::misc::lwip::ProtocolStats* arp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete arp_;
  }
  if (arp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  arp_ = arp;
  // @@protoc_insertion_point(field_set_allocated:misc.lwip.Statistic.arp)
}

// required .misc.lwip.ProtocolStats ip = 3;
inline bool Statistic::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ip_ != nullptr);
  return value;
}
inline bool Statistic::has_ip() const {
  return _internal_has_ip();
}
inline void Statistic::clear_ip() {
  if (ip_ != nullptr) ip_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::misc::lwip::ProtocolStats& Statistic::_internal_ip() const {
  const ::misc::lwip::ProtocolStats* p = ip_;
  return p != nullptr ? *p : *reinterpret_cast<const ::misc::lwip::ProtocolStats*>(
      &::misc::lwip::_ProtocolStats_default_instance_);
}
inline const ::misc::lwip::ProtocolStats& Statistic::ip() const {
  // @@protoc_insertion_point(field_get:misc.lwip.Statistic.ip)
  return _internal_ip();
}
inline ::misc::lwip::ProtocolStats* Statistic::release_ip() {
  // @@protoc_insertion_point(field_release:misc.lwip.Statistic.ip)
  _has_bits_[0] &= ~0x00000004u;
  ::misc::lwip::ProtocolStats* temp = ip_;
  ip_ = nullptr;
  return temp;
}
inline ::misc::lwip::ProtocolStats* Statistic::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000004u;
  if (ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::misc::lwip::ProtocolStats>(GetArenaNoVirtual());
    ip_ = p;
  }
  return ip_;
}
inline ::misc::lwip::ProtocolStats* Statistic::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:misc.lwip.Statistic.ip)
  return _internal_mutable_ip();
}
inline void Statistic::set_allocated_ip(::misc::lwip::ProtocolStats* ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ip_;
  }
  if (ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ip_ = ip;
  // @@protoc_insertion_point(field_set_allocated:misc.lwip.Statistic.ip)
}

// required .misc.lwip.ProtocolStats tcp = 4;
inline bool Statistic::_internal_has_tcp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tcp_ != nullptr);
  return value;
}
inline bool Statistic::has_tcp() const {
  return _internal_has_tcp();
}
inline void Statistic::clear_tcp() {
  if (tcp_ != nullptr) tcp_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::misc::lwip::ProtocolStats& Statistic::_internal_tcp() const {
  const ::misc::lwip::ProtocolStats* p = tcp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::misc::lwip::ProtocolStats*>(
      &::misc::lwip::_ProtocolStats_default_instance_);
}
inline const ::misc::lwip::ProtocolStats& Statistic::tcp() const {
  // @@protoc_insertion_point(field_get:misc.lwip.Statistic.tcp)
  return _internal_tcp();
}
inline ::misc::lwip::ProtocolStats* Statistic::release_tcp() {
  // @@protoc_insertion_point(field_release:misc.lwip.Statistic.tcp)
  _has_bits_[0] &= ~0x00000008u;
  ::misc::lwip::ProtocolStats* temp = tcp_;
  tcp_ = nullptr;
  return temp;
}
inline ::misc::lwip::ProtocolStats* Statistic::_internal_mutable_tcp() {
  _has_bits_[0] |= 0x00000008u;
  if (tcp_ == nullptr) {
    auto* p = CreateMaybeMessage<::misc::lwip::ProtocolStats>(GetArenaNoVirtual());
    tcp_ = p;
  }
  return tcp_;
}
inline ::misc::lwip::ProtocolStats* Statistic::mutable_tcp() {
  // @@protoc_insertion_point(field_mutable:misc.lwip.Statistic.tcp)
  return _internal_mutable_tcp();
}
inline void Statistic::set_allocated_tcp(::misc::lwip::ProtocolStats* tcp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tcp_;
  }
  if (tcp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tcp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tcp_ = tcp;
  // @@protoc_insertion_point(field_set_allocated:misc.lwip.Statistic.tcp)
}

// -------------------------------------------------------------------

// ProtocolStats

// required uint32 xmit = 1;
inline bool ProtocolStats::_internal_has_xmit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProtocolStats::has_xmit() const {
  return _internal_has_xmit();
}
inline void ProtocolStats::clear_xmit() {
  xmit_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::_internal_xmit() const {
  return xmit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::xmit() const {
  // @@protoc_insertion_point(field_get:misc.lwip.ProtocolStats.xmit)
  return _internal_xmit();
}
inline void ProtocolStats::_internal_set_xmit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  xmit_ = value;
}
inline void ProtocolStats::set_xmit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_xmit(value);
  // @@protoc_insertion_point(field_set:misc.lwip.ProtocolStats.xmit)
}

// required uint32 recv = 2;
inline bool ProtocolStats::_internal_has_recv() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProtocolStats::has_recv() const {
  return _internal_has_recv();
}
inline void ProtocolStats::clear_recv() {
  recv_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::_internal_recv() const {
  return recv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::recv() const {
  // @@protoc_insertion_point(field_get:misc.lwip.ProtocolStats.recv)
  return _internal_recv();
}
inline void ProtocolStats::_internal_set_recv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  recv_ = value;
}
inline void ProtocolStats::set_recv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recv(value);
  // @@protoc_insertion_point(field_set:misc.lwip.ProtocolStats.recv)
}

// required uint32 fw = 3;
inline bool ProtocolStats::_internal_has_fw() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProtocolStats::has_fw() const {
  return _internal_has_fw();
}
inline void ProtocolStats::clear_fw() {
  fw_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::_internal_fw() const {
  return fw_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::fw() const {
  // @@protoc_insertion_point(field_get:misc.lwip.ProtocolStats.fw)
  return _internal_fw();
}
inline void ProtocolStats::_internal_set_fw(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  fw_ = value;
}
inline void ProtocolStats::set_fw(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fw(value);
  // @@protoc_insertion_point(field_set:misc.lwip.ProtocolStats.fw)
}

// required uint32 drop = 4;
inline bool ProtocolStats::_internal_has_drop() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProtocolStats::has_drop() const {
  return _internal_has_drop();
}
inline void ProtocolStats::clear_drop() {
  drop_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::_internal_drop() const {
  return drop_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::drop() const {
  // @@protoc_insertion_point(field_get:misc.lwip.ProtocolStats.drop)
  return _internal_drop();
}
inline void ProtocolStats::_internal_set_drop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  drop_ = value;
}
inline void ProtocolStats::set_drop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_drop(value);
  // @@protoc_insertion_point(field_set:misc.lwip.ProtocolStats.drop)
}

// required uint32 chkerr = 5;
inline bool ProtocolStats::_internal_has_chkerr() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProtocolStats::has_chkerr() const {
  return _internal_has_chkerr();
}
inline void ProtocolStats::clear_chkerr() {
  chkerr_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::_internal_chkerr() const {
  return chkerr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::chkerr() const {
  // @@protoc_insertion_point(field_get:misc.lwip.ProtocolStats.chkerr)
  return _internal_chkerr();
}
inline void ProtocolStats::_internal_set_chkerr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  chkerr_ = value;
}
inline void ProtocolStats::set_chkerr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chkerr(value);
  // @@protoc_insertion_point(field_set:misc.lwip.ProtocolStats.chkerr)
}

// required uint32 lenerr = 6;
inline bool ProtocolStats::_internal_has_lenerr() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ProtocolStats::has_lenerr() const {
  return _internal_has_lenerr();
}
inline void ProtocolStats::clear_lenerr() {
  lenerr_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::_internal_lenerr() const {
  return lenerr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::lenerr() const {
  // @@protoc_insertion_point(field_get:misc.lwip.ProtocolStats.lenerr)
  return _internal_lenerr();
}
inline void ProtocolStats::_internal_set_lenerr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  lenerr_ = value;
}
inline void ProtocolStats::set_lenerr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lenerr(value);
  // @@protoc_insertion_point(field_set:misc.lwip.ProtocolStats.lenerr)
}

// required uint32 memerr = 7;
inline bool ProtocolStats::_internal_has_memerr() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ProtocolStats::has_memerr() const {
  return _internal_has_memerr();
}
inline void ProtocolStats::clear_memerr() {
  memerr_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::_internal_memerr() const {
  return memerr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::memerr() const {
  // @@protoc_insertion_point(field_get:misc.lwip.ProtocolStats.memerr)
  return _internal_memerr();
}
inline void ProtocolStats::_internal_set_memerr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  memerr_ = value;
}
inline void ProtocolStats::set_memerr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_memerr(value);
  // @@protoc_insertion_point(field_set:misc.lwip.ProtocolStats.memerr)
}

// required uint32 rterr = 8;
inline bool ProtocolStats::_internal_has_rterr() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ProtocolStats::has_rterr() const {
  return _internal_has_rterr();
}
inline void ProtocolStats::clear_rterr() {
  rterr_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::_internal_rterr() const {
  return rterr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::rterr() const {
  // @@protoc_insertion_point(field_get:misc.lwip.ProtocolStats.rterr)
  return _internal_rterr();
}
inline void ProtocolStats::_internal_set_rterr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  rterr_ = value;
}
inline void ProtocolStats::set_rterr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rterr(value);
  // @@protoc_insertion_point(field_set:misc.lwip.ProtocolStats.rterr)
}

// required uint32 proterr = 9;
inline bool ProtocolStats::_internal_has_proterr() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ProtocolStats::has_proterr() const {
  return _internal_has_proterr();
}
inline void ProtocolStats::clear_proterr() {
  proterr_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::_internal_proterr() const {
  return proterr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::proterr() const {
  // @@protoc_insertion_point(field_get:misc.lwip.ProtocolStats.proterr)
  return _internal_proterr();
}
inline void ProtocolStats::_internal_set_proterr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  proterr_ = value;
}
inline void ProtocolStats::set_proterr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_proterr(value);
  // @@protoc_insertion_point(field_set:misc.lwip.ProtocolStats.proterr)
}

// required uint32 opterr = 10;
inline bool ProtocolStats::_internal_has_opterr() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ProtocolStats::has_opterr() const {
  return _internal_has_opterr();
}
inline void ProtocolStats::clear_opterr() {
  opterr_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::_internal_opterr() const {
  return opterr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::opterr() const {
  // @@protoc_insertion_point(field_get:misc.lwip.ProtocolStats.opterr)
  return _internal_opterr();
}
inline void ProtocolStats::_internal_set_opterr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  opterr_ = value;
}
inline void ProtocolStats::set_opterr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_opterr(value);
  // @@protoc_insertion_point(field_set:misc.lwip.ProtocolStats.opterr)
}

// required uint32 err = 11;
inline bool ProtocolStats::_internal_has_err() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ProtocolStats::has_err() const {
  return _internal_has_err();
}
inline void ProtocolStats::clear_err() {
  err_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::_internal_err() const {
  return err_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProtocolStats::err() const {
  // @@protoc_insertion_point(field_get:misc.lwip.ProtocolStats.err)
  return _internal_err();
}
inline void ProtocolStats::_internal_set_err(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  err_ = value;
}
inline void ProtocolStats::set_err(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:misc.lwip.ProtocolStats.err)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lwip
}  // namespace misc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_misc_2flwip_2eproto
