// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: misc/echo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_misc_2fecho_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_misc_2fecho_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_misc_2fecho_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_misc_2fecho_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_misc_2fecho_2eproto;
namespace misc {
namespace echo {
class Echo;
class EchoDefaultTypeInternal;
extern EchoDefaultTypeInternal _Echo_default_instance_;
class GetEcho;
class GetEchoDefaultTypeInternal;
extern GetEchoDefaultTypeInternal _GetEcho_default_instance_;
}  // namespace echo
}  // namespace misc
PROTOBUF_NAMESPACE_OPEN
template<> ::misc::echo::Echo* Arena::CreateMaybeMessage<::misc::echo::Echo>(Arena*);
template<> ::misc::echo::GetEcho* Arena::CreateMaybeMessage<::misc::echo::GetEcho>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace misc {
namespace echo {

// ===================================================================

class GetEcho :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:misc.echo.GetEcho) */ {
 public:
  GetEcho();
  virtual ~GetEcho();

  GetEcho(const GetEcho& from);
  GetEcho(GetEcho&& from) noexcept
    : GetEcho() {
    *this = ::std::move(from);
  }

  inline GetEcho& operator=(const GetEcho& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEcho& operator=(GetEcho&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEcho& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEcho* internal_default_instance() {
    return reinterpret_cast<const GetEcho*>(
               &_GetEcho_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetEcho& a, GetEcho& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEcho* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetEcho* New() const final {
    return CreateMaybeMessage<GetEcho>(nullptr);
  }

  GetEcho* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEcho>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEcho& from);
  void MergeFrom(const GetEcho& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEcho* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "misc.echo.GetEcho";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_misc_2fecho_2eproto);
    return ::descriptor_table_misc_2fecho_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kReplySizeFieldNumber = 2,
    kSendPendingFieldNumber = 1,
  };
  // optional bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint32 reply_size = 2;
  bool has_reply_size() const;
  private:
  bool _internal_has_reply_size() const;
  public:
  void clear_reply_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 reply_size() const;
  void set_reply_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reply_size() const;
  void _internal_set_reply_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool send_pending = 1 [default = true];
  bool has_send_pending() const;
  private:
  bool _internal_has_send_pending() const;
  public:
  void clear_send_pending();
  bool send_pending() const;
  void set_send_pending(bool value);
  private:
  bool _internal_send_pending() const;
  void _internal_set_send_pending(bool value);
  public:

  // @@protoc_insertion_point(class_scope:misc.echo.GetEcho)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reply_size_;
  bool send_pending_;
  friend struct ::TableStruct_misc_2fecho_2eproto;
};
// -------------------------------------------------------------------

class Echo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:misc.echo.Echo) */ {
 public:
  Echo();
  virtual ~Echo();

  Echo(const Echo& from);
  Echo(Echo&& from) noexcept
    : Echo() {
    *this = ::std::move(from);
  }

  inline Echo& operator=(const Echo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Echo& operator=(Echo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Echo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Echo* internal_default_instance() {
    return reinterpret_cast<const Echo*>(
               &_Echo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Echo& a, Echo& b) {
    a.Swap(&b);
  }
  inline void Swap(Echo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Echo* New() const final {
    return CreateMaybeMessage<Echo>(nullptr);
  }

  Echo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Echo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Echo& from);
  void MergeFrom(const Echo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Echo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "misc.echo.Echo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_misc_2fecho_2eproto);
    return ::descriptor_table_misc_2fecho_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEchoFieldNumber = 1,
  };
  // optional bytes echo = 1;
  bool has_echo() const;
  private:
  bool _internal_has_echo() const;
  public:
  void clear_echo();
  const std::string& echo() const;
  void set_echo(const std::string& value);
  void set_echo(std::string&& value);
  void set_echo(const char* value);
  void set_echo(const void* value, size_t size);
  std::string* mutable_echo();
  std::string* release_echo();
  void set_allocated_echo(std::string* echo);
  private:
  const std::string& _internal_echo() const;
  void _internal_set_echo(const std::string& value);
  std::string* _internal_mutable_echo();
  public:

  // @@protoc_insertion_point(class_scope:misc.echo.Echo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr echo_;
  friend struct ::TableStruct_misc_2fecho_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetEcho

// optional bool send_pending = 1 [default = true];
inline bool GetEcho::_internal_has_send_pending() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetEcho::has_send_pending() const {
  return _internal_has_send_pending();
}
inline void GetEcho::clear_send_pending() {
  send_pending_ = true;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool GetEcho::_internal_send_pending() const {
  return send_pending_;
}
inline bool GetEcho::send_pending() const {
  // @@protoc_insertion_point(field_get:misc.echo.GetEcho.send_pending)
  return _internal_send_pending();
}
inline void GetEcho::_internal_set_send_pending(bool value) {
  _has_bits_[0] |= 0x00000004u;
  send_pending_ = value;
}
inline void GetEcho::set_send_pending(bool value) {
  _internal_set_send_pending(value);
  // @@protoc_insertion_point(field_set:misc.echo.GetEcho.send_pending)
}

// optional uint32 reply_size = 2;
inline bool GetEcho::_internal_has_reply_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetEcho::has_reply_size() const {
  return _internal_has_reply_size();
}
inline void GetEcho::clear_reply_size() {
  reply_size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEcho::_internal_reply_size() const {
  return reply_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetEcho::reply_size() const {
  // @@protoc_insertion_point(field_get:misc.echo.GetEcho.reply_size)
  return _internal_reply_size();
}
inline void GetEcho::_internal_set_reply_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  reply_size_ = value;
}
inline void GetEcho::set_reply_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reply_size(value);
  // @@protoc_insertion_point(field_set:misc.echo.GetEcho.reply_size)
}

// optional bytes data = 3;
inline bool GetEcho::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetEcho::has_data() const {
  return _internal_has_data();
}
inline void GetEcho::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetEcho::data() const {
  // @@protoc_insertion_point(field_get:misc.echo.GetEcho.data)
  return _internal_data();
}
inline void GetEcho::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:misc.echo.GetEcho.data)
}
inline std::string* GetEcho::mutable_data() {
  // @@protoc_insertion_point(field_mutable:misc.echo.GetEcho.data)
  return _internal_mutable_data();
}
inline const std::string& GetEcho::_internal_data() const {
  return data_.GetNoArena();
}
inline void GetEcho::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetEcho::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:misc.echo.GetEcho.data)
}
inline void GetEcho::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:misc.echo.GetEcho.data)
}
inline void GetEcho::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:misc.echo.GetEcho.data)
}
inline std::string* GetEcho::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetEcho::release_data() {
  // @@protoc_insertion_point(field_release:misc.echo.GetEcho.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetEcho::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:misc.echo.GetEcho.data)
}

// -------------------------------------------------------------------

// Echo

// optional bytes echo = 1;
inline bool Echo::_internal_has_echo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Echo::has_echo() const {
  return _internal_has_echo();
}
inline void Echo::clear_echo() {
  echo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Echo::echo() const {
  // @@protoc_insertion_point(field_get:misc.echo.Echo.echo)
  return _internal_echo();
}
inline void Echo::set_echo(const std::string& value) {
  _internal_set_echo(value);
  // @@protoc_insertion_point(field_set:misc.echo.Echo.echo)
}
inline std::string* Echo::mutable_echo() {
  // @@protoc_insertion_point(field_mutable:misc.echo.Echo.echo)
  return _internal_mutable_echo();
}
inline const std::string& Echo::_internal_echo() const {
  return echo_.GetNoArena();
}
inline void Echo::_internal_set_echo(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  echo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Echo::set_echo(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  echo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:misc.echo.Echo.echo)
}
inline void Echo::set_echo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  echo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:misc.echo.Echo.echo)
}
inline void Echo::set_echo(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  echo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:misc.echo.Echo.echo)
}
inline std::string* Echo::_internal_mutable_echo() {
  _has_bits_[0] |= 0x00000001u;
  return echo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Echo::release_echo() {
  // @@protoc_insertion_point(field_release:misc.echo.Echo.echo)
  if (!_internal_has_echo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return echo_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Echo::set_allocated_echo(std::string* echo) {
  if (echo != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  echo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), echo);
  // @@protoc_insertion_point(field_set_allocated:misc.echo.Echo.echo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace echo
}  // namespace misc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_misc_2fecho_2eproto
