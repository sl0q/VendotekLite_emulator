// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: misc/lan_settings.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_misc_2flan_5fsettings_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_misc_2flan_5fsettings_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_misc_2flan_5fsettings_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_misc_2flan_5fsettings_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_misc_2flan_5fsettings_2eproto;
namespace misc {
namespace lan_settings {
class ChangeLanSettings;
class ChangeLanSettingsDefaultTypeInternal;
extern ChangeLanSettingsDefaultTypeInternal _ChangeLanSettings_default_instance_;
class Dhcp;
class DhcpDefaultTypeInternal;
extern DhcpDefaultTypeInternal _Dhcp_default_instance_;
class LanSettings;
class LanSettingsDefaultTypeInternal;
extern LanSettingsDefaultTypeInternal _LanSettings_default_instance_;
class ManualSettings;
class ManualSettingsDefaultTypeInternal;
extern ManualSettingsDefaultTypeInternal _ManualSettings_default_instance_;
}  // namespace lan_settings
}  // namespace misc
PROTOBUF_NAMESPACE_OPEN
template<> ::misc::lan_settings::ChangeLanSettings* Arena::CreateMaybeMessage<::misc::lan_settings::ChangeLanSettings>(Arena*);
template<> ::misc::lan_settings::Dhcp* Arena::CreateMaybeMessage<::misc::lan_settings::Dhcp>(Arena*);
template<> ::misc::lan_settings::LanSettings* Arena::CreateMaybeMessage<::misc::lan_settings::LanSettings>(Arena*);
template<> ::misc::lan_settings::ManualSettings* Arena::CreateMaybeMessage<::misc::lan_settings::ManualSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace misc {
namespace lan_settings {

// ===================================================================

class ChangeLanSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:misc.lan_settings.ChangeLanSettings) */ {
 public:
  ChangeLanSettings();
  virtual ~ChangeLanSettings();

  ChangeLanSettings(const ChangeLanSettings& from);
  ChangeLanSettings(ChangeLanSettings&& from) noexcept
    : ChangeLanSettings() {
    *this = ::std::move(from);
  }

  inline ChangeLanSettings& operator=(const ChangeLanSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeLanSettings& operator=(ChangeLanSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeLanSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeLanSettings* internal_default_instance() {
    return reinterpret_cast<const ChangeLanSettings*>(
               &_ChangeLanSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChangeLanSettings& a, ChangeLanSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeLanSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeLanSettings* New() const final {
    return CreateMaybeMessage<ChangeLanSettings>(nullptr);
  }

  ChangeLanSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeLanSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeLanSettings& from);
  void MergeFrom(const ChangeLanSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeLanSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "misc.lan_settings.ChangeLanSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_misc_2flan_5fsettings_2eproto);
    return ::descriptor_table_misc_2flan_5fsettings_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanSettingsFieldNumber = 1,
  };
  // required .misc.lan_settings.LanSettings lan_settings = 1;
  bool has_lan_settings() const;
  private:
  bool _internal_has_lan_settings() const;
  public:
  void clear_lan_settings();
  const ::misc::lan_settings::LanSettings& lan_settings() const;
  ::misc::lan_settings::LanSettings* release_lan_settings();
  ::misc::lan_settings::LanSettings* mutable_lan_settings();
  void set_allocated_lan_settings(::misc::lan_settings::LanSettings* lan_settings);
  private:
  const ::misc::lan_settings::LanSettings& _internal_lan_settings() const;
  ::misc::lan_settings::LanSettings* _internal_mutable_lan_settings();
  public:

  // @@protoc_insertion_point(class_scope:misc.lan_settings.ChangeLanSettings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::misc::lan_settings::LanSettings* lan_settings_;
  friend struct ::TableStruct_misc_2flan_5fsettings_2eproto;
};
// -------------------------------------------------------------------

class LanSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:misc.lan_settings.LanSettings) */ {
 public:
  LanSettings();
  virtual ~LanSettings();

  LanSettings(const LanSettings& from);
  LanSettings(LanSettings&& from) noexcept
    : LanSettings() {
    *this = ::std::move(from);
  }

  inline LanSettings& operator=(const LanSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline LanSettings& operator=(LanSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LanSettings& default_instance();

  enum Ipv4MethodCase {
    kDhcp = 1,
    kManual = 2,
    IPV4_METHOD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LanSettings* internal_default_instance() {
    return reinterpret_cast<const LanSettings*>(
               &_LanSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LanSettings& a, LanSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(LanSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LanSettings* New() const final {
    return CreateMaybeMessage<LanSettings>(nullptr);
  }

  LanSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LanSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LanSettings& from);
  void MergeFrom(const LanSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LanSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "misc.lan_settings.LanSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_misc_2flan_5fsettings_2eproto);
    return ::descriptor_table_misc_2flan_5fsettings_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDhcpFieldNumber = 1,
    kManualFieldNumber = 2,
  };
  // optional .misc.lan_settings.Dhcp dhcp = 1;
  bool has_dhcp() const;
  private:
  bool _internal_has_dhcp() const;
  public:
  void clear_dhcp();
  const ::misc::lan_settings::Dhcp& dhcp() const;
  ::misc::lan_settings::Dhcp* release_dhcp();
  ::misc::lan_settings::Dhcp* mutable_dhcp();
  void set_allocated_dhcp(::misc::lan_settings::Dhcp* dhcp);
  private:
  const ::misc::lan_settings::Dhcp& _internal_dhcp() const;
  ::misc::lan_settings::Dhcp* _internal_mutable_dhcp();
  public:

  // optional .misc.lan_settings.ManualSettings manual = 2;
  bool has_manual() const;
  private:
  bool _internal_has_manual() const;
  public:
  void clear_manual();
  const ::misc::lan_settings::ManualSettings& manual() const;
  ::misc::lan_settings::ManualSettings* release_manual();
  ::misc::lan_settings::ManualSettings* mutable_manual();
  void set_allocated_manual(::misc::lan_settings::ManualSettings* manual);
  private:
  const ::misc::lan_settings::ManualSettings& _internal_manual() const;
  ::misc::lan_settings::ManualSettings* _internal_mutable_manual();
  public:

  void clear_ipv4_method();
  Ipv4MethodCase ipv4_method_case() const;
  // @@protoc_insertion_point(class_scope:misc.lan_settings.LanSettings)
 private:
  class _Internal;
  void set_has_dhcp();
  void set_has_manual();

  inline bool has_ipv4_method() const;
  inline void clear_has_ipv4_method();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union Ipv4MethodUnion {
    Ipv4MethodUnion() {}
    ::misc::lan_settings::Dhcp* dhcp_;
    ::misc::lan_settings::ManualSettings* manual_;
  } ipv4_method_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_misc_2flan_5fsettings_2eproto;
};
// -------------------------------------------------------------------

class Dhcp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:misc.lan_settings.Dhcp) */ {
 public:
  Dhcp();
  virtual ~Dhcp();

  Dhcp(const Dhcp& from);
  Dhcp(Dhcp&& from) noexcept
    : Dhcp() {
    *this = ::std::move(from);
  }

  inline Dhcp& operator=(const Dhcp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dhcp& operator=(Dhcp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dhcp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dhcp* internal_default_instance() {
    return reinterpret_cast<const Dhcp*>(
               &_Dhcp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Dhcp& a, Dhcp& b) {
    a.Swap(&b);
  }
  inline void Swap(Dhcp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dhcp* New() const final {
    return CreateMaybeMessage<Dhcp>(nullptr);
  }

  Dhcp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dhcp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dhcp& from);
  void MergeFrom(const Dhcp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dhcp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "misc.lan_settings.Dhcp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_misc_2flan_5fsettings_2eproto);
    return ::descriptor_table_misc_2flan_5fsettings_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:misc.lan_settings.Dhcp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_misc_2flan_5fsettings_2eproto;
};
// -------------------------------------------------------------------

class ManualSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:misc.lan_settings.ManualSettings) */ {
 public:
  ManualSettings();
  virtual ~ManualSettings();

  ManualSettings(const ManualSettings& from);
  ManualSettings(ManualSettings&& from) noexcept
    : ManualSettings() {
    *this = ::std::move(from);
  }

  inline ManualSettings& operator=(const ManualSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManualSettings& operator=(ManualSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ManualSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManualSettings* internal_default_instance() {
    return reinterpret_cast<const ManualSettings*>(
               &_ManualSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ManualSettings& a, ManualSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ManualSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManualSettings* New() const final {
    return CreateMaybeMessage<ManualSettings>(nullptr);
  }

  ManualSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManualSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ManualSettings& from);
  void MergeFrom(const ManualSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManualSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "misc.lan_settings.ManualSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_misc_2flan_5fsettings_2eproto);
    return ::descriptor_table_misc_2flan_5fsettings_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalAddressFieldNumber = 1,
    kNetmaskFieldNumber = 2,
    kGatewayFieldNumber = 3,
  };
  // required string local_address = 1;
  bool has_local_address() const;
  private:
  bool _internal_has_local_address() const;
  public:
  void clear_local_address();
  const std::string& local_address() const;
  void set_local_address(const std::string& value);
  void set_local_address(std::string&& value);
  void set_local_address(const char* value);
  void set_local_address(const char* value, size_t size);
  std::string* mutable_local_address();
  std::string* release_local_address();
  void set_allocated_local_address(std::string* local_address);
  private:
  const std::string& _internal_local_address() const;
  void _internal_set_local_address(const std::string& value);
  std::string* _internal_mutable_local_address();
  public:

  // required string netmask = 2;
  bool has_netmask() const;
  private:
  bool _internal_has_netmask() const;
  public:
  void clear_netmask();
  const std::string& netmask() const;
  void set_netmask(const std::string& value);
  void set_netmask(std::string&& value);
  void set_netmask(const char* value);
  void set_netmask(const char* value, size_t size);
  std::string* mutable_netmask();
  std::string* release_netmask();
  void set_allocated_netmask(std::string* netmask);
  private:
  const std::string& _internal_netmask() const;
  void _internal_set_netmask(const std::string& value);
  std::string* _internal_mutable_netmask();
  public:

  // required string gateway = 3;
  bool has_gateway() const;
  private:
  bool _internal_has_gateway() const;
  public:
  void clear_gateway();
  const std::string& gateway() const;
  void set_gateway(const std::string& value);
  void set_gateway(std::string&& value);
  void set_gateway(const char* value);
  void set_gateway(const char* value, size_t size);
  std::string* mutable_gateway();
  std::string* release_gateway();
  void set_allocated_gateway(std::string* gateway);
  private:
  const std::string& _internal_gateway() const;
  void _internal_set_gateway(const std::string& value);
  std::string* _internal_mutable_gateway();
  public:

  // @@protoc_insertion_point(class_scope:misc.lan_settings.ManualSettings)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr netmask_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gateway_;
  friend struct ::TableStruct_misc_2flan_5fsettings_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChangeLanSettings

// required .misc.lan_settings.LanSettings lan_settings = 1;
inline bool ChangeLanSettings::_internal_has_lan_settings() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || lan_settings_ != nullptr);
  return value;
}
inline bool ChangeLanSettings::has_lan_settings() const {
  return _internal_has_lan_settings();
}
inline void ChangeLanSettings::clear_lan_settings() {
  if (lan_settings_ != nullptr) lan_settings_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::misc::lan_settings::LanSettings& ChangeLanSettings::_internal_lan_settings() const {
  const ::misc::lan_settings::LanSettings* p = lan_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::misc::lan_settings::LanSettings*>(
      &::misc::lan_settings::_LanSettings_default_instance_);
}
inline const ::misc::lan_settings::LanSettings& ChangeLanSettings::lan_settings() const {
  // @@protoc_insertion_point(field_get:misc.lan_settings.ChangeLanSettings.lan_settings)
  return _internal_lan_settings();
}
inline ::misc::lan_settings::LanSettings* ChangeLanSettings::release_lan_settings() {
  // @@protoc_insertion_point(field_release:misc.lan_settings.ChangeLanSettings.lan_settings)
  _has_bits_[0] &= ~0x00000001u;
  ::misc::lan_settings::LanSettings* temp = lan_settings_;
  lan_settings_ = nullptr;
  return temp;
}
inline ::misc::lan_settings::LanSettings* ChangeLanSettings::_internal_mutable_lan_settings() {
  _has_bits_[0] |= 0x00000001u;
  if (lan_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::misc::lan_settings::LanSettings>(GetArenaNoVirtual());
    lan_settings_ = p;
  }
  return lan_settings_;
}
inline ::misc::lan_settings::LanSettings* ChangeLanSettings::mutable_lan_settings() {
  // @@protoc_insertion_point(field_mutable:misc.lan_settings.ChangeLanSettings.lan_settings)
  return _internal_mutable_lan_settings();
}
inline void ChangeLanSettings::set_allocated_lan_settings(::misc::lan_settings::LanSettings* lan_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lan_settings_;
  }
  if (lan_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lan_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lan_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lan_settings_ = lan_settings;
  // @@protoc_insertion_point(field_set_allocated:misc.lan_settings.ChangeLanSettings.lan_settings)
}

// -------------------------------------------------------------------

// LanSettings

// optional .misc.lan_settings.Dhcp dhcp = 1;
inline bool LanSettings::_internal_has_dhcp() const {
  return ipv4_method_case() == kDhcp;
}
inline bool LanSettings::has_dhcp() const {
  return _internal_has_dhcp();
}
inline void LanSettings::set_has_dhcp() {
  _oneof_case_[0] = kDhcp;
}
inline void LanSettings::clear_dhcp() {
  if (_internal_has_dhcp()) {
    delete ipv4_method_.dhcp_;
    clear_has_ipv4_method();
  }
}
inline ::misc::lan_settings::Dhcp* LanSettings::release_dhcp() {
  // @@protoc_insertion_point(field_release:misc.lan_settings.LanSettings.dhcp)
  if (_internal_has_dhcp()) {
    clear_has_ipv4_method();
      ::misc::lan_settings::Dhcp* temp = ipv4_method_.dhcp_;
    ipv4_method_.dhcp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::lan_settings::Dhcp& LanSettings::_internal_dhcp() const {
  return _internal_has_dhcp()
      ? *ipv4_method_.dhcp_
      : *reinterpret_cast< ::misc::lan_settings::Dhcp*>(&::misc::lan_settings::_Dhcp_default_instance_);
}
inline const ::misc::lan_settings::Dhcp& LanSettings::dhcp() const {
  // @@protoc_insertion_point(field_get:misc.lan_settings.LanSettings.dhcp)
  return _internal_dhcp();
}
inline ::misc::lan_settings::Dhcp* LanSettings::_internal_mutable_dhcp() {
  if (!_internal_has_dhcp()) {
    clear_ipv4_method();
    set_has_dhcp();
    ipv4_method_.dhcp_ = CreateMaybeMessage< ::misc::lan_settings::Dhcp >(
        GetArenaNoVirtual());
  }
  return ipv4_method_.dhcp_;
}
inline ::misc::lan_settings::Dhcp* LanSettings::mutable_dhcp() {
  // @@protoc_insertion_point(field_mutable:misc.lan_settings.LanSettings.dhcp)
  return _internal_mutable_dhcp();
}

// optional .misc.lan_settings.ManualSettings manual = 2;
inline bool LanSettings::_internal_has_manual() const {
  return ipv4_method_case() == kManual;
}
inline bool LanSettings::has_manual() const {
  return _internal_has_manual();
}
inline void LanSettings::set_has_manual() {
  _oneof_case_[0] = kManual;
}
inline void LanSettings::clear_manual() {
  if (_internal_has_manual()) {
    delete ipv4_method_.manual_;
    clear_has_ipv4_method();
  }
}
inline ::misc::lan_settings::ManualSettings* LanSettings::release_manual() {
  // @@protoc_insertion_point(field_release:misc.lan_settings.LanSettings.manual)
  if (_internal_has_manual()) {
    clear_has_ipv4_method();
      ::misc::lan_settings::ManualSettings* temp = ipv4_method_.manual_;
    ipv4_method_.manual_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::lan_settings::ManualSettings& LanSettings::_internal_manual() const {
  return _internal_has_manual()
      ? *ipv4_method_.manual_
      : *reinterpret_cast< ::misc::lan_settings::ManualSettings*>(&::misc::lan_settings::_ManualSettings_default_instance_);
}
inline const ::misc::lan_settings::ManualSettings& LanSettings::manual() const {
  // @@protoc_insertion_point(field_get:misc.lan_settings.LanSettings.manual)
  return _internal_manual();
}
inline ::misc::lan_settings::ManualSettings* LanSettings::_internal_mutable_manual() {
  if (!_internal_has_manual()) {
    clear_ipv4_method();
    set_has_manual();
    ipv4_method_.manual_ = CreateMaybeMessage< ::misc::lan_settings::ManualSettings >(
        GetArenaNoVirtual());
  }
  return ipv4_method_.manual_;
}
inline ::misc::lan_settings::ManualSettings* LanSettings::mutable_manual() {
  // @@protoc_insertion_point(field_mutable:misc.lan_settings.LanSettings.manual)
  return _internal_mutable_manual();
}

inline bool LanSettings::has_ipv4_method() const {
  return ipv4_method_case() != IPV4_METHOD_NOT_SET;
}
inline void LanSettings::clear_has_ipv4_method() {
  _oneof_case_[0] = IPV4_METHOD_NOT_SET;
}
inline LanSettings::Ipv4MethodCase LanSettings::ipv4_method_case() const {
  return LanSettings::Ipv4MethodCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Dhcp

// -------------------------------------------------------------------

// ManualSettings

// required string local_address = 1;
inline bool ManualSettings::_internal_has_local_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ManualSettings::has_local_address() const {
  return _internal_has_local_address();
}
inline void ManualSettings::clear_local_address() {
  local_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ManualSettings::local_address() const {
  // @@protoc_insertion_point(field_get:misc.lan_settings.ManualSettings.local_address)
  return _internal_local_address();
}
inline void ManualSettings::set_local_address(const std::string& value) {
  _internal_set_local_address(value);
  // @@protoc_insertion_point(field_set:misc.lan_settings.ManualSettings.local_address)
}
inline std::string* ManualSettings::mutable_local_address() {
  // @@protoc_insertion_point(field_mutable:misc.lan_settings.ManualSettings.local_address)
  return _internal_mutable_local_address();
}
inline const std::string& ManualSettings::_internal_local_address() const {
  return local_address_.GetNoArena();
}
inline void ManualSettings::_internal_set_local_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  local_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ManualSettings::set_local_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  local_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:misc.lan_settings.ManualSettings.local_address)
}
inline void ManualSettings::set_local_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  local_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:misc.lan_settings.ManualSettings.local_address)
}
inline void ManualSettings::set_local_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  local_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:misc.lan_settings.ManualSettings.local_address)
}
inline std::string* ManualSettings::_internal_mutable_local_address() {
  _has_bits_[0] |= 0x00000001u;
  return local_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ManualSettings::release_local_address() {
  // @@protoc_insertion_point(field_release:misc.lan_settings.ManualSettings.local_address)
  if (!_internal_has_local_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return local_address_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ManualSettings::set_allocated_local_address(std::string* local_address) {
  if (local_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  local_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_address);
  // @@protoc_insertion_point(field_set_allocated:misc.lan_settings.ManualSettings.local_address)
}

// required string netmask = 2;
inline bool ManualSettings::_internal_has_netmask() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ManualSettings::has_netmask() const {
  return _internal_has_netmask();
}
inline void ManualSettings::clear_netmask() {
  netmask_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ManualSettings::netmask() const {
  // @@protoc_insertion_point(field_get:misc.lan_settings.ManualSettings.netmask)
  return _internal_netmask();
}
inline void ManualSettings::set_netmask(const std::string& value) {
  _internal_set_netmask(value);
  // @@protoc_insertion_point(field_set:misc.lan_settings.ManualSettings.netmask)
}
inline std::string* ManualSettings::mutable_netmask() {
  // @@protoc_insertion_point(field_mutable:misc.lan_settings.ManualSettings.netmask)
  return _internal_mutable_netmask();
}
inline const std::string& ManualSettings::_internal_netmask() const {
  return netmask_.GetNoArena();
}
inline void ManualSettings::_internal_set_netmask(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  netmask_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ManualSettings::set_netmask(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  netmask_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:misc.lan_settings.ManualSettings.netmask)
}
inline void ManualSettings::set_netmask(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  netmask_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:misc.lan_settings.ManualSettings.netmask)
}
inline void ManualSettings::set_netmask(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  netmask_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:misc.lan_settings.ManualSettings.netmask)
}
inline std::string* ManualSettings::_internal_mutable_netmask() {
  _has_bits_[0] |= 0x00000002u;
  return netmask_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ManualSettings::release_netmask() {
  // @@protoc_insertion_point(field_release:misc.lan_settings.ManualSettings.netmask)
  if (!_internal_has_netmask()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return netmask_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ManualSettings::set_allocated_netmask(std::string* netmask) {
  if (netmask != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  netmask_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), netmask);
  // @@protoc_insertion_point(field_set_allocated:misc.lan_settings.ManualSettings.netmask)
}

// required string gateway = 3;
inline bool ManualSettings::_internal_has_gateway() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ManualSettings::has_gateway() const {
  return _internal_has_gateway();
}
inline void ManualSettings::clear_gateway() {
  gateway_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ManualSettings::gateway() const {
  // @@protoc_insertion_point(field_get:misc.lan_settings.ManualSettings.gateway)
  return _internal_gateway();
}
inline void ManualSettings::set_gateway(const std::string& value) {
  _internal_set_gateway(value);
  // @@protoc_insertion_point(field_set:misc.lan_settings.ManualSettings.gateway)
}
inline std::string* ManualSettings::mutable_gateway() {
  // @@protoc_insertion_point(field_mutable:misc.lan_settings.ManualSettings.gateway)
  return _internal_mutable_gateway();
}
inline const std::string& ManualSettings::_internal_gateway() const {
  return gateway_.GetNoArena();
}
inline void ManualSettings::_internal_set_gateway(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  gateway_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ManualSettings::set_gateway(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  gateway_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:misc.lan_settings.ManualSettings.gateway)
}
inline void ManualSettings::set_gateway(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  gateway_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:misc.lan_settings.ManualSettings.gateway)
}
inline void ManualSettings::set_gateway(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  gateway_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:misc.lan_settings.ManualSettings.gateway)
}
inline std::string* ManualSettings::_internal_mutable_gateway() {
  _has_bits_[0] |= 0x00000004u;
  return gateway_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ManualSettings::release_gateway() {
  // @@protoc_insertion_point(field_release:misc.lan_settings.ManualSettings.gateway)
  if (!_internal_has_gateway()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return gateway_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ManualSettings::set_allocated_gateway(std::string* gateway) {
  if (gateway != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  gateway_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gateway);
  // @@protoc_insertion_point(field_set_allocated:misc.lan_settings.ManualSettings.gateway)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lan_settings
}  // namespace misc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_misc_2flan_5fsettings_2eproto
