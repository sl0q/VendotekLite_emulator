// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: misc/reboot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_misc_2freboot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_misc_2freboot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_misc_2freboot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_misc_2freboot_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_misc_2freboot_2eproto;
namespace misc {
namespace reboot {
class Reboot;
class RebootDefaultTypeInternal;
extern RebootDefaultTypeInternal _Reboot_default_instance_;
}  // namespace reboot
}  // namespace misc
PROTOBUF_NAMESPACE_OPEN
template<> ::misc::reboot::Reboot* Arena::CreateMaybeMessage<::misc::reboot::Reboot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace misc {
namespace reboot {

enum Reboot_OperationMode : int {
  Reboot_OperationMode_NORMAL_MODE = 0,
  Reboot_OperationMode_MANAGEMENT_MODE = 1,
  Reboot_OperationMode_FACTORY_MODE = 2
};
bool Reboot_OperationMode_IsValid(int value);
constexpr Reboot_OperationMode Reboot_OperationMode_OperationMode_MIN = Reboot_OperationMode_NORMAL_MODE;
constexpr Reboot_OperationMode Reboot_OperationMode_OperationMode_MAX = Reboot_OperationMode_FACTORY_MODE;
constexpr int Reboot_OperationMode_OperationMode_ARRAYSIZE = Reboot_OperationMode_OperationMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reboot_OperationMode_descriptor();
template<typename T>
inline const std::string& Reboot_OperationMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Reboot_OperationMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Reboot_OperationMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Reboot_OperationMode_descriptor(), enum_t_value);
}
inline bool Reboot_OperationMode_Parse(
    const std::string& name, Reboot_OperationMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Reboot_OperationMode>(
    Reboot_OperationMode_descriptor(), name, value);
}
// ===================================================================

class Reboot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:misc.reboot.Reboot) */ {
 public:
  Reboot();
  virtual ~Reboot();

  Reboot(const Reboot& from);
  Reboot(Reboot&& from) noexcept
    : Reboot() {
    *this = ::std::move(from);
  }

  inline Reboot& operator=(const Reboot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reboot& operator=(Reboot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reboot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reboot* internal_default_instance() {
    return reinterpret_cast<const Reboot*>(
               &_Reboot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Reboot& a, Reboot& b) {
    a.Swap(&b);
  }
  inline void Swap(Reboot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reboot* New() const final {
    return CreateMaybeMessage<Reboot>(nullptr);
  }

  Reboot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reboot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reboot& from);
  void MergeFrom(const Reboot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reboot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "misc.reboot.Reboot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_misc_2freboot_2eproto);
    return ::descriptor_table_misc_2freboot_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Reboot_OperationMode OperationMode;
  static constexpr OperationMode NORMAL_MODE =
    Reboot_OperationMode_NORMAL_MODE;
  static constexpr OperationMode MANAGEMENT_MODE =
    Reboot_OperationMode_MANAGEMENT_MODE;
  static constexpr OperationMode FACTORY_MODE =
    Reboot_OperationMode_FACTORY_MODE;
  static inline bool OperationMode_IsValid(int value) {
    return Reboot_OperationMode_IsValid(value);
  }
  static constexpr OperationMode OperationMode_MIN =
    Reboot_OperationMode_OperationMode_MIN;
  static constexpr OperationMode OperationMode_MAX =
    Reboot_OperationMode_OperationMode_MAX;
  static constexpr int OperationMode_ARRAYSIZE =
    Reboot_OperationMode_OperationMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperationMode_descriptor() {
    return Reboot_OperationMode_descriptor();
  }
  template<typename T>
  static inline const std::string& OperationMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperationMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperationMode_Name.");
    return Reboot_OperationMode_Name(enum_t_value);
  }
  static inline bool OperationMode_Parse(const std::string& name,
      OperationMode* value) {
    return Reboot_OperationMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // optional .misc.reboot.Reboot.OperationMode mode = 1 [default = NORMAL_MODE];
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::misc::reboot::Reboot_OperationMode mode() const;
  void set_mode(::misc::reboot::Reboot_OperationMode value);
  private:
  ::misc::reboot::Reboot_OperationMode _internal_mode() const;
  void _internal_set_mode(::misc::reboot::Reboot_OperationMode value);
  public:

  // @@protoc_insertion_point(class_scope:misc.reboot.Reboot)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int mode_;
  friend struct ::TableStruct_misc_2freboot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Reboot

// optional .misc.reboot.Reboot.OperationMode mode = 1 [default = NORMAL_MODE];
inline bool Reboot::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Reboot::has_mode() const {
  return _internal_has_mode();
}
inline void Reboot::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::misc::reboot::Reboot_OperationMode Reboot::_internal_mode() const {
  return static_cast< ::misc::reboot::Reboot_OperationMode >(mode_);
}
inline ::misc::reboot::Reboot_OperationMode Reboot::mode() const {
  // @@protoc_insertion_point(field_get:misc.reboot.Reboot.mode)
  return _internal_mode();
}
inline void Reboot::_internal_set_mode(::misc::reboot::Reboot_OperationMode value) {
  assert(::misc::reboot::Reboot_OperationMode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  mode_ = value;
}
inline void Reboot::set_mode(::misc::reboot::Reboot_OperationMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:misc.reboot.Reboot.mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace reboot
}  // namespace misc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::misc::reboot::Reboot_OperationMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::misc::reboot::Reboot_OperationMode>() {
  return ::misc::reboot::Reboot_OperationMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_misc_2freboot_2eproto
