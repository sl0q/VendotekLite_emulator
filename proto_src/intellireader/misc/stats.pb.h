// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: misc/stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_misc_2fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_misc_2fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "misc/lwip.pb.h"
#include "misc/event.pb.h"
#include "misc/ethernet.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_misc_2fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_misc_2fstats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_misc_2fstats_2eproto;
namespace misc {
namespace stats {
class DeviceStatistic;
class DeviceStatisticDefaultTypeInternal;
extern DeviceStatisticDefaultTypeInternal _DeviceStatistic_default_instance_;
class GetDeviceStatistic;
class GetDeviceStatisticDefaultTypeInternal;
extern GetDeviceStatisticDefaultTypeInternal _GetDeviceStatistic_default_instance_;
}  // namespace stats
}  // namespace misc
PROTOBUF_NAMESPACE_OPEN
template<> ::misc::stats::DeviceStatistic* Arena::CreateMaybeMessage<::misc::stats::DeviceStatistic>(Arena*);
template<> ::misc::stats::GetDeviceStatistic* Arena::CreateMaybeMessage<::misc::stats::GetDeviceStatistic>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace misc {
namespace stats {

// ===================================================================

class GetDeviceStatistic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:misc.stats.GetDeviceStatistic) */ {
 public:
  GetDeviceStatistic();
  virtual ~GetDeviceStatistic();

  GetDeviceStatistic(const GetDeviceStatistic& from);
  GetDeviceStatistic(GetDeviceStatistic&& from) noexcept
    : GetDeviceStatistic() {
    *this = ::std::move(from);
  }

  inline GetDeviceStatistic& operator=(const GetDeviceStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceStatistic& operator=(GetDeviceStatistic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceStatistic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceStatistic* internal_default_instance() {
    return reinterpret_cast<const GetDeviceStatistic*>(
               &_GetDeviceStatistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetDeviceStatistic& a, GetDeviceStatistic& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceStatistic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceStatistic* New() const final {
    return CreateMaybeMessage<GetDeviceStatistic>(nullptr);
  }

  GetDeviceStatistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceStatistic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceStatistic& from);
  void MergeFrom(const GetDeviceStatistic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceStatistic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "misc.stats.GetDeviceStatistic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_misc_2fstats_2eproto);
    return ::descriptor_table_misc_2fstats_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:misc.stats.GetDeviceStatistic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_misc_2fstats_2eproto;
};
// -------------------------------------------------------------------

class DeviceStatistic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:misc.stats.DeviceStatistic) */ {
 public:
  DeviceStatistic();
  virtual ~DeviceStatistic();

  DeviceStatistic(const DeviceStatistic& from);
  DeviceStatistic(DeviceStatistic&& from) noexcept
    : DeviceStatistic() {
    *this = ::std::move(from);
  }

  inline DeviceStatistic& operator=(const DeviceStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceStatistic& operator=(DeviceStatistic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceStatistic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceStatistic* internal_default_instance() {
    return reinterpret_cast<const DeviceStatistic*>(
               &_DeviceStatistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceStatistic& a, DeviceStatistic& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceStatistic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceStatistic* New() const final {
    return CreateMaybeMessage<DeviceStatistic>(nullptr);
  }

  DeviceStatistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceStatistic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceStatistic& from);
  void MergeFrom(const DeviceStatistic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceStatistic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "misc.stats.DeviceStatistic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_misc_2fstats_2eproto);
    return ::descriptor_table_misc_2fstats_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 2,
    kLwipFieldNumber = 1,
    kEthernetFieldNumber = 3,
  };
  // repeated .misc.event.Event events = 2;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::misc::event::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::misc::event::Event >*
      mutable_events();
  private:
  const ::misc::event::Event& _internal_events(int index) const;
  ::misc::event::Event* _internal_add_events();
  public:
  const ::misc::event::Event& events(int index) const;
  ::misc::event::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::misc::event::Event >&
      events() const;

  // optional .misc.lwip.Statistic lwip = 1;
  bool has_lwip() const;
  private:
  bool _internal_has_lwip() const;
  public:
  void clear_lwip();
  const ::misc::lwip::Statistic& lwip() const;
  ::misc::lwip::Statistic* release_lwip();
  ::misc::lwip::Statistic* mutable_lwip();
  void set_allocated_lwip(::misc::lwip::Statistic* lwip);
  private:
  const ::misc::lwip::Statistic& _internal_lwip() const;
  ::misc::lwip::Statistic* _internal_mutable_lwip();
  public:

  // optional .misc.ethernet.Statistic ethernet = 3;
  bool has_ethernet() const;
  private:
  bool _internal_has_ethernet() const;
  public:
  void clear_ethernet();
  const ::misc::ethernet::Statistic& ethernet() const;
  ::misc::ethernet::Statistic* release_ethernet();
  ::misc::ethernet::Statistic* mutable_ethernet();
  void set_allocated_ethernet(::misc::ethernet::Statistic* ethernet);
  private:
  const ::misc::ethernet::Statistic& _internal_ethernet() const;
  ::misc::ethernet::Statistic* _internal_mutable_ethernet();
  public:

  // @@protoc_insertion_point(class_scope:misc.stats.DeviceStatistic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::misc::event::Event > events_;
  ::misc::lwip::Statistic* lwip_;
  ::misc::ethernet::Statistic* ethernet_;
  friend struct ::TableStruct_misc_2fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetDeviceStatistic

// -------------------------------------------------------------------

// DeviceStatistic

// optional .misc.lwip.Statistic lwip = 1;
inline bool DeviceStatistic::_internal_has_lwip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || lwip_ != nullptr);
  return value;
}
inline bool DeviceStatistic::has_lwip() const {
  return _internal_has_lwip();
}
inline const ::misc::lwip::Statistic& DeviceStatistic::_internal_lwip() const {
  const ::misc::lwip::Statistic* p = lwip_;
  return p != nullptr ? *p : *reinterpret_cast<const ::misc::lwip::Statistic*>(
      &::misc::lwip::_Statistic_default_instance_);
}
inline const ::misc::lwip::Statistic& DeviceStatistic::lwip() const {
  // @@protoc_insertion_point(field_get:misc.stats.DeviceStatistic.lwip)
  return _internal_lwip();
}
inline ::misc::lwip::Statistic* DeviceStatistic::release_lwip() {
  // @@protoc_insertion_point(field_release:misc.stats.DeviceStatistic.lwip)
  _has_bits_[0] &= ~0x00000001u;
  ::misc::lwip::Statistic* temp = lwip_;
  lwip_ = nullptr;
  return temp;
}
inline ::misc::lwip::Statistic* DeviceStatistic::_internal_mutable_lwip() {
  _has_bits_[0] |= 0x00000001u;
  if (lwip_ == nullptr) {
    auto* p = CreateMaybeMessage<::misc::lwip::Statistic>(GetArenaNoVirtual());
    lwip_ = p;
  }
  return lwip_;
}
inline ::misc::lwip::Statistic* DeviceStatistic::mutable_lwip() {
  // @@protoc_insertion_point(field_mutable:misc.stats.DeviceStatistic.lwip)
  return _internal_mutable_lwip();
}
inline void DeviceStatistic::set_allocated_lwip(::misc::lwip::Statistic* lwip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lwip_);
  }
  if (lwip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lwip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lwip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lwip_ = lwip;
  // @@protoc_insertion_point(field_set_allocated:misc.stats.DeviceStatistic.lwip)
}

// repeated .misc.event.Event events = 2;
inline int DeviceStatistic::_internal_events_size() const {
  return events_.size();
}
inline int DeviceStatistic::events_size() const {
  return _internal_events_size();
}
inline ::misc::event::Event* DeviceStatistic::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:misc.stats.DeviceStatistic.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::misc::event::Event >*
DeviceStatistic::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:misc.stats.DeviceStatistic.events)
  return &events_;
}
inline const ::misc::event::Event& DeviceStatistic::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::misc::event::Event& DeviceStatistic::events(int index) const {
  // @@protoc_insertion_point(field_get:misc.stats.DeviceStatistic.events)
  return _internal_events(index);
}
inline ::misc::event::Event* DeviceStatistic::_internal_add_events() {
  return events_.Add();
}
inline ::misc::event::Event* DeviceStatistic::add_events() {
  // @@protoc_insertion_point(field_add:misc.stats.DeviceStatistic.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::misc::event::Event >&
DeviceStatistic::events() const {
  // @@protoc_insertion_point(field_list:misc.stats.DeviceStatistic.events)
  return events_;
}

// optional .misc.ethernet.Statistic ethernet = 3;
inline bool DeviceStatistic::_internal_has_ethernet() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ethernet_ != nullptr);
  return value;
}
inline bool DeviceStatistic::has_ethernet() const {
  return _internal_has_ethernet();
}
inline const ::misc::ethernet::Statistic& DeviceStatistic::_internal_ethernet() const {
  const ::misc::ethernet::Statistic* p = ethernet_;
  return p != nullptr ? *p : *reinterpret_cast<const ::misc::ethernet::Statistic*>(
      &::misc::ethernet::_Statistic_default_instance_);
}
inline const ::misc::ethernet::Statistic& DeviceStatistic::ethernet() const {
  // @@protoc_insertion_point(field_get:misc.stats.DeviceStatistic.ethernet)
  return _internal_ethernet();
}
inline ::misc::ethernet::Statistic* DeviceStatistic::release_ethernet() {
  // @@protoc_insertion_point(field_release:misc.stats.DeviceStatistic.ethernet)
  _has_bits_[0] &= ~0x00000002u;
  ::misc::ethernet::Statistic* temp = ethernet_;
  ethernet_ = nullptr;
  return temp;
}
inline ::misc::ethernet::Statistic* DeviceStatistic::_internal_mutable_ethernet() {
  _has_bits_[0] |= 0x00000002u;
  if (ethernet_ == nullptr) {
    auto* p = CreateMaybeMessage<::misc::ethernet::Statistic>(GetArenaNoVirtual());
    ethernet_ = p;
  }
  return ethernet_;
}
inline ::misc::ethernet::Statistic* DeviceStatistic::mutable_ethernet() {
  // @@protoc_insertion_point(field_mutable:misc.stats.DeviceStatistic.ethernet)
  return _internal_mutable_ethernet();
}
inline void DeviceStatistic::set_allocated_ethernet(::misc::ethernet::Statistic* ethernet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ethernet_);
  }
  if (ethernet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ethernet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ethernet, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ethernet_ = ethernet;
  // @@protoc_insertion_point(field_set_allocated:misc.stats.DeviceStatistic.ethernet)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stats
}  // namespace misc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_misc_2fstats_2eproto
