// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: misc/device.proto

#include "misc/device.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_misc_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Security_misc_2fdevice_2eproto;
namespace misc {
namespace device {
class ReadDeviceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadDeviceInfo> _instance;
} _ReadDeviceInfo_default_instance_;
class DeviceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceInfo> _instance;
} _DeviceInfo_default_instance_;
class GetDeviceStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDeviceStatus> _instance;
} _GetDeviceStatus_default_instance_;
class DeviceStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceStatus> _instance;
} _DeviceStatus_default_instance_;
class SecurityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Security> _instance;
} _Security_default_instance_;
}  // namespace device
}  // namespace misc
static void InitDefaultsscc_info_DeviceInfo_misc_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::misc::device::_DeviceInfo_default_instance_;
    new (ptr) ::misc::device::DeviceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::misc::device::DeviceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceInfo_misc_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceInfo_misc_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_DeviceStatus_misc_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::misc::device::_DeviceStatus_default_instance_;
    new (ptr) ::misc::device::DeviceStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::misc::device::DeviceStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceStatus_misc_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeviceStatus_misc_2fdevice_2eproto}, {
      &scc_info_Security_misc_2fdevice_2eproto.base,}};

static void InitDefaultsscc_info_GetDeviceStatus_misc_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::misc::device::_GetDeviceStatus_default_instance_;
    new (ptr) ::misc::device::GetDeviceStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::misc::device::GetDeviceStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDeviceStatus_misc_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDeviceStatus_misc_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_ReadDeviceInfo_misc_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::misc::device::_ReadDeviceInfo_default_instance_;
    new (ptr) ::misc::device::ReadDeviceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::misc::device::ReadDeviceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadDeviceInfo_misc_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadDeviceInfo_misc_2fdevice_2eproto}, {}};

static void InitDefaultsscc_info_Security_misc_2fdevice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::misc::device::_Security_default_instance_;
    new (ptr) ::misc::device::Security();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::misc::device::Security::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Security_misc_2fdevice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Security_misc_2fdevice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_misc_2fdevice_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_misc_2fdevice_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_misc_2fdevice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_misc_2fdevice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::misc::device::ReadDeviceInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::misc::device::ReadDeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::misc::device::DeviceInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::misc::device::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::misc::device::DeviceInfo, serial_number_),
  PROTOBUF_FIELD_OFFSET(::misc::device::DeviceInfo, intellireader_version_),
  PROTOBUF_FIELD_OFFSET(::misc::device::DeviceInfo, hardware_model_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::misc::device::GetDeviceStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::misc::device::GetDeviceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::misc::device::DeviceStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::misc::device::DeviceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::misc::device::DeviceStatus, time_left_to_restart_),
  PROTOBUF_FIELD_OFFSET(::misc::device::DeviceStatus, security_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::misc::device::Security, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::misc::device::Security, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::misc::device::Security, enabled_),
  PROTOBUF_FIELD_OFFSET(::misc::device::Security, pci_pts_functions_permitted_),
  PROTOBUF_FIELD_OFFSET(::misc::device::Security, restrictions_reason_),
  PROTOBUF_FIELD_OFFSET(::misc::device::Security, anti_removal_protection_),
  1,
  2,
  0,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::misc::device::ReadDeviceInfo)},
  { 5, 13, sizeof(::misc::device::DeviceInfo)},
  { 16, 21, sizeof(::misc::device::GetDeviceStatus)},
  { 21, 28, sizeof(::misc::device::DeviceStatus)},
  { 30, 39, sizeof(::misc::device::Security)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::misc::device::_ReadDeviceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::misc::device::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::misc::device::_GetDeviceStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::misc::device::_DeviceStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::misc::device::_Security_default_instance_),
};

const char descriptor_table_protodef_misc_2fdevice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021misc/device.proto\022\013misc.device\"\020\n\016Read"
  "DeviceInfo\"]\n\nDeviceInfo\022\025\n\rserial_numbe"
  "r\030\001 \002(\t\022\035\n\025intellireader_version\030\002 \002(\t\022\031"
  "\n\021hardware_model_id\030\003 \001(\r\"\021\n\017GetDeviceSt"
  "atus\"U\n\014DeviceStatus\022\034\n\024time_left_to_res"
  "tart\030\001 \002(\r\022\'\n\010security\030\002 \002(\0132\025.misc.devi"
  "ce.Security\"\241\001\n\010Security\022\017\n\007enabled\030\001 \002("
  "\010\022#\n\033pci_pts_functions_permitted\030\002 \002(\010\022\033"
  "\n\023restrictions_reason\030\003 \001(\t\022B\n\027anti_remo"
  "val_protection\030\004 \001(\0162!.misc.device.AntiR"
  "emovalProtState*6\n\024AntiRemovalProtState\022"
  "\r\n\tACTIVATED\020\000\022\017\n\013DEACTIVATED\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_misc_2fdevice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_misc_2fdevice_2eproto_sccs[5] = {
  &scc_info_DeviceInfo_misc_2fdevice_2eproto.base,
  &scc_info_DeviceStatus_misc_2fdevice_2eproto.base,
  &scc_info_GetDeviceStatus_misc_2fdevice_2eproto.base,
  &scc_info_ReadDeviceInfo_misc_2fdevice_2eproto.base,
  &scc_info_Security_misc_2fdevice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_misc_2fdevice_2eproto_once;
static bool descriptor_table_misc_2fdevice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_misc_2fdevice_2eproto = {
  &descriptor_table_misc_2fdevice_2eproto_initialized, descriptor_table_protodef_misc_2fdevice_2eproto, "misc/device.proto", 471,
  &descriptor_table_misc_2fdevice_2eproto_once, descriptor_table_misc_2fdevice_2eproto_sccs, descriptor_table_misc_2fdevice_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_misc_2fdevice_2eproto::offsets,
  file_level_metadata_misc_2fdevice_2eproto, 5, file_level_enum_descriptors_misc_2fdevice_2eproto, file_level_service_descriptors_misc_2fdevice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_misc_2fdevice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_misc_2fdevice_2eproto), true);
namespace misc {
namespace device {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AntiRemovalProtState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_misc_2fdevice_2eproto);
  return file_level_enum_descriptors_misc_2fdevice_2eproto[0];
}
bool AntiRemovalProtState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ReadDeviceInfo::InitAsDefaultInstance() {
}
class ReadDeviceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadDeviceInfo>()._has_bits_);
};

ReadDeviceInfo::ReadDeviceInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:misc.device.ReadDeviceInfo)
}
ReadDeviceInfo::ReadDeviceInfo(const ReadDeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:misc.device.ReadDeviceInfo)
}

void ReadDeviceInfo::SharedCtor() {
}

ReadDeviceInfo::~ReadDeviceInfo() {
  // @@protoc_insertion_point(destructor:misc.device.ReadDeviceInfo)
  SharedDtor();
}

void ReadDeviceInfo::SharedDtor() {
}

void ReadDeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadDeviceInfo& ReadDeviceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadDeviceInfo_misc_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void ReadDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:misc.device.ReadDeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ReadDeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadDeviceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:misc.device.ReadDeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:misc.device.ReadDeviceInfo)
  return target;
}

size_t ReadDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:misc.device.ReadDeviceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadDeviceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:misc.device.ReadDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadDeviceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadDeviceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:misc.device.ReadDeviceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:misc.device.ReadDeviceInfo)
    MergeFrom(*source);
  }
}

void ReadDeviceInfo::MergeFrom(const ReadDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:misc.device.ReadDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReadDeviceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:misc.device.ReadDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadDeviceInfo::CopyFrom(const ReadDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:misc.device.ReadDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDeviceInfo::IsInitialized() const {
  return true;
}

void ReadDeviceInfo::InternalSwap(ReadDeviceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadDeviceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceInfo::InitAsDefaultInstance() {
}
class DeviceInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceInfo>()._has_bits_);
  static void set_has_serial_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_intellireader_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hardware_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DeviceInfo::DeviceInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:misc.device.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serial_number()) {
    serial_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  intellireader_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_intellireader_version()) {
    intellireader_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intellireader_version_);
  }
  hardware_model_id_ = from.hardware_model_id_;
  // @@protoc_insertion_point(copy_constructor:misc.device.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceInfo_misc_2fdevice_2eproto.base);
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intellireader_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hardware_model_id_ = 0u;
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:misc.device.DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intellireader_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceInfo& DeviceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceInfo_misc_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:misc.device.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      serial_number_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      intellireader_version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  hardware_model_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string serial_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "misc.device.DeviceInfo.serial_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string intellireader_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_intellireader_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "misc.device.DeviceInfo.intellireader_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hardware_model_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hardware_model_id(&has_bits);
          hardware_model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:misc.device.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string serial_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "misc.device.DeviceInfo.serial_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serial_number(), target);
  }

  // required string intellireader_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_intellireader_version().data(), static_cast<int>(this->_internal_intellireader_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "misc.device.DeviceInfo.intellireader_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_intellireader_version(), target);
  }

  // optional uint32 hardware_model_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hardware_model_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:misc.device.DeviceInfo)
  return target;
}

size_t DeviceInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:misc.device.DeviceInfo)
  size_t total_size = 0;

  if (_internal_has_serial_number()) {
    // required string serial_number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial_number());
  }

  if (_internal_has_intellireader_version()) {
    // required string intellireader_version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_intellireader_version());
  }

  return total_size;
}
size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:misc.device.DeviceInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string serial_number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial_number());

    // required string intellireader_version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_intellireader_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 hardware_model_id = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hardware_model_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:misc.device.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:misc.device.DeviceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:misc.device.DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:misc.device.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      serial_number_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      intellireader_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.intellireader_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      hardware_model_id_ = from.hardware_model_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:misc.device.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:misc.device.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serial_number_.Swap(&other->serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  intellireader_version_.Swap(&other->intellireader_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hardware_model_id_, other->hardware_model_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDeviceStatus::InitAsDefaultInstance() {
}
class GetDeviceStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDeviceStatus>()._has_bits_);
};

GetDeviceStatus::GetDeviceStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:misc.device.GetDeviceStatus)
}
GetDeviceStatus::GetDeviceStatus(const GetDeviceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:misc.device.GetDeviceStatus)
}

void GetDeviceStatus::SharedCtor() {
}

GetDeviceStatus::~GetDeviceStatus() {
  // @@protoc_insertion_point(destructor:misc.device.GetDeviceStatus)
  SharedDtor();
}

void GetDeviceStatus::SharedDtor() {
}

void GetDeviceStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDeviceStatus& GetDeviceStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDeviceStatus_misc_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void GetDeviceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:misc.device.GetDeviceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetDeviceStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDeviceStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:misc.device.GetDeviceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:misc.device.GetDeviceStatus)
  return target;
}

size_t GetDeviceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:misc.device.GetDeviceStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDeviceStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:misc.device.GetDeviceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDeviceStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDeviceStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:misc.device.GetDeviceStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:misc.device.GetDeviceStatus)
    MergeFrom(*source);
  }
}

void GetDeviceStatus::MergeFrom(const GetDeviceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:misc.device.GetDeviceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetDeviceStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:misc.device.GetDeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceStatus::CopyFrom(const GetDeviceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:misc.device.GetDeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceStatus::IsInitialized() const {
  return true;
}

void GetDeviceStatus::InternalSwap(GetDeviceStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeviceStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceStatus::InitAsDefaultInstance() {
  ::misc::device::_DeviceStatus_default_instance_._instance.get_mutable()->security_ = const_cast< ::misc::device::Security*>(
      ::misc::device::Security::internal_default_instance());
}
class DeviceStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceStatus>()._has_bits_);
  static void set_has_time_left_to_restart(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::misc::device::Security& security(const DeviceStatus* msg);
  static void set_has_security(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::misc::device::Security&
DeviceStatus::_Internal::security(const DeviceStatus* msg) {
  return *msg->security_;
}
DeviceStatus::DeviceStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:misc.device.DeviceStatus)
}
DeviceStatus::DeviceStatus(const DeviceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_security()) {
    security_ = new ::misc::device::Security(*from.security_);
  } else {
    security_ = nullptr;
  }
  time_left_to_restart_ = from.time_left_to_restart_;
  // @@protoc_insertion_point(copy_constructor:misc.device.DeviceStatus)
}

void DeviceStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceStatus_misc_2fdevice_2eproto.base);
  ::memset(&security_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_left_to_restart_) -
      reinterpret_cast<char*>(&security_)) + sizeof(time_left_to_restart_));
}

DeviceStatus::~DeviceStatus() {
  // @@protoc_insertion_point(destructor:misc.device.DeviceStatus)
  SharedDtor();
}

void DeviceStatus::SharedDtor() {
  if (this != internal_default_instance()) delete security_;
}

void DeviceStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceStatus& DeviceStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceStatus_misc_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void DeviceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:misc.device.DeviceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(security_ != nullptr);
    security_->Clear();
  }
  time_left_to_restart_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DeviceStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 time_left_to_restart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_left_to_restart(&has_bits);
          time_left_to_restart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .misc.device.Security security = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_security(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:misc.device.DeviceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 time_left_to_restart = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time_left_to_restart(), target);
  }

  // required .misc.device.Security security = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::security(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:misc.device.DeviceStatus)
  return target;
}

size_t DeviceStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:misc.device.DeviceStatus)
  size_t total_size = 0;

  if (_internal_has_security()) {
    // required .misc.device.Security security = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_);
  }

  if (_internal_has_time_left_to_restart()) {
    // required uint32 time_left_to_restart = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time_left_to_restart());
  }

  return total_size;
}
size_t DeviceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:misc.device.DeviceStatus)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .misc.device.Security security = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_);

    // required uint32 time_left_to_restart = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time_left_to_restart());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:misc.device.DeviceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:misc.device.DeviceStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:misc.device.DeviceStatus)
    MergeFrom(*source);
  }
}

void DeviceStatus::MergeFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:misc.device.DeviceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_security()->::misc::device::Security::MergeFrom(from._internal_security());
    }
    if (cached_has_bits & 0x00000002u) {
      time_left_to_restart_ = from.time_left_to_restart_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:misc.device.DeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceStatus::CopyFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:misc.device.DeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_security()) {
    if (!security_->IsInitialized()) return false;
  }
  return true;
}

void DeviceStatus::InternalSwap(DeviceStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(security_, other->security_);
  swap(time_left_to_restart_, other->time_left_to_restart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Security::InitAsDefaultInstance() {
}
class Security::_Internal {
 public:
  using HasBits = decltype(std::declval<Security>()._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pci_pts_functions_permitted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_restrictions_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_anti_removal_protection(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Security::Security()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:misc.device.Security)
}
Security::Security(const Security& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  restrictions_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_restrictions_reason()) {
    restrictions_reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.restrictions_reason_);
  }
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&anti_removal_protection_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(anti_removal_protection_));
  // @@protoc_insertion_point(copy_constructor:misc.device.Security)
}

void Security::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Security_misc_2fdevice_2eproto.base);
  restrictions_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anti_removal_protection_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(anti_removal_protection_));
}

Security::~Security() {
  // @@protoc_insertion_point(destructor:misc.device.Security)
  SharedDtor();
}

void Security::SharedDtor() {
  restrictions_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Security::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Security& Security::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Security_misc_2fdevice_2eproto.base);
  return *internal_default_instance();
}


void Security::Clear() {
// @@protoc_insertion_point(message_clear_start:misc.device.Security)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    restrictions_reason_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&anti_removal_protection_) -
        reinterpret_cast<char*>(&enabled_)) + sizeof(anti_removal_protection_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Security::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool pci_pts_functions_permitted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pci_pts_functions_permitted(&has_bits);
          pci_pts_functions_permitted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string restrictions_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_restrictions_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "misc.device.Security.restrictions_reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .misc.device.AntiRemovalProtState anti_removal_protection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::misc::device::AntiRemovalProtState_IsValid(val))) {
            _internal_set_anti_removal_protection(static_cast<::misc::device::AntiRemovalProtState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Security::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:misc.device.Security)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enabled = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // required bool pci_pts_functions_permitted = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pci_pts_functions_permitted(), target);
  }

  // optional string restrictions_reason = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_restrictions_reason().data(), static_cast<int>(this->_internal_restrictions_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "misc.device.Security.restrictions_reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_restrictions_reason(), target);
  }

  // optional .misc.device.AntiRemovalProtState anti_removal_protection = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_anti_removal_protection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:misc.device.Security)
  return target;
}

size_t Security::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:misc.device.Security)
  size_t total_size = 0;

  if (_internal_has_enabled()) {
    // required bool enabled = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_pci_pts_functions_permitted()) {
    // required bool pci_pts_functions_permitted = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Security::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:misc.device.Security)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required bool enabled = 1;
    total_size += 1 + 1;

    // required bool pci_pts_functions_permitted = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string restrictions_reason = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_restrictions_reason());
  }

  // optional .misc.device.AntiRemovalProtState anti_removal_protection = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_anti_removal_protection());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Security::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:misc.device.Security)
  GOOGLE_DCHECK_NE(&from, this);
  const Security* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Security>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:misc.device.Security)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:misc.device.Security)
    MergeFrom(*source);
  }
}

void Security::MergeFrom(const Security& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:misc.device.Security)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      restrictions_reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.restrictions_reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      pci_pts_functions_permitted_ = from.pci_pts_functions_permitted_;
    }
    if (cached_has_bits & 0x00000008u) {
      anti_removal_protection_ = from.anti_removal_protection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Security::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:misc.device.Security)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Security::CopyFrom(const Security& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:misc.device.Security)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Security::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void Security::InternalSwap(Security* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  restrictions_reason_.Swap(&other->restrictions_reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(enabled_, other->enabled_);
  swap(pci_pts_functions_permitted_, other->pci_pts_functions_permitted_);
  swap(anti_removal_protection_, other->anti_removal_protection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Security::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace device
}  // namespace misc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::misc::device::ReadDeviceInfo* Arena::CreateMaybeMessage< ::misc::device::ReadDeviceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::misc::device::ReadDeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::misc::device::DeviceInfo* Arena::CreateMaybeMessage< ::misc::device::DeviceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::misc::device::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::misc::device::GetDeviceStatus* Arena::CreateMaybeMessage< ::misc::device::GetDeviceStatus >(Arena* arena) {
  return Arena::CreateInternal< ::misc::device::GetDeviceStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::misc::device::DeviceStatus* Arena::CreateMaybeMessage< ::misc::device::DeviceStatus >(Arena* arena) {
  return Arena::CreateInternal< ::misc::device::DeviceStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::misc::device::Security* Arena::CreateMaybeMessage< ::misc::device::Security >(Arena* arena) {
  return Arena::CreateInternal< ::misc::device::Security >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
