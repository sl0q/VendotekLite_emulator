// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: misc/lwip.proto

#include "misc/lwip.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_misc_2flwip_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtocolStats_misc_2flwip_2eproto;
namespace misc {
namespace lwip {
class StatisticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Statistic> _instance;
} _Statistic_default_instance_;
class ProtocolStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProtocolStats> _instance;
} _ProtocolStats_default_instance_;
}  // namespace lwip
}  // namespace misc
static void InitDefaultsscc_info_ProtocolStats_misc_2flwip_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::misc::lwip::_ProtocolStats_default_instance_;
    new (ptr) ::misc::lwip::ProtocolStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::misc::lwip::ProtocolStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProtocolStats_misc_2flwip_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProtocolStats_misc_2flwip_2eproto}, {}};

static void InitDefaultsscc_info_Statistic_misc_2flwip_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::misc::lwip::_Statistic_default_instance_;
    new (ptr) ::misc::lwip::Statistic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::misc::lwip::Statistic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Statistic_misc_2flwip_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Statistic_misc_2flwip_2eproto}, {
      &scc_info_ProtocolStats_misc_2flwip_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_misc_2flwip_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_misc_2flwip_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_misc_2flwip_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_misc_2flwip_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::misc::lwip::Statistic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::misc::lwip::Statistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::misc::lwip::Statistic, link_),
  PROTOBUF_FIELD_OFFSET(::misc::lwip::Statistic, arp_),
  PROTOBUF_FIELD_OFFSET(::misc::lwip::Statistic, ip_),
  PROTOBUF_FIELD_OFFSET(::misc::lwip::Statistic, tcp_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::misc::lwip::ProtocolStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::misc::lwip::ProtocolStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::misc::lwip::ProtocolStats, xmit_),
  PROTOBUF_FIELD_OFFSET(::misc::lwip::ProtocolStats, recv_),
  PROTOBUF_FIELD_OFFSET(::misc::lwip::ProtocolStats, fw_),
  PROTOBUF_FIELD_OFFSET(::misc::lwip::ProtocolStats, drop_),
  PROTOBUF_FIELD_OFFSET(::misc::lwip::ProtocolStats, chkerr_),
  PROTOBUF_FIELD_OFFSET(::misc::lwip::ProtocolStats, lenerr_),
  PROTOBUF_FIELD_OFFSET(::misc::lwip::ProtocolStats, memerr_),
  PROTOBUF_FIELD_OFFSET(::misc::lwip::ProtocolStats, rterr_),
  PROTOBUF_FIELD_OFFSET(::misc::lwip::ProtocolStats, proterr_),
  PROTOBUF_FIELD_OFFSET(::misc::lwip::ProtocolStats, opterr_),
  PROTOBUF_FIELD_OFFSET(::misc::lwip::ProtocolStats, err_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::misc::lwip::Statistic)},
  { 13, 29, sizeof(::misc::lwip::ProtocolStats)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::misc::lwip::_Statistic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::misc::lwip::_ProtocolStats_default_instance_),
};

const char descriptor_table_protodef_misc_2flwip_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017misc/lwip.proto\022\tmisc.lwip\"\247\001\n\tStatist"
  "ic\022&\n\004link\030\001 \002(\0132\030.misc.lwip.ProtocolSta"
  "ts\022%\n\003arp\030\002 \002(\0132\030.misc.lwip.ProtocolStat"
  "s\022$\n\002ip\030\003 \002(\0132\030.misc.lwip.ProtocolStats\022"
  "%\n\003tcp\030\004 \002(\0132\030.misc.lwip.ProtocolStats\"\262"
  "\001\n\rProtocolStats\022\014\n\004xmit\030\001 \002(\r\022\014\n\004recv\030\002"
  " \002(\r\022\n\n\002fw\030\003 \002(\r\022\014\n\004drop\030\004 \002(\r\022\016\n\006chkerr"
  "\030\005 \002(\r\022\016\n\006lenerr\030\006 \002(\r\022\016\n\006memerr\030\007 \002(\r\022\r"
  "\n\005rterr\030\010 \002(\r\022\017\n\007proterr\030\t \002(\r\022\016\n\006opterr"
  "\030\n \002(\r\022\013\n\003err\030\013 \002(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_misc_2flwip_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_misc_2flwip_2eproto_sccs[2] = {
  &scc_info_ProtocolStats_misc_2flwip_2eproto.base,
  &scc_info_Statistic_misc_2flwip_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_misc_2flwip_2eproto_once;
static bool descriptor_table_misc_2flwip_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_misc_2flwip_2eproto = {
  &descriptor_table_misc_2flwip_2eproto_initialized, descriptor_table_protodef_misc_2flwip_2eproto, "misc/lwip.proto", 379,
  &descriptor_table_misc_2flwip_2eproto_once, descriptor_table_misc_2flwip_2eproto_sccs, descriptor_table_misc_2flwip_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_misc_2flwip_2eproto::offsets,
  file_level_metadata_misc_2flwip_2eproto, 2, file_level_enum_descriptors_misc_2flwip_2eproto, file_level_service_descriptors_misc_2flwip_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_misc_2flwip_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_misc_2flwip_2eproto), true);
namespace misc {
namespace lwip {

// ===================================================================

void Statistic::InitAsDefaultInstance() {
  ::misc::lwip::_Statistic_default_instance_._instance.get_mutable()->link_ = const_cast< ::misc::lwip::ProtocolStats*>(
      ::misc::lwip::ProtocolStats::internal_default_instance());
  ::misc::lwip::_Statistic_default_instance_._instance.get_mutable()->arp_ = const_cast< ::misc::lwip::ProtocolStats*>(
      ::misc::lwip::ProtocolStats::internal_default_instance());
  ::misc::lwip::_Statistic_default_instance_._instance.get_mutable()->ip_ = const_cast< ::misc::lwip::ProtocolStats*>(
      ::misc::lwip::ProtocolStats::internal_default_instance());
  ::misc::lwip::_Statistic_default_instance_._instance.get_mutable()->tcp_ = const_cast< ::misc::lwip::ProtocolStats*>(
      ::misc::lwip::ProtocolStats::internal_default_instance());
}
class Statistic::_Internal {
 public:
  using HasBits = decltype(std::declval<Statistic>()._has_bits_);
  static const ::misc::lwip::ProtocolStats& link(const Statistic* msg);
  static void set_has_link(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::misc::lwip::ProtocolStats& arp(const Statistic* msg);
  static void set_has_arp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::misc::lwip::ProtocolStats& ip(const Statistic* msg);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::misc::lwip::ProtocolStats& tcp(const Statistic* msg);
  static void set_has_tcp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::misc::lwip::ProtocolStats&
Statistic::_Internal::link(const Statistic* msg) {
  return *msg->link_;
}
const ::misc::lwip::ProtocolStats&
Statistic::_Internal::arp(const Statistic* msg) {
  return *msg->arp_;
}
const ::misc::lwip::ProtocolStats&
Statistic::_Internal::ip(const Statistic* msg) {
  return *msg->ip_;
}
const ::misc::lwip::ProtocolStats&
Statistic::_Internal::tcp(const Statistic* msg) {
  return *msg->tcp_;
}
Statistic::Statistic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:misc.lwip.Statistic)
}
Statistic::Statistic(const Statistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_link()) {
    link_ = new ::misc::lwip::ProtocolStats(*from.link_);
  } else {
    link_ = nullptr;
  }
  if (from._internal_has_arp()) {
    arp_ = new ::misc::lwip::ProtocolStats(*from.arp_);
  } else {
    arp_ = nullptr;
  }
  if (from._internal_has_ip()) {
    ip_ = new ::misc::lwip::ProtocolStats(*from.ip_);
  } else {
    ip_ = nullptr;
  }
  if (from._internal_has_tcp()) {
    tcp_ = new ::misc::lwip::ProtocolStats(*from.tcp_);
  } else {
    tcp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:misc.lwip.Statistic)
}

void Statistic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Statistic_misc_2flwip_2eproto.base);
  ::memset(&link_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_) -
      reinterpret_cast<char*>(&link_)) + sizeof(tcp_));
}

Statistic::~Statistic() {
  // @@protoc_insertion_point(destructor:misc.lwip.Statistic)
  SharedDtor();
}

void Statistic::SharedDtor() {
  if (this != internal_default_instance()) delete link_;
  if (this != internal_default_instance()) delete arp_;
  if (this != internal_default_instance()) delete ip_;
  if (this != internal_default_instance()) delete tcp_;
}

void Statistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Statistic& Statistic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Statistic_misc_2flwip_2eproto.base);
  return *internal_default_instance();
}


void Statistic::Clear() {
// @@protoc_insertion_point(message_clear_start:misc.lwip.Statistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(link_ != nullptr);
      link_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(arp_ != nullptr);
      arp_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ip_ != nullptr);
      ip_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tcp_ != nullptr);
      tcp_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Statistic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .misc.lwip.ProtocolStats link = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .misc.lwip.ProtocolStats arp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_arp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .misc.lwip.ProtocolStats ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .misc.lwip.ProtocolStats tcp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tcp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Statistic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:misc.lwip.Statistic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .misc.lwip.ProtocolStats link = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::link(this), target, stream);
  }

  // required .misc.lwip.ProtocolStats arp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::arp(this), target, stream);
  }

  // required .misc.lwip.ProtocolStats ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ip(this), target, stream);
  }

  // required .misc.lwip.ProtocolStats tcp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tcp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:misc.lwip.Statistic)
  return target;
}

size_t Statistic::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:misc.lwip.Statistic)
  size_t total_size = 0;

  if (_internal_has_link()) {
    // required .misc.lwip.ProtocolStats link = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_);
  }

  if (_internal_has_arp()) {
    // required .misc.lwip.ProtocolStats arp = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arp_);
  }

  if (_internal_has_ip()) {
    // required .misc.lwip.ProtocolStats ip = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ip_);
  }

  if (_internal_has_tcp()) {
    // required .misc.lwip.ProtocolStats tcp = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tcp_);
  }

  return total_size;
}
size_t Statistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:misc.lwip.Statistic)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .misc.lwip.ProtocolStats link = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_);

    // required .misc.lwip.ProtocolStats arp = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arp_);

    // required .misc.lwip.ProtocolStats ip = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ip_);

    // required .misc.lwip.ProtocolStats tcp = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tcp_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Statistic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:misc.lwip.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  const Statistic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Statistic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:misc.lwip.Statistic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:misc.lwip.Statistic)
    MergeFrom(*source);
  }
}

void Statistic::MergeFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:misc.lwip.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_link()->::misc::lwip::ProtocolStats::MergeFrom(from._internal_link());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_arp()->::misc::lwip::ProtocolStats::MergeFrom(from._internal_arp());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ip()->::misc::lwip::ProtocolStats::MergeFrom(from._internal_ip());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tcp()->::misc::lwip::ProtocolStats::MergeFrom(from._internal_tcp());
    }
  }
}

void Statistic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:misc.lwip.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statistic::CopyFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:misc.lwip.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistic::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (_internal_has_link()) {
    if (!link_->IsInitialized()) return false;
  }
  if (_internal_has_arp()) {
    if (!arp_->IsInitialized()) return false;
  }
  if (_internal_has_ip()) {
    if (!ip_->IsInitialized()) return false;
  }
  if (_internal_has_tcp()) {
    if (!tcp_->IsInitialized()) return false;
  }
  return true;
}

void Statistic::InternalSwap(Statistic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(link_, other->link_);
  swap(arp_, other->arp_);
  swap(ip_, other->ip_);
  swap(tcp_, other->tcp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Statistic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProtocolStats::InitAsDefaultInstance() {
}
class ProtocolStats::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtocolStats>()._has_bits_);
  static void set_has_xmit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_recv(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fw(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_drop(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_chkerr(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lenerr(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_memerr(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rterr(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_proterr(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_opterr(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_err(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

ProtocolStats::ProtocolStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:misc.lwip.ProtocolStats)
}
ProtocolStats::ProtocolStats(const ProtocolStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xmit_, &from.xmit_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_) -
    reinterpret_cast<char*>(&xmit_)) + sizeof(err_));
  // @@protoc_insertion_point(copy_constructor:misc.lwip.ProtocolStats)
}

void ProtocolStats::SharedCtor() {
  ::memset(&xmit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_) -
      reinterpret_cast<char*>(&xmit_)) + sizeof(err_));
}

ProtocolStats::~ProtocolStats() {
  // @@protoc_insertion_point(destructor:misc.lwip.ProtocolStats)
  SharedDtor();
}

void ProtocolStats::SharedDtor() {
}

void ProtocolStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProtocolStats& ProtocolStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProtocolStats_misc_2flwip_2eproto.base);
  return *internal_default_instance();
}


void ProtocolStats::Clear() {
// @@protoc_insertion_point(message_clear_start:misc.lwip.ProtocolStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&xmit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rterr_) -
        reinterpret_cast<char*>(&xmit_)) + sizeof(rterr_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&proterr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&err_) -
        reinterpret_cast<char*>(&proterr_)) + sizeof(err_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ProtocolStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 xmit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_xmit(&has_bits);
          xmit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 recv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_recv(&has_bits);
          recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 fw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fw(&has_bits);
          fw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 drop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_drop(&has_bits);
          drop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 chkerr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_chkerr(&has_bits);
          chkerr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 lenerr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_lenerr(&has_bits);
          lenerr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 memerr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_memerr(&has_bits);
          memerr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 rterr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_rterr(&has_bits);
          rterr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 proterr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_proterr(&has_bits);
          proterr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 opterr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_opterr(&has_bits);
          opterr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 err = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_err(&has_bits);
          err_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProtocolStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:misc.lwip.ProtocolStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 xmit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_xmit(), target);
  }

  // required uint32 recv = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_recv(), target);
  }

  // required uint32 fw = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fw(), target);
  }

  // required uint32 drop = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_drop(), target);
  }

  // required uint32 chkerr = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_chkerr(), target);
  }

  // required uint32 lenerr = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_lenerr(), target);
  }

  // required uint32 memerr = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_memerr(), target);
  }

  // required uint32 rterr = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rterr(), target);
  }

  // required uint32 proterr = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_proterr(), target);
  }

  // required uint32 opterr = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_opterr(), target);
  }

  // required uint32 err = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:misc.lwip.ProtocolStats)
  return target;
}

size_t ProtocolStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:misc.lwip.ProtocolStats)
  size_t total_size = 0;

  if (_internal_has_xmit()) {
    // required uint32 xmit = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_xmit());
  }

  if (_internal_has_recv()) {
    // required uint32 recv = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recv());
  }

  if (_internal_has_fw()) {
    // required uint32 fw = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fw());
  }

  if (_internal_has_drop()) {
    // required uint32 drop = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_drop());
  }

  if (_internal_has_chkerr()) {
    // required uint32 chkerr = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chkerr());
  }

  if (_internal_has_lenerr()) {
    // required uint32 lenerr = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lenerr());
  }

  if (_internal_has_memerr()) {
    // required uint32 memerr = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_memerr());
  }

  if (_internal_has_rterr()) {
    // required uint32 rterr = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rterr());
  }

  if (_internal_has_proterr()) {
    // required uint32 proterr = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_proterr());
  }

  if (_internal_has_opterr()) {
    // required uint32 opterr = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_opterr());
  }

  if (_internal_has_err()) {
    // required uint32 err = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_err());
  }

  return total_size;
}
size_t ProtocolStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:misc.lwip.ProtocolStats)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required uint32 xmit = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_xmit());

    // required uint32 recv = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recv());

    // required uint32 fw = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fw());

    // required uint32 drop = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_drop());

    // required uint32 chkerr = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chkerr());

    // required uint32 lenerr = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lenerr());

    // required uint32 memerr = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_memerr());

    // required uint32 rterr = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rterr());

    // required uint32 proterr = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_proterr());

    // required uint32 opterr = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_opterr());

    // required uint32 err = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_err());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProtocolStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:misc.lwip.ProtocolStats)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProtocolStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:misc.lwip.ProtocolStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:misc.lwip.ProtocolStats)
    MergeFrom(*source);
  }
}

void ProtocolStats::MergeFrom(const ProtocolStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:misc.lwip.ProtocolStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      xmit_ = from.xmit_;
    }
    if (cached_has_bits & 0x00000002u) {
      recv_ = from.recv_;
    }
    if (cached_has_bits & 0x00000004u) {
      fw_ = from.fw_;
    }
    if (cached_has_bits & 0x00000008u) {
      drop_ = from.drop_;
    }
    if (cached_has_bits & 0x00000010u) {
      chkerr_ = from.chkerr_;
    }
    if (cached_has_bits & 0x00000020u) {
      lenerr_ = from.lenerr_;
    }
    if (cached_has_bits & 0x00000040u) {
      memerr_ = from.memerr_;
    }
    if (cached_has_bits & 0x00000080u) {
      rterr_ = from.rterr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      proterr_ = from.proterr_;
    }
    if (cached_has_bits & 0x00000200u) {
      opterr_ = from.opterr_;
    }
    if (cached_has_bits & 0x00000400u) {
      err_ = from.err_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProtocolStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:misc.lwip.ProtocolStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolStats::CopyFrom(const ProtocolStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:misc.lwip.ProtocolStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  return true;
}

void ProtocolStats::InternalSwap(ProtocolStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(xmit_, other->xmit_);
  swap(recv_, other->recv_);
  swap(fw_, other->fw_);
  swap(drop_, other->drop_);
  swap(chkerr_, other->chkerr_);
  swap(lenerr_, other->lenerr_);
  swap(memerr_, other->memerr_);
  swap(rterr_, other->rterr_);
  swap(proterr_, other->proterr_);
  swap(opterr_, other->opterr_);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolStats::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lwip
}  // namespace misc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::misc::lwip::Statistic* Arena::CreateMaybeMessage< ::misc::lwip::Statistic >(Arena* arena) {
  return Arena::CreateInternal< ::misc::lwip::Statistic >(arena);
}
template<> PROTOBUF_NOINLINE ::misc::lwip::ProtocolStats* Arena::CreateMaybeMessage< ::misc::lwip::ProtocolStats >(Arena* arena) {
  return Arena::CreateInternal< ::misc::lwip::ProtocolStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
