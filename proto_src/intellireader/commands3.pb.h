// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands3.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_commands3_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_commands3_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "misc/leds.pb.h"
#include "misc/device.pb.h"
#include "misc/reboot.pb.h"
#include "misc/buzzer.pb.h"
#include "misc/stats.pb.h"
#include "misc/echo.pb.h"
#include "misc/baudrate.pb.h"
#include "misc/lan_settings.pb.h"
#include "contact/power_on.pb.h"
#include "contact/power_off.pb.h"
#include "contact/iso7816_4.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_commands3_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_commands3_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_commands3_2eproto;
class ContactLevel1;
class ContactLevel1DefaultTypeInternal;
extern ContactLevel1DefaultTypeInternal _ContactLevel1_default_instance_;
class Miscellaneous;
class MiscellaneousDefaultTypeInternal;
extern MiscellaneousDefaultTypeInternal _Miscellaneous_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ContactLevel1* Arena::CreateMaybeMessage<::ContactLevel1>(Arena*);
template<> ::Miscellaneous* Arena::CreateMaybeMessage<::Miscellaneous>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Miscellaneous :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Miscellaneous) */ {
 public:
  Miscellaneous();
  virtual ~Miscellaneous();

  Miscellaneous(const Miscellaneous& from);
  Miscellaneous(Miscellaneous&& from) noexcept
    : Miscellaneous() {
    *this = ::std::move(from);
  }

  inline Miscellaneous& operator=(const Miscellaneous& from) {
    CopyFrom(from);
    return *this;
  }
  inline Miscellaneous& operator=(Miscellaneous&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Miscellaneous& default_instance();

  enum MiscCmdCase {
    kSetLedsState = 1,
    kReadDeviceInfo = 2,
    kRebootDevice = 3,
    kGetDeviceStatus = 4,
    kMakeSound = 6,
    kGetDeviceStatistic = 7,
    kGetEcho = 8,
    kChangeBaudrate = 9,
    kChangeLanSettings = 10,
    MISC_CMD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Miscellaneous* internal_default_instance() {
    return reinterpret_cast<const Miscellaneous*>(
               &_Miscellaneous_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Miscellaneous& a, Miscellaneous& b) {
    a.Swap(&b);
  }
  inline void Swap(Miscellaneous* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Miscellaneous* New() const final {
    return CreateMaybeMessage<Miscellaneous>(nullptr);
  }

  Miscellaneous* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Miscellaneous>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Miscellaneous& from);
  void MergeFrom(const Miscellaneous& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Miscellaneous* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Miscellaneous";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands3_2eproto);
    return ::descriptor_table_commands3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetLedsStateFieldNumber = 1,
    kReadDeviceInfoFieldNumber = 2,
    kRebootDeviceFieldNumber = 3,
    kGetDeviceStatusFieldNumber = 4,
    kMakeSoundFieldNumber = 6,
    kGetDeviceStatisticFieldNumber = 7,
    kGetEchoFieldNumber = 8,
    kChangeBaudrateFieldNumber = 9,
    kChangeLanSettingsFieldNumber = 10,
  };
  // optional .misc.leds.Leds set_leds_state = 1;
  bool has_set_leds_state() const;
  private:
  bool _internal_has_set_leds_state() const;
  public:
  void clear_set_leds_state();
  const ::misc::leds::Leds& set_leds_state() const;
  ::misc::leds::Leds* release_set_leds_state();
  ::misc::leds::Leds* mutable_set_leds_state();
  void set_allocated_set_leds_state(::misc::leds::Leds* set_leds_state);
  private:
  const ::misc::leds::Leds& _internal_set_leds_state() const;
  ::misc::leds::Leds* _internal_mutable_set_leds_state();
  public:

  // optional .misc.device.ReadDeviceInfo read_device_info = 2;
  bool has_read_device_info() const;
  private:
  bool _internal_has_read_device_info() const;
  public:
  void clear_read_device_info();
  const ::misc::device::ReadDeviceInfo& read_device_info() const;
  ::misc::device::ReadDeviceInfo* release_read_device_info();
  ::misc::device::ReadDeviceInfo* mutable_read_device_info();
  void set_allocated_read_device_info(::misc::device::ReadDeviceInfo* read_device_info);
  private:
  const ::misc::device::ReadDeviceInfo& _internal_read_device_info() const;
  ::misc::device::ReadDeviceInfo* _internal_mutable_read_device_info();
  public:

  // optional .misc.reboot.Reboot reboot_device = 3;
  bool has_reboot_device() const;
  private:
  bool _internal_has_reboot_device() const;
  public:
  void clear_reboot_device();
  const ::misc::reboot::Reboot& reboot_device() const;
  ::misc::reboot::Reboot* release_reboot_device();
  ::misc::reboot::Reboot* mutable_reboot_device();
  void set_allocated_reboot_device(::misc::reboot::Reboot* reboot_device);
  private:
  const ::misc::reboot::Reboot& _internal_reboot_device() const;
  ::misc::reboot::Reboot* _internal_mutable_reboot_device();
  public:

  // optional .misc.device.GetDeviceStatus get_device_status = 4;
  bool has_get_device_status() const;
  private:
  bool _internal_has_get_device_status() const;
  public:
  void clear_get_device_status();
  const ::misc::device::GetDeviceStatus& get_device_status() const;
  ::misc::device::GetDeviceStatus* release_get_device_status();
  ::misc::device::GetDeviceStatus* mutable_get_device_status();
  void set_allocated_get_device_status(::misc::device::GetDeviceStatus* get_device_status);
  private:
  const ::misc::device::GetDeviceStatus& _internal_get_device_status() const;
  ::misc::device::GetDeviceStatus* _internal_mutable_get_device_status();
  public:

  // optional .misc.buzzer.MakeSound make_sound = 6;
  bool has_make_sound() const;
  private:
  bool _internal_has_make_sound() const;
  public:
  void clear_make_sound();
  const ::misc::buzzer::MakeSound& make_sound() const;
  ::misc::buzzer::MakeSound* release_make_sound();
  ::misc::buzzer::MakeSound* mutable_make_sound();
  void set_allocated_make_sound(::misc::buzzer::MakeSound* make_sound);
  private:
  const ::misc::buzzer::MakeSound& _internal_make_sound() const;
  ::misc::buzzer::MakeSound* _internal_mutable_make_sound();
  public:

  // optional .misc.stats.GetDeviceStatistic get_device_statistic = 7;
  bool has_get_device_statistic() const;
  private:
  bool _internal_has_get_device_statistic() const;
  public:
  void clear_get_device_statistic();
  const ::misc::stats::GetDeviceStatistic& get_device_statistic() const;
  ::misc::stats::GetDeviceStatistic* release_get_device_statistic();
  ::misc::stats::GetDeviceStatistic* mutable_get_device_statistic();
  void set_allocated_get_device_statistic(::misc::stats::GetDeviceStatistic* get_device_statistic);
  private:
  const ::misc::stats::GetDeviceStatistic& _internal_get_device_statistic() const;
  ::misc::stats::GetDeviceStatistic* _internal_mutable_get_device_statistic();
  public:

  // optional .misc.echo.GetEcho get_echo = 8;
  bool has_get_echo() const;
  private:
  bool _internal_has_get_echo() const;
  public:
  void clear_get_echo();
  const ::misc::echo::GetEcho& get_echo() const;
  ::misc::echo::GetEcho* release_get_echo();
  ::misc::echo::GetEcho* mutable_get_echo();
  void set_allocated_get_echo(::misc::echo::GetEcho* get_echo);
  private:
  const ::misc::echo::GetEcho& _internal_get_echo() const;
  ::misc::echo::GetEcho* _internal_mutable_get_echo();
  public:

  // optional .misc.baudrate.ChangeBaudrate change_baudrate = 9;
  bool has_change_baudrate() const;
  private:
  bool _internal_has_change_baudrate() const;
  public:
  void clear_change_baudrate();
  const ::misc::baudrate::ChangeBaudrate& change_baudrate() const;
  ::misc::baudrate::ChangeBaudrate* release_change_baudrate();
  ::misc::baudrate::ChangeBaudrate* mutable_change_baudrate();
  void set_allocated_change_baudrate(::misc::baudrate::ChangeBaudrate* change_baudrate);
  private:
  const ::misc::baudrate::ChangeBaudrate& _internal_change_baudrate() const;
  ::misc::baudrate::ChangeBaudrate* _internal_mutable_change_baudrate();
  public:

  // optional .misc.lan_settings.ChangeLanSettings change_lan_settings = 10;
  bool has_change_lan_settings() const;
  private:
  bool _internal_has_change_lan_settings() const;
  public:
  void clear_change_lan_settings();
  const ::misc::lan_settings::ChangeLanSettings& change_lan_settings() const;
  ::misc::lan_settings::ChangeLanSettings* release_change_lan_settings();
  ::misc::lan_settings::ChangeLanSettings* mutable_change_lan_settings();
  void set_allocated_change_lan_settings(::misc::lan_settings::ChangeLanSettings* change_lan_settings);
  private:
  const ::misc::lan_settings::ChangeLanSettings& _internal_change_lan_settings() const;
  ::misc::lan_settings::ChangeLanSettings* _internal_mutable_change_lan_settings();
  public:

  void clear_misc_cmd();
  MiscCmdCase misc_cmd_case() const;
  // @@protoc_insertion_point(class_scope:Miscellaneous)
 private:
  class _Internal;
  void set_has_set_leds_state();
  void set_has_read_device_info();
  void set_has_reboot_device();
  void set_has_get_device_status();
  void set_has_make_sound();
  void set_has_get_device_statistic();
  void set_has_get_echo();
  void set_has_change_baudrate();
  void set_has_change_lan_settings();

  inline bool has_misc_cmd() const;
  inline void clear_has_misc_cmd();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union MiscCmdUnion {
    MiscCmdUnion() {}
    ::misc::leds::Leds* set_leds_state_;
    ::misc::device::ReadDeviceInfo* read_device_info_;
    ::misc::reboot::Reboot* reboot_device_;
    ::misc::device::GetDeviceStatus* get_device_status_;
    ::misc::buzzer::MakeSound* make_sound_;
    ::misc::stats::GetDeviceStatistic* get_device_statistic_;
    ::misc::echo::GetEcho* get_echo_;
    ::misc::baudrate::ChangeBaudrate* change_baudrate_;
    ::misc::lan_settings::ChangeLanSettings* change_lan_settings_;
  } misc_cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_commands3_2eproto;
};
// -------------------------------------------------------------------

class ContactLevel1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ContactLevel1) */ {
 public:
  ContactLevel1();
  virtual ~ContactLevel1();

  ContactLevel1(const ContactLevel1& from);
  ContactLevel1(ContactLevel1&& from) noexcept
    : ContactLevel1() {
    *this = ::std::move(from);
  }

  inline ContactLevel1& operator=(const ContactLevel1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContactLevel1& operator=(ContactLevel1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContactLevel1& default_instance();

  enum ContactLevel1CmdCase {
    kPowerOnCard = 1,
    kPowerOffCard = 2,
    kTransmitApdu = 3,
    CONTACT_LEVEL1_CMD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactLevel1* internal_default_instance() {
    return reinterpret_cast<const ContactLevel1*>(
               &_ContactLevel1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContactLevel1& a, ContactLevel1& b) {
    a.Swap(&b);
  }
  inline void Swap(ContactLevel1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContactLevel1* New() const final {
    return CreateMaybeMessage<ContactLevel1>(nullptr);
  }

  ContactLevel1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContactLevel1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContactLevel1& from);
  void MergeFrom(const ContactLevel1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContactLevel1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContactLevel1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_commands3_2eproto);
    return ::descriptor_table_commands3_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPowerOnCardFieldNumber = 1,
    kPowerOffCardFieldNumber = 2,
    kTransmitApduFieldNumber = 3,
  };
  // optional .contact.power_on.PowerOnCard power_on_card = 1;
  bool has_power_on_card() const;
  private:
  bool _internal_has_power_on_card() const;
  public:
  void clear_power_on_card();
  const ::contact::power_on::PowerOnCard& power_on_card() const;
  ::contact::power_on::PowerOnCard* release_power_on_card();
  ::contact::power_on::PowerOnCard* mutable_power_on_card();
  void set_allocated_power_on_card(::contact::power_on::PowerOnCard* power_on_card);
  private:
  const ::contact::power_on::PowerOnCard& _internal_power_on_card() const;
  ::contact::power_on::PowerOnCard* _internal_mutable_power_on_card();
  public:

  // optional .contact.power_off.PowerOffCard power_off_card = 2;
  bool has_power_off_card() const;
  private:
  bool _internal_has_power_off_card() const;
  public:
  void clear_power_off_card();
  const ::contact::power_off::PowerOffCard& power_off_card() const;
  ::contact::power_off::PowerOffCard* release_power_off_card();
  ::contact::power_off::PowerOffCard* mutable_power_off_card();
  void set_allocated_power_off_card(::contact::power_off::PowerOffCard* power_off_card);
  private:
  const ::contact::power_off::PowerOffCard& _internal_power_off_card() const;
  ::contact::power_off::PowerOffCard* _internal_mutable_power_off_card();
  public:

  // optional .contact.iso7816_4.TransmitApdu transmit_apdu = 3;
  bool has_transmit_apdu() const;
  private:
  bool _internal_has_transmit_apdu() const;
  public:
  void clear_transmit_apdu();
  const ::contact::iso7816_4::TransmitApdu& transmit_apdu() const;
  ::contact::iso7816_4::TransmitApdu* release_transmit_apdu();
  ::contact::iso7816_4::TransmitApdu* mutable_transmit_apdu();
  void set_allocated_transmit_apdu(::contact::iso7816_4::TransmitApdu* transmit_apdu);
  private:
  const ::contact::iso7816_4::TransmitApdu& _internal_transmit_apdu() const;
  ::contact::iso7816_4::TransmitApdu* _internal_mutable_transmit_apdu();
  public:

  void clear_contact_level1_cmd();
  ContactLevel1CmdCase contact_level1_cmd_case() const;
  // @@protoc_insertion_point(class_scope:ContactLevel1)
 private:
  class _Internal;
  void set_has_power_on_card();
  void set_has_power_off_card();
  void set_has_transmit_apdu();

  inline bool has_contact_level1_cmd() const;
  inline void clear_has_contact_level1_cmd();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union ContactLevel1CmdUnion {
    ContactLevel1CmdUnion() {}
    ::contact::power_on::PowerOnCard* power_on_card_;
    ::contact::power_off::PowerOffCard* power_off_card_;
    ::contact::iso7816_4::TransmitApdu* transmit_apdu_;
  } contact_level1_cmd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_commands3_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Miscellaneous

// optional .misc.leds.Leds set_leds_state = 1;
inline bool Miscellaneous::_internal_has_set_leds_state() const {
  return misc_cmd_case() == kSetLedsState;
}
inline bool Miscellaneous::has_set_leds_state() const {
  return _internal_has_set_leds_state();
}
inline void Miscellaneous::set_has_set_leds_state() {
  _oneof_case_[0] = kSetLedsState;
}
inline ::misc::leds::Leds* Miscellaneous::release_set_leds_state() {
  // @@protoc_insertion_point(field_release:Miscellaneous.set_leds_state)
  if (_internal_has_set_leds_state()) {
    clear_has_misc_cmd();
      ::misc::leds::Leds* temp = misc_cmd_.set_leds_state_;
    misc_cmd_.set_leds_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::leds::Leds& Miscellaneous::_internal_set_leds_state() const {
  return _internal_has_set_leds_state()
      ? *misc_cmd_.set_leds_state_
      : *reinterpret_cast< ::misc::leds::Leds*>(&::misc::leds::_Leds_default_instance_);
}
inline const ::misc::leds::Leds& Miscellaneous::set_leds_state() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.set_leds_state)
  return _internal_set_leds_state();
}
inline ::misc::leds::Leds* Miscellaneous::_internal_mutable_set_leds_state() {
  if (!_internal_has_set_leds_state()) {
    clear_misc_cmd();
    set_has_set_leds_state();
    misc_cmd_.set_leds_state_ = CreateMaybeMessage< ::misc::leds::Leds >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.set_leds_state_;
}
inline ::misc::leds::Leds* Miscellaneous::mutable_set_leds_state() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.set_leds_state)
  return _internal_mutable_set_leds_state();
}

// optional .misc.device.ReadDeviceInfo read_device_info = 2;
inline bool Miscellaneous::_internal_has_read_device_info() const {
  return misc_cmd_case() == kReadDeviceInfo;
}
inline bool Miscellaneous::has_read_device_info() const {
  return _internal_has_read_device_info();
}
inline void Miscellaneous::set_has_read_device_info() {
  _oneof_case_[0] = kReadDeviceInfo;
}
inline ::misc::device::ReadDeviceInfo* Miscellaneous::release_read_device_info() {
  // @@protoc_insertion_point(field_release:Miscellaneous.read_device_info)
  if (_internal_has_read_device_info()) {
    clear_has_misc_cmd();
      ::misc::device::ReadDeviceInfo* temp = misc_cmd_.read_device_info_;
    misc_cmd_.read_device_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::device::ReadDeviceInfo& Miscellaneous::_internal_read_device_info() const {
  return _internal_has_read_device_info()
      ? *misc_cmd_.read_device_info_
      : *reinterpret_cast< ::misc::device::ReadDeviceInfo*>(&::misc::device::_ReadDeviceInfo_default_instance_);
}
inline const ::misc::device::ReadDeviceInfo& Miscellaneous::read_device_info() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.read_device_info)
  return _internal_read_device_info();
}
inline ::misc::device::ReadDeviceInfo* Miscellaneous::_internal_mutable_read_device_info() {
  if (!_internal_has_read_device_info()) {
    clear_misc_cmd();
    set_has_read_device_info();
    misc_cmd_.read_device_info_ = CreateMaybeMessage< ::misc::device::ReadDeviceInfo >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.read_device_info_;
}
inline ::misc::device::ReadDeviceInfo* Miscellaneous::mutable_read_device_info() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.read_device_info)
  return _internal_mutable_read_device_info();
}

// optional .misc.reboot.Reboot reboot_device = 3;
inline bool Miscellaneous::_internal_has_reboot_device() const {
  return misc_cmd_case() == kRebootDevice;
}
inline bool Miscellaneous::has_reboot_device() const {
  return _internal_has_reboot_device();
}
inline void Miscellaneous::set_has_reboot_device() {
  _oneof_case_[0] = kRebootDevice;
}
inline ::misc::reboot::Reboot* Miscellaneous::release_reboot_device() {
  // @@protoc_insertion_point(field_release:Miscellaneous.reboot_device)
  if (_internal_has_reboot_device()) {
    clear_has_misc_cmd();
      ::misc::reboot::Reboot* temp = misc_cmd_.reboot_device_;
    misc_cmd_.reboot_device_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::reboot::Reboot& Miscellaneous::_internal_reboot_device() const {
  return _internal_has_reboot_device()
      ? *misc_cmd_.reboot_device_
      : *reinterpret_cast< ::misc::reboot::Reboot*>(&::misc::reboot::_Reboot_default_instance_);
}
inline const ::misc::reboot::Reboot& Miscellaneous::reboot_device() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.reboot_device)
  return _internal_reboot_device();
}
inline ::misc::reboot::Reboot* Miscellaneous::_internal_mutable_reboot_device() {
  if (!_internal_has_reboot_device()) {
    clear_misc_cmd();
    set_has_reboot_device();
    misc_cmd_.reboot_device_ = CreateMaybeMessage< ::misc::reboot::Reboot >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.reboot_device_;
}
inline ::misc::reboot::Reboot* Miscellaneous::mutable_reboot_device() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.reboot_device)
  return _internal_mutable_reboot_device();
}

// optional .misc.device.GetDeviceStatus get_device_status = 4;
inline bool Miscellaneous::_internal_has_get_device_status() const {
  return misc_cmd_case() == kGetDeviceStatus;
}
inline bool Miscellaneous::has_get_device_status() const {
  return _internal_has_get_device_status();
}
inline void Miscellaneous::set_has_get_device_status() {
  _oneof_case_[0] = kGetDeviceStatus;
}
inline ::misc::device::GetDeviceStatus* Miscellaneous::release_get_device_status() {
  // @@protoc_insertion_point(field_release:Miscellaneous.get_device_status)
  if (_internal_has_get_device_status()) {
    clear_has_misc_cmd();
      ::misc::device::GetDeviceStatus* temp = misc_cmd_.get_device_status_;
    misc_cmd_.get_device_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::device::GetDeviceStatus& Miscellaneous::_internal_get_device_status() const {
  return _internal_has_get_device_status()
      ? *misc_cmd_.get_device_status_
      : *reinterpret_cast< ::misc::device::GetDeviceStatus*>(&::misc::device::_GetDeviceStatus_default_instance_);
}
inline const ::misc::device::GetDeviceStatus& Miscellaneous::get_device_status() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.get_device_status)
  return _internal_get_device_status();
}
inline ::misc::device::GetDeviceStatus* Miscellaneous::_internal_mutable_get_device_status() {
  if (!_internal_has_get_device_status()) {
    clear_misc_cmd();
    set_has_get_device_status();
    misc_cmd_.get_device_status_ = CreateMaybeMessage< ::misc::device::GetDeviceStatus >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.get_device_status_;
}
inline ::misc::device::GetDeviceStatus* Miscellaneous::mutable_get_device_status() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.get_device_status)
  return _internal_mutable_get_device_status();
}

// optional .misc.buzzer.MakeSound make_sound = 6;
inline bool Miscellaneous::_internal_has_make_sound() const {
  return misc_cmd_case() == kMakeSound;
}
inline bool Miscellaneous::has_make_sound() const {
  return _internal_has_make_sound();
}
inline void Miscellaneous::set_has_make_sound() {
  _oneof_case_[0] = kMakeSound;
}
inline ::misc::buzzer::MakeSound* Miscellaneous::release_make_sound() {
  // @@protoc_insertion_point(field_release:Miscellaneous.make_sound)
  if (_internal_has_make_sound()) {
    clear_has_misc_cmd();
      ::misc::buzzer::MakeSound* temp = misc_cmd_.make_sound_;
    misc_cmd_.make_sound_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::buzzer::MakeSound& Miscellaneous::_internal_make_sound() const {
  return _internal_has_make_sound()
      ? *misc_cmd_.make_sound_
      : *reinterpret_cast< ::misc::buzzer::MakeSound*>(&::misc::buzzer::_MakeSound_default_instance_);
}
inline const ::misc::buzzer::MakeSound& Miscellaneous::make_sound() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.make_sound)
  return _internal_make_sound();
}
inline ::misc::buzzer::MakeSound* Miscellaneous::_internal_mutable_make_sound() {
  if (!_internal_has_make_sound()) {
    clear_misc_cmd();
    set_has_make_sound();
    misc_cmd_.make_sound_ = CreateMaybeMessage< ::misc::buzzer::MakeSound >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.make_sound_;
}
inline ::misc::buzzer::MakeSound* Miscellaneous::mutable_make_sound() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.make_sound)
  return _internal_mutable_make_sound();
}

// optional .misc.stats.GetDeviceStatistic get_device_statistic = 7;
inline bool Miscellaneous::_internal_has_get_device_statistic() const {
  return misc_cmd_case() == kGetDeviceStatistic;
}
inline bool Miscellaneous::has_get_device_statistic() const {
  return _internal_has_get_device_statistic();
}
inline void Miscellaneous::set_has_get_device_statistic() {
  _oneof_case_[0] = kGetDeviceStatistic;
}
inline ::misc::stats::GetDeviceStatistic* Miscellaneous::release_get_device_statistic() {
  // @@protoc_insertion_point(field_release:Miscellaneous.get_device_statistic)
  if (_internal_has_get_device_statistic()) {
    clear_has_misc_cmd();
      ::misc::stats::GetDeviceStatistic* temp = misc_cmd_.get_device_statistic_;
    misc_cmd_.get_device_statistic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::stats::GetDeviceStatistic& Miscellaneous::_internal_get_device_statistic() const {
  return _internal_has_get_device_statistic()
      ? *misc_cmd_.get_device_statistic_
      : *reinterpret_cast< ::misc::stats::GetDeviceStatistic*>(&::misc::stats::_GetDeviceStatistic_default_instance_);
}
inline const ::misc::stats::GetDeviceStatistic& Miscellaneous::get_device_statistic() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.get_device_statistic)
  return _internal_get_device_statistic();
}
inline ::misc::stats::GetDeviceStatistic* Miscellaneous::_internal_mutable_get_device_statistic() {
  if (!_internal_has_get_device_statistic()) {
    clear_misc_cmd();
    set_has_get_device_statistic();
    misc_cmd_.get_device_statistic_ = CreateMaybeMessage< ::misc::stats::GetDeviceStatistic >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.get_device_statistic_;
}
inline ::misc::stats::GetDeviceStatistic* Miscellaneous::mutable_get_device_statistic() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.get_device_statistic)
  return _internal_mutable_get_device_statistic();
}

// optional .misc.echo.GetEcho get_echo = 8;
inline bool Miscellaneous::_internal_has_get_echo() const {
  return misc_cmd_case() == kGetEcho;
}
inline bool Miscellaneous::has_get_echo() const {
  return _internal_has_get_echo();
}
inline void Miscellaneous::set_has_get_echo() {
  _oneof_case_[0] = kGetEcho;
}
inline ::misc::echo::GetEcho* Miscellaneous::release_get_echo() {
  // @@protoc_insertion_point(field_release:Miscellaneous.get_echo)
  if (_internal_has_get_echo()) {
    clear_has_misc_cmd();
      ::misc::echo::GetEcho* temp = misc_cmd_.get_echo_;
    misc_cmd_.get_echo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::echo::GetEcho& Miscellaneous::_internal_get_echo() const {
  return _internal_has_get_echo()
      ? *misc_cmd_.get_echo_
      : *reinterpret_cast< ::misc::echo::GetEcho*>(&::misc::echo::_GetEcho_default_instance_);
}
inline const ::misc::echo::GetEcho& Miscellaneous::get_echo() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.get_echo)
  return _internal_get_echo();
}
inline ::misc::echo::GetEcho* Miscellaneous::_internal_mutable_get_echo() {
  if (!_internal_has_get_echo()) {
    clear_misc_cmd();
    set_has_get_echo();
    misc_cmd_.get_echo_ = CreateMaybeMessage< ::misc::echo::GetEcho >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.get_echo_;
}
inline ::misc::echo::GetEcho* Miscellaneous::mutable_get_echo() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.get_echo)
  return _internal_mutable_get_echo();
}

// optional .misc.baudrate.ChangeBaudrate change_baudrate = 9;
inline bool Miscellaneous::_internal_has_change_baudrate() const {
  return misc_cmd_case() == kChangeBaudrate;
}
inline bool Miscellaneous::has_change_baudrate() const {
  return _internal_has_change_baudrate();
}
inline void Miscellaneous::set_has_change_baudrate() {
  _oneof_case_[0] = kChangeBaudrate;
}
inline ::misc::baudrate::ChangeBaudrate* Miscellaneous::release_change_baudrate() {
  // @@protoc_insertion_point(field_release:Miscellaneous.change_baudrate)
  if (_internal_has_change_baudrate()) {
    clear_has_misc_cmd();
      ::misc::baudrate::ChangeBaudrate* temp = misc_cmd_.change_baudrate_;
    misc_cmd_.change_baudrate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::baudrate::ChangeBaudrate& Miscellaneous::_internal_change_baudrate() const {
  return _internal_has_change_baudrate()
      ? *misc_cmd_.change_baudrate_
      : *reinterpret_cast< ::misc::baudrate::ChangeBaudrate*>(&::misc::baudrate::_ChangeBaudrate_default_instance_);
}
inline const ::misc::baudrate::ChangeBaudrate& Miscellaneous::change_baudrate() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.change_baudrate)
  return _internal_change_baudrate();
}
inline ::misc::baudrate::ChangeBaudrate* Miscellaneous::_internal_mutable_change_baudrate() {
  if (!_internal_has_change_baudrate()) {
    clear_misc_cmd();
    set_has_change_baudrate();
    misc_cmd_.change_baudrate_ = CreateMaybeMessage< ::misc::baudrate::ChangeBaudrate >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.change_baudrate_;
}
inline ::misc::baudrate::ChangeBaudrate* Miscellaneous::mutable_change_baudrate() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.change_baudrate)
  return _internal_mutable_change_baudrate();
}

// optional .misc.lan_settings.ChangeLanSettings change_lan_settings = 10;
inline bool Miscellaneous::_internal_has_change_lan_settings() const {
  return misc_cmd_case() == kChangeLanSettings;
}
inline bool Miscellaneous::has_change_lan_settings() const {
  return _internal_has_change_lan_settings();
}
inline void Miscellaneous::set_has_change_lan_settings() {
  _oneof_case_[0] = kChangeLanSettings;
}
inline ::misc::lan_settings::ChangeLanSettings* Miscellaneous::release_change_lan_settings() {
  // @@protoc_insertion_point(field_release:Miscellaneous.change_lan_settings)
  if (_internal_has_change_lan_settings()) {
    clear_has_misc_cmd();
      ::misc::lan_settings::ChangeLanSettings* temp = misc_cmd_.change_lan_settings_;
    misc_cmd_.change_lan_settings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::misc::lan_settings::ChangeLanSettings& Miscellaneous::_internal_change_lan_settings() const {
  return _internal_has_change_lan_settings()
      ? *misc_cmd_.change_lan_settings_
      : *reinterpret_cast< ::misc::lan_settings::ChangeLanSettings*>(&::misc::lan_settings::_ChangeLanSettings_default_instance_);
}
inline const ::misc::lan_settings::ChangeLanSettings& Miscellaneous::change_lan_settings() const {
  // @@protoc_insertion_point(field_get:Miscellaneous.change_lan_settings)
  return _internal_change_lan_settings();
}
inline ::misc::lan_settings::ChangeLanSettings* Miscellaneous::_internal_mutable_change_lan_settings() {
  if (!_internal_has_change_lan_settings()) {
    clear_misc_cmd();
    set_has_change_lan_settings();
    misc_cmd_.change_lan_settings_ = CreateMaybeMessage< ::misc::lan_settings::ChangeLanSettings >(
        GetArenaNoVirtual());
  }
  return misc_cmd_.change_lan_settings_;
}
inline ::misc::lan_settings::ChangeLanSettings* Miscellaneous::mutable_change_lan_settings() {
  // @@protoc_insertion_point(field_mutable:Miscellaneous.change_lan_settings)
  return _internal_mutable_change_lan_settings();
}

inline bool Miscellaneous::has_misc_cmd() const {
  return misc_cmd_case() != MISC_CMD_NOT_SET;
}
inline void Miscellaneous::clear_has_misc_cmd() {
  _oneof_case_[0] = MISC_CMD_NOT_SET;
}
inline Miscellaneous::MiscCmdCase Miscellaneous::misc_cmd_case() const {
  return Miscellaneous::MiscCmdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ContactLevel1

// optional .contact.power_on.PowerOnCard power_on_card = 1;
inline bool ContactLevel1::_internal_has_power_on_card() const {
  return contact_level1_cmd_case() == kPowerOnCard;
}
inline bool ContactLevel1::has_power_on_card() const {
  return _internal_has_power_on_card();
}
inline void ContactLevel1::set_has_power_on_card() {
  _oneof_case_[0] = kPowerOnCard;
}
inline ::contact::power_on::PowerOnCard* ContactLevel1::release_power_on_card() {
  // @@protoc_insertion_point(field_release:ContactLevel1.power_on_card)
  if (_internal_has_power_on_card()) {
    clear_has_contact_level1_cmd();
      ::contact::power_on::PowerOnCard* temp = contact_level1_cmd_.power_on_card_;
    contact_level1_cmd_.power_on_card_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::contact::power_on::PowerOnCard& ContactLevel1::_internal_power_on_card() const {
  return _internal_has_power_on_card()
      ? *contact_level1_cmd_.power_on_card_
      : *reinterpret_cast< ::contact::power_on::PowerOnCard*>(&::contact::power_on::_PowerOnCard_default_instance_);
}
inline const ::contact::power_on::PowerOnCard& ContactLevel1::power_on_card() const {
  // @@protoc_insertion_point(field_get:ContactLevel1.power_on_card)
  return _internal_power_on_card();
}
inline ::contact::power_on::PowerOnCard* ContactLevel1::_internal_mutable_power_on_card() {
  if (!_internal_has_power_on_card()) {
    clear_contact_level1_cmd();
    set_has_power_on_card();
    contact_level1_cmd_.power_on_card_ = CreateMaybeMessage< ::contact::power_on::PowerOnCard >(
        GetArenaNoVirtual());
  }
  return contact_level1_cmd_.power_on_card_;
}
inline ::contact::power_on::PowerOnCard* ContactLevel1::mutable_power_on_card() {
  // @@protoc_insertion_point(field_mutable:ContactLevel1.power_on_card)
  return _internal_mutable_power_on_card();
}

// optional .contact.power_off.PowerOffCard power_off_card = 2;
inline bool ContactLevel1::_internal_has_power_off_card() const {
  return contact_level1_cmd_case() == kPowerOffCard;
}
inline bool ContactLevel1::has_power_off_card() const {
  return _internal_has_power_off_card();
}
inline void ContactLevel1::set_has_power_off_card() {
  _oneof_case_[0] = kPowerOffCard;
}
inline ::contact::power_off::PowerOffCard* ContactLevel1::release_power_off_card() {
  // @@protoc_insertion_point(field_release:ContactLevel1.power_off_card)
  if (_internal_has_power_off_card()) {
    clear_has_contact_level1_cmd();
      ::contact::power_off::PowerOffCard* temp = contact_level1_cmd_.power_off_card_;
    contact_level1_cmd_.power_off_card_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::contact::power_off::PowerOffCard& ContactLevel1::_internal_power_off_card() const {
  return _internal_has_power_off_card()
      ? *contact_level1_cmd_.power_off_card_
      : *reinterpret_cast< ::contact::power_off::PowerOffCard*>(&::contact::power_off::_PowerOffCard_default_instance_);
}
inline const ::contact::power_off::PowerOffCard& ContactLevel1::power_off_card() const {
  // @@protoc_insertion_point(field_get:ContactLevel1.power_off_card)
  return _internal_power_off_card();
}
inline ::contact::power_off::PowerOffCard* ContactLevel1::_internal_mutable_power_off_card() {
  if (!_internal_has_power_off_card()) {
    clear_contact_level1_cmd();
    set_has_power_off_card();
    contact_level1_cmd_.power_off_card_ = CreateMaybeMessage< ::contact::power_off::PowerOffCard >(
        GetArenaNoVirtual());
  }
  return contact_level1_cmd_.power_off_card_;
}
inline ::contact::power_off::PowerOffCard* ContactLevel1::mutable_power_off_card() {
  // @@protoc_insertion_point(field_mutable:ContactLevel1.power_off_card)
  return _internal_mutable_power_off_card();
}

// optional .contact.iso7816_4.TransmitApdu transmit_apdu = 3;
inline bool ContactLevel1::_internal_has_transmit_apdu() const {
  return contact_level1_cmd_case() == kTransmitApdu;
}
inline bool ContactLevel1::has_transmit_apdu() const {
  return _internal_has_transmit_apdu();
}
inline void ContactLevel1::set_has_transmit_apdu() {
  _oneof_case_[0] = kTransmitApdu;
}
inline ::contact::iso7816_4::TransmitApdu* ContactLevel1::release_transmit_apdu() {
  // @@protoc_insertion_point(field_release:ContactLevel1.transmit_apdu)
  if (_internal_has_transmit_apdu()) {
    clear_has_contact_level1_cmd();
      ::contact::iso7816_4::TransmitApdu* temp = contact_level1_cmd_.transmit_apdu_;
    contact_level1_cmd_.transmit_apdu_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::contact::iso7816_4::TransmitApdu& ContactLevel1::_internal_transmit_apdu() const {
  return _internal_has_transmit_apdu()
      ? *contact_level1_cmd_.transmit_apdu_
      : *reinterpret_cast< ::contact::iso7816_4::TransmitApdu*>(&::contact::iso7816_4::_TransmitApdu_default_instance_);
}
inline const ::contact::iso7816_4::TransmitApdu& ContactLevel1::transmit_apdu() const {
  // @@protoc_insertion_point(field_get:ContactLevel1.transmit_apdu)
  return _internal_transmit_apdu();
}
inline ::contact::iso7816_4::TransmitApdu* ContactLevel1::_internal_mutable_transmit_apdu() {
  if (!_internal_has_transmit_apdu()) {
    clear_contact_level1_cmd();
    set_has_transmit_apdu();
    contact_level1_cmd_.transmit_apdu_ = CreateMaybeMessage< ::contact::iso7816_4::TransmitApdu >(
        GetArenaNoVirtual());
  }
  return contact_level1_cmd_.transmit_apdu_;
}
inline ::contact::iso7816_4::TransmitApdu* ContactLevel1::mutable_transmit_apdu() {
  // @@protoc_insertion_point(field_mutable:ContactLevel1.transmit_apdu)
  return _internal_mutable_transmit_apdu();
}

inline bool ContactLevel1::has_contact_level1_cmd() const {
  return contact_level1_cmd_case() != CONTACT_LEVEL1_CMD_NOT_SET;
}
inline void ContactLevel1::clear_has_contact_level1_cmd() {
  _oneof_case_[0] = CONTACT_LEVEL1_CMD_NOT_SET;
}
inline ContactLevel1::ContactLevel1CmdCase ContactLevel1::contact_level1_cmd_case() const {
  return ContactLevel1::ContactLevel1CmdCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_commands3_2eproto
