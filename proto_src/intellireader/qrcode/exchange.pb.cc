// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qrcode/exchange.proto

#include "qrcode/exchange.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace qrcode {
namespace exchange {
class SendCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendCommand> _instance;
} _SendCommand_default_instance_;
class ScannerReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScannerReply> _instance;
} _ScannerReply_default_instance_;
}  // namespace exchange
}  // namespace qrcode
static void InitDefaultsscc_info_ScannerReply_qrcode_2fexchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::qrcode::exchange::_ScannerReply_default_instance_;
    new (ptr) ::qrcode::exchange::ScannerReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::qrcode::exchange::ScannerReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScannerReply_qrcode_2fexchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScannerReply_qrcode_2fexchange_2eproto}, {}};

static void InitDefaultsscc_info_SendCommand_qrcode_2fexchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::qrcode::exchange::_SendCommand_default_instance_;
    new (ptr) ::qrcode::exchange::SendCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::qrcode::exchange::SendCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendCommand_qrcode_2fexchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendCommand_qrcode_2fexchange_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_qrcode_2fexchange_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_qrcode_2fexchange_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_qrcode_2fexchange_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_qrcode_2fexchange_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::qrcode::exchange::SendCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::qrcode::exchange::SendCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::qrcode::exchange::SendCommand, command_),
  PROTOBUF_FIELD_OFFSET(::qrcode::exchange::SendCommand, timeout_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::qrcode::exchange::ScannerReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::qrcode::exchange::ScannerReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::qrcode::exchange::ScannerReply, reply_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::qrcode::exchange::SendCommand)},
  { 9, 15, sizeof(::qrcode::exchange::ScannerReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qrcode::exchange::_SendCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::qrcode::exchange::_ScannerReply_default_instance_),
};

const char descriptor_table_protodef_qrcode_2fexchange_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025qrcode/exchange.proto\022\017qrcode.exchange"
  "\"/\n\013SendCommand\022\017\n\007command\030\001 \002(\014\022\017\n\007time"
  "out\030\002 \002(\r\"\035\n\014ScannerReply\022\r\n\005reply\030\001 \002(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_qrcode_2fexchange_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_qrcode_2fexchange_2eproto_sccs[2] = {
  &scc_info_ScannerReply_qrcode_2fexchange_2eproto.base,
  &scc_info_SendCommand_qrcode_2fexchange_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_qrcode_2fexchange_2eproto_once;
static bool descriptor_table_qrcode_2fexchange_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_qrcode_2fexchange_2eproto = {
  &descriptor_table_qrcode_2fexchange_2eproto_initialized, descriptor_table_protodef_qrcode_2fexchange_2eproto, "qrcode/exchange.proto", 120,
  &descriptor_table_qrcode_2fexchange_2eproto_once, descriptor_table_qrcode_2fexchange_2eproto_sccs, descriptor_table_qrcode_2fexchange_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_qrcode_2fexchange_2eproto::offsets,
  file_level_metadata_qrcode_2fexchange_2eproto, 2, file_level_enum_descriptors_qrcode_2fexchange_2eproto, file_level_service_descriptors_qrcode_2fexchange_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_qrcode_2fexchange_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_qrcode_2fexchange_2eproto), true);
namespace qrcode {
namespace exchange {

// ===================================================================

void SendCommand::InitAsDefaultInstance() {
}
class SendCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<SendCommand>()._has_bits_);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SendCommand::SendCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qrcode.exchange.SendCommand)
}
SendCommand::SendCommand(const SendCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_command()) {
    command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:qrcode.exchange.SendCommand)
}

void SendCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendCommand_qrcode_2fexchange_2eproto.base);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
}

SendCommand::~SendCommand() {
  // @@protoc_insertion_point(destructor:qrcode.exchange.SendCommand)
  SharedDtor();
}

void SendCommand::SharedDtor() {
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendCommand& SendCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendCommand_qrcode_2fexchange_2eproto.base);
  return *internal_default_instance();
}


void SendCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:qrcode.exchange.SendCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    command_.ClearNonDefaultToEmptyNoArena();
  }
  timeout_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SendCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qrcode.exchange.SendCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_command(), target);
  }

  // required uint32 timeout = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qrcode.exchange.SendCommand)
  return target;
}

size_t SendCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qrcode.exchange.SendCommand)
  size_t total_size = 0;

  if (_internal_has_command()) {
    // required bytes command = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_command());
  }

  if (_internal_has_timeout()) {
    // required uint32 timeout = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  return total_size;
}
size_t SendCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qrcode.exchange.SendCommand)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes command = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_command());

    // required uint32 timeout = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qrcode.exchange.SendCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const SendCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qrcode.exchange.SendCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qrcode.exchange.SendCommand)
    MergeFrom(*source);
  }
}

void SendCommand::MergeFrom(const SendCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qrcode.exchange.SendCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      command_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_);
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SendCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qrcode.exchange.SendCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendCommand::CopyFrom(const SendCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qrcode.exchange.SendCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SendCommand::InternalSwap(SendCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timeout_, other->timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScannerReply::InitAsDefaultInstance() {
}
class ScannerReply::_Internal {
 public:
  using HasBits = decltype(std::declval<ScannerReply>()._has_bits_);
  static void set_has_reply(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScannerReply::ScannerReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qrcode.exchange.ScannerReply)
}
ScannerReply::ScannerReply(const ScannerReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_reply()) {
    reply_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reply_);
  }
  // @@protoc_insertion_point(copy_constructor:qrcode.exchange.ScannerReply)
}

void ScannerReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScannerReply_qrcode_2fexchange_2eproto.base);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ScannerReply::~ScannerReply() {
  // @@protoc_insertion_point(destructor:qrcode.exchange.ScannerReply)
  SharedDtor();
}

void ScannerReply::SharedDtor() {
  reply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScannerReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScannerReply& ScannerReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScannerReply_qrcode_2fexchange_2eproto.base);
  return *internal_default_instance();
}


void ScannerReply::Clear() {
// @@protoc_insertion_point(message_clear_start:qrcode.exchange.ScannerReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reply_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ScannerReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScannerReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:qrcode.exchange.ScannerReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes reply = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qrcode.exchange.ScannerReply)
  return target;
}

size_t ScannerReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:qrcode.exchange.ScannerReply)
  size_t total_size = 0;

  // required bytes reply = 1;
  if (_internal_has_reply()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reply());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScannerReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qrcode.exchange.ScannerReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ScannerReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScannerReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qrcode.exchange.ScannerReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qrcode.exchange.ScannerReply)
    MergeFrom(*source);
  }
}

void ScannerReply::MergeFrom(const ScannerReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qrcode.exchange.ScannerReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reply()) {
    _has_bits_[0] |= 0x00000001u;
    reply_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reply_);
  }
}

void ScannerReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qrcode.exchange.ScannerReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScannerReply::CopyFrom(const ScannerReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qrcode.exchange.ScannerReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScannerReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ScannerReply::InternalSwap(ScannerReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  reply_.Swap(&other->reply_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ScannerReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace exchange
}  // namespace qrcode
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::qrcode::exchange::SendCommand* Arena::CreateMaybeMessage< ::qrcode::exchange::SendCommand >(Arena* arena) {
  return Arena::CreateInternal< ::qrcode::exchange::SendCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::qrcode::exchange::ScannerReply* Arena::CreateMaybeMessage< ::qrcode::exchange::ScannerReply >(Arena* arena) {
  return Arena::CreateInternal< ::qrcode::exchange::ScannerReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
